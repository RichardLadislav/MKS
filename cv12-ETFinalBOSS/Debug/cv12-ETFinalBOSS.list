
cv12-ETFinalBOSS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019d88  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000e0f8  08019f38  08019f38  00029f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08028030  08028030  00040090  2**0
                  CONTENTS
  4 .ARM          00000008  08028030  08028030  00038030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08028038  08028038  00040090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08028038  08028038  00038038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802803c  0802803c  0003803c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08028040  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00040090  2**0
                  CONTENTS
 10 .bss          000110c0  20000090  20000090  00040090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20011150  20011150  00040090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00040090  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000400c0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00034ba7  00000000  00000000  00040103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00008607  00000000  00000000  00074caa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000025b8  00000000  00000000  0007d2b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001dd2  00000000  00000000  0007f870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000378d8  00000000  00000000  00081642  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003da4c  00000000  00000000  000b8f1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010281a  00000000  00000000  000f6966  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000a610  00000000  00000000  001f9180  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000054  00000000  00000000  00203790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000090 	.word	0x20000090
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08019f20 	.word	0x08019f20

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000094 	.word	0x20000094
 80001ec:	08019f20 	.word	0x08019f20

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005bc:	b480      	push	{r7}
 80005be:	b085      	sub	sp, #20
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	60f8      	str	r0, [r7, #12]
 80005c4:	60b9      	str	r1, [r7, #8]
 80005c6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	4a07      	ldr	r2, [pc, #28]	; (80005e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80005cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005ce:	68bb      	ldr	r3, [r7, #8]
 80005d0:	4a06      	ldr	r2, [pc, #24]	; (80005ec <vApplicationGetIdleTaskMemory+0x30>)
 80005d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	2280      	movs	r2, #128	; 0x80
 80005d8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005da:	bf00      	nop
 80005dc:	3714      	adds	r7, #20
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	200000ac 	.word	0x200000ac
 80005ec:	2000014c 	.word	0x2000014c

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b5b0      	push	{r4, r5, r7, lr}
 80005f2:	b088      	sub	sp, #32
 80005f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f6:	f000 ff83 	bl	8001500 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fa:	f000 f81f 	bl	800063c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fe:	f000 f8c5 	bl	800078c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000602:	f000 f899 	bl	8000738 <MX_USART3_UART_Init>
  MX_RNG_Init();
 8000606:	f000 f883 	bl	8000710 <MX_RNG_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 800060a:	4b0a      	ldr	r3, [pc, #40]	; (8000634 <main+0x44>)
 800060c:	1d3c      	adds	r4, r7, #4
 800060e:	461d      	mov	r5, r3
 8000610:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000612:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000614:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000618:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800061c:	1d3b      	adds	r3, r7, #4
 800061e:	2100      	movs	r1, #0
 8000620:	4618      	mov	r0, r3
 8000622:	f004 fce9 	bl	8004ff8 <osThreadCreate>
 8000626:	4603      	mov	r3, r0
 8000628:	4a03      	ldr	r2, [pc, #12]	; (8000638 <main+0x48>)
 800062a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800062c:	f004 fccd 	bl	8004fca <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000630:	e7fe      	b.n	8000630 <main+0x40>
 8000632:	bf00      	nop
 8000634:	08019f44 	.word	0x08019f44
 8000638:	200003a0 	.word	0x200003a0

0800063c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b094      	sub	sp, #80	; 0x50
 8000640:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000642:	f107 0320 	add.w	r3, r7, #32
 8000646:	2230      	movs	r2, #48	; 0x30
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f018 fb43 	bl	8018cd6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000650:	f107 030c 	add.w	r3, r7, #12
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000660:	2300      	movs	r3, #0
 8000662:	60bb      	str	r3, [r7, #8]
 8000664:	4b28      	ldr	r3, [pc, #160]	; (8000708 <SystemClock_Config+0xcc>)
 8000666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000668:	4a27      	ldr	r2, [pc, #156]	; (8000708 <SystemClock_Config+0xcc>)
 800066a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800066e:	6413      	str	r3, [r2, #64]	; 0x40
 8000670:	4b25      	ldr	r3, [pc, #148]	; (8000708 <SystemClock_Config+0xcc>)
 8000672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000674:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000678:	60bb      	str	r3, [r7, #8]
 800067a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800067c:	2300      	movs	r3, #0
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	4b22      	ldr	r3, [pc, #136]	; (800070c <SystemClock_Config+0xd0>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a21      	ldr	r2, [pc, #132]	; (800070c <SystemClock_Config+0xd0>)
 8000686:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800068a:	6013      	str	r3, [r2, #0]
 800068c:	4b1f      	ldr	r3, [pc, #124]	; (800070c <SystemClock_Config+0xd0>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000694:	607b      	str	r3, [r7, #4]
 8000696:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000698:	2301      	movs	r3, #1
 800069a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800069c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a2:	2302      	movs	r3, #2
 80006a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006ac:	2304      	movs	r3, #4
 80006ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006b0:	23a8      	movs	r3, #168	; 0xa8
 80006b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b4:	2302      	movs	r3, #2
 80006b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006b8:	2307      	movs	r3, #7
 80006ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006bc:	f107 0320 	add.w	r3, r7, #32
 80006c0:	4618      	mov	r0, r3
 80006c2:	f002 fc7b 	bl	8002fbc <HAL_RCC_OscConfig>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006cc:	f000 f95a 	bl	8000984 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d0:	230f      	movs	r3, #15
 80006d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d4:	2302      	movs	r3, #2
 80006d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d8:	2300      	movs	r3, #0
 80006da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006dc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006e8:	f107 030c 	add.w	r3, r7, #12
 80006ec:	2105      	movs	r1, #5
 80006ee:	4618      	mov	r0, r3
 80006f0:	f002 fedc 	bl	80034ac <HAL_RCC_ClockConfig>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006fa:	f000 f943 	bl	8000984 <Error_Handler>
  }
}
 80006fe:	bf00      	nop
 8000700:	3750      	adds	r7, #80	; 0x50
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	40023800 	.word	0x40023800
 800070c:	40007000 	.word	0x40007000

08000710 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000714:	4b06      	ldr	r3, [pc, #24]	; (8000730 <MX_RNG_Init+0x20>)
 8000716:	4a07      	ldr	r2, [pc, #28]	; (8000734 <MX_RNG_Init+0x24>)
 8000718:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800071a:	4805      	ldr	r0, [pc, #20]	; (8000730 <MX_RNG_Init+0x20>)
 800071c:	f003 f918 	bl	8003950 <HAL_RNG_Init>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8000726:	f000 f92d 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	2000034c 	.word	0x2000034c
 8000734:	50060800 	.word	0x50060800

08000738 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800073c:	4b11      	ldr	r3, [pc, #68]	; (8000784 <MX_USART3_UART_Init+0x4c>)
 800073e:	4a12      	ldr	r2, [pc, #72]	; (8000788 <MX_USART3_UART_Init+0x50>)
 8000740:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000742:	4b10      	ldr	r3, [pc, #64]	; (8000784 <MX_USART3_UART_Init+0x4c>)
 8000744:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000748:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800074a:	4b0e      	ldr	r3, [pc, #56]	; (8000784 <MX_USART3_UART_Init+0x4c>)
 800074c:	2200      	movs	r2, #0
 800074e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000750:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <MX_USART3_UART_Init+0x4c>)
 8000752:	2200      	movs	r2, #0
 8000754:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000756:	4b0b      	ldr	r3, [pc, #44]	; (8000784 <MX_USART3_UART_Init+0x4c>)
 8000758:	2200      	movs	r2, #0
 800075a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800075c:	4b09      	ldr	r3, [pc, #36]	; (8000784 <MX_USART3_UART_Init+0x4c>)
 800075e:	220c      	movs	r2, #12
 8000760:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000762:	4b08      	ldr	r3, [pc, #32]	; (8000784 <MX_USART3_UART_Init+0x4c>)
 8000764:	2200      	movs	r2, #0
 8000766:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000768:	4b06      	ldr	r3, [pc, #24]	; (8000784 <MX_USART3_UART_Init+0x4c>)
 800076a:	2200      	movs	r2, #0
 800076c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800076e:	4805      	ldr	r0, [pc, #20]	; (8000784 <MX_USART3_UART_Init+0x4c>)
 8000770:	f003 fc1c 	bl	8003fac <HAL_UART_Init>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800077a:	f000 f903 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	2000035c 	.word	0x2000035c
 8000788:	40004800 	.word	0x40004800

0800078c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b08c      	sub	sp, #48	; 0x30
 8000790:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000792:	f107 031c 	add.w	r3, r7, #28
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	605a      	str	r2, [r3, #4]
 800079c:	609a      	str	r2, [r3, #8]
 800079e:	60da      	str	r2, [r3, #12]
 80007a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	61bb      	str	r3, [r7, #24]
 80007a6:	4b5b      	ldr	r3, [pc, #364]	; (8000914 <MX_GPIO_Init+0x188>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a5a      	ldr	r2, [pc, #360]	; (8000914 <MX_GPIO_Init+0x188>)
 80007ac:	f043 0304 	orr.w	r3, r3, #4
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b58      	ldr	r3, [pc, #352]	; (8000914 <MX_GPIO_Init+0x188>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0304 	and.w	r3, r3, #4
 80007ba:	61bb      	str	r3, [r7, #24]
 80007bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	617b      	str	r3, [r7, #20]
 80007c2:	4b54      	ldr	r3, [pc, #336]	; (8000914 <MX_GPIO_Init+0x188>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a53      	ldr	r2, [pc, #332]	; (8000914 <MX_GPIO_Init+0x188>)
 80007c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b51      	ldr	r3, [pc, #324]	; (8000914 <MX_GPIO_Init+0x188>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007d6:	617b      	str	r3, [r7, #20]
 80007d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	613b      	str	r3, [r7, #16]
 80007de:	4b4d      	ldr	r3, [pc, #308]	; (8000914 <MX_GPIO_Init+0x188>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a4c      	ldr	r2, [pc, #304]	; (8000914 <MX_GPIO_Init+0x188>)
 80007e4:	f043 0301 	orr.w	r3, r3, #1
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b4a      	ldr	r3, [pc, #296]	; (8000914 <MX_GPIO_Init+0x188>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0301 	and.w	r3, r3, #1
 80007f2:	613b      	str	r3, [r7, #16]
 80007f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	60fb      	str	r3, [r7, #12]
 80007fa:	4b46      	ldr	r3, [pc, #280]	; (8000914 <MX_GPIO_Init+0x188>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a45      	ldr	r2, [pc, #276]	; (8000914 <MX_GPIO_Init+0x188>)
 8000800:	f043 0302 	orr.w	r3, r3, #2
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b43      	ldr	r3, [pc, #268]	; (8000914 <MX_GPIO_Init+0x188>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0302 	and.w	r3, r3, #2
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	60bb      	str	r3, [r7, #8]
 8000816:	4b3f      	ldr	r3, [pc, #252]	; (8000914 <MX_GPIO_Init+0x188>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a3e      	ldr	r2, [pc, #248]	; (8000914 <MX_GPIO_Init+0x188>)
 800081c:	f043 0308 	orr.w	r3, r3, #8
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b3c      	ldr	r3, [pc, #240]	; (8000914 <MX_GPIO_Init+0x188>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0308 	and.w	r3, r3, #8
 800082a:	60bb      	str	r3, [r7, #8]
 800082c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	4b38      	ldr	r3, [pc, #224]	; (8000914 <MX_GPIO_Init+0x188>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a37      	ldr	r2, [pc, #220]	; (8000914 <MX_GPIO_Init+0x188>)
 8000838:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b35      	ldr	r3, [pc, #212]	; (8000914 <MX_GPIO_Init+0x188>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800084a:	2200      	movs	r2, #0
 800084c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000850:	4831      	ldr	r0, [pc, #196]	; (8000918 <MX_GPIO_Init+0x18c>)
 8000852:	f002 fb99 	bl	8002f88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000856:	2200      	movs	r2, #0
 8000858:	2140      	movs	r1, #64	; 0x40
 800085a:	4830      	ldr	r0, [pc, #192]	; (800091c <MX_GPIO_Init+0x190>)
 800085c:	f002 fb94 	bl	8002f88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000860:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000864:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000866:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800086a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000870:	f107 031c 	add.w	r3, r7, #28
 8000874:	4619      	mov	r1, r3
 8000876:	482a      	ldr	r0, [pc, #168]	; (8000920 <MX_GPIO_Init+0x194>)
 8000878:	f002 f9da 	bl	8002c30 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800087c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000880:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000882:	2301      	movs	r3, #1
 8000884:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088a:	2300      	movs	r3, #0
 800088c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800088e:	f107 031c 	add.w	r3, r7, #28
 8000892:	4619      	mov	r1, r3
 8000894:	4820      	ldr	r0, [pc, #128]	; (8000918 <MX_GPIO_Init+0x18c>)
 8000896:	f002 f9cb 	bl	8002c30 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800089a:	2340      	movs	r3, #64	; 0x40
 800089c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089e:	2301      	movs	r3, #1
 80008a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a6:	2300      	movs	r3, #0
 80008a8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	4619      	mov	r1, r3
 80008b0:	481a      	ldr	r0, [pc, #104]	; (800091c <MX_GPIO_Init+0x190>)
 80008b2:	f002 f9bd 	bl	8002c30 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008b6:	2380      	movs	r3, #128	; 0x80
 80008b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ba:	2300      	movs	r3, #0
 80008bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008c2:	f107 031c 	add.w	r3, r7, #28
 80008c6:	4619      	mov	r1, r3
 80008c8:	4814      	ldr	r0, [pc, #80]	; (800091c <MX_GPIO_Init+0x190>)
 80008ca:	f002 f9b1 	bl	8002c30 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80008ce:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80008d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d4:	2302      	movs	r3, #2
 80008d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008dc:	2303      	movs	r3, #3
 80008de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80008e0:	230a      	movs	r3, #10
 80008e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e4:	f107 031c 	add.w	r3, r7, #28
 80008e8:	4619      	mov	r1, r3
 80008ea:	480e      	ldr	r0, [pc, #56]	; (8000924 <MX_GPIO_Init+0x198>)
 80008ec:	f002 f9a0 	bl	8002c30 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80008f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f6:	2300      	movs	r3, #0
 80008f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80008fe:	f107 031c 	add.w	r3, r7, #28
 8000902:	4619      	mov	r1, r3
 8000904:	4807      	ldr	r0, [pc, #28]	; (8000924 <MX_GPIO_Init+0x198>)
 8000906:	f002 f993 	bl	8002c30 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800090a:	bf00      	nop
 800090c:	3730      	adds	r7, #48	; 0x30
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40023800 	.word	0x40023800
 8000918:	40020400 	.word	0x40020400
 800091c:	40021800 	.word	0x40021800
 8000920:	40020800 	.word	0x40020800
 8000924:	40020000 	.word	0x40020000

08000928 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b084      	sub	sp, #16
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  uint32_t rnd;
  HAL_RNG_GenerateRandomNumber(&hrng, &rnd);
 8000930:	f107 030c 	add.w	r3, r7, #12
 8000934:	4619      	mov	r1, r3
 8000936:	4809      	ldr	r0, [pc, #36]	; (800095c <StartDefaultTask+0x34>)
 8000938:	f003 f834 	bl	80039a4 <HAL_RNG_GenerateRandomNumber>
  srand(rnd);
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	4618      	mov	r0, r3
 8000940:	f018 f80e 	bl	8018960 <srand>
  MX_LWIP_Init();
 8000944:	f003 fdf4 	bl	8004530 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  telnet_init();
 8000948:	f000 fc3c 	bl	80011c4 <telnet_init>
  tcpecho_init();
 800094c:	f000 fa98 	bl	8000e80 <tcpecho_init>
  /* Initialize HTTP server */
  httpd_init();
 8000950:	f00a fd9c 	bl	800b48c <httpd_init>
  for(;;)
  {
    osDelay(1);
 8000954:	2001      	movs	r0, #1
 8000956:	f004 fb9b 	bl	8005090 <osDelay>
 800095a:	e7fb      	b.n	8000954 <StartDefaultTask+0x2c>
 800095c:	2000034c 	.word	0x2000034c

08000960 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a04      	ldr	r2, [pc, #16]	; (8000980 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d101      	bne.n	8000976 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000972:	f000 fde7 	bl	8001544 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000976:	bf00      	nop
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40002000 	.word	0x40002000

08000984 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000988:	b672      	cpsid	i
}
 800098a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800098c:	e7fe      	b.n	800098c <Error_Handler+0x8>
	...

08000990 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	607b      	str	r3, [r7, #4]
 800099a:	4b12      	ldr	r3, [pc, #72]	; (80009e4 <HAL_MspInit+0x54>)
 800099c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800099e:	4a11      	ldr	r2, [pc, #68]	; (80009e4 <HAL_MspInit+0x54>)
 80009a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009a4:	6453      	str	r3, [r2, #68]	; 0x44
 80009a6:	4b0f      	ldr	r3, [pc, #60]	; (80009e4 <HAL_MspInit+0x54>)
 80009a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	603b      	str	r3, [r7, #0]
 80009b6:	4b0b      	ldr	r3, [pc, #44]	; (80009e4 <HAL_MspInit+0x54>)
 80009b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ba:	4a0a      	ldr	r2, [pc, #40]	; (80009e4 <HAL_MspInit+0x54>)
 80009bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c0:	6413      	str	r3, [r2, #64]	; 0x40
 80009c2:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <HAL_MspInit+0x54>)
 80009c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ca:	603b      	str	r3, [r7, #0]
 80009cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009ce:	2200      	movs	r2, #0
 80009d0:	210f      	movs	r1, #15
 80009d2:	f06f 0001 	mvn.w	r0, #1
 80009d6:	f000 feb1 	bl	800173c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009da:	bf00      	nop
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40023800 	.word	0x40023800

080009e8 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b085      	sub	sp, #20
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a0b      	ldr	r2, [pc, #44]	; (8000a24 <HAL_RNG_MspInit+0x3c>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d10d      	bne.n	8000a16 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	4b0a      	ldr	r3, [pc, #40]	; (8000a28 <HAL_RNG_MspInit+0x40>)
 8000a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a02:	4a09      	ldr	r2, [pc, #36]	; (8000a28 <HAL_RNG_MspInit+0x40>)
 8000a04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a08:	6353      	str	r3, [r2, #52]	; 0x34
 8000a0a:	4b07      	ldr	r3, [pc, #28]	; (8000a28 <HAL_RNG_MspInit+0x40>)
 8000a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a12:	60fb      	str	r3, [r7, #12]
 8000a14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8000a16:	bf00      	nop
 8000a18:	3714      	adds	r7, #20
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	50060800 	.word	0x50060800
 8000a28:	40023800 	.word	0x40023800

08000a2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b08a      	sub	sp, #40	; 0x28
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a34:	f107 0314 	add.w	r3, r7, #20
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
 8000a42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a19      	ldr	r2, [pc, #100]	; (8000ab0 <HAL_UART_MspInit+0x84>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d12c      	bne.n	8000aa8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	613b      	str	r3, [r7, #16]
 8000a52:	4b18      	ldr	r3, [pc, #96]	; (8000ab4 <HAL_UART_MspInit+0x88>)
 8000a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a56:	4a17      	ldr	r2, [pc, #92]	; (8000ab4 <HAL_UART_MspInit+0x88>)
 8000a58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a5e:	4b15      	ldr	r3, [pc, #84]	; (8000ab4 <HAL_UART_MspInit+0x88>)
 8000a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a66:	613b      	str	r3, [r7, #16]
 8000a68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60fb      	str	r3, [r7, #12]
 8000a6e:	4b11      	ldr	r3, [pc, #68]	; (8000ab4 <HAL_UART_MspInit+0x88>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	4a10      	ldr	r2, [pc, #64]	; (8000ab4 <HAL_UART_MspInit+0x88>)
 8000a74:	f043 0308 	orr.w	r3, r3, #8
 8000a78:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7a:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <HAL_UART_MspInit+0x88>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	f003 0308 	and.w	r3, r3, #8
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000a86:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a94:	2303      	movs	r3, #3
 8000a96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a98:	2307      	movs	r3, #7
 8000a9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a9c:	f107 0314 	add.w	r3, r7, #20
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4805      	ldr	r0, [pc, #20]	; (8000ab8 <HAL_UART_MspInit+0x8c>)
 8000aa4:	f002 f8c4 	bl	8002c30 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000aa8:	bf00      	nop
 8000aaa:	3728      	adds	r7, #40	; 0x28
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	40004800 	.word	0x40004800
 8000ab4:	40023800 	.word	0x40023800
 8000ab8:	40020c00 	.word	0x40020c00

08000abc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b08e      	sub	sp, #56	; 0x38
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8000acc:	2300      	movs	r3, #0
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	4b33      	ldr	r3, [pc, #204]	; (8000ba0 <HAL_InitTick+0xe4>)
 8000ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad4:	4a32      	ldr	r2, [pc, #200]	; (8000ba0 <HAL_InitTick+0xe4>)
 8000ad6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ada:	6413      	str	r3, [r2, #64]	; 0x40
 8000adc:	4b30      	ldr	r3, [pc, #192]	; (8000ba0 <HAL_InitTick+0xe4>)
 8000ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ae4:	60fb      	str	r3, [r7, #12]
 8000ae6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ae8:	f107 0210 	add.w	r2, r7, #16
 8000aec:	f107 0314 	add.w	r3, r7, #20
 8000af0:	4611      	mov	r1, r2
 8000af2:	4618      	mov	r0, r3
 8000af4:	f002 fefa 	bl	80038ec <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000af8:	6a3b      	ldr	r3, [r7, #32]
 8000afa:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d103      	bne.n	8000b0a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b02:	f002 fecb 	bl	800389c <HAL_RCC_GetPCLK1Freq>
 8000b06:	6378      	str	r0, [r7, #52]	; 0x34
 8000b08:	e004      	b.n	8000b14 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b0a:	f002 fec7 	bl	800389c <HAL_RCC_GetPCLK1Freq>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	005b      	lsls	r3, r3, #1
 8000b12:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b16:	4a23      	ldr	r2, [pc, #140]	; (8000ba4 <HAL_InitTick+0xe8>)
 8000b18:	fba2 2303 	umull	r2, r3, r2, r3
 8000b1c:	0c9b      	lsrs	r3, r3, #18
 8000b1e:	3b01      	subs	r3, #1
 8000b20:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8000b22:	4b21      	ldr	r3, [pc, #132]	; (8000ba8 <HAL_InitTick+0xec>)
 8000b24:	4a21      	ldr	r2, [pc, #132]	; (8000bac <HAL_InitTick+0xf0>)
 8000b26:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8000b28:	4b1f      	ldr	r3, [pc, #124]	; (8000ba8 <HAL_InitTick+0xec>)
 8000b2a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b2e:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000b30:	4a1d      	ldr	r2, [pc, #116]	; (8000ba8 <HAL_InitTick+0xec>)
 8000b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b34:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8000b36:	4b1c      	ldr	r3, [pc, #112]	; (8000ba8 <HAL_InitTick+0xec>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b3c:	4b1a      	ldr	r3, [pc, #104]	; (8000ba8 <HAL_InitTick+0xec>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b42:	4b19      	ldr	r3, [pc, #100]	; (8000ba8 <HAL_InitTick+0xec>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8000b48:	4817      	ldr	r0, [pc, #92]	; (8000ba8 <HAL_InitTick+0xec>)
 8000b4a:	f002 ff81 	bl	8003a50 <HAL_TIM_Base_Init>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000b54:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d11b      	bne.n	8000b94 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8000b5c:	4812      	ldr	r0, [pc, #72]	; (8000ba8 <HAL_InitTick+0xec>)
 8000b5e:	f002 ffd1 	bl	8003b04 <HAL_TIM_Base_Start_IT>
 8000b62:	4603      	mov	r3, r0
 8000b64:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000b68:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d111      	bne.n	8000b94 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000b70:	202d      	movs	r0, #45	; 0x2d
 8000b72:	f000 fdff 	bl	8001774 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	2b0f      	cmp	r3, #15
 8000b7a:	d808      	bhi.n	8000b8e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	6879      	ldr	r1, [r7, #4]
 8000b80:	202d      	movs	r0, #45	; 0x2d
 8000b82:	f000 fddb 	bl	800173c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b86:	4a0a      	ldr	r2, [pc, #40]	; (8000bb0 <HAL_InitTick+0xf4>)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	6013      	str	r3, [r2, #0]
 8000b8c:	e002      	b.n	8000b94 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b94:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3738      	adds	r7, #56	; 0x38
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	40023800 	.word	0x40023800
 8000ba4:	431bde83 	.word	0x431bde83
 8000ba8:	200003a4 	.word	0x200003a4
 8000bac:	40002000 	.word	0x40002000
 8000bb0:	20000004 	.word	0x20000004

08000bb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bb8:	e7fe      	b.n	8000bb8 <NMI_Handler+0x4>

08000bba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bbe:	e7fe      	b.n	8000bbe <HardFault_Handler+0x4>

08000bc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bc4:	e7fe      	b.n	8000bc4 <MemManage_Handler+0x4>

08000bc6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bca:	e7fe      	b.n	8000bca <BusFault_Handler+0x4>

08000bcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bd0:	e7fe      	b.n	8000bd0 <UsageFault_Handler+0x4>

08000bd2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr

08000be0 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000be4:	4802      	ldr	r0, [pc, #8]	; (8000bf0 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000be6:	f002 fffd 	bl	8003be4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	200003a4 	.word	0x200003a4

08000bf4 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000bf8:	4802      	ldr	r0, [pc, #8]	; (8000c04 <ETH_IRQHandler+0x10>)
 8000bfa:	f001 f943 	bl	8001e84 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	20005010 	.word	0x20005010

08000c08 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  return 1;
 8000c0c:	2301      	movs	r3, #1
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <_kill>:

int _kill(int pid, int sig)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
 8000c20:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000c22:	4b05      	ldr	r3, [pc, #20]	; (8000c38 <_kill+0x20>)
 8000c24:	2216      	movs	r2, #22
 8000c26:	601a      	str	r2, [r3, #0]
  return -1;
 8000c28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr
 8000c38:	20011140 	.word	0x20011140

08000c3c <_exit>:

void _exit (int status)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000c44:	f04f 31ff 	mov.w	r1, #4294967295
 8000c48:	6878      	ldr	r0, [r7, #4]
 8000c4a:	f7ff ffe5 	bl	8000c18 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000c4e:	e7fe      	b.n	8000c4e <_exit+0x12>

08000c50 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b086      	sub	sp, #24
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60f8      	str	r0, [r7, #12]
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	617b      	str	r3, [r7, #20]
 8000c60:	e00a      	b.n	8000c78 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c62:	f3af 8000 	nop.w
 8000c66:	4601      	mov	r1, r0
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	1c5a      	adds	r2, r3, #1
 8000c6c:	60ba      	str	r2, [r7, #8]
 8000c6e:	b2ca      	uxtb	r2, r1
 8000c70:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	3301      	adds	r3, #1
 8000c76:	617b      	str	r3, [r7, #20]
 8000c78:	697a      	ldr	r2, [r7, #20]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	dbf0      	blt.n	8000c62 <_read+0x12>
  }

  return len;
 8000c80:	687b      	ldr	r3, [r7, #4]
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3718      	adds	r7, #24
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	b086      	sub	sp, #24
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	60f8      	str	r0, [r7, #12]
 8000c92:	60b9      	str	r1, [r7, #8]
 8000c94:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c96:	2300      	movs	r3, #0
 8000c98:	617b      	str	r3, [r7, #20]
 8000c9a:	e009      	b.n	8000cb0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	1c5a      	adds	r2, r3, #1
 8000ca0:	60ba      	str	r2, [r7, #8]
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	3301      	adds	r3, #1
 8000cae:	617b      	str	r3, [r7, #20]
 8000cb0:	697a      	ldr	r2, [r7, #20]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	dbf1      	blt.n	8000c9c <_write+0x12>
  }
  return len;
 8000cb8:	687b      	ldr	r3, [r7, #4]
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3718      	adds	r7, #24
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <_close>:

int _close(int file)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	b083      	sub	sp, #12
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr

08000cda <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	b083      	sub	sp, #12
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	6078      	str	r0, [r7, #4]
 8000ce2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cea:	605a      	str	r2, [r3, #4]
  return 0;
 8000cec:	2300      	movs	r3, #0
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	370c      	adds	r7, #12
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr

08000cfa <_isatty>:

int _isatty(int file)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	b083      	sub	sp, #12
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d02:	2301      	movs	r3, #1
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	370c      	adds	r7, #12
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d1c:	2300      	movs	r3, #0
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3714      	adds	r7, #20
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
	...

08000d2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b087      	sub	sp, #28
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d34:	4a14      	ldr	r2, [pc, #80]	; (8000d88 <_sbrk+0x5c>)
 8000d36:	4b15      	ldr	r3, [pc, #84]	; (8000d8c <_sbrk+0x60>)
 8000d38:	1ad3      	subs	r3, r2, r3
 8000d3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d40:	4b13      	ldr	r3, [pc, #76]	; (8000d90 <_sbrk+0x64>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d102      	bne.n	8000d4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d48:	4b11      	ldr	r3, [pc, #68]	; (8000d90 <_sbrk+0x64>)
 8000d4a:	4a12      	ldr	r2, [pc, #72]	; (8000d94 <_sbrk+0x68>)
 8000d4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d4e:	4b10      	ldr	r3, [pc, #64]	; (8000d90 <_sbrk+0x64>)
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4413      	add	r3, r2
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d205      	bcs.n	8000d68 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000d5c:	4b0e      	ldr	r3, [pc, #56]	; (8000d98 <_sbrk+0x6c>)
 8000d5e:	220c      	movs	r2, #12
 8000d60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d62:	f04f 33ff 	mov.w	r3, #4294967295
 8000d66:	e009      	b.n	8000d7c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d68:	4b09      	ldr	r3, [pc, #36]	; (8000d90 <_sbrk+0x64>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d6e:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <_sbrk+0x64>)
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4413      	add	r3, r2
 8000d76:	4a06      	ldr	r2, [pc, #24]	; (8000d90 <_sbrk+0x64>)
 8000d78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d7a:	68fb      	ldr	r3, [r7, #12]
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	371c      	adds	r7, #28
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	20030000 	.word	0x20030000
 8000d8c:	00000400 	.word	0x00000400
 8000d90:	200003ec 	.word	0x200003ec
 8000d94:	20011150 	.word	0x20011150
 8000d98:	20011140 	.word	0x20011140

08000d9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000da0:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <SystemInit+0x20>)
 8000da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000da6:	4a05      	ldr	r2, [pc, #20]	; (8000dbc <SystemInit+0x20>)
 8000da8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <tcpecho_thread>:



/*-----------------------------------------------------------------------------------*/
static void tcpecho_thread(void *arg)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b08a      	sub	sp, #40	; 0x28
 8000dc4:	af02      	add	r7, sp, #8
 8000dc6:	6078      	str	r0, [r7, #4]
  u16_t len;
      
  LWIP_UNUSED_ARG(arg);

  /* Create a new connection identifier. */
  conn = netconn_new(NETCONN_TCP);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	2100      	movs	r1, #0
 8000dcc:	2010      	movs	r0, #16
 8000dce:	f007 f8eb 	bl	8007fa8 <netconn_new_with_proto_and_callback>
 8000dd2:	61f8      	str	r0, [r7, #28]
  
  if (conn!=NULL)
 8000dd4:	69fb      	ldr	r3, [r7, #28]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d04e      	beq.n	8000e78 <tcpecho_thread+0xb8>
  {  
    /* Bind connection to well known port number 7. */
    err = netconn_bind(conn, NULL, 7);
 8000dda:	2207      	movs	r2, #7
 8000ddc:	2100      	movs	r1, #0
 8000dde:	69f8      	ldr	r0, [r7, #28]
 8000de0:	f007 f99c 	bl	800811c <netconn_bind>
 8000de4:	4603      	mov	r3, r0
 8000de6:	76fb      	strb	r3, [r7, #27]
    
    if (err == ERR_OK)
 8000de8:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d13f      	bne.n	8000e70 <tcpecho_thread+0xb0>
    {
      /* Tell connection to go into listening mode. */
      netconn_listen(conn);
 8000df0:	21ff      	movs	r1, #255	; 0xff
 8000df2:	69f8      	ldr	r0, [r7, #28]
 8000df4:	f007 fa02 	bl	80081fc <netconn_listen_with_backlog>
    
      while (1) 
      {
        /* Grab new connection. */
         accept_err = netconn_accept(conn, &newconn);
 8000df8:	f107 0314 	add.w	r3, r7, #20
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	69f8      	ldr	r0, [r7, #28]
 8000e00:	f007 fa28 	bl	8008254 <netconn_accept>
 8000e04:	4603      	mov	r3, r0
 8000e06:	76bb      	strb	r3, [r7, #26]
    
        /* Process the new connection. */
        if (accept_err == ERR_OK) 
 8000e08:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d1f3      	bne.n	8000df8 <tcpecho_thread+0x38>
        {

          while (netconn_recv(newconn, &buf) == ERR_OK) 
 8000e10:	e01b      	b.n	8000e4a <tcpecho_thread+0x8a>
          {
            do 
            {
              netbuf_data(buf, &data, &len);
 8000e12:	693b      	ldr	r3, [r7, #16]
 8000e14:	f107 020a 	add.w	r2, r7, #10
 8000e18:	f107 010c 	add.w	r1, r7, #12
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f009 fb09 	bl	800a434 <netbuf_data>
              netconn_write(newconn, data, len, NETCONN_COPY);
 8000e22:	6978      	ldr	r0, [r7, #20]
 8000e24:	68f9      	ldr	r1, [r7, #12]
 8000e26:	897b      	ldrh	r3, [r7, #10]
 8000e28:	461a      	mov	r2, r3
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	9300      	str	r3, [sp, #0]
 8000e2e:	2301      	movs	r3, #1
 8000e30:	f007 fc92 	bl	8008758 <netconn_write_partly>
          
            } 
            while (netbuf_next(buf) >= 0);
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	4618      	mov	r0, r3
 8000e38:	f009 fb46 	bl	800a4c8 <netbuf_next>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	dae7      	bge.n	8000e12 <tcpecho_thread+0x52>
          
            netbuf_delete(buf);
 8000e42:	693b      	ldr	r3, [r7, #16]
 8000e44:	4618      	mov	r0, r3
 8000e46:	f009 fad5 	bl	800a3f4 <netbuf_delete>
          while (netconn_recv(newconn, &buf) == ERR_OK) 
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	f107 0210 	add.w	r2, r7, #16
 8000e50:	4611      	mov	r1, r2
 8000e52:	4618      	mov	r0, r3
 8000e54:	f007 fc06 	bl	8008664 <netconn_recv>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d0d9      	beq.n	8000e12 <tcpecho_thread+0x52>
          }
        
          /* Close connection and discard connection identifier. */
          netconn_close(newconn);
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	4618      	mov	r0, r3
 8000e62:	f007 fd7b 	bl	800895c <netconn_close>
          netconn_delete(newconn);
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f007 f93b 	bl	80080e4 <netconn_delete>
         accept_err = netconn_accept(conn, &newconn);
 8000e6e:	e7c3      	b.n	8000df8 <tcpecho_thread+0x38>
        }
      }
    }
    else
    {
      netconn_delete(newconn);
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	4618      	mov	r0, r3
 8000e74:	f007 f936 	bl	80080e4 <netconn_delete>
    }
  }
}
 8000e78:	bf00      	nop
 8000e7a:	3720      	adds	r7, #32
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <tcpecho_init>:
/*-----------------------------------------------------------------------------------*/

void tcpecho_init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af02      	add	r7, sp, #8
  sys_thread_new("tcpecho_thread", tcpecho_thread, NULL, DEFAULT_THREAD_STACKSIZE, TCPECHO_THREAD_PRIO);
 8000e86:	2304      	movs	r3, #4
 8000e88:	9300      	str	r3, [sp, #0]
 8000e8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e8e:	2200      	movs	r2, #0
 8000e90:	4903      	ldr	r1, [pc, #12]	; (8000ea0 <tcpecho_init+0x20>)
 8000e92:	4804      	ldr	r0, [pc, #16]	; (8000ea4 <tcpecho_init+0x24>)
 8000e94:	f017 fd20 	bl	80188d8 <sys_thread_new>
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	08000dc1 	.word	0x08000dc1
 8000ea4:	08019f60 	.word	0x08019f60

08000ea8 <http_client>:
#define TELNET_THREAD_PRIO  ( tskIDLE_PRIORITY + 4 )
#define CMD_BUFFER_LEN 256
#define HTTP_CLIENT_BUFF 1024

/*-----------------------------------------------------------------------------------*/
static void http_client(char *s, uint16_t size) {
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b08a      	sub	sp, #40	; 0x28
 8000eac:	af02      	add	r7, sp, #8
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	807b      	strh	r3, [r7, #2]
	struct netconn *client;
	struct netbuf *buf;
	ip_addr_t ip;
	uint16_t len = 0;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	83fb      	strh	r3, [r7, #30]
	IP_ADDR4(&ip, 147, 229, 144, 124);
 8000eb8:	4b2a      	ldr	r3, [pc, #168]	; (8000f64 <http_client+0xbc>)
 8000eba:	60fb      	str	r3, [r7, #12]
	const char *request = "GET /ip.php HTTP/1.1\r\n"
 8000ebc:	4b2a      	ldr	r3, [pc, #168]	; (8000f68 <http_client+0xc0>)
 8000ebe:	61bb      	str	r3, [r7, #24]
			"Host: www.urel.feec.vutbr.cz\r\n"
			"Connection: close\r\n"
			"\r\n\r\n";
	client = netconn_new(NETCONN_TCP);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	2010      	movs	r0, #16
 8000ec6:	f007 f86f 	bl	8007fa8 <netconn_new_with_proto_and_callback>
 8000eca:	6178      	str	r0, [r7, #20]
	if (netconn_connect(client, &ip, 80) == ERR_OK) {
 8000ecc:	f107 030c 	add.w	r3, r7, #12
 8000ed0:	2250      	movs	r2, #80	; 0x50
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	6978      	ldr	r0, [r7, #20]
 8000ed6:	f007 f959 	bl	800818c <netconn_connect>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d136      	bne.n	8000f4e <http_client+0xa6>
		netconn_write(client, request, strlen(request), NETCONN_COPY);
 8000ee0:	69b8      	ldr	r0, [r7, #24]
 8000ee2:	f7ff f98f 	bl	8000204 <strlen>
 8000ee6:	4602      	mov	r2, r0
 8000ee8:	2300      	movs	r3, #0
 8000eea:	9300      	str	r3, [sp, #0]
 8000eec:	2301      	movs	r3, #1
 8000eee:	69b9      	ldr	r1, [r7, #24]
 8000ef0:	6978      	ldr	r0, [r7, #20]
 8000ef2:	f007 fc31 	bl	8008758 <netconn_write_partly>
		// Receive the HTTP response
		s[0] = 0;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2200      	movs	r2, #0
 8000efa:	701a      	strb	r2, [r3, #0]
		while (len < size && netconn_recv(client, &buf) == ERR_OK) {
 8000efc:	e019      	b.n	8000f32 <http_client+0x8a>
			len += netbuf_copy(buf, &s[len], size - len);
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	6818      	ldr	r0, [r3, #0]
 8000f02:	8bfb      	ldrh	r3, [r7, #30]
 8000f04:	687a      	ldr	r2, [r7, #4]
 8000f06:	18d1      	adds	r1, r2, r3
 8000f08:	887a      	ldrh	r2, [r7, #2]
 8000f0a:	8bfb      	ldrh	r3, [r7, #30]
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	b29a      	uxth	r2, r3
 8000f10:	2300      	movs	r3, #0
 8000f12:	f00c f915 	bl	800d140 <pbuf_copy_partial>
 8000f16:	4603      	mov	r3, r0
 8000f18:	461a      	mov	r2, r3
 8000f1a:	8bfb      	ldrh	r3, [r7, #30]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	83fb      	strh	r3, [r7, #30]
			s[len] = 0;
 8000f20:	8bfb      	ldrh	r3, [r7, #30]
 8000f22:	687a      	ldr	r2, [r7, #4]
 8000f24:	4413      	add	r3, r2
 8000f26:	2200      	movs	r2, #0
 8000f28:	701a      	strb	r2, [r3, #0]
			netbuf_delete(buf);
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f009 fa61 	bl	800a3f4 <netbuf_delete>
		while (len < size && netconn_recv(client, &buf) == ERR_OK) {
 8000f32:	8bfa      	ldrh	r2, [r7, #30]
 8000f34:	887b      	ldrh	r3, [r7, #2]
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d20d      	bcs.n	8000f56 <http_client+0xae>
 8000f3a:	f107 0310 	add.w	r3, r7, #16
 8000f3e:	4619      	mov	r1, r3
 8000f40:	6978      	ldr	r0, [r7, #20]
 8000f42:	f007 fb8f 	bl	8008664 <netconn_recv>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d0d8      	beq.n	8000efe <http_client+0x56>
 8000f4c:	e003      	b.n	8000f56 <http_client+0xae>
		}
	} else {
		sprintf(s, "Chyba pripojeni\n");
 8000f4e:	4907      	ldr	r1, [pc, #28]	; (8000f6c <http_client+0xc4>)
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f017 fe33 	bl	8018bbc <siprintf>
	}
	netconn_delete(client);
 8000f56:	6978      	ldr	r0, [r7, #20]
 8000f58:	f007 f8c4 	bl	80080e4 <netconn_delete>
}
 8000f5c:	bf00      	nop
 8000f5e:	3720      	adds	r7, #32
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	7c90e593 	.word	0x7c90e593
 8000f68:	08019f70 	.word	0x08019f70
 8000f6c:	08019fbc 	.word	0x08019fbc

08000f70 <telnet_process_command>:
static void telnet_process_command(char *cmd, struct netconn *conn) {
 8000f70:	b580      	push	{r7, lr}
 8000f72:	f5ad 6d83 	sub.w	sp, sp, #1048	; 0x418
 8000f76:	af02      	add	r7, sp, #8
 8000f78:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8000f7c:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8000f80:	6018      	str	r0, [r3, #0]
 8000f82:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8000f86:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8000f8a:	6019      	str	r1, [r3, #0]

	char *token;
	char s[HTTP_CLIENT_BUFF];
	token = strtok(cmd, " ");
 8000f8c:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8000f90:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8000f94:	4934      	ldr	r1, [pc, #208]	; (8001068 <telnet_process_command+0xf8>)
 8000f96:	6818      	ldr	r0, [r3, #0]
 8000f98:	f017 fee0 	bl	8018d5c <strtok>
 8000f9c:	f8c7 040c 	str.w	r0, [r7, #1036]	; 0x40c
	//-------------HELLO command-------------------------------------------------
	if (strcasecmp(token, "HELLO") == 0) {
 8000fa0:	4932      	ldr	r1, [pc, #200]	; (800106c <telnet_process_command+0xfc>)
 8000fa2:	f8d7 040c 	ldr.w	r0, [r7, #1036]	; 0x40c
 8000fa6:	f017 fe9f 	bl	8018ce8 <strcasecmp>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d106      	bne.n	8000fbe <telnet_process_command+0x4e>
		sprintf(s, "Komunikace OKacko\n\r");
 8000fb0:	f107 030c 	add.w	r3, r7, #12
 8000fb4:	492e      	ldr	r1, [pc, #184]	; (8001070 <telnet_process_command+0x100>)
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f017 fe00 	bl	8018bbc <siprintf>
 8000fbc:	e03d      	b.n	800103a <telnet_process_command+0xca>
	} //-------------LED1 command-------------------------------------------------
	else if (strcasecmp(token, "LED1") == 0) {
 8000fbe:	492d      	ldr	r1, [pc, #180]	; (8001074 <telnet_process_command+0x104>)
 8000fc0:	f8d7 040c 	ldr.w	r0, [r7, #1036]	; 0x40c
 8000fc4:	f017 fe90 	bl	8018ce8 <strcasecmp>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d126      	bne.n	800101c <telnet_process_command+0xac>
		token = strtok(NULL, " ");
 8000fce:	4926      	ldr	r1, [pc, #152]	; (8001068 <telnet_process_command+0xf8>)
 8000fd0:	2000      	movs	r0, #0
 8000fd2:	f017 fec3 	bl	8018d5c <strtok>
 8000fd6:	f8c7 040c 	str.w	r0, [r7, #1036]	; 0x40c

		if (strcasecmp(token, "ON") == 0) {
 8000fda:	4927      	ldr	r1, [pc, #156]	; (8001078 <telnet_process_command+0x108>)
 8000fdc:	f8d7 040c 	ldr.w	r0, [r7, #1036]	; 0x40c
 8000fe0:	f017 fe82 	bl	8018ce8 <strcasecmp>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d104      	bne.n	8000ff4 <telnet_process_command+0x84>
			//turn on LED1
			HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 1);
 8000fea:	2201      	movs	r2, #1
 8000fec:	2101      	movs	r1, #1
 8000fee:	4823      	ldr	r0, [pc, #140]	; (800107c <telnet_process_command+0x10c>)
 8000ff0:	f001 ffca 	bl	8002f88 <HAL_GPIO_WritePin>

		}
		if (strcasecmp(token, "OFF") == 0) {
 8000ff4:	4922      	ldr	r1, [pc, #136]	; (8001080 <telnet_process_command+0x110>)
 8000ff6:	f8d7 040c 	ldr.w	r0, [r7, #1036]	; 0x40c
 8000ffa:	f017 fe75 	bl	8018ce8 <strcasecmp>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d104      	bne.n	800100e <telnet_process_command+0x9e>
			//turn off LED1
			HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 0);
 8001004:	2200      	movs	r2, #0
 8001006:	2101      	movs	r1, #1
 8001008:	481c      	ldr	r0, [pc, #112]	; (800107c <telnet_process_command+0x10c>)
 800100a:	f001 ffbd 	bl	8002f88 <HAL_GPIO_WritePin>

		}

		sprintf(s,"OK\n\r");
 800100e:	f107 030c 	add.w	r3, r7, #12
 8001012:	491c      	ldr	r1, [pc, #112]	; (8001084 <telnet_process_command+0x114>)
 8001014:	4618      	mov	r0, r3
 8001016:	f017 fdd1 	bl	8018bbc <siprintf>
 800101a:	e00e      	b.n	800103a <telnet_process_command+0xca>
	}
	else if (strcasecmp(token, "CLIENT") == 0) {
 800101c:	491a      	ldr	r1, [pc, #104]	; (8001088 <telnet_process_command+0x118>)
 800101e:	f8d7 040c 	ldr.w	r0, [r7, #1036]	; 0x40c
 8001022:	f017 fe61 	bl	8018ce8 <strcasecmp>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d106      	bne.n	800103a <telnet_process_command+0xca>
		http_client(s, HTTP_CLIENT_BUFF);
 800102c:	f107 030c 	add.w	r3, r7, #12
 8001030:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff ff37 	bl	8000ea8 <http_client>
	}
	netconn_write(conn, s, strlen(s), NETCONN_COPY);
 800103a:	f107 030c 	add.w	r3, r7, #12
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff f8e0 	bl	8000204 <strlen>
 8001044:	4602      	mov	r2, r0
 8001046:	f107 010c 	add.w	r1, r7, #12
 800104a:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800104e:	f5a3 6082 	sub.w	r0, r3, #1040	; 0x410
 8001052:	2300      	movs	r3, #0
 8001054:	9300      	str	r3, [sp, #0]
 8001056:	2301      	movs	r3, #1
 8001058:	6800      	ldr	r0, [r0, #0]
 800105a:	f007 fb7d 	bl	8008758 <netconn_write_partly>
}
 800105e:	bf00      	nop
 8001060:	f507 6782 	add.w	r7, r7, #1040	; 0x410
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	08019fd0 	.word	0x08019fd0
 800106c:	08019fd4 	.word	0x08019fd4
 8001070:	08019fdc 	.word	0x08019fdc
 8001074:	08019ff0 	.word	0x08019ff0
 8001078:	08019ff8 	.word	0x08019ff8
 800107c:	40020400 	.word	0x40020400
 8001080:	08019ffc 	.word	0x08019ffc
 8001084:	0801a000 	.word	0x0801a000
 8001088:	0801a008 	.word	0x0801a008

0800108c <telnet_byte_available>:

static void telnet_byte_available(uint8_t c, struct netconn *conn) {
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	6039      	str	r1, [r7, #0]
 8001096:	71fb      	strb	r3, [r7, #7]
	static uint16_t cnt;
	static char data[CMD_BUFFER_LEN];
	if (cnt < CMD_BUFFER_LEN && c >= 32 && c <= 127)
 8001098:	4b14      	ldr	r3, [pc, #80]	; (80010ec <telnet_byte_available+0x60>)
 800109a:	881b      	ldrh	r3, [r3, #0]
 800109c:	2bff      	cmp	r3, #255	; 0xff
 800109e:	d810      	bhi.n	80010c2 <telnet_byte_available+0x36>
 80010a0:	79fb      	ldrb	r3, [r7, #7]
 80010a2:	2b1f      	cmp	r3, #31
 80010a4:	d90d      	bls.n	80010c2 <telnet_byte_available+0x36>
 80010a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	db09      	blt.n	80010c2 <telnet_byte_available+0x36>
		data[cnt++] = c;
 80010ae:	4b0f      	ldr	r3, [pc, #60]	; (80010ec <telnet_byte_available+0x60>)
 80010b0:	881b      	ldrh	r3, [r3, #0]
 80010b2:	1c5a      	adds	r2, r3, #1
 80010b4:	b291      	uxth	r1, r2
 80010b6:	4a0d      	ldr	r2, [pc, #52]	; (80010ec <telnet_byte_available+0x60>)
 80010b8:	8011      	strh	r1, [r2, #0]
 80010ba:	4619      	mov	r1, r3
 80010bc:	4a0c      	ldr	r2, [pc, #48]	; (80010f0 <telnet_byte_available+0x64>)
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	5453      	strb	r3, [r2, r1]
	if (c == '\n') {
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	2b0a      	cmp	r3, #10
 80010c6:	d10c      	bne.n	80010e2 <telnet_byte_available+0x56>
		data[cnt] = '\0';
 80010c8:	4b08      	ldr	r3, [pc, #32]	; (80010ec <telnet_byte_available+0x60>)
 80010ca:	881b      	ldrh	r3, [r3, #0]
 80010cc:	461a      	mov	r2, r3
 80010ce:	4b08      	ldr	r3, [pc, #32]	; (80010f0 <telnet_byte_available+0x64>)
 80010d0:	2100      	movs	r1, #0
 80010d2:	5499      	strb	r1, [r3, r2]
		telnet_process_command(data, conn);
 80010d4:	6839      	ldr	r1, [r7, #0]
 80010d6:	4806      	ldr	r0, [pc, #24]	; (80010f0 <telnet_byte_available+0x64>)
 80010d8:	f7ff ff4a 	bl	8000f70 <telnet_process_command>
		cnt = 0;
 80010dc:	4b03      	ldr	r3, [pc, #12]	; (80010ec <telnet_byte_available+0x60>)
 80010de:	2200      	movs	r2, #0
 80010e0:	801a      	strh	r2, [r3, #0]
	}
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	200003f0 	.word	0x200003f0
 80010f0:	200003f4 	.word	0x200003f4

080010f4 <telnet_thread>:
static void telnet_thread(void *arg) {
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b088      	sub	sp, #32
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
	u16_t len;

	LWIP_UNUSED_ARG(arg);

	/* Create a new connection identifier. */
	conn = netconn_new(NETCONN_TCP);
 80010fc:	2200      	movs	r2, #0
 80010fe:	2100      	movs	r1, #0
 8001100:	2010      	movs	r0, #16
 8001102:	f006 ff51 	bl	8007fa8 <netconn_new_with_proto_and_callback>
 8001106:	61f8      	str	r0, [r7, #28]

	if (conn != NULL) {
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d055      	beq.n	80011ba <telnet_thread+0xc6>
		/* Bind connection to well known port number 23. */
		err = netconn_bind(conn, NULL, 23);
 800110e:	2217      	movs	r2, #23
 8001110:	2100      	movs	r1, #0
 8001112:	69f8      	ldr	r0, [r7, #28]
 8001114:	f007 f802 	bl	800811c <netconn_bind>
 8001118:	4603      	mov	r3, r0
 800111a:	76fb      	strb	r3, [r7, #27]

		if (err == ERR_OK) {
 800111c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d146      	bne.n	80011b2 <telnet_thread+0xbe>
			/* Tell connection to go into listening mode. */
			netconn_listen(conn);
 8001124:	21ff      	movs	r1, #255	; 0xff
 8001126:	69f8      	ldr	r0, [r7, #28]
 8001128:	f007 f868 	bl	80081fc <netconn_listen_with_backlog>

			while (1) {
				/* Grab new connection. */
				accept_err = netconn_accept(conn, &newconn);
 800112c:	f107 0314 	add.w	r3, r7, #20
 8001130:	4619      	mov	r1, r3
 8001132:	69f8      	ldr	r0, [r7, #28]
 8001134:	f007 f88e 	bl	8008254 <netconn_accept>
 8001138:	4603      	mov	r3, r0
 800113a:	76bb      	strb	r3, [r7, #26]

				/* Process the new connection. */
				if (accept_err == ERR_OK) {
 800113c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d1f3      	bne.n	800112c <telnet_thread+0x38>

					while (netconn_recv(newconn, &buf) == ERR_OK) {
 8001144:	e022      	b.n	800118c <telnet_thread+0x98>
						do {
							netbuf_data(buf, (void**) &data, &len);
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	f107 020a 	add.w	r2, r7, #10
 800114c:	f107 010c 	add.w	r1, r7, #12
 8001150:	4618      	mov	r0, r3
 8001152:	f009 f96f 	bl	800a434 <netbuf_data>
							while (len--)
 8001156:	e008      	b.n	800116a <telnet_thread+0x76>
								telnet_byte_available(*data++, newconn);
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	1c5a      	adds	r2, r3, #1
 800115c:	60fa      	str	r2, [r7, #12]
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	697a      	ldr	r2, [r7, #20]
 8001162:	4611      	mov	r1, r2
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff ff91 	bl	800108c <telnet_byte_available>
							while (len--)
 800116a:	897b      	ldrh	r3, [r7, #10]
 800116c:	1e5a      	subs	r2, r3, #1
 800116e:	b292      	uxth	r2, r2
 8001170:	817a      	strh	r2, [r7, #10]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d1f0      	bne.n	8001158 <telnet_thread+0x64>

						} while (netbuf_next(buf) >= 0);
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	4618      	mov	r0, r3
 800117a:	f009 f9a5 	bl	800a4c8 <netbuf_next>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	dae0      	bge.n	8001146 <telnet_thread+0x52>

						netbuf_delete(buf);
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	4618      	mov	r0, r3
 8001188:	f009 f934 	bl	800a3f4 <netbuf_delete>
					while (netconn_recv(newconn, &buf) == ERR_OK) {
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	f107 0210 	add.w	r2, r7, #16
 8001192:	4611      	mov	r1, r2
 8001194:	4618      	mov	r0, r3
 8001196:	f007 fa65 	bl	8008664 <netconn_recv>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d0d2      	beq.n	8001146 <telnet_thread+0x52>
					}

					/* Close connection and discard connection identifier. */
					netconn_close(newconn);
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	4618      	mov	r0, r3
 80011a4:	f007 fbda 	bl	800895c <netconn_close>
					netconn_delete(newconn);
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f006 ff9a 	bl	80080e4 <netconn_delete>
				accept_err = netconn_accept(conn, &newconn);
 80011b0:	e7bc      	b.n	800112c <telnet_thread+0x38>
				}
			}
		} else {
			netconn_delete(newconn);
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f006 ff95 	bl	80080e4 <netconn_delete>
		}
	}
}
 80011ba:	bf00      	nop
 80011bc:	3720      	adds	r7, #32
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
	...

080011c4 <telnet_init>:
/*-----------------------------------------------------------------------------------*/

void telnet_init(void) {
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af02      	add	r7, sp, #8
	sys_thread_new("telnet_thread", telnet_thread, NULL,
 80011ca:	2304      	movs	r3, #4
 80011cc:	9300      	str	r3, [sp, #0]
 80011ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011d2:	2200      	movs	r2, #0
 80011d4:	4903      	ldr	r1, [pc, #12]	; (80011e4 <telnet_init+0x20>)
 80011d6:	4804      	ldr	r0, [pc, #16]	; (80011e8 <telnet_init+0x24>)
 80011d8:	f017 fb7e 	bl	80188d8 <sys_thread_new>
	DEFAULT_THREAD_STACKSIZE, TELNET_THREAD_PRIO);
}
 80011dc:	bf00      	nop
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	080010f5 	.word	0x080010f5
 80011e8:	0801a010 	.word	0x0801a010

080011ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80011ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001224 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011f0:	480d      	ldr	r0, [pc, #52]	; (8001228 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011f2:	490e      	ldr	r1, [pc, #56]	; (800122c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011f4:	4a0e      	ldr	r2, [pc, #56]	; (8001230 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011f8:	e002      	b.n	8001200 <LoopCopyDataInit>

080011fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011fe:	3304      	adds	r3, #4

08001200 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001200:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001202:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001204:	d3f9      	bcc.n	80011fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001206:	4a0b      	ldr	r2, [pc, #44]	; (8001234 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001208:	4c0b      	ldr	r4, [pc, #44]	; (8001238 <LoopFillZerobss+0x26>)
  movs r3, #0
 800120a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800120c:	e001      	b.n	8001212 <LoopFillZerobss>

0800120e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800120e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001210:	3204      	adds	r2, #4

08001212 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001212:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001214:	d3fb      	bcc.n	800120e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001216:	f7ff fdc1 	bl	8000d9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800121a:	f017 fe97 	bl	8018f4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800121e:	f7ff f9e7 	bl	80005f0 <main>
  bx  lr    
 8001222:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001224:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001228:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800122c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001230:	08028040 	.word	0x08028040
  ldr r2, =_sbss
 8001234:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001238:	20011150 	.word	0x20011150

0800123c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800123c:	e7fe      	b.n	800123c <ADC_IRQHandler>

0800123e <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 800123e:	b480      	push	{r7}
 8001240:	b083      	sub	sp, #12
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
 8001246:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d00b      	beq.n	8001266 <LAN8742_RegisterBusIO+0x28>
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	68db      	ldr	r3, [r3, #12]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d007      	beq.n	8001266 <LAN8742_RegisterBusIO+0x28>
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d003      	beq.n	8001266 <LAN8742_RegisterBusIO+0x28>
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	691b      	ldr	r3, [r3, #16]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d102      	bne.n	800126c <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001266:	f04f 33ff 	mov.w	r3, #4294967295
 800126a:	e014      	b.n	8001296 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685a      	ldr	r2, [r3, #4]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	68da      	ldr	r2, [r3, #12]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	689a      	ldr	r2, [r3, #8]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	691a      	ldr	r2, [r3, #16]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8001294:	2300      	movs	r3, #0
}
 8001296:	4618      	mov	r0, r3
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr

080012a2 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b086      	sub	sp, #24
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 80012aa:	2300      	movs	r3, #0
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	2300      	movs	r3, #0
 80012b0:	60bb      	str	r3, [r7, #8]
 80012b2:	2300      	movs	r3, #0
 80012b4:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80012b6:	2300      	movs	r3, #0
 80012b8:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d17c      	bne.n	80013bc <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d002      	beq.n	80012d0 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2220      	movs	r2, #32
 80012d4:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80012d6:	2300      	movs	r3, #0
 80012d8:	617b      	str	r3, [r7, #20]
 80012da:	e01c      	b.n	8001316 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	695b      	ldr	r3, [r3, #20]
 80012e0:	f107 0208 	add.w	r2, r7, #8
 80012e4:	2112      	movs	r1, #18
 80012e6:	6978      	ldr	r0, [r7, #20]
 80012e8:	4798      	blx	r3
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	da03      	bge.n	80012f8 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 80012f0:	f06f 0304 	mvn.w	r3, #4
 80012f4:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 80012f6:	e00b      	b.n	8001310 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	f003 031f 	and.w	r3, r3, #31
 80012fe:	697a      	ldr	r2, [r7, #20]
 8001300:	429a      	cmp	r2, r3
 8001302:	d105      	bne.n	8001310 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	697a      	ldr	r2, [r7, #20]
 8001308:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800130a:	2300      	movs	r3, #0
 800130c:	613b      	str	r3, [r7, #16]
         break;
 800130e:	e005      	b.n	800131c <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	3301      	adds	r3, #1
 8001314:	617b      	str	r3, [r7, #20]
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	2b1f      	cmp	r3, #31
 800131a:	d9df      	bls.n	80012dc <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2b1f      	cmp	r3, #31
 8001322:	d902      	bls.n	800132a <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001324:	f06f 0302 	mvn.w	r3, #2
 8001328:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d145      	bne.n	80013bc <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	691b      	ldr	r3, [r3, #16]
 8001334:	687a      	ldr	r2, [r7, #4]
 8001336:	6810      	ldr	r0, [r2, #0]
 8001338:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800133c:	2100      	movs	r1, #0
 800133e:	4798      	blx	r3
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	db37      	blt.n	80013b6 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	695b      	ldr	r3, [r3, #20]
 800134a:	687a      	ldr	r2, [r7, #4]
 800134c:	6810      	ldr	r0, [r2, #0]
 800134e:	f107 0208 	add.w	r2, r7, #8
 8001352:	2100      	movs	r1, #0
 8001354:	4798      	blx	r3
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	db28      	blt.n	80013ae <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	699b      	ldr	r3, [r3, #24]
 8001360:	4798      	blx	r3
 8001362:	4603      	mov	r3, r0
 8001364:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001366:	e01c      	b.n	80013a2 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	699b      	ldr	r3, [r3, #24]
 800136c:	4798      	blx	r3
 800136e:	4603      	mov	r3, r0
 8001370:	461a      	mov	r2, r3
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800137a:	d80e      	bhi.n	800139a <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	695b      	ldr	r3, [r3, #20]
 8001380:	687a      	ldr	r2, [r7, #4]
 8001382:	6810      	ldr	r0, [r2, #0]
 8001384:	f107 0208 	add.w	r2, r7, #8
 8001388:	2100      	movs	r1, #0
 800138a:	4798      	blx	r3
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	da07      	bge.n	80013a2 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8001392:	f06f 0304 	mvn.w	r3, #4
 8001396:	613b      	str	r3, [r7, #16]
                 break;
 8001398:	e010      	b.n	80013bc <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 800139a:	f06f 0301 	mvn.w	r3, #1
 800139e:	613b      	str	r3, [r7, #16]
               break;
 80013a0:	e00c      	b.n	80013bc <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d1dd      	bne.n	8001368 <LAN8742_Init+0xc6>
 80013ac:	e006      	b.n	80013bc <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 80013ae:	f06f 0304 	mvn.w	r3, #4
 80013b2:	613b      	str	r3, [r7, #16]
 80013b4:	e002      	b.n	80013bc <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 80013b6:	f06f 0303 	mvn.w	r3, #3
 80013ba:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d112      	bne.n	80013e8 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	699b      	ldr	r3, [r3, #24]
 80013c6:	4798      	blx	r3
 80013c8:	4603      	mov	r3, r0
 80013ca:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 80013cc:	bf00      	nop
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	699b      	ldr	r3, [r3, #24]
 80013d2:	4798      	blx	r3
 80013d4:	4603      	mov	r3, r0
 80013d6:	461a      	mov	r2, r3
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80013e0:	d9f5      	bls.n	80013ce <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2201      	movs	r2, #1
 80013e6:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 80013e8:	693b      	ldr	r3, [r7, #16]
 }
 80013ea:	4618      	mov	r0, r3
 80013ec:	3718      	adds	r7, #24
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b084      	sub	sp, #16
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80013fa:	2300      	movs	r3, #0
 80013fc:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	695b      	ldr	r3, [r3, #20]
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	6810      	ldr	r0, [r2, #0]
 8001406:	f107 020c 	add.w	r2, r7, #12
 800140a:	2101      	movs	r1, #1
 800140c:	4798      	blx	r3
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	da02      	bge.n	800141a <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001414:	f06f 0304 	mvn.w	r3, #4
 8001418:	e06e      	b.n	80014f8 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	695b      	ldr	r3, [r3, #20]
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	6810      	ldr	r0, [r2, #0]
 8001422:	f107 020c 	add.w	r2, r7, #12
 8001426:	2101      	movs	r1, #1
 8001428:	4798      	blx	r3
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	da02      	bge.n	8001436 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001430:	f06f 0304 	mvn.w	r3, #4
 8001434:	e060      	b.n	80014f8 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	f003 0304 	and.w	r3, r3, #4
 800143c:	2b00      	cmp	r3, #0
 800143e:	d101      	bne.n	8001444 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8001440:	2301      	movs	r3, #1
 8001442:	e059      	b.n	80014f8 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	695b      	ldr	r3, [r3, #20]
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	6810      	ldr	r0, [r2, #0]
 800144c:	f107 020c 	add.w	r2, r7, #12
 8001450:	2100      	movs	r1, #0
 8001452:	4798      	blx	r3
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	da02      	bge.n	8001460 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 800145a:	f06f 0304 	mvn.w	r3, #4
 800145e:	e04b      	b.n	80014f8 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d11b      	bne.n	80014a2 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001470:	2b00      	cmp	r3, #0
 8001472:	d006      	beq.n	8001482 <LAN8742_GetLinkState+0x90>
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800147e:	2302      	movs	r3, #2
 8001480:	e03a      	b.n	80014f8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800148c:	2303      	movs	r3, #3
 800148e:	e033      	b.n	80014f8 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800149a:	2304      	movs	r3, #4
 800149c:	e02c      	b.n	80014f8 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800149e:	2305      	movs	r3, #5
 80014a0:	e02a      	b.n	80014f8 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	695b      	ldr	r3, [r3, #20]
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	6810      	ldr	r0, [r2, #0]
 80014aa:	f107 020c 	add.w	r2, r7, #12
 80014ae:	211f      	movs	r1, #31
 80014b0:	4798      	blx	r3
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	da02      	bge.n	80014be <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80014b8:	f06f 0304 	mvn.w	r3, #4
 80014bc:	e01c      	b.n	80014f8 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d101      	bne.n	80014cc <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80014c8:	2306      	movs	r3, #6
 80014ca:	e015      	b.n	80014f8 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	f003 031c 	and.w	r3, r3, #28
 80014d2:	2b18      	cmp	r3, #24
 80014d4:	d101      	bne.n	80014da <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80014d6:	2302      	movs	r3, #2
 80014d8:	e00e      	b.n	80014f8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	f003 031c 	and.w	r3, r3, #28
 80014e0:	2b08      	cmp	r3, #8
 80014e2:	d101      	bne.n	80014e8 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e007      	b.n	80014f8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	f003 031c 	and.w	r3, r3, #28
 80014ee:	2b14      	cmp	r3, #20
 80014f0:	d101      	bne.n	80014f6 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80014f2:	2304      	movs	r3, #4
 80014f4:	e000      	b.n	80014f8 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80014f6:	2305      	movs	r3, #5
    }				
  }
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3710      	adds	r7, #16
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}

08001500 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001504:	4b0e      	ldr	r3, [pc, #56]	; (8001540 <HAL_Init+0x40>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a0d      	ldr	r2, [pc, #52]	; (8001540 <HAL_Init+0x40>)
 800150a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800150e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001510:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <HAL_Init+0x40>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a0a      	ldr	r2, [pc, #40]	; (8001540 <HAL_Init+0x40>)
 8001516:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800151a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800151c:	4b08      	ldr	r3, [pc, #32]	; (8001540 <HAL_Init+0x40>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a07      	ldr	r2, [pc, #28]	; (8001540 <HAL_Init+0x40>)
 8001522:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001526:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001528:	2003      	movs	r0, #3
 800152a:	f000 f8fc 	bl	8001726 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800152e:	200f      	movs	r0, #15
 8001530:	f7ff fac4 	bl	8000abc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001534:	f7ff fa2c 	bl	8000990 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001538:	2300      	movs	r3, #0
}
 800153a:	4618      	mov	r0, r3
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40023c00 	.word	0x40023c00

08001544 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001548:	4b06      	ldr	r3, [pc, #24]	; (8001564 <HAL_IncTick+0x20>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	461a      	mov	r2, r3
 800154e:	4b06      	ldr	r3, [pc, #24]	; (8001568 <HAL_IncTick+0x24>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4413      	add	r3, r2
 8001554:	4a04      	ldr	r2, [pc, #16]	; (8001568 <HAL_IncTick+0x24>)
 8001556:	6013      	str	r3, [r2, #0]
}
 8001558:	bf00      	nop
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	20000008 	.word	0x20000008
 8001568:	200004f4 	.word	0x200004f4

0800156c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  return uwTick;
 8001570:	4b03      	ldr	r3, [pc, #12]	; (8001580 <HAL_GetTick+0x14>)
 8001572:	681b      	ldr	r3, [r3, #0]
}
 8001574:	4618      	mov	r0, r3
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	200004f4 	.word	0x200004f4

08001584 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800158c:	f7ff ffee 	bl	800156c <HAL_GetTick>
 8001590:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800159c:	d005      	beq.n	80015aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800159e:	4b0a      	ldr	r3, [pc, #40]	; (80015c8 <HAL_Delay+0x44>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	461a      	mov	r2, r3
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	4413      	add	r3, r2
 80015a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015aa:	bf00      	nop
 80015ac:	f7ff ffde 	bl	800156c <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	68fa      	ldr	r2, [r7, #12]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d8f7      	bhi.n	80015ac <HAL_Delay+0x28>
  {
  }
}
 80015bc:	bf00      	nop
 80015be:	bf00      	nop
 80015c0:	3710      	adds	r7, #16
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	20000008 	.word	0x20000008

080015cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b085      	sub	sp, #20
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f003 0307 	and.w	r3, r3, #7
 80015da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015dc:	4b0c      	ldr	r3, [pc, #48]	; (8001610 <__NVIC_SetPriorityGrouping+0x44>)
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015e2:	68ba      	ldr	r2, [r7, #8]
 80015e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015e8:	4013      	ands	r3, r2
 80015ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015fe:	4a04      	ldr	r2, [pc, #16]	; (8001610 <__NVIC_SetPriorityGrouping+0x44>)
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	60d3      	str	r3, [r2, #12]
}
 8001604:	bf00      	nop
 8001606:	3714      	adds	r7, #20
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr
 8001610:	e000ed00 	.word	0xe000ed00

08001614 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001618:	4b04      	ldr	r3, [pc, #16]	; (800162c <__NVIC_GetPriorityGrouping+0x18>)
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	0a1b      	lsrs	r3, r3, #8
 800161e:	f003 0307 	and.w	r3, r3, #7
}
 8001622:	4618      	mov	r0, r3
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr
 800162c:	e000ed00 	.word	0xe000ed00

08001630 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800163a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163e:	2b00      	cmp	r3, #0
 8001640:	db0b      	blt.n	800165a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001642:	79fb      	ldrb	r3, [r7, #7]
 8001644:	f003 021f 	and.w	r2, r3, #31
 8001648:	4907      	ldr	r1, [pc, #28]	; (8001668 <__NVIC_EnableIRQ+0x38>)
 800164a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164e:	095b      	lsrs	r3, r3, #5
 8001650:	2001      	movs	r0, #1
 8001652:	fa00 f202 	lsl.w	r2, r0, r2
 8001656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800165a:	bf00      	nop
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	e000e100 	.word	0xe000e100

0800166c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	6039      	str	r1, [r7, #0]
 8001676:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167c:	2b00      	cmp	r3, #0
 800167e:	db0a      	blt.n	8001696 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	b2da      	uxtb	r2, r3
 8001684:	490c      	ldr	r1, [pc, #48]	; (80016b8 <__NVIC_SetPriority+0x4c>)
 8001686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168a:	0112      	lsls	r2, r2, #4
 800168c:	b2d2      	uxtb	r2, r2
 800168e:	440b      	add	r3, r1
 8001690:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001694:	e00a      	b.n	80016ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	b2da      	uxtb	r2, r3
 800169a:	4908      	ldr	r1, [pc, #32]	; (80016bc <__NVIC_SetPriority+0x50>)
 800169c:	79fb      	ldrb	r3, [r7, #7]
 800169e:	f003 030f 	and.w	r3, r3, #15
 80016a2:	3b04      	subs	r3, #4
 80016a4:	0112      	lsls	r2, r2, #4
 80016a6:	b2d2      	uxtb	r2, r2
 80016a8:	440b      	add	r3, r1
 80016aa:	761a      	strb	r2, [r3, #24]
}
 80016ac:	bf00      	nop
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr
 80016b8:	e000e100 	.word	0xe000e100
 80016bc:	e000ed00 	.word	0xe000ed00

080016c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b089      	sub	sp, #36	; 0x24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	60b9      	str	r1, [r7, #8]
 80016ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f003 0307 	and.w	r3, r3, #7
 80016d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	f1c3 0307 	rsb	r3, r3, #7
 80016da:	2b04      	cmp	r3, #4
 80016dc:	bf28      	it	cs
 80016de:	2304      	movcs	r3, #4
 80016e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	3304      	adds	r3, #4
 80016e6:	2b06      	cmp	r3, #6
 80016e8:	d902      	bls.n	80016f0 <NVIC_EncodePriority+0x30>
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	3b03      	subs	r3, #3
 80016ee:	e000      	b.n	80016f2 <NVIC_EncodePriority+0x32>
 80016f0:	2300      	movs	r3, #0
 80016f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f4:	f04f 32ff 	mov.w	r2, #4294967295
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	fa02 f303 	lsl.w	r3, r2, r3
 80016fe:	43da      	mvns	r2, r3
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	401a      	ands	r2, r3
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001708:	f04f 31ff 	mov.w	r1, #4294967295
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	fa01 f303 	lsl.w	r3, r1, r3
 8001712:	43d9      	mvns	r1, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001718:	4313      	orrs	r3, r2
         );
}
 800171a:	4618      	mov	r0, r3
 800171c:	3724      	adds	r7, #36	; 0x24
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr

08001726 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001726:	b580      	push	{r7, lr}
 8001728:	b082      	sub	sp, #8
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f7ff ff4c 	bl	80015cc <__NVIC_SetPriorityGrouping>
}
 8001734:	bf00      	nop
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800173c:	b580      	push	{r7, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	af00      	add	r7, sp, #0
 8001742:	4603      	mov	r3, r0
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	607a      	str	r2, [r7, #4]
 8001748:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800174a:	2300      	movs	r3, #0
 800174c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800174e:	f7ff ff61 	bl	8001614 <__NVIC_GetPriorityGrouping>
 8001752:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	68b9      	ldr	r1, [r7, #8]
 8001758:	6978      	ldr	r0, [r7, #20]
 800175a:	f7ff ffb1 	bl	80016c0 <NVIC_EncodePriority>
 800175e:	4602      	mov	r2, r0
 8001760:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001764:	4611      	mov	r1, r2
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff ff80 	bl	800166c <__NVIC_SetPriority>
}
 800176c:	bf00      	nop
 800176e:	3718      	adds	r7, #24
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}

08001774 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	4603      	mov	r3, r0
 800177c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800177e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001782:	4618      	mov	r0, r3
 8001784:	f7ff ff54 	bl	8001630 <__NVIC_EnableIRQ>
}
 8001788:	bf00      	nop
 800178a:	3708      	adds	r7, #8
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}

08001790 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d101      	bne.n	80017a2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e06c      	b.n	800187c <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d106      	bne.n	80017ba <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2223      	movs	r2, #35	; 0x23
 80017b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f003 f9b9 	bl	8004b2c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	60bb      	str	r3, [r7, #8]
 80017be:	4b31      	ldr	r3, [pc, #196]	; (8001884 <HAL_ETH_Init+0xf4>)
 80017c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c2:	4a30      	ldr	r2, [pc, #192]	; (8001884 <HAL_ETH_Init+0xf4>)
 80017c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017c8:	6453      	str	r3, [r2, #68]	; 0x44
 80017ca:	4b2e      	ldr	r3, [pc, #184]	; (8001884 <HAL_ETH_Init+0xf4>)
 80017cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017d2:	60bb      	str	r3, [r7, #8]
 80017d4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80017d6:	4b2c      	ldr	r3, [pc, #176]	; (8001888 <HAL_ETH_Init+0xf8>)
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	4a2b      	ldr	r2, [pc, #172]	; (8001888 <HAL_ETH_Init+0xf8>)
 80017dc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80017e0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80017e2:	4b29      	ldr	r3, [pc, #164]	; (8001888 <HAL_ETH_Init+0xf8>)
 80017e4:	685a      	ldr	r2, [r3, #4]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	4927      	ldr	r1, [pc, #156]	; (8001888 <HAL_ETH_Init+0xf8>)
 80017ec:	4313      	orrs	r3, r2
 80017ee:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80017f0:	4b25      	ldr	r3, [pc, #148]	; (8001888 <HAL_ETH_Init+0xf8>)
 80017f2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	6812      	ldr	r2, [r2, #0]
 8001802:	f043 0301 	orr.w	r3, r3, #1
 8001806:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800180a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800180c:	f7ff feae 	bl	800156c <HAL_GetTick>
 8001810:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001812:	e011      	b.n	8001838 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001814:	f7ff feaa 	bl	800156c <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001822:	d909      	bls.n	8001838 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2204      	movs	r2, #4
 8001828:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	22e0      	movs	r2, #224	; 0xe0
 8001830:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e021      	b.n	800187c <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	2b00      	cmp	r3, #0
 8001848:	d1e4      	bne.n	8001814 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f000 ff4a 	bl	80026e4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f000 fff1 	bl	8002838 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f001 f847 	bl	80028ea <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	461a      	mov	r2, r3
 8001862:	2100      	movs	r1, #0
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f000 ffaf 	bl	80027c8 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2200      	movs	r2, #0
 800186e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2210      	movs	r2, #16
 8001876:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800187a:	2300      	movs	r3, #0
}
 800187c:	4618      	mov	r0, r3
 800187e:	3710      	adds	r7, #16
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	40023800 	.word	0x40023800
 8001888:	40013800 	.word	0x40013800

0800188c <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800189a:	2b10      	cmp	r3, #16
 800189c:	d17f      	bne.n	800199e <HAL_ETH_Start_IT+0x112>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2223      	movs	r2, #35	; 0x23
 80018a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2201      	movs	r2, #1
 80018aa:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 80018ba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	6812      	ldr	r2, [r2, #0]
 80018c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018cc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80018d0:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 80018e4:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2204      	movs	r2, #4
 80018ec:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f000 f9f8 	bl	8001ce4 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f042 0208 	orr.w	r2, r2, #8
 8001902:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800190c:	2001      	movs	r0, #1
 800190e:	f7ff fe39 	bl	8001584 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	68fa      	ldr	r2, [r7, #12]
 8001918:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f042 0204 	orr.w	r2, r2, #4
 8001928:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001932:	2001      	movs	r0, #1
 8001934:	f7ff fe26 	bl	8001584 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	68fa      	ldr	r2, [r7, #12]
 800193e:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f000 fd70 	bl	8002426 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800194e:	699b      	ldr	r3, [r3, #24]
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	6812      	ldr	r2, [r2, #0]
 8001954:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001958:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800195c:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	6812      	ldr	r2, [r2, #0]
 800196c:	f043 0302 	orr.w	r3, r3, #2
 8001970:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001974:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800197e:	69db      	ldr	r3, [r3, #28]
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	6812      	ldr	r2, [r2, #0]
 8001984:	f443 33d0 	orr.w	r3, r3, #106496	; 0x1a000
 8001988:	f043 03c1 	orr.w	r3, r3, #193	; 0xc1
 800198c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001990:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2223      	movs	r2, #35	; 0x23
 8001996:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 800199a:	2300      	movs	r3, #0
 800199c:	e000      	b.n	80019a0 <HAL_ETH_Start_IT+0x114>
  }
  else
  {
    return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
  }
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3710      	adds	r7, #16
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b086      	sub	sp, #24
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80019b6:	2b23      	cmp	r3, #35	; 0x23
 80019b8:	d170      	bne.n	8001a9c <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2223      	movs	r2, #35	; 0x23
 80019be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019ca:	69db      	ldr	r3, [r3, #28]
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	6812      	ldr	r2, [r2, #0]
 80019d0:	f423 33d0 	bic.w	r3, r3, #106496	; 0x1a000
 80019d4:	f023 03c1 	bic.w	r3, r3, #193	; 0xc1
 80019d8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80019dc:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	6812      	ldr	r2, [r2, #0]
 80019ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80019f0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80019f4:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	687a      	ldr	r2, [r7, #4]
 8001a02:	6812      	ldr	r2, [r2, #0]
 8001a04:	f023 0302 	bic.w	r3, r3, #2
 8001a08:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a0c:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f022 0204 	bic.w	r2, r2, #4
 8001a1c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a26:	2001      	movs	r0, #1
 8001a28:	f7ff fdac 	bl	8001584 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	693a      	ldr	r2, [r7, #16]
 8001a32:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f000 fcf6 	bl	8002426 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f022 0208 	bic.w	r2, r2, #8
 8001a48:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a52:	2001      	movs	r0, #1
 8001a54:	f7ff fd96 	bl	8001584 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	693a      	ldr	r2, [r7, #16]
 8001a5e:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001a60:	2300      	movs	r3, #0
 8001a62:	617b      	str	r3, [r7, #20]
 8001a64:	e00e      	b.n	8001a84 <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	697a      	ldr	r2, [r7, #20]
 8001a6a:	3212      	adds	r2, #18
 8001a6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a70:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	3301      	adds	r3, #1
 8001a82:	617b      	str	r3, [r7, #20]
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	2b03      	cmp	r3, #3
 8001a88:	d9ed      	bls.n	8001a66 <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2210      	movs	r2, #16
 8001a94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	e000      	b.n	8001a9e <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
  }
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3718      	adds	r7, #24
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b082      	sub	sp, #8
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
 8001aae:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d109      	bne.n	8001aca <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001abc:	f043 0201 	orr.w	r2, r3, #1
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e045      	b.n	8001b56 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ad0:	2b23      	cmp	r3, #35	; 0x23
 8001ad2:	d13f      	bne.n	8001b54 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8001adc:	2201      	movs	r2, #1
 8001ade:	6839      	ldr	r1, [r7, #0]
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f000 ff6f 	bl	80029c4 <ETH_Prepare_Tx_Descriptors>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d009      	beq.n	8001b00 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001af2:	f043 0202 	orr.w	r2, r3, #2
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e02a      	b.n	8001b56 <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001b00:	f3bf 8f4f 	dsb	sy
}
 8001b04:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b0a:	1c5a      	adds	r2, r3, #1
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	629a      	str	r2, [r3, #40]	; 0x28
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b14:	2b03      	cmp	r3, #3
 8001b16:	d904      	bls.n	8001b22 <HAL_ETH_Transmit_IT+0x7c>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b1c:	1f1a      	subs	r2, r3, #4
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b2a:	695b      	ldr	r3, [r3, #20]
 8001b2c:	f003 0304 	and.w	r3, r3, #4
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d00d      	beq.n	8001b50 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	2304      	movs	r3, #4
 8001b40:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8001b50:	2300      	movs	r3, #0
 8001b52:	e000      	b.n	8001b56 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
  }
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b088      	sub	sp, #32
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
 8001b66:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d109      	bne.n	8001b8a <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b7c:	f043 0201 	orr.w	r2, r3, #1
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e0a8      	b.n	8001cdc <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b90:	2b23      	cmp	r3, #35	; 0x23
 8001b92:	d001      	beq.n	8001b98 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e0a1      	b.n	8001cdc <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b9c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	69fa      	ldr	r2, [r7, #28]
 8001ba2:	3212      	adds	r2, #18
 8001ba4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ba8:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001bae:	f1c3 0304 	rsb	r3, r3, #4
 8001bb2:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001bb4:	e06a      	b.n	8001c8c <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d007      	beq.n	8001bd2 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	699a      	ldr	r2, [r3, #24]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8001bca:	69bb      	ldr	r3, [r7, #24]
 8001bcc:	69da      	ldr	r2, [r3, #28]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d103      	bne.n	8001be6 <HAL_ETH_ReadData+0x88>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d040      	beq.n	8001c68 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d005      	beq.n	8001bfe <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	695b      	ldr	r3, [r3, #20]
 8001c02:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d00c      	beq.n	8001c2a <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	0c1b      	lsrs	r3, r3, #16
 8001c16:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001c1a:	3b04      	subs	r3, #4
 8001c1c:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001c26:	2301      	movs	r3, #1
 8001c28:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	689a      	ldr	r2, [r3, #8]
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001c3e:	69bb      	ldr	r3, [r7, #24]
 8001c40:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001c42:	461a      	mov	r2, r3
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	f003 f94a 	bl	8004ee0 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c50:	1c5a      	adds	r2, r3, #1
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	441a      	add	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	2200      	movs	r2, #0
 8001c66:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	61fb      	str	r3, [r7, #28]
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	2b03      	cmp	r3, #3
 8001c72:	d902      	bls.n	8001c7a <HAL_ETH_ReadData+0x11c>
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	3b04      	subs	r3, #4
 8001c78:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	69fa      	ldr	r2, [r7, #28]
 8001c7e:	3212      	adds	r2, #18
 8001c80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c84:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	3301      	adds	r3, #1
 8001c8a:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	db06      	blt.n	8001ca2 <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001c94:	697a      	ldr	r2, [r7, #20]
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d202      	bcs.n	8001ca2 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8001c9c:	7bfb      	ldrb	r3, [r7, #15]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d089      	beq.n	8001bb6 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	441a      	add	r2, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d002      	beq.n	8001cbc <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f000 f814 	bl	8001ce4 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	69fa      	ldr	r2, [r7, #28]
 8001cc0:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8001cc2:	7bfb      	ldrb	r3, [r7, #15]
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d108      	bne.n	8001cda <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	e000      	b.n	8001cdc <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3720      	adds	r7, #32
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b088      	sub	sp, #32
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001cec:	2300      	movs	r3, #0
 8001cee:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001cf8:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	69fa      	ldr	r2, [r7, #28]
 8001cfe:	3212      	adds	r2, #18
 8001d00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d04:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d0a:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001d0c:	e040      	b.n	8001d90 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	6a1b      	ldr	r3, [r3, #32]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d112      	bne.n	8001d3c <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001d16:	f107 030c 	add.w	r3, r7, #12
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f003 f8b0 	bl	8004e80 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d102      	bne.n	8001d2c <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001d26:	2300      	movs	r3, #0
 8001d28:	74fb      	strb	r3, [r7, #19]
 8001d2a:	e007      	b.n	8001d3c <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	461a      	mov	r2, r3
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	461a      	mov	r2, r3
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001d3c:	7cfb      	ldrb	r3, [r7, #19]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d026      	beq.n	8001d90 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d103      	bne.n	8001d52 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	4a1e      	ldr	r2, [pc, #120]	; (8001dc8 <ETH_UpdateDescriptor+0xe4>)
 8001d4e:	605a      	str	r2, [r3, #4]
 8001d50:	e003      	b.n	8001d5a <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8001d58:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001d5a:	f3bf 8f5f 	dmb	sy
}
 8001d5e:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	3301      	adds	r3, #1
 8001d70:	61fb      	str	r3, [r7, #28]
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	2b03      	cmp	r3, #3
 8001d76:	d902      	bls.n	8001d7e <ETH_UpdateDescriptor+0x9a>
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	3b04      	subs	r3, #4
 8001d7c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	69fa      	ldr	r2, [r7, #28]
 8001d82:	3212      	adds	r2, #18
 8001d84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d88:	617b      	str	r3, [r7, #20]
      desccount--;
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	3b01      	subs	r3, #1
 8001d8e:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d002      	beq.n	8001d9c <ETH_UpdateDescriptor+0xb8>
 8001d96:	7cfb      	ldrb	r3, [r7, #19]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d1b8      	bne.n	8001d0e <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d00c      	beq.n	8001dc0 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dae:	461a      	mov	r2, r3
 8001db0:	2300      	movs	r3, #0
 8001db2:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	69fa      	ldr	r2, [r7, #28]
 8001db8:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001dc0:	bf00      	nop
 8001dc2:	3720      	adds	r7, #32
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	80004600 	.word	0x80004600

08001dcc <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b086      	sub	sp, #24
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	3318      	adds	r3, #24
 8001dd8:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dde:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de4:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8001de6:	2301      	movs	r3, #1
 8001de8:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001dea:	e03f      	b.n	8001e6c <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8001dec:	2301      	movs	r3, #1
 8001dee:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	3b01      	subs	r3, #1
 8001df4:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8001df6:	68ba      	ldr	r2, [r7, #8]
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	3304      	adds	r3, #4
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	4413      	add	r3, r2
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d106      	bne.n	8001e14 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	f003 0303 	and.w	r3, r3, #3
 8001e0e:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8001e10:	2300      	movs	r3, #0
 8001e12:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8001e14:	7bbb      	ldrb	r3, [r7, #14]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d028      	beq.n	8001e6c <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	68d9      	ldr	r1, [r3, #12]
 8001e1e:	693a      	ldr	r2, [r7, #16]
 8001e20:	4613      	mov	r3, r2
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	4413      	add	r3, r2
 8001e26:	00db      	lsls	r3, r3, #3
 8001e28:	440b      	add	r3, r1
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	db1b      	blt.n	8001e68 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8001e30:	68ba      	ldr	r2, [r7, #8]
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	3304      	adds	r3, #4
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	4413      	add	r3, r2
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f003 f88f 	bl	8004f60 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8001e42:	68ba      	ldr	r2, [r7, #8]
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	3304      	adds	r3, #4
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	4413      	add	r3, r2
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	3301      	adds	r3, #1
 8001e54:	f003 0303 	and.w	r3, r3, #3
 8001e58:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	697a      	ldr	r2, [r7, #20]
 8001e5e:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	62da      	str	r2, [r3, #44]	; 0x2c
 8001e66:	e001      	b.n	8001e6c <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d002      	beq.n	8001e78 <HAL_ETH_ReleaseTxPacket+0xac>
 8001e72:	7bfb      	ldrb	r3, [r7, #15]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d1b9      	bne.n	8001dec <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3718      	adds	r7, #24
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
	...

08001e84 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e94:	695b      	ldr	r3, [r3, #20]
 8001e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e9a:	2b40      	cmp	r3, #64	; 0x40
 8001e9c:	d112      	bne.n	8001ec4 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ea6:	69db      	ldr	r3, [r3, #28]
 8001ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eac:	2b40      	cmp	r3, #64	; 0x40
 8001eae:	d109      	bne.n	8001ec4 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001eb8:	461a      	mov	r2, r3
 8001eba:	4b50      	ldr	r3, [pc, #320]	; (8001ffc <HAL_ETH_IRQHandler+0x178>)
 8001ebc:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f002 fb98 	bl	80045f4 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ecc:	695b      	ldr	r3, [r3, #20]
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d113      	bne.n	8001efe <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ede:	69db      	ldr	r3, [r3, #28]
 8001ee0:	f003 0301 	and.w	r3, r3, #1
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d10a      	bne.n	8001efe <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8001ef6:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f002 fb8b 	bl	8004614 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f06:	695b      	ldr	r3, [r3, #20]
 8001f08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f10:	d14c      	bne.n	8001fac <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f1a:	69db      	ldr	r3, [r3, #28]
 8001f1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f24:	d142      	bne.n	8001fac <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f2c:	f043 0208 	orr.w	r2, r3, #8
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f3e:	695b      	ldr	r3, [r3, #20]
 8001f40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f48:	d11a      	bne.n	8001f80 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f52:	695a      	ldr	r2, [r3, #20]
 8001f54:	4b2a      	ldr	r3, [pc, #168]	; (8002000 <HAL_ETH_IRQHandler+0x17c>)
 8001f56:	4013      	ands	r3, r2
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f66:	69db      	ldr	r3, [r3, #28]
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	6812      	ldr	r2, [r2, #0]
 8001f6c:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8001f70:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f74:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	22e0      	movs	r2, #224	; 0xe0
 8001f7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001f7e:	e012      	b.n	8001fa6 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f88:	695a      	ldr	r2, [r3, #20]
 8001f8a:	f248 6380 	movw	r3, #34432	; 0x8680
 8001f8e:	4013      	ands	r3, r2
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	f248 6380 	movw	r3, #34432	; 0x8680
 8001fa4:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f002 fb44 	bl	8004634 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fb2:	f003 0308 	and.w	r3, r3, #8
 8001fb6:	2b08      	cmp	r3, #8
 8001fb8:	d10e      	bne.n	8001fd8 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc0:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f000 f81c 	bl	8002008 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8001fd8:	4b0a      	ldr	r3, [pc, #40]	; (8002004 <HAL_ETH_IRQHandler+0x180>)
 8001fda:	695b      	ldr	r3, [r3, #20]
 8001fdc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d006      	beq.n	8001ff2 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001fe4:	4b07      	ldr	r3, [pc, #28]	; (8002004 <HAL_ETH_IRQHandler+0x180>)
 8001fe6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001fea:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f000 f815 	bl	800201c <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8001ff2:	bf00      	nop
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	00010040 	.word	0x00010040
 8002000:	007e2000 	.word	0x007e2000
 8002004:	40013c00 	.word	0x40013c00

08002008 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b086      	sub	sp, #24
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	607a      	str	r2, [r7, #4]
 800203c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	691b      	ldr	r3, [r3, #16]
 8002044:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	f003 031c 	and.w	r3, r3, #28
 800204c:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	02db      	lsls	r3, r3, #11
 8002052:	b29b      	uxth	r3, r3
 8002054:	697a      	ldr	r2, [r7, #20]
 8002056:	4313      	orrs	r3, r2
 8002058:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	019b      	lsls	r3, r3, #6
 800205e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002062:	697a      	ldr	r2, [r7, #20]
 8002064:	4313      	orrs	r3, r2
 8002066:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	f023 0302 	bic.w	r3, r3, #2
 800206e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	f043 0301 	orr.w	r3, r3, #1
 8002076:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	697a      	ldr	r2, [r7, #20]
 800207e:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8002080:	f7ff fa74 	bl	800156c <HAL_GetTick>
 8002084:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002086:	e00d      	b.n	80020a4 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8002088:	f7ff fa70 	bl	800156c <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002096:	d301      	bcc.n	800209c <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e010      	b.n	80020be <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	691b      	ldr	r3, [r3, #16]
 80020a2:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d1ec      	bne.n	8002088 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	695b      	ldr	r3, [r3, #20]
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	461a      	mov	r2, r3
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3718      	adds	r7, #24
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b086      	sub	sp, #24
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	60f8      	str	r0, [r7, #12]
 80020ce:	60b9      	str	r1, [r7, #8]
 80020d0:	607a      	str	r2, [r7, #4]
 80020d2:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	f003 031c 	and.w	r3, r3, #28
 80020e2:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	02db      	lsls	r3, r3, #11
 80020e8:	b29b      	uxth	r3, r3
 80020ea:	697a      	ldr	r2, [r7, #20]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	019b      	lsls	r3, r3, #6
 80020f4:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80020f8:	697a      	ldr	r2, [r7, #20]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	f043 0302 	orr.w	r3, r3, #2
 8002104:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	f043 0301 	orr.w	r3, r3, #1
 800210c:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	b29a      	uxth	r2, r3
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	697a      	ldr	r2, [r7, #20]
 800211e:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002120:	f7ff fa24 	bl	800156c <HAL_GetTick>
 8002124:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002126:	e00d      	b.n	8002144 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8002128:	f7ff fa20 	bl	800156c <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002136:	d301      	bcc.n	800213c <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e009      	b.n	8002150 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	f003 0301 	and.w	r3, r3, #1
 800214a:	2b00      	cmp	r3, #0
 800214c:	d1ec      	bne.n	8002128 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 800214e:	2300      	movs	r3, #0
}
 8002150:	4618      	mov	r0, r3
 8002152:	3718      	adds	r7, #24
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}

08002158 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d101      	bne.n	800216c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e0d9      	b.n	8002320 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0310 	and.w	r3, r3, #16
 8002176:	2b00      	cmp	r3, #0
 8002178:	bf14      	ite	ne
 800217a:	2301      	movne	r3, #1
 800217c:	2300      	moveq	r3, #0
 800217e:	b2db      	uxtb	r3, r3
 8002180:	461a      	mov	r2, r3
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	bf0c      	ite	eq
 80021a4:	2301      	moveq	r3, #1
 80021a6:	2300      	movne	r3, #0
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	461a      	mov	r2, r3
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 80021bc:	2b00      	cmp	r3, #0
 80021be:	bf14      	ite	ne
 80021c0:	2301      	movne	r3, #1
 80021c2:	2300      	moveq	r3, #0
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	bf0c      	ite	eq
 80021da:	2301      	moveq	r3, #1
 80021dc:	2300      	movne	r3, #0
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	461a      	mov	r2, r3
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	bf14      	ite	ne
 80021f4:	2301      	movne	r3, #1
 80021f6:	2300      	moveq	r3, #0
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	461a      	mov	r2, r3
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002226:	2b00      	cmp	r3, #0
 8002228:	bf0c      	ite	eq
 800222a:	2301      	moveq	r3, #1
 800222c:	2300      	movne	r3, #0
 800222e:	b2db      	uxtb	r3, r3
 8002230:	461a      	mov	r2, r3
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002240:	2b00      	cmp	r3, #0
 8002242:	bf0c      	ite	eq
 8002244:	2301      	moveq	r3, #1
 8002246:	2300      	movne	r3, #0
 8002248:	b2db      	uxtb	r3, r3
 800224a:	461a      	mov	r2, r3
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800225a:	2b00      	cmp	r3, #0
 800225c:	bf14      	ite	ne
 800225e:	2301      	movne	r3, #1
 8002260:	2300      	moveq	r3, #0
 8002262:	b2db      	uxtb	r3, r3
 8002264:	461a      	mov	r2, r3
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002282:	2b00      	cmp	r3, #0
 8002284:	bf14      	ite	ne
 8002286:	2301      	movne	r3, #1
 8002288:	2300      	moveq	r3, #0
 800228a:	b2db      	uxtb	r3, r3
 800228c:	461a      	mov	r2, r3
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	699b      	ldr	r3, [r3, #24]
 8002298:	f003 0302 	and.w	r3, r3, #2
 800229c:	2b00      	cmp	r3, #0
 800229e:	bf14      	ite	ne
 80022a0:	2301      	movne	r3, #1
 80022a2:	2300      	moveq	r3, #0
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	461a      	mov	r2, r3
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	699b      	ldr	r3, [r3, #24]
 80022b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	bf0c      	ite	eq
 80022bc:	2301      	moveq	r3, #1
 80022be:	2300      	movne	r3, #0
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	461a      	mov	r2, r3
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	f003 0230 	and.w	r2, r3, #48	; 0x30
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	699b      	ldr	r3, [r3, #24]
 80022de:	0c1b      	lsrs	r3, r3, #16
 80022e0:	b29a      	uxth	r2, r3
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	f003 0304 	and.w	r3, r3, #4
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	bf14      	ite	ne
 80022f4:	2301      	movne	r3, #1
 80022f6:	2300      	moveq	r3, #0
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	461a      	mov	r2, r3
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 800230c:	2b00      	cmp	r3, #0
 800230e:	bf14      	ite	ne
 8002310:	2301      	movne	r3, #1
 8002312:	2300      	moveq	r3, #0
 8002314:	b2db      	uxtb	r3, r3
 8002316:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 800231e:	2300      	movs	r3, #0
}
 8002320:	4618      	mov	r0, r3
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d101      	bne.n	8002340 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e00b      	b.n	8002358 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002346:	2b10      	cmp	r3, #16
 8002348:	d105      	bne.n	8002356 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800234a:	6839      	ldr	r1, [r7, #0]
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f000 f88f 	bl	8002470 <ETH_SetMACConfig>

    return HAL_OK;
 8002352:	2300      	movs	r3, #0
 8002354:	e000      	b.n	8002358 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
  }
}
 8002358:	4618      	mov	r0, r3
 800235a:	3708      	adds	r7, #8
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	691b      	ldr	r3, [r3, #16]
 800236e:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f023 031c 	bic.w	r3, r3, #28
 8002376:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002378:	f001 fa84 	bl	8003884 <HAL_RCC_GetHCLKFreq>
 800237c:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	4a1d      	ldr	r2, [pc, #116]	; (80023f8 <HAL_ETH_SetMDIOClockRange+0x98>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d908      	bls.n	8002398 <HAL_ETH_SetMDIOClockRange+0x38>
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	4a1c      	ldr	r2, [pc, #112]	; (80023fc <HAL_ETH_SetMDIOClockRange+0x9c>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d804      	bhi.n	8002398 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	f043 0308 	orr.w	r3, r3, #8
 8002394:	60fb      	str	r3, [r7, #12]
 8002396:	e027      	b.n	80023e8 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	4a18      	ldr	r2, [pc, #96]	; (80023fc <HAL_ETH_SetMDIOClockRange+0x9c>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d908      	bls.n	80023b2 <HAL_ETH_SetMDIOClockRange+0x52>
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	4a17      	ldr	r2, [pc, #92]	; (8002400 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d204      	bcs.n	80023b2 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f043 030c 	orr.w	r3, r3, #12
 80023ae:	60fb      	str	r3, [r7, #12]
 80023b0:	e01a      	b.n	80023e8 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	4a12      	ldr	r2, [pc, #72]	; (8002400 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d303      	bcc.n	80023c2 <HAL_ETH_SetMDIOClockRange+0x62>
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	4a11      	ldr	r2, [pc, #68]	; (8002404 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d911      	bls.n	80023e6 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	4a0f      	ldr	r2, [pc, #60]	; (8002404 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d908      	bls.n	80023dc <HAL_ETH_SetMDIOClockRange+0x7c>
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	4a0e      	ldr	r2, [pc, #56]	; (8002408 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d804      	bhi.n	80023dc <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	f043 0304 	orr.w	r3, r3, #4
 80023d8:	60fb      	str	r3, [r7, #12]
 80023da:	e005      	b.n	80023e8 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f043 0310 	orr.w	r3, r3, #16
 80023e2:	60fb      	str	r3, [r7, #12]
 80023e4:	e000      	b.n	80023e8 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80023e6:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	68fa      	ldr	r2, [r7, #12]
 80023ee:	611a      	str	r2, [r3, #16]
}
 80023f0:	bf00      	nop
 80023f2:	3710      	adds	r7, #16
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	01312cff 	.word	0x01312cff
 80023fc:	02160ebf 	.word	0x02160ebf
 8002400:	03938700 	.word	0x03938700
 8002404:	05f5e0ff 	.word	0x05f5e0ff
 8002408:	08f0d17f 	.word	0x08f0d17f

0800240c <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 800241a:	4618      	mov	r0, r3
 800241c:	370c      	adds	r7, #12
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr

08002426 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b084      	sub	sp, #16
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800242e:	2300      	movs	r3, #0
 8002430:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800243a:	699b      	ldr	r3, [r3, #24]
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	6812      	ldr	r2, [r2, #0]
 8002440:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002444:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002448:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002452:	699b      	ldr	r3, [r3, #24]
 8002454:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002456:	2001      	movs	r0, #1
 8002458:	f7ff f894 	bl	8001584 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002466:	6193      	str	r3, [r2, #24]
}
 8002468:	bf00      	nop
 800246a:	3710      	adds	r7, #16
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}

08002470 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002482:	68fa      	ldr	r2, [r7, #12]
 8002484:	4b51      	ldr	r3, [pc, #324]	; (80025cc <ETH_SetMACConfig+0x15c>)
 8002486:	4013      	ands	r3, r2
 8002488:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	7c1b      	ldrb	r3, [r3, #16]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d102      	bne.n	8002498 <ETH_SetMACConfig+0x28>
 8002492:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002496:	e000      	b.n	800249a <ETH_SetMACConfig+0x2a>
 8002498:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	7c5b      	ldrb	r3, [r3, #17]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d102      	bne.n	80024a8 <ETH_SetMACConfig+0x38>
 80024a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80024a6:	e000      	b.n	80024aa <ETH_SetMACConfig+0x3a>
 80024a8:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80024aa:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80024b0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	7fdb      	ldrb	r3, [r3, #31]
 80024b6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80024b8:	431a      	orrs	r2, r3
                        macconf->Speed |
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80024be:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80024c0:	683a      	ldr	r2, [r7, #0]
 80024c2:	7f92      	ldrb	r2, [r2, #30]
 80024c4:	2a00      	cmp	r2, #0
 80024c6:	d102      	bne.n	80024ce <ETH_SetMACConfig+0x5e>
 80024c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024cc:	e000      	b.n	80024d0 <ETH_SetMACConfig+0x60>
 80024ce:	2200      	movs	r2, #0
                        macconf->Speed |
 80024d0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	7f1b      	ldrb	r3, [r3, #28]
 80024d6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80024d8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80024de:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	791b      	ldrb	r3, [r3, #4]
 80024e4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80024e6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80024e8:	683a      	ldr	r2, [r7, #0]
 80024ea:	f892 2020 	ldrb.w	r2, [r2, #32]
 80024ee:	2a00      	cmp	r2, #0
 80024f0:	d102      	bne.n	80024f8 <ETH_SetMACConfig+0x88>
 80024f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024f6:	e000      	b.n	80024fa <ETH_SetMACConfig+0x8a>
 80024f8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80024fa:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	7bdb      	ldrb	r3, [r3, #15]
 8002500:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002502:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002508:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002510:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002512:	4313      	orrs	r3, r2
 8002514:	68fa      	ldr	r2, [r7, #12]
 8002516:	4313      	orrs	r3, r2
 8002518:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800252a:	2001      	movs	r0, #1
 800252c:	f7ff f82a 	bl	8001584 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	68fa      	ldr	r2, [r7, #12]
 8002536:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	699b      	ldr	r3, [r3, #24]
 800253e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002540:	68fa      	ldr	r2, [r7, #12]
 8002542:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002546:	4013      	ands	r3, r2
 8002548:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800254e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002550:	683a      	ldr	r2, [r7, #0]
 8002552:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002556:	2a00      	cmp	r2, #0
 8002558:	d101      	bne.n	800255e <ETH_SetMACConfig+0xee>
 800255a:	2280      	movs	r2, #128	; 0x80
 800255c:	e000      	b.n	8002560 <ETH_SetMACConfig+0xf0>
 800255e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002560:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002566:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002568:	683a      	ldr	r2, [r7, #0]
 800256a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800256e:	2a01      	cmp	r2, #1
 8002570:	d101      	bne.n	8002576 <ETH_SetMACConfig+0x106>
 8002572:	2208      	movs	r2, #8
 8002574:	e000      	b.n	8002578 <ETH_SetMACConfig+0x108>
 8002576:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002578:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800257a:	683a      	ldr	r2, [r7, #0]
 800257c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002580:	2a01      	cmp	r2, #1
 8002582:	d101      	bne.n	8002588 <ETH_SetMACConfig+0x118>
 8002584:	2204      	movs	r2, #4
 8002586:	e000      	b.n	800258a <ETH_SetMACConfig+0x11a>
 8002588:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800258a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800258c:	683a      	ldr	r2, [r7, #0]
 800258e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002592:	2a01      	cmp	r2, #1
 8002594:	d101      	bne.n	800259a <ETH_SetMACConfig+0x12a>
 8002596:	2202      	movs	r2, #2
 8002598:	e000      	b.n	800259c <ETH_SetMACConfig+0x12c>
 800259a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800259c:	4313      	orrs	r3, r2
 800259e:	68fa      	ldr	r2, [r7, #12]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	68fa      	ldr	r2, [r7, #12]
 80025aa:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	699b      	ldr	r3, [r3, #24]
 80025b2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80025b4:	2001      	movs	r0, #1
 80025b6:	f7fe ffe5 	bl	8001584 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	619a      	str	r2, [r3, #24]
}
 80025c2:	bf00      	nop
 80025c4:	3710      	adds	r7, #16
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	ff20810f 	.word	0xff20810f

080025d0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025e2:	699b      	ldr	r3, [r3, #24]
 80025e4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80025e6:	68fa      	ldr	r2, [r7, #12]
 80025e8:	4b3d      	ldr	r3, [pc, #244]	; (80026e0 <ETH_SetDMAConfig+0x110>)
 80025ea:	4013      	ands	r3, r2
 80025ec:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	7b1b      	ldrb	r3, [r3, #12]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d102      	bne.n	80025fc <ETH_SetDMAConfig+0x2c>
 80025f6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80025fa:	e000      	b.n	80025fe <ETH_SetDMAConfig+0x2e>
 80025fc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	7b5b      	ldrb	r3, [r3, #13]
 8002602:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002604:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002606:	683a      	ldr	r2, [r7, #0]
 8002608:	7f52      	ldrb	r2, [r2, #29]
 800260a:	2a00      	cmp	r2, #0
 800260c:	d102      	bne.n	8002614 <ETH_SetDMAConfig+0x44>
 800260e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002612:	e000      	b.n	8002616 <ETH_SetDMAConfig+0x46>
 8002614:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002616:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	7b9b      	ldrb	r3, [r3, #14]
 800261c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800261e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002624:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	7f1b      	ldrb	r3, [r3, #28]
 800262a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800262c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	7f9b      	ldrb	r3, [r3, #30]
 8002632:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002634:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800263a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002642:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002644:	4313      	orrs	r3, r2
 8002646:	68fa      	ldr	r2, [r7, #12]
 8002648:	4313      	orrs	r3, r2
 800264a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002654:	461a      	mov	r2, r3
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002662:	699b      	ldr	r3, [r3, #24]
 8002664:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002666:	2001      	movs	r0, #1
 8002668:	f7fe ff8c 	bl	8001584 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002674:	461a      	mov	r2, r3
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	791b      	ldrb	r3, [r3, #4]
 800267e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002684:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800268a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002690:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002698:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800269a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80026a2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80026a8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	6812      	ldr	r2, [r2, #0]
 80026ae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80026b2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80026b6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80026c4:	2001      	movs	r0, #1
 80026c6:	f7fe ff5d 	bl	8001584 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026d2:	461a      	mov	r2, r3
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6013      	str	r3, [r2, #0]
}
 80026d8:	bf00      	nop
 80026da:	3710      	adds	r7, #16
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	f8de3f23 	.word	0xf8de3f23

080026e4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b0a6      	sub	sp, #152	; 0x98
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80026ec:	2301      	movs	r3, #1
 80026ee:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80026f2:	2301      	movs	r3, #1
 80026f4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80026f8:	2300      	movs	r3, #0
 80026fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80026fc:	2300      	movs	r3, #0
 80026fe:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002702:	2301      	movs	r3, #1
 8002704:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002708:	2300      	movs	r3, #0
 800270a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800270e:	2301      	movs	r3, #1
 8002710:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002714:	2300      	movs	r3, #0
 8002716:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800271a:	2300      	movs	r3, #0
 800271c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002720:	2300      	movs	r3, #0
 8002722:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002724:	2300      	movs	r3, #0
 8002726:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800272a:	2300      	movs	r3, #0
 800272c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800272e:	2300      	movs	r3, #0
 8002730:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002734:	2300      	movs	r3, #0
 8002736:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800273a:	2300      	movs	r3, #0
 800273c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002740:	2300      	movs	r3, #0
 8002742:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002746:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800274a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800274c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002750:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002752:	2300      	movs	r3, #0
 8002754:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002758:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800275c:	4619      	mov	r1, r3
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f7ff fe86 	bl	8002470 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002764:	2301      	movs	r3, #1
 8002766:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002768:	2301      	movs	r3, #1
 800276a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800276c:	2301      	movs	r3, #1
 800276e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002772:	2301      	movs	r3, #1
 8002774:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002776:	2300      	movs	r3, #0
 8002778:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800277a:	2300      	movs	r3, #0
 800277c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002780:	2300      	movs	r3, #0
 8002782:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002786:	2300      	movs	r3, #0
 8002788:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800278a:	2301      	movs	r3, #1
 800278c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002790:	2301      	movs	r3, #1
 8002792:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002794:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002798:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800279a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800279e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80027a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027a4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80027a6:	2301      	movs	r3, #1
 80027a8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80027ac:	2300      	movs	r3, #0
 80027ae:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80027b0:	2300      	movs	r3, #0
 80027b2:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80027b4:	f107 0308 	add.w	r3, r7, #8
 80027b8:	4619      	mov	r1, r3
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f7ff ff08 	bl	80025d0 <ETH_SetDMAConfig>
}
 80027c0:	bf00      	nop
 80027c2:	3798      	adds	r7, #152	; 0x98
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b087      	sub	sp, #28
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	3305      	adds	r3, #5
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	021b      	lsls	r3, r3, #8
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	3204      	adds	r2, #4
 80027e0:	7812      	ldrb	r2, [r2, #0]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80027e6:	68ba      	ldr	r2, [r7, #8]
 80027e8:	4b11      	ldr	r3, [pc, #68]	; (8002830 <ETH_MACAddressConfig+0x68>)
 80027ea:	4413      	add	r3, r2
 80027ec:	461a      	mov	r2, r3
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	3303      	adds	r3, #3
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	061a      	lsls	r2, r3, #24
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	3302      	adds	r3, #2
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	041b      	lsls	r3, r3, #16
 8002802:	431a      	orrs	r2, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	3301      	adds	r3, #1
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	021b      	lsls	r3, r3, #8
 800280c:	4313      	orrs	r3, r2
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	7812      	ldrb	r2, [r2, #0]
 8002812:	4313      	orrs	r3, r2
 8002814:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002816:	68ba      	ldr	r2, [r7, #8]
 8002818:	4b06      	ldr	r3, [pc, #24]	; (8002834 <ETH_MACAddressConfig+0x6c>)
 800281a:	4413      	add	r3, r2
 800281c:	461a      	mov	r2, r3
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	6013      	str	r3, [r2, #0]
}
 8002822:	bf00      	nop
 8002824:	371c      	adds	r7, #28
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	40028040 	.word	0x40028040
 8002834:	40028044 	.word	0x40028044

08002838 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002838:	b480      	push	{r7}
 800283a:	b085      	sub	sp, #20
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002840:	2300      	movs	r3, #0
 8002842:	60fb      	str	r3, [r7, #12]
 8002844:	e03e      	b.n	80028c4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	68d9      	ldr	r1, [r3, #12]
 800284a:	68fa      	ldr	r2, [r7, #12]
 800284c:	4613      	mov	r3, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	4413      	add	r3, r2
 8002852:	00db      	lsls	r3, r3, #3
 8002854:	440b      	add	r3, r1
 8002856:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	2200      	movs	r2, #0
 800285c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	2200      	movs	r2, #0
 8002862:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	2200      	movs	r2, #0
 8002868:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	2200      	movs	r2, #0
 800286e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002870:	68b9      	ldr	r1, [r7, #8]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	68fa      	ldr	r2, [r7, #12]
 8002876:	3206      	adds	r2, #6
 8002878:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2b02      	cmp	r3, #2
 800288c:	d80c      	bhi.n	80028a8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	68d9      	ldr	r1, [r3, #12]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	1c5a      	adds	r2, r3, #1
 8002896:	4613      	mov	r3, r2
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	4413      	add	r3, r2
 800289c:	00db      	lsls	r3, r3, #3
 800289e:	440b      	add	r3, r1
 80028a0:	461a      	mov	r2, r3
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	60da      	str	r2, [r3, #12]
 80028a6:	e004      	b.n	80028b2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	461a      	mov	r2, r3
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	3301      	adds	r3, #1
 80028c2:	60fb      	str	r3, [r7, #12]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2b03      	cmp	r3, #3
 80028c8:	d9bd      	bls.n	8002846 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	68da      	ldr	r2, [r3, #12]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028dc:	611a      	str	r2, [r3, #16]
}
 80028de:	bf00      	nop
 80028e0:	3714      	adds	r7, #20
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr

080028ea <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80028ea:	b480      	push	{r7}
 80028ec:	b085      	sub	sp, #20
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80028f2:	2300      	movs	r3, #0
 80028f4:	60fb      	str	r3, [r7, #12]
 80028f6:	e046      	b.n	8002986 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6919      	ldr	r1, [r3, #16]
 80028fc:	68fa      	ldr	r2, [r7, #12]
 80028fe:	4613      	mov	r3, r2
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	4413      	add	r3, r2
 8002904:	00db      	lsls	r3, r3, #3
 8002906:	440b      	add	r3, r1
 8002908:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	2200      	movs	r2, #0
 800290e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	2200      	movs	r2, #0
 8002914:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	2200      	movs	r2, #0
 800291a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	2200      	movs	r2, #0
 8002920:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	2200      	movs	r2, #0
 8002926:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	2200      	movs	r2, #0
 800292c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002934:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 800293c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800294a:	68b9      	ldr	r1, [r7, #8]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	68fa      	ldr	r2, [r7, #12]
 8002950:	3212      	adds	r2, #18
 8002952:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2b02      	cmp	r3, #2
 800295a:	d80c      	bhi.n	8002976 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6919      	ldr	r1, [r3, #16]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	1c5a      	adds	r2, r3, #1
 8002964:	4613      	mov	r3, r2
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	4413      	add	r3, r2
 800296a:	00db      	lsls	r3, r3, #3
 800296c:	440b      	add	r3, r1
 800296e:	461a      	mov	r2, r3
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	60da      	str	r2, [r3, #12]
 8002974:	e004      	b.n	8002980 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	691b      	ldr	r3, [r3, #16]
 800297a:	461a      	mov	r2, r3
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	3301      	adds	r3, #1
 8002984:	60fb      	str	r3, [r7, #12]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2b03      	cmp	r3, #3
 800298a:	d9b5      	bls.n	80028f8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	691a      	ldr	r2, [r3, #16]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029b6:	60da      	str	r2, [r3, #12]
}
 80029b8:	bf00      	nop
 80029ba:	3714      	adds	r7, #20
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b08d      	sub	sp, #52	; 0x34
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	3318      	adds	r3, #24
 80029d4:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80029e2:	2300      	movs	r3, #0
 80029e4:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029ee:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80029f6:	2300      	movs	r3, #0
 80029f8:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80029fa:	6a3b      	ldr	r3, [r7, #32]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002a02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a06:	d007      	beq.n	8002a18 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002a08:	697a      	ldr	r2, [r7, #20]
 8002a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a0c:	3304      	adds	r3, #4
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	4413      	add	r3, r2
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d001      	beq.n	8002a1c <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002a18:	2302      	movs	r3, #2
 8002a1a:	e103      	b.n	8002c24 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 8002a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1e:	3301      	adds	r3, #1
 8002a20:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	461a      	mov	r2, r3
 8002a28:	6a3b      	ldr	r3, [r7, #32]
 8002a2a:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002a2c:	6a3b      	ldr	r3, [r7, #32]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8002a34:	f023 031f 	bic.w	r3, r3, #31
 8002a38:	69fa      	ldr	r2, [r7, #28]
 8002a3a:	6852      	ldr	r2, [r2, #4]
 8002a3c:	431a      	orrs	r2, r3
 8002a3e:	6a3b      	ldr	r3, [r7, #32]
 8002a40:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d008      	beq.n	8002a60 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002a4e:	6a3b      	ldr	r3, [r7, #32]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	695b      	ldr	r3, [r3, #20]
 8002a5a:	431a      	orrs	r2, r3
 8002a5c:	6a3b      	ldr	r3, [r7, #32]
 8002a5e:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0320 	and.w	r3, r3, #32
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d008      	beq.n	8002a7e <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002a6c:	6a3b      	ldr	r3, [r7, #32]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	691b      	ldr	r3, [r3, #16]
 8002a78:	431a      	orrs	r2, r3
 8002a7a:	6a3b      	ldr	r3, [r7, #32]
 8002a7c:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0304 	and.w	r3, r3, #4
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d005      	beq.n	8002a96 <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002a8a:	6a3b      	ldr	r3, [r7, #32]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002a92:	6a3b      	ldr	r3, [r7, #32]
 8002a94:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002a96:	6a3b      	ldr	r3, [r7, #32]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002a9e:	6a3b      	ldr	r3, [r7, #32]
 8002aa0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8002aa2:	f3bf 8f5f 	dmb	sy
}
 8002aa6:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002aa8:	6a3b      	ldr	r3, [r7, #32]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002ab0:	6a3b      	ldr	r3, [r7, #32]
 8002ab2:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002ab4:	e084      	b.n	8002bc0 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002ab6:	6a3b      	ldr	r3, [r7, #32]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002abe:	6a3b      	ldr	r3, [r7, #32]
 8002ac0:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d006      	beq.n	8002ad6 <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002ac8:	6a3b      	ldr	r3, [r7, #32]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002ad0:	6a3b      	ldr	r3, [r7, #32]
 8002ad2:	601a      	str	r2, [r3, #0]
 8002ad4:	e005      	b.n	8002ae2 <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002ad6:	6a3b      	ldr	r3, [r7, #32]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002ade:	6a3b      	ldr	r3, [r7, #32]
 8002ae0:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aea:	2b03      	cmp	r3, #3
 8002aec:	d902      	bls.n	8002af4 <ETH_Prepare_Tx_Descriptors+0x130>
 8002aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002af0:	3b04      	subs	r3, #4
 8002af2:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002af8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002afc:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002afe:	6a3b      	ldr	r3, [r7, #32]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002b06:	6a3b      	ldr	r3, [r7, #32]
 8002b08:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002b0a:	6a3b      	ldr	r3, [r7, #32]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002b12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b16:	d007      	beq.n	8002b28 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002b18:	697a      	ldr	r2, [r7, #20]
 8002b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b1c:	3304      	adds	r3, #4
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	4413      	add	r3, r2
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d029      	beq.n	8002b7c <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b34:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002b36:	2300      	movs	r3, #0
 8002b38:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b3a:	e019      	b.n	8002b70 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 8002b3c:	f3bf 8f5f 	dmb	sy
}
 8002b40:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002b42:	6a3b      	ldr	r3, [r7, #32]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b4a:	6a3b      	ldr	r3, [r7, #32]
 8002b4c:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b50:	3301      	adds	r3, #1
 8002b52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b56:	2b03      	cmp	r3, #3
 8002b58:	d902      	bls.n	8002b60 <ETH_Prepare_Tx_Descriptors+0x19c>
 8002b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b5c:	3b04      	subs	r3, #4
 8002b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b68:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d3e1      	bcc.n	8002b3c <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 8002b78:	2302      	movs	r3, #2
 8002b7a:	e053      	b.n	8002c24 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 8002b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7e:	3301      	adds	r3, #1
 8002b80:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	6a3b      	ldr	r3, [r7, #32]
 8002b90:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002b92:	6a3b      	ldr	r3, [r7, #32]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8002b9a:	f023 031f 	bic.w	r3, r3, #31
 8002b9e:	69fa      	ldr	r2, [r7, #28]
 8002ba0:	6852      	ldr	r2, [r2, #4]
 8002ba2:	431a      	orrs	r2, r3
 8002ba4:	6a3b      	ldr	r3, [r7, #32]
 8002ba6:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	3301      	adds	r3, #1
 8002bac:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002bae:	f3bf 8f5f 	dmb	sy
}
 8002bb2:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002bb4:	6a3b      	ldr	r3, [r7, #32]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002bbc:	6a3b      	ldr	r3, [r7, #32]
 8002bbe:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	f47f af76 	bne.w	8002ab6 <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d006      	beq.n	8002bde <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002bd0:	6a3b      	ldr	r3, [r7, #32]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002bd8:	6a3b      	ldr	r3, [r7, #32]
 8002bda:	601a      	str	r2, [r3, #0]
 8002bdc:	e005      	b.n	8002bea <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002bde:	6a3b      	ldr	r3, [r7, #32]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002be6:	6a3b      	ldr	r3, [r7, #32]
 8002be8:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002bea:	6a3b      	ldr	r3, [r7, #32]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002bf2:	6a3b      	ldr	r3, [r7, #32]
 8002bf4:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bfa:	6979      	ldr	r1, [r7, #20]
 8002bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bfe:	3304      	adds	r3, #4
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	440b      	add	r3, r1
 8002c04:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c0a:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002c0c:	b672      	cpsid	i
}
 8002c0e:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	4413      	add	r3, r2
 8002c18:	1c5a      	adds	r2, r3, #1
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8002c1e:	b662      	cpsie	i
}
 8002c20:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3734      	adds	r7, #52	; 0x34
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b089      	sub	sp, #36	; 0x24
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c42:	2300      	movs	r3, #0
 8002c44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c46:	2300      	movs	r3, #0
 8002c48:	61fb      	str	r3, [r7, #28]
 8002c4a:	e177      	b.n	8002f3c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	fa02 f303 	lsl.w	r3, r2, r3
 8002c54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	697a      	ldr	r2, [r7, #20]
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c60:	693a      	ldr	r2, [r7, #16]
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	f040 8166 	bne.w	8002f36 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f003 0303 	and.w	r3, r3, #3
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d005      	beq.n	8002c82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d130      	bne.n	8002ce4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	005b      	lsls	r3, r3, #1
 8002c8c:	2203      	movs	r2, #3
 8002c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c92:	43db      	mvns	r3, r3
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	4013      	ands	r3, r2
 8002c98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	68da      	ldr	r2, [r3, #12]
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	005b      	lsls	r3, r3, #1
 8002ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca6:	69ba      	ldr	r2, [r7, #24]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	69ba      	ldr	r2, [r7, #24]
 8002cb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cb8:	2201      	movs	r2, #1
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc0:	43db      	mvns	r3, r3
 8002cc2:	69ba      	ldr	r2, [r7, #24]
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	091b      	lsrs	r3, r3, #4
 8002cce:	f003 0201 	and.w	r2, r3, #1
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f003 0303 	and.w	r3, r3, #3
 8002cec:	2b03      	cmp	r3, #3
 8002cee:	d017      	beq.n	8002d20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	005b      	lsls	r3, r3, #1
 8002cfa:	2203      	movs	r2, #3
 8002cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002d00:	43db      	mvns	r3, r3
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	4013      	ands	r3, r2
 8002d06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	689a      	ldr	r2, [r3, #8]
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	005b      	lsls	r3, r3, #1
 8002d10:	fa02 f303 	lsl.w	r3, r2, r3
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	69ba      	ldr	r2, [r7, #24]
 8002d1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f003 0303 	and.w	r3, r3, #3
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d123      	bne.n	8002d74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	08da      	lsrs	r2, r3, #3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	3208      	adds	r2, #8
 8002d34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	f003 0307 	and.w	r3, r3, #7
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	220f      	movs	r2, #15
 8002d44:	fa02 f303 	lsl.w	r3, r2, r3
 8002d48:	43db      	mvns	r3, r3
 8002d4a:	69ba      	ldr	r2, [r7, #24]
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	691a      	ldr	r2, [r3, #16]
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	f003 0307 	and.w	r3, r3, #7
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	08da      	lsrs	r2, r3, #3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	3208      	adds	r2, #8
 8002d6e:	69b9      	ldr	r1, [r7, #24]
 8002d70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	005b      	lsls	r3, r3, #1
 8002d7e:	2203      	movs	r2, #3
 8002d80:	fa02 f303 	lsl.w	r3, r2, r3
 8002d84:	43db      	mvns	r3, r3
 8002d86:	69ba      	ldr	r2, [r7, #24]
 8002d88:	4013      	ands	r3, r2
 8002d8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f003 0203 	and.w	r2, r3, #3
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	005b      	lsls	r3, r3, #1
 8002d98:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9c:	69ba      	ldr	r2, [r7, #24]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	69ba      	ldr	r2, [r7, #24]
 8002da6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	f000 80c0 	beq.w	8002f36 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002db6:	2300      	movs	r3, #0
 8002db8:	60fb      	str	r3, [r7, #12]
 8002dba:	4b66      	ldr	r3, [pc, #408]	; (8002f54 <HAL_GPIO_Init+0x324>)
 8002dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dbe:	4a65      	ldr	r2, [pc, #404]	; (8002f54 <HAL_GPIO_Init+0x324>)
 8002dc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dc4:	6453      	str	r3, [r2, #68]	; 0x44
 8002dc6:	4b63      	ldr	r3, [pc, #396]	; (8002f54 <HAL_GPIO_Init+0x324>)
 8002dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dce:	60fb      	str	r3, [r7, #12]
 8002dd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002dd2:	4a61      	ldr	r2, [pc, #388]	; (8002f58 <HAL_GPIO_Init+0x328>)
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	089b      	lsrs	r3, r3, #2
 8002dd8:	3302      	adds	r3, #2
 8002dda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	f003 0303 	and.w	r3, r3, #3
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	220f      	movs	r2, #15
 8002dea:	fa02 f303 	lsl.w	r3, r2, r3
 8002dee:	43db      	mvns	r3, r3
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	4013      	ands	r3, r2
 8002df4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a58      	ldr	r2, [pc, #352]	; (8002f5c <HAL_GPIO_Init+0x32c>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d037      	beq.n	8002e6e <HAL_GPIO_Init+0x23e>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a57      	ldr	r2, [pc, #348]	; (8002f60 <HAL_GPIO_Init+0x330>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d031      	beq.n	8002e6a <HAL_GPIO_Init+0x23a>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a56      	ldr	r2, [pc, #344]	; (8002f64 <HAL_GPIO_Init+0x334>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d02b      	beq.n	8002e66 <HAL_GPIO_Init+0x236>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a55      	ldr	r2, [pc, #340]	; (8002f68 <HAL_GPIO_Init+0x338>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d025      	beq.n	8002e62 <HAL_GPIO_Init+0x232>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a54      	ldr	r2, [pc, #336]	; (8002f6c <HAL_GPIO_Init+0x33c>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d01f      	beq.n	8002e5e <HAL_GPIO_Init+0x22e>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a53      	ldr	r2, [pc, #332]	; (8002f70 <HAL_GPIO_Init+0x340>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d019      	beq.n	8002e5a <HAL_GPIO_Init+0x22a>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a52      	ldr	r2, [pc, #328]	; (8002f74 <HAL_GPIO_Init+0x344>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d013      	beq.n	8002e56 <HAL_GPIO_Init+0x226>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a51      	ldr	r2, [pc, #324]	; (8002f78 <HAL_GPIO_Init+0x348>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d00d      	beq.n	8002e52 <HAL_GPIO_Init+0x222>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a50      	ldr	r2, [pc, #320]	; (8002f7c <HAL_GPIO_Init+0x34c>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d007      	beq.n	8002e4e <HAL_GPIO_Init+0x21e>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a4f      	ldr	r2, [pc, #316]	; (8002f80 <HAL_GPIO_Init+0x350>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d101      	bne.n	8002e4a <HAL_GPIO_Init+0x21a>
 8002e46:	2309      	movs	r3, #9
 8002e48:	e012      	b.n	8002e70 <HAL_GPIO_Init+0x240>
 8002e4a:	230a      	movs	r3, #10
 8002e4c:	e010      	b.n	8002e70 <HAL_GPIO_Init+0x240>
 8002e4e:	2308      	movs	r3, #8
 8002e50:	e00e      	b.n	8002e70 <HAL_GPIO_Init+0x240>
 8002e52:	2307      	movs	r3, #7
 8002e54:	e00c      	b.n	8002e70 <HAL_GPIO_Init+0x240>
 8002e56:	2306      	movs	r3, #6
 8002e58:	e00a      	b.n	8002e70 <HAL_GPIO_Init+0x240>
 8002e5a:	2305      	movs	r3, #5
 8002e5c:	e008      	b.n	8002e70 <HAL_GPIO_Init+0x240>
 8002e5e:	2304      	movs	r3, #4
 8002e60:	e006      	b.n	8002e70 <HAL_GPIO_Init+0x240>
 8002e62:	2303      	movs	r3, #3
 8002e64:	e004      	b.n	8002e70 <HAL_GPIO_Init+0x240>
 8002e66:	2302      	movs	r3, #2
 8002e68:	e002      	b.n	8002e70 <HAL_GPIO_Init+0x240>
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e000      	b.n	8002e70 <HAL_GPIO_Init+0x240>
 8002e6e:	2300      	movs	r3, #0
 8002e70:	69fa      	ldr	r2, [r7, #28]
 8002e72:	f002 0203 	and.w	r2, r2, #3
 8002e76:	0092      	lsls	r2, r2, #2
 8002e78:	4093      	lsls	r3, r2
 8002e7a:	69ba      	ldr	r2, [r7, #24]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e80:	4935      	ldr	r1, [pc, #212]	; (8002f58 <HAL_GPIO_Init+0x328>)
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	089b      	lsrs	r3, r3, #2
 8002e86:	3302      	adds	r3, #2
 8002e88:	69ba      	ldr	r2, [r7, #24]
 8002e8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e8e:	4b3d      	ldr	r3, [pc, #244]	; (8002f84 <HAL_GPIO_Init+0x354>)
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	43db      	mvns	r3, r3
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d003      	beq.n	8002eb2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002eaa:	69ba      	ldr	r2, [r7, #24]
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002eb2:	4a34      	ldr	r2, [pc, #208]	; (8002f84 <HAL_GPIO_Init+0x354>)
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002eb8:	4b32      	ldr	r3, [pc, #200]	; (8002f84 <HAL_GPIO_Init+0x354>)
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	43db      	mvns	r3, r3
 8002ec2:	69ba      	ldr	r2, [r7, #24]
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d003      	beq.n	8002edc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002ed4:	69ba      	ldr	r2, [r7, #24]
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002edc:	4a29      	ldr	r2, [pc, #164]	; (8002f84 <HAL_GPIO_Init+0x354>)
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ee2:	4b28      	ldr	r3, [pc, #160]	; (8002f84 <HAL_GPIO_Init+0x354>)
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	43db      	mvns	r3, r3
 8002eec:	69ba      	ldr	r2, [r7, #24]
 8002eee:	4013      	ands	r3, r2
 8002ef0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d003      	beq.n	8002f06 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002efe:	69ba      	ldr	r2, [r7, #24]
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f06:	4a1f      	ldr	r2, [pc, #124]	; (8002f84 <HAL_GPIO_Init+0x354>)
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f0c:	4b1d      	ldr	r3, [pc, #116]	; (8002f84 <HAL_GPIO_Init+0x354>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	43db      	mvns	r3, r3
 8002f16:	69ba      	ldr	r2, [r7, #24]
 8002f18:	4013      	ands	r3, r2
 8002f1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d003      	beq.n	8002f30 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002f28:	69ba      	ldr	r2, [r7, #24]
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f30:	4a14      	ldr	r2, [pc, #80]	; (8002f84 <HAL_GPIO_Init+0x354>)
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	3301      	adds	r3, #1
 8002f3a:	61fb      	str	r3, [r7, #28]
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	2b0f      	cmp	r3, #15
 8002f40:	f67f ae84 	bls.w	8002c4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f44:	bf00      	nop
 8002f46:	bf00      	nop
 8002f48:	3724      	adds	r7, #36	; 0x24
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	40023800 	.word	0x40023800
 8002f58:	40013800 	.word	0x40013800
 8002f5c:	40020000 	.word	0x40020000
 8002f60:	40020400 	.word	0x40020400
 8002f64:	40020800 	.word	0x40020800
 8002f68:	40020c00 	.word	0x40020c00
 8002f6c:	40021000 	.word	0x40021000
 8002f70:	40021400 	.word	0x40021400
 8002f74:	40021800 	.word	0x40021800
 8002f78:	40021c00 	.word	0x40021c00
 8002f7c:	40022000 	.word	0x40022000
 8002f80:	40022400 	.word	0x40022400
 8002f84:	40013c00 	.word	0x40013c00

08002f88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	460b      	mov	r3, r1
 8002f92:	807b      	strh	r3, [r7, #2]
 8002f94:	4613      	mov	r3, r2
 8002f96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f98:	787b      	ldrb	r3, [r7, #1]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d003      	beq.n	8002fa6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f9e:	887a      	ldrh	r2, [r7, #2]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002fa4:	e003      	b.n	8002fae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002fa6:	887b      	ldrh	r3, [r7, #2]
 8002fa8:	041a      	lsls	r2, r3, #16
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	619a      	str	r2, [r3, #24]
}
 8002fae:	bf00      	nop
 8002fb0:	370c      	adds	r7, #12
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
	...

08002fbc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b086      	sub	sp, #24
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d101      	bne.n	8002fce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e267      	b.n	800349e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0301 	and.w	r3, r3, #1
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d075      	beq.n	80030c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fda:	4b88      	ldr	r3, [pc, #544]	; (80031fc <HAL_RCC_OscConfig+0x240>)
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f003 030c 	and.w	r3, r3, #12
 8002fe2:	2b04      	cmp	r3, #4
 8002fe4:	d00c      	beq.n	8003000 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fe6:	4b85      	ldr	r3, [pc, #532]	; (80031fc <HAL_RCC_OscConfig+0x240>)
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fee:	2b08      	cmp	r3, #8
 8002ff0:	d112      	bne.n	8003018 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ff2:	4b82      	ldr	r3, [pc, #520]	; (80031fc <HAL_RCC_OscConfig+0x240>)
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ffa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ffe:	d10b      	bne.n	8003018 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003000:	4b7e      	ldr	r3, [pc, #504]	; (80031fc <HAL_RCC_OscConfig+0x240>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d05b      	beq.n	80030c4 <HAL_RCC_OscConfig+0x108>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d157      	bne.n	80030c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e242      	b.n	800349e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003020:	d106      	bne.n	8003030 <HAL_RCC_OscConfig+0x74>
 8003022:	4b76      	ldr	r3, [pc, #472]	; (80031fc <HAL_RCC_OscConfig+0x240>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a75      	ldr	r2, [pc, #468]	; (80031fc <HAL_RCC_OscConfig+0x240>)
 8003028:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800302c:	6013      	str	r3, [r2, #0]
 800302e:	e01d      	b.n	800306c <HAL_RCC_OscConfig+0xb0>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003038:	d10c      	bne.n	8003054 <HAL_RCC_OscConfig+0x98>
 800303a:	4b70      	ldr	r3, [pc, #448]	; (80031fc <HAL_RCC_OscConfig+0x240>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a6f      	ldr	r2, [pc, #444]	; (80031fc <HAL_RCC_OscConfig+0x240>)
 8003040:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003044:	6013      	str	r3, [r2, #0]
 8003046:	4b6d      	ldr	r3, [pc, #436]	; (80031fc <HAL_RCC_OscConfig+0x240>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a6c      	ldr	r2, [pc, #432]	; (80031fc <HAL_RCC_OscConfig+0x240>)
 800304c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003050:	6013      	str	r3, [r2, #0]
 8003052:	e00b      	b.n	800306c <HAL_RCC_OscConfig+0xb0>
 8003054:	4b69      	ldr	r3, [pc, #420]	; (80031fc <HAL_RCC_OscConfig+0x240>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a68      	ldr	r2, [pc, #416]	; (80031fc <HAL_RCC_OscConfig+0x240>)
 800305a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800305e:	6013      	str	r3, [r2, #0]
 8003060:	4b66      	ldr	r3, [pc, #408]	; (80031fc <HAL_RCC_OscConfig+0x240>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a65      	ldr	r2, [pc, #404]	; (80031fc <HAL_RCC_OscConfig+0x240>)
 8003066:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800306a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d013      	beq.n	800309c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003074:	f7fe fa7a 	bl	800156c <HAL_GetTick>
 8003078:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800307a:	e008      	b.n	800308e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800307c:	f7fe fa76 	bl	800156c <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b64      	cmp	r3, #100	; 0x64
 8003088:	d901      	bls.n	800308e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e207      	b.n	800349e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800308e:	4b5b      	ldr	r3, [pc, #364]	; (80031fc <HAL_RCC_OscConfig+0x240>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d0f0      	beq.n	800307c <HAL_RCC_OscConfig+0xc0>
 800309a:	e014      	b.n	80030c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800309c:	f7fe fa66 	bl	800156c <HAL_GetTick>
 80030a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030a2:	e008      	b.n	80030b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030a4:	f7fe fa62 	bl	800156c <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b64      	cmp	r3, #100	; 0x64
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e1f3      	b.n	800349e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030b6:	4b51      	ldr	r3, [pc, #324]	; (80031fc <HAL_RCC_OscConfig+0x240>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1f0      	bne.n	80030a4 <HAL_RCC_OscConfig+0xe8>
 80030c2:	e000      	b.n	80030c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d063      	beq.n	800319a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030d2:	4b4a      	ldr	r3, [pc, #296]	; (80031fc <HAL_RCC_OscConfig+0x240>)
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f003 030c 	and.w	r3, r3, #12
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d00b      	beq.n	80030f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030de:	4b47      	ldr	r3, [pc, #284]	; (80031fc <HAL_RCC_OscConfig+0x240>)
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030e6:	2b08      	cmp	r3, #8
 80030e8:	d11c      	bne.n	8003124 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030ea:	4b44      	ldr	r3, [pc, #272]	; (80031fc <HAL_RCC_OscConfig+0x240>)
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d116      	bne.n	8003124 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030f6:	4b41      	ldr	r3, [pc, #260]	; (80031fc <HAL_RCC_OscConfig+0x240>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d005      	beq.n	800310e <HAL_RCC_OscConfig+0x152>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d001      	beq.n	800310e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e1c7      	b.n	800349e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800310e:	4b3b      	ldr	r3, [pc, #236]	; (80031fc <HAL_RCC_OscConfig+0x240>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	691b      	ldr	r3, [r3, #16]
 800311a:	00db      	lsls	r3, r3, #3
 800311c:	4937      	ldr	r1, [pc, #220]	; (80031fc <HAL_RCC_OscConfig+0x240>)
 800311e:	4313      	orrs	r3, r2
 8003120:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003122:	e03a      	b.n	800319a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d020      	beq.n	800316e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800312c:	4b34      	ldr	r3, [pc, #208]	; (8003200 <HAL_RCC_OscConfig+0x244>)
 800312e:	2201      	movs	r2, #1
 8003130:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003132:	f7fe fa1b 	bl	800156c <HAL_GetTick>
 8003136:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003138:	e008      	b.n	800314c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800313a:	f7fe fa17 	bl	800156c <HAL_GetTick>
 800313e:	4602      	mov	r2, r0
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	2b02      	cmp	r3, #2
 8003146:	d901      	bls.n	800314c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	e1a8      	b.n	800349e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800314c:	4b2b      	ldr	r3, [pc, #172]	; (80031fc <HAL_RCC_OscConfig+0x240>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0302 	and.w	r3, r3, #2
 8003154:	2b00      	cmp	r3, #0
 8003156:	d0f0      	beq.n	800313a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003158:	4b28      	ldr	r3, [pc, #160]	; (80031fc <HAL_RCC_OscConfig+0x240>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	691b      	ldr	r3, [r3, #16]
 8003164:	00db      	lsls	r3, r3, #3
 8003166:	4925      	ldr	r1, [pc, #148]	; (80031fc <HAL_RCC_OscConfig+0x240>)
 8003168:	4313      	orrs	r3, r2
 800316a:	600b      	str	r3, [r1, #0]
 800316c:	e015      	b.n	800319a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800316e:	4b24      	ldr	r3, [pc, #144]	; (8003200 <HAL_RCC_OscConfig+0x244>)
 8003170:	2200      	movs	r2, #0
 8003172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003174:	f7fe f9fa 	bl	800156c <HAL_GetTick>
 8003178:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800317a:	e008      	b.n	800318e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800317c:	f7fe f9f6 	bl	800156c <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b02      	cmp	r3, #2
 8003188:	d901      	bls.n	800318e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e187      	b.n	800349e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800318e:	4b1b      	ldr	r3, [pc, #108]	; (80031fc <HAL_RCC_OscConfig+0x240>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0302 	and.w	r3, r3, #2
 8003196:	2b00      	cmp	r3, #0
 8003198:	d1f0      	bne.n	800317c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0308 	and.w	r3, r3, #8
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d036      	beq.n	8003214 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	695b      	ldr	r3, [r3, #20]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d016      	beq.n	80031dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031ae:	4b15      	ldr	r3, [pc, #84]	; (8003204 <HAL_RCC_OscConfig+0x248>)
 80031b0:	2201      	movs	r2, #1
 80031b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031b4:	f7fe f9da 	bl	800156c <HAL_GetTick>
 80031b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031ba:	e008      	b.n	80031ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031bc:	f7fe f9d6 	bl	800156c <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d901      	bls.n	80031ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e167      	b.n	800349e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031ce:	4b0b      	ldr	r3, [pc, #44]	; (80031fc <HAL_RCC_OscConfig+0x240>)
 80031d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031d2:	f003 0302 	and.w	r3, r3, #2
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d0f0      	beq.n	80031bc <HAL_RCC_OscConfig+0x200>
 80031da:	e01b      	b.n	8003214 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031dc:	4b09      	ldr	r3, [pc, #36]	; (8003204 <HAL_RCC_OscConfig+0x248>)
 80031de:	2200      	movs	r2, #0
 80031e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031e2:	f7fe f9c3 	bl	800156c <HAL_GetTick>
 80031e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031e8:	e00e      	b.n	8003208 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031ea:	f7fe f9bf 	bl	800156c <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	d907      	bls.n	8003208 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	e150      	b.n	800349e <HAL_RCC_OscConfig+0x4e2>
 80031fc:	40023800 	.word	0x40023800
 8003200:	42470000 	.word	0x42470000
 8003204:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003208:	4b88      	ldr	r3, [pc, #544]	; (800342c <HAL_RCC_OscConfig+0x470>)
 800320a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800320c:	f003 0302 	and.w	r3, r3, #2
 8003210:	2b00      	cmp	r3, #0
 8003212:	d1ea      	bne.n	80031ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0304 	and.w	r3, r3, #4
 800321c:	2b00      	cmp	r3, #0
 800321e:	f000 8097 	beq.w	8003350 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003222:	2300      	movs	r3, #0
 8003224:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003226:	4b81      	ldr	r3, [pc, #516]	; (800342c <HAL_RCC_OscConfig+0x470>)
 8003228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d10f      	bne.n	8003252 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003232:	2300      	movs	r3, #0
 8003234:	60bb      	str	r3, [r7, #8]
 8003236:	4b7d      	ldr	r3, [pc, #500]	; (800342c <HAL_RCC_OscConfig+0x470>)
 8003238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323a:	4a7c      	ldr	r2, [pc, #496]	; (800342c <HAL_RCC_OscConfig+0x470>)
 800323c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003240:	6413      	str	r3, [r2, #64]	; 0x40
 8003242:	4b7a      	ldr	r3, [pc, #488]	; (800342c <HAL_RCC_OscConfig+0x470>)
 8003244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800324a:	60bb      	str	r3, [r7, #8]
 800324c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800324e:	2301      	movs	r3, #1
 8003250:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003252:	4b77      	ldr	r3, [pc, #476]	; (8003430 <HAL_RCC_OscConfig+0x474>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800325a:	2b00      	cmp	r3, #0
 800325c:	d118      	bne.n	8003290 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800325e:	4b74      	ldr	r3, [pc, #464]	; (8003430 <HAL_RCC_OscConfig+0x474>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a73      	ldr	r2, [pc, #460]	; (8003430 <HAL_RCC_OscConfig+0x474>)
 8003264:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003268:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800326a:	f7fe f97f 	bl	800156c <HAL_GetTick>
 800326e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003270:	e008      	b.n	8003284 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003272:	f7fe f97b 	bl	800156c <HAL_GetTick>
 8003276:	4602      	mov	r2, r0
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	2b02      	cmp	r3, #2
 800327e:	d901      	bls.n	8003284 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e10c      	b.n	800349e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003284:	4b6a      	ldr	r3, [pc, #424]	; (8003430 <HAL_RCC_OscConfig+0x474>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800328c:	2b00      	cmp	r3, #0
 800328e:	d0f0      	beq.n	8003272 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	2b01      	cmp	r3, #1
 8003296:	d106      	bne.n	80032a6 <HAL_RCC_OscConfig+0x2ea>
 8003298:	4b64      	ldr	r3, [pc, #400]	; (800342c <HAL_RCC_OscConfig+0x470>)
 800329a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800329c:	4a63      	ldr	r2, [pc, #396]	; (800342c <HAL_RCC_OscConfig+0x470>)
 800329e:	f043 0301 	orr.w	r3, r3, #1
 80032a2:	6713      	str	r3, [r2, #112]	; 0x70
 80032a4:	e01c      	b.n	80032e0 <HAL_RCC_OscConfig+0x324>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	2b05      	cmp	r3, #5
 80032ac:	d10c      	bne.n	80032c8 <HAL_RCC_OscConfig+0x30c>
 80032ae:	4b5f      	ldr	r3, [pc, #380]	; (800342c <HAL_RCC_OscConfig+0x470>)
 80032b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b2:	4a5e      	ldr	r2, [pc, #376]	; (800342c <HAL_RCC_OscConfig+0x470>)
 80032b4:	f043 0304 	orr.w	r3, r3, #4
 80032b8:	6713      	str	r3, [r2, #112]	; 0x70
 80032ba:	4b5c      	ldr	r3, [pc, #368]	; (800342c <HAL_RCC_OscConfig+0x470>)
 80032bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032be:	4a5b      	ldr	r2, [pc, #364]	; (800342c <HAL_RCC_OscConfig+0x470>)
 80032c0:	f043 0301 	orr.w	r3, r3, #1
 80032c4:	6713      	str	r3, [r2, #112]	; 0x70
 80032c6:	e00b      	b.n	80032e0 <HAL_RCC_OscConfig+0x324>
 80032c8:	4b58      	ldr	r3, [pc, #352]	; (800342c <HAL_RCC_OscConfig+0x470>)
 80032ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032cc:	4a57      	ldr	r2, [pc, #348]	; (800342c <HAL_RCC_OscConfig+0x470>)
 80032ce:	f023 0301 	bic.w	r3, r3, #1
 80032d2:	6713      	str	r3, [r2, #112]	; 0x70
 80032d4:	4b55      	ldr	r3, [pc, #340]	; (800342c <HAL_RCC_OscConfig+0x470>)
 80032d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d8:	4a54      	ldr	r2, [pc, #336]	; (800342c <HAL_RCC_OscConfig+0x470>)
 80032da:	f023 0304 	bic.w	r3, r3, #4
 80032de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d015      	beq.n	8003314 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032e8:	f7fe f940 	bl	800156c <HAL_GetTick>
 80032ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032ee:	e00a      	b.n	8003306 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032f0:	f7fe f93c 	bl	800156c <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80032fe:	4293      	cmp	r3, r2
 8003300:	d901      	bls.n	8003306 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e0cb      	b.n	800349e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003306:	4b49      	ldr	r3, [pc, #292]	; (800342c <HAL_RCC_OscConfig+0x470>)
 8003308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	2b00      	cmp	r3, #0
 8003310:	d0ee      	beq.n	80032f0 <HAL_RCC_OscConfig+0x334>
 8003312:	e014      	b.n	800333e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003314:	f7fe f92a 	bl	800156c <HAL_GetTick>
 8003318:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800331a:	e00a      	b.n	8003332 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800331c:	f7fe f926 	bl	800156c <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	f241 3288 	movw	r2, #5000	; 0x1388
 800332a:	4293      	cmp	r3, r2
 800332c:	d901      	bls.n	8003332 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e0b5      	b.n	800349e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003332:	4b3e      	ldr	r3, [pc, #248]	; (800342c <HAL_RCC_OscConfig+0x470>)
 8003334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003336:	f003 0302 	and.w	r3, r3, #2
 800333a:	2b00      	cmp	r3, #0
 800333c:	d1ee      	bne.n	800331c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800333e:	7dfb      	ldrb	r3, [r7, #23]
 8003340:	2b01      	cmp	r3, #1
 8003342:	d105      	bne.n	8003350 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003344:	4b39      	ldr	r3, [pc, #228]	; (800342c <HAL_RCC_OscConfig+0x470>)
 8003346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003348:	4a38      	ldr	r2, [pc, #224]	; (800342c <HAL_RCC_OscConfig+0x470>)
 800334a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800334e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	699b      	ldr	r3, [r3, #24]
 8003354:	2b00      	cmp	r3, #0
 8003356:	f000 80a1 	beq.w	800349c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800335a:	4b34      	ldr	r3, [pc, #208]	; (800342c <HAL_RCC_OscConfig+0x470>)
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f003 030c 	and.w	r3, r3, #12
 8003362:	2b08      	cmp	r3, #8
 8003364:	d05c      	beq.n	8003420 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	699b      	ldr	r3, [r3, #24]
 800336a:	2b02      	cmp	r3, #2
 800336c:	d141      	bne.n	80033f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800336e:	4b31      	ldr	r3, [pc, #196]	; (8003434 <HAL_RCC_OscConfig+0x478>)
 8003370:	2200      	movs	r2, #0
 8003372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003374:	f7fe f8fa 	bl	800156c <HAL_GetTick>
 8003378:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800337a:	e008      	b.n	800338e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800337c:	f7fe f8f6 	bl	800156c <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	2b02      	cmp	r3, #2
 8003388:	d901      	bls.n	800338e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e087      	b.n	800349e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800338e:	4b27      	ldr	r3, [pc, #156]	; (800342c <HAL_RCC_OscConfig+0x470>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1f0      	bne.n	800337c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	69da      	ldr	r2, [r3, #28]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a1b      	ldr	r3, [r3, #32]
 80033a2:	431a      	orrs	r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a8:	019b      	lsls	r3, r3, #6
 80033aa:	431a      	orrs	r2, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b0:	085b      	lsrs	r3, r3, #1
 80033b2:	3b01      	subs	r3, #1
 80033b4:	041b      	lsls	r3, r3, #16
 80033b6:	431a      	orrs	r2, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033bc:	061b      	lsls	r3, r3, #24
 80033be:	491b      	ldr	r1, [pc, #108]	; (800342c <HAL_RCC_OscConfig+0x470>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033c4:	4b1b      	ldr	r3, [pc, #108]	; (8003434 <HAL_RCC_OscConfig+0x478>)
 80033c6:	2201      	movs	r2, #1
 80033c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ca:	f7fe f8cf 	bl	800156c <HAL_GetTick>
 80033ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033d0:	e008      	b.n	80033e4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033d2:	f7fe f8cb 	bl	800156c <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d901      	bls.n	80033e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80033e0:	2303      	movs	r3, #3
 80033e2:	e05c      	b.n	800349e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033e4:	4b11      	ldr	r3, [pc, #68]	; (800342c <HAL_RCC_OscConfig+0x470>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d0f0      	beq.n	80033d2 <HAL_RCC_OscConfig+0x416>
 80033f0:	e054      	b.n	800349c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033f2:	4b10      	ldr	r3, [pc, #64]	; (8003434 <HAL_RCC_OscConfig+0x478>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f8:	f7fe f8b8 	bl	800156c <HAL_GetTick>
 80033fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033fe:	e008      	b.n	8003412 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003400:	f7fe f8b4 	bl	800156c <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b02      	cmp	r3, #2
 800340c:	d901      	bls.n	8003412 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e045      	b.n	800349e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003412:	4b06      	ldr	r3, [pc, #24]	; (800342c <HAL_RCC_OscConfig+0x470>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1f0      	bne.n	8003400 <HAL_RCC_OscConfig+0x444>
 800341e:	e03d      	b.n	800349c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	2b01      	cmp	r3, #1
 8003426:	d107      	bne.n	8003438 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e038      	b.n	800349e <HAL_RCC_OscConfig+0x4e2>
 800342c:	40023800 	.word	0x40023800
 8003430:	40007000 	.word	0x40007000
 8003434:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003438:	4b1b      	ldr	r3, [pc, #108]	; (80034a8 <HAL_RCC_OscConfig+0x4ec>)
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	699b      	ldr	r3, [r3, #24]
 8003442:	2b01      	cmp	r3, #1
 8003444:	d028      	beq.n	8003498 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003450:	429a      	cmp	r2, r3
 8003452:	d121      	bne.n	8003498 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800345e:	429a      	cmp	r2, r3
 8003460:	d11a      	bne.n	8003498 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003462:	68fa      	ldr	r2, [r7, #12]
 8003464:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003468:	4013      	ands	r3, r2
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800346e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003470:	4293      	cmp	r3, r2
 8003472:	d111      	bne.n	8003498 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800347e:	085b      	lsrs	r3, r3, #1
 8003480:	3b01      	subs	r3, #1
 8003482:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003484:	429a      	cmp	r2, r3
 8003486:	d107      	bne.n	8003498 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003492:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003494:	429a      	cmp	r2, r3
 8003496:	d001      	beq.n	800349c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e000      	b.n	800349e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3718      	adds	r7, #24
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	40023800 	.word	0x40023800

080034ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d101      	bne.n	80034c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e0cc      	b.n	800365a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034c0:	4b68      	ldr	r3, [pc, #416]	; (8003664 <HAL_RCC_ClockConfig+0x1b8>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 030f 	and.w	r3, r3, #15
 80034c8:	683a      	ldr	r2, [r7, #0]
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d90c      	bls.n	80034e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ce:	4b65      	ldr	r3, [pc, #404]	; (8003664 <HAL_RCC_ClockConfig+0x1b8>)
 80034d0:	683a      	ldr	r2, [r7, #0]
 80034d2:	b2d2      	uxtb	r2, r2
 80034d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034d6:	4b63      	ldr	r3, [pc, #396]	; (8003664 <HAL_RCC_ClockConfig+0x1b8>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 030f 	and.w	r3, r3, #15
 80034de:	683a      	ldr	r2, [r7, #0]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d001      	beq.n	80034e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e0b8      	b.n	800365a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0302 	and.w	r3, r3, #2
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d020      	beq.n	8003536 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0304 	and.w	r3, r3, #4
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d005      	beq.n	800350c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003500:	4b59      	ldr	r3, [pc, #356]	; (8003668 <HAL_RCC_ClockConfig+0x1bc>)
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	4a58      	ldr	r2, [pc, #352]	; (8003668 <HAL_RCC_ClockConfig+0x1bc>)
 8003506:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800350a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0308 	and.w	r3, r3, #8
 8003514:	2b00      	cmp	r3, #0
 8003516:	d005      	beq.n	8003524 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003518:	4b53      	ldr	r3, [pc, #332]	; (8003668 <HAL_RCC_ClockConfig+0x1bc>)
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	4a52      	ldr	r2, [pc, #328]	; (8003668 <HAL_RCC_ClockConfig+0x1bc>)
 800351e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003522:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003524:	4b50      	ldr	r3, [pc, #320]	; (8003668 <HAL_RCC_ClockConfig+0x1bc>)
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	494d      	ldr	r1, [pc, #308]	; (8003668 <HAL_RCC_ClockConfig+0x1bc>)
 8003532:	4313      	orrs	r3, r2
 8003534:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	2b00      	cmp	r3, #0
 8003540:	d044      	beq.n	80035cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	2b01      	cmp	r3, #1
 8003548:	d107      	bne.n	800355a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800354a:	4b47      	ldr	r3, [pc, #284]	; (8003668 <HAL_RCC_ClockConfig+0x1bc>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d119      	bne.n	800358a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e07f      	b.n	800365a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	2b02      	cmp	r3, #2
 8003560:	d003      	beq.n	800356a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003566:	2b03      	cmp	r3, #3
 8003568:	d107      	bne.n	800357a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800356a:	4b3f      	ldr	r3, [pc, #252]	; (8003668 <HAL_RCC_ClockConfig+0x1bc>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d109      	bne.n	800358a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e06f      	b.n	800365a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800357a:	4b3b      	ldr	r3, [pc, #236]	; (8003668 <HAL_RCC_ClockConfig+0x1bc>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d101      	bne.n	800358a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e067      	b.n	800365a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800358a:	4b37      	ldr	r3, [pc, #220]	; (8003668 <HAL_RCC_ClockConfig+0x1bc>)
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f023 0203 	bic.w	r2, r3, #3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	4934      	ldr	r1, [pc, #208]	; (8003668 <HAL_RCC_ClockConfig+0x1bc>)
 8003598:	4313      	orrs	r3, r2
 800359a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800359c:	f7fd ffe6 	bl	800156c <HAL_GetTick>
 80035a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035a2:	e00a      	b.n	80035ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035a4:	f7fd ffe2 	bl	800156c <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e04f      	b.n	800365a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ba:	4b2b      	ldr	r3, [pc, #172]	; (8003668 <HAL_RCC_ClockConfig+0x1bc>)
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	f003 020c 	and.w	r2, r3, #12
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d1eb      	bne.n	80035a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035cc:	4b25      	ldr	r3, [pc, #148]	; (8003664 <HAL_RCC_ClockConfig+0x1b8>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 030f 	and.w	r3, r3, #15
 80035d4:	683a      	ldr	r2, [r7, #0]
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d20c      	bcs.n	80035f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035da:	4b22      	ldr	r3, [pc, #136]	; (8003664 <HAL_RCC_ClockConfig+0x1b8>)
 80035dc:	683a      	ldr	r2, [r7, #0]
 80035de:	b2d2      	uxtb	r2, r2
 80035e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035e2:	4b20      	ldr	r3, [pc, #128]	; (8003664 <HAL_RCC_ClockConfig+0x1b8>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 030f 	and.w	r3, r3, #15
 80035ea:	683a      	ldr	r2, [r7, #0]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d001      	beq.n	80035f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e032      	b.n	800365a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0304 	and.w	r3, r3, #4
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d008      	beq.n	8003612 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003600:	4b19      	ldr	r3, [pc, #100]	; (8003668 <HAL_RCC_ClockConfig+0x1bc>)
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	4916      	ldr	r1, [pc, #88]	; (8003668 <HAL_RCC_ClockConfig+0x1bc>)
 800360e:	4313      	orrs	r3, r2
 8003610:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0308 	and.w	r3, r3, #8
 800361a:	2b00      	cmp	r3, #0
 800361c:	d009      	beq.n	8003632 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800361e:	4b12      	ldr	r3, [pc, #72]	; (8003668 <HAL_RCC_ClockConfig+0x1bc>)
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	00db      	lsls	r3, r3, #3
 800362c:	490e      	ldr	r1, [pc, #56]	; (8003668 <HAL_RCC_ClockConfig+0x1bc>)
 800362e:	4313      	orrs	r3, r2
 8003630:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003632:	f000 f821 	bl	8003678 <HAL_RCC_GetSysClockFreq>
 8003636:	4602      	mov	r2, r0
 8003638:	4b0b      	ldr	r3, [pc, #44]	; (8003668 <HAL_RCC_ClockConfig+0x1bc>)
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	091b      	lsrs	r3, r3, #4
 800363e:	f003 030f 	and.w	r3, r3, #15
 8003642:	490a      	ldr	r1, [pc, #40]	; (800366c <HAL_RCC_ClockConfig+0x1c0>)
 8003644:	5ccb      	ldrb	r3, [r1, r3]
 8003646:	fa22 f303 	lsr.w	r3, r2, r3
 800364a:	4a09      	ldr	r2, [pc, #36]	; (8003670 <HAL_RCC_ClockConfig+0x1c4>)
 800364c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800364e:	4b09      	ldr	r3, [pc, #36]	; (8003674 <HAL_RCC_ClockConfig+0x1c8>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4618      	mov	r0, r3
 8003654:	f7fd fa32 	bl	8000abc <HAL_InitTick>

  return HAL_OK;
 8003658:	2300      	movs	r3, #0
}
 800365a:	4618      	mov	r0, r3
 800365c:	3710      	adds	r7, #16
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	40023c00 	.word	0x40023c00
 8003668:	40023800 	.word	0x40023800
 800366c:	0801db54 	.word	0x0801db54
 8003670:	20000000 	.word	0x20000000
 8003674:	20000004 	.word	0x20000004

08003678 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003678:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800367c:	b094      	sub	sp, #80	; 0x50
 800367e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003680:	2300      	movs	r3, #0
 8003682:	647b      	str	r3, [r7, #68]	; 0x44
 8003684:	2300      	movs	r3, #0
 8003686:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003688:	2300      	movs	r3, #0
 800368a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800368c:	2300      	movs	r3, #0
 800368e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003690:	4b79      	ldr	r3, [pc, #484]	; (8003878 <HAL_RCC_GetSysClockFreq+0x200>)
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	f003 030c 	and.w	r3, r3, #12
 8003698:	2b08      	cmp	r3, #8
 800369a:	d00d      	beq.n	80036b8 <HAL_RCC_GetSysClockFreq+0x40>
 800369c:	2b08      	cmp	r3, #8
 800369e:	f200 80e1 	bhi.w	8003864 <HAL_RCC_GetSysClockFreq+0x1ec>
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d002      	beq.n	80036ac <HAL_RCC_GetSysClockFreq+0x34>
 80036a6:	2b04      	cmp	r3, #4
 80036a8:	d003      	beq.n	80036b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80036aa:	e0db      	b.n	8003864 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036ac:	4b73      	ldr	r3, [pc, #460]	; (800387c <HAL_RCC_GetSysClockFreq+0x204>)
 80036ae:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80036b0:	e0db      	b.n	800386a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036b2:	4b73      	ldr	r3, [pc, #460]	; (8003880 <HAL_RCC_GetSysClockFreq+0x208>)
 80036b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80036b6:	e0d8      	b.n	800386a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036b8:	4b6f      	ldr	r3, [pc, #444]	; (8003878 <HAL_RCC_GetSysClockFreq+0x200>)
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036c0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036c2:	4b6d      	ldr	r3, [pc, #436]	; (8003878 <HAL_RCC_GetSysClockFreq+0x200>)
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d063      	beq.n	8003796 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036ce:	4b6a      	ldr	r3, [pc, #424]	; (8003878 <HAL_RCC_GetSysClockFreq+0x200>)
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	099b      	lsrs	r3, r3, #6
 80036d4:	2200      	movs	r2, #0
 80036d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80036d8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80036da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036e0:	633b      	str	r3, [r7, #48]	; 0x30
 80036e2:	2300      	movs	r3, #0
 80036e4:	637b      	str	r3, [r7, #52]	; 0x34
 80036e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80036ea:	4622      	mov	r2, r4
 80036ec:	462b      	mov	r3, r5
 80036ee:	f04f 0000 	mov.w	r0, #0
 80036f2:	f04f 0100 	mov.w	r1, #0
 80036f6:	0159      	lsls	r1, r3, #5
 80036f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036fc:	0150      	lsls	r0, r2, #5
 80036fe:	4602      	mov	r2, r0
 8003700:	460b      	mov	r3, r1
 8003702:	4621      	mov	r1, r4
 8003704:	1a51      	subs	r1, r2, r1
 8003706:	6139      	str	r1, [r7, #16]
 8003708:	4629      	mov	r1, r5
 800370a:	eb63 0301 	sbc.w	r3, r3, r1
 800370e:	617b      	str	r3, [r7, #20]
 8003710:	f04f 0200 	mov.w	r2, #0
 8003714:	f04f 0300 	mov.w	r3, #0
 8003718:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800371c:	4659      	mov	r1, fp
 800371e:	018b      	lsls	r3, r1, #6
 8003720:	4651      	mov	r1, sl
 8003722:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003726:	4651      	mov	r1, sl
 8003728:	018a      	lsls	r2, r1, #6
 800372a:	4651      	mov	r1, sl
 800372c:	ebb2 0801 	subs.w	r8, r2, r1
 8003730:	4659      	mov	r1, fp
 8003732:	eb63 0901 	sbc.w	r9, r3, r1
 8003736:	f04f 0200 	mov.w	r2, #0
 800373a:	f04f 0300 	mov.w	r3, #0
 800373e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003742:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003746:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800374a:	4690      	mov	r8, r2
 800374c:	4699      	mov	r9, r3
 800374e:	4623      	mov	r3, r4
 8003750:	eb18 0303 	adds.w	r3, r8, r3
 8003754:	60bb      	str	r3, [r7, #8]
 8003756:	462b      	mov	r3, r5
 8003758:	eb49 0303 	adc.w	r3, r9, r3
 800375c:	60fb      	str	r3, [r7, #12]
 800375e:	f04f 0200 	mov.w	r2, #0
 8003762:	f04f 0300 	mov.w	r3, #0
 8003766:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800376a:	4629      	mov	r1, r5
 800376c:	024b      	lsls	r3, r1, #9
 800376e:	4621      	mov	r1, r4
 8003770:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003774:	4621      	mov	r1, r4
 8003776:	024a      	lsls	r2, r1, #9
 8003778:	4610      	mov	r0, r2
 800377a:	4619      	mov	r1, r3
 800377c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800377e:	2200      	movs	r2, #0
 8003780:	62bb      	str	r3, [r7, #40]	; 0x28
 8003782:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003784:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003788:	f7fc fd9a 	bl	80002c0 <__aeabi_uldivmod>
 800378c:	4602      	mov	r2, r0
 800378e:	460b      	mov	r3, r1
 8003790:	4613      	mov	r3, r2
 8003792:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003794:	e058      	b.n	8003848 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003796:	4b38      	ldr	r3, [pc, #224]	; (8003878 <HAL_RCC_GetSysClockFreq+0x200>)
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	099b      	lsrs	r3, r3, #6
 800379c:	2200      	movs	r2, #0
 800379e:	4618      	mov	r0, r3
 80037a0:	4611      	mov	r1, r2
 80037a2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80037a6:	623b      	str	r3, [r7, #32]
 80037a8:	2300      	movs	r3, #0
 80037aa:	627b      	str	r3, [r7, #36]	; 0x24
 80037ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80037b0:	4642      	mov	r2, r8
 80037b2:	464b      	mov	r3, r9
 80037b4:	f04f 0000 	mov.w	r0, #0
 80037b8:	f04f 0100 	mov.w	r1, #0
 80037bc:	0159      	lsls	r1, r3, #5
 80037be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037c2:	0150      	lsls	r0, r2, #5
 80037c4:	4602      	mov	r2, r0
 80037c6:	460b      	mov	r3, r1
 80037c8:	4641      	mov	r1, r8
 80037ca:	ebb2 0a01 	subs.w	sl, r2, r1
 80037ce:	4649      	mov	r1, r9
 80037d0:	eb63 0b01 	sbc.w	fp, r3, r1
 80037d4:	f04f 0200 	mov.w	r2, #0
 80037d8:	f04f 0300 	mov.w	r3, #0
 80037dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80037e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80037e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80037e8:	ebb2 040a 	subs.w	r4, r2, sl
 80037ec:	eb63 050b 	sbc.w	r5, r3, fp
 80037f0:	f04f 0200 	mov.w	r2, #0
 80037f4:	f04f 0300 	mov.w	r3, #0
 80037f8:	00eb      	lsls	r3, r5, #3
 80037fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037fe:	00e2      	lsls	r2, r4, #3
 8003800:	4614      	mov	r4, r2
 8003802:	461d      	mov	r5, r3
 8003804:	4643      	mov	r3, r8
 8003806:	18e3      	adds	r3, r4, r3
 8003808:	603b      	str	r3, [r7, #0]
 800380a:	464b      	mov	r3, r9
 800380c:	eb45 0303 	adc.w	r3, r5, r3
 8003810:	607b      	str	r3, [r7, #4]
 8003812:	f04f 0200 	mov.w	r2, #0
 8003816:	f04f 0300 	mov.w	r3, #0
 800381a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800381e:	4629      	mov	r1, r5
 8003820:	028b      	lsls	r3, r1, #10
 8003822:	4621      	mov	r1, r4
 8003824:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003828:	4621      	mov	r1, r4
 800382a:	028a      	lsls	r2, r1, #10
 800382c:	4610      	mov	r0, r2
 800382e:	4619      	mov	r1, r3
 8003830:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003832:	2200      	movs	r2, #0
 8003834:	61bb      	str	r3, [r7, #24]
 8003836:	61fa      	str	r2, [r7, #28]
 8003838:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800383c:	f7fc fd40 	bl	80002c0 <__aeabi_uldivmod>
 8003840:	4602      	mov	r2, r0
 8003842:	460b      	mov	r3, r1
 8003844:	4613      	mov	r3, r2
 8003846:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003848:	4b0b      	ldr	r3, [pc, #44]	; (8003878 <HAL_RCC_GetSysClockFreq+0x200>)
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	0c1b      	lsrs	r3, r3, #16
 800384e:	f003 0303 	and.w	r3, r3, #3
 8003852:	3301      	adds	r3, #1
 8003854:	005b      	lsls	r3, r3, #1
 8003856:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003858:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800385a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800385c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003860:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003862:	e002      	b.n	800386a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003864:	4b05      	ldr	r3, [pc, #20]	; (800387c <HAL_RCC_GetSysClockFreq+0x204>)
 8003866:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003868:	bf00      	nop
    }
  }
  return sysclockfreq;
 800386a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800386c:	4618      	mov	r0, r3
 800386e:	3750      	adds	r7, #80	; 0x50
 8003870:	46bd      	mov	sp, r7
 8003872:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003876:	bf00      	nop
 8003878:	40023800 	.word	0x40023800
 800387c:	00f42400 	.word	0x00f42400
 8003880:	007a1200 	.word	0x007a1200

08003884 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003884:	b480      	push	{r7}
 8003886:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003888:	4b03      	ldr	r3, [pc, #12]	; (8003898 <HAL_RCC_GetHCLKFreq+0x14>)
 800388a:	681b      	ldr	r3, [r3, #0]
}
 800388c:	4618      	mov	r0, r3
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	20000000 	.word	0x20000000

0800389c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80038a0:	f7ff fff0 	bl	8003884 <HAL_RCC_GetHCLKFreq>
 80038a4:	4602      	mov	r2, r0
 80038a6:	4b05      	ldr	r3, [pc, #20]	; (80038bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	0a9b      	lsrs	r3, r3, #10
 80038ac:	f003 0307 	and.w	r3, r3, #7
 80038b0:	4903      	ldr	r1, [pc, #12]	; (80038c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038b2:	5ccb      	ldrb	r3, [r1, r3]
 80038b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	40023800 	.word	0x40023800
 80038c0:	0801db64 	.word	0x0801db64

080038c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80038c8:	f7ff ffdc 	bl	8003884 <HAL_RCC_GetHCLKFreq>
 80038cc:	4602      	mov	r2, r0
 80038ce:	4b05      	ldr	r3, [pc, #20]	; (80038e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	0b5b      	lsrs	r3, r3, #13
 80038d4:	f003 0307 	and.w	r3, r3, #7
 80038d8:	4903      	ldr	r1, [pc, #12]	; (80038e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038da:	5ccb      	ldrb	r3, [r1, r3]
 80038dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	40023800 	.word	0x40023800
 80038e8:	0801db64 	.word	0x0801db64

080038ec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	220f      	movs	r2, #15
 80038fa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80038fc:	4b12      	ldr	r3, [pc, #72]	; (8003948 <HAL_RCC_GetClockConfig+0x5c>)
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	f003 0203 	and.w	r2, r3, #3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003908:	4b0f      	ldr	r3, [pc, #60]	; (8003948 <HAL_RCC_GetClockConfig+0x5c>)
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003914:	4b0c      	ldr	r3, [pc, #48]	; (8003948 <HAL_RCC_GetClockConfig+0x5c>)
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003920:	4b09      	ldr	r3, [pc, #36]	; (8003948 <HAL_RCC_GetClockConfig+0x5c>)
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	08db      	lsrs	r3, r3, #3
 8003926:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800392e:	4b07      	ldr	r3, [pc, #28]	; (800394c <HAL_RCC_GetClockConfig+0x60>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 020f 	and.w	r2, r3, #15
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	601a      	str	r2, [r3, #0]
}
 800393a:	bf00      	nop
 800393c:	370c      	adds	r7, #12
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	40023800 	.word	0x40023800
 800394c:	40023c00 	.word	0x40023c00

08003950 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b082      	sub	sp, #8
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d101      	bne.n	8003962 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e01c      	b.n	800399c <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	795b      	ldrb	r3, [r3, #5]
 8003966:	b2db      	uxtb	r3, r3
 8003968:	2b00      	cmp	r3, #0
 800396a:	d105      	bne.n	8003978 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f7fd f838 	bl	80009e8 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2202      	movs	r2, #2
 800397c:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f042 0204 	orr.w	r2, r2, #4
 800398c:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2201      	movs	r2, #1
 8003992:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800399a:	2300      	movs	r3, #0
}
 800399c:	4618      	mov	r0, r3
 800399e:	3708      	adds	r7, #8
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80039ae:	2300      	movs	r3, #0
 80039b0:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	791b      	ldrb	r3, [r3, #4]
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d101      	bne.n	80039be <HAL_RNG_GenerateRandomNumber+0x1a>
 80039ba:	2302      	movs	r3, #2
 80039bc:	e044      	b.n	8003a48 <HAL_RNG_GenerateRandomNumber+0xa4>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2201      	movs	r2, #1
 80039c2:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	795b      	ldrb	r3, [r3, #5]
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d133      	bne.n	8003a36 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2202      	movs	r2, #2
 80039d2:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 80039d4:	f7fd fdca 	bl	800156c <HAL_GetTick>
 80039d8:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80039da:	e018      	b.n	8003a0e <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80039dc:	f7fd fdc6 	bl	800156c <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d911      	bls.n	8003a0e <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f003 0301 	and.w	r3, r3, #1
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d00a      	beq.n	8003a0e <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2202      	movs	r2, #2
 8003a02:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e01c      	b.n	8003a48 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f003 0301 	and.w	r3, r3, #1
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d1df      	bne.n	80039dc <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	689a      	ldr	r2, [r3, #8]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	68da      	ldr	r2, [r3, #12]
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2201      	movs	r2, #1
 8003a32:	715a      	strb	r2, [r3, #5]
 8003a34:	e004      	b.n	8003a40 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2204      	movs	r2, #4
 8003a3a:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	711a      	strb	r2, [r3, #4]

  return status;
 8003a46:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3710      	adds	r7, #16
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d101      	bne.n	8003a62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e041      	b.n	8003ae6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d106      	bne.n	8003a7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 f839 	bl	8003aee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2202      	movs	r2, #2
 8003a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	3304      	adds	r3, #4
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	4610      	mov	r0, r2
 8003a90:	f000 f9d8 	bl	8003e44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3708      	adds	r7, #8
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003aee:	b480      	push	{r7}
 8003af0:	b083      	sub	sp, #12
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003af6:	bf00      	nop
 8003af8:	370c      	adds	r7, #12
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr
	...

08003b04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b085      	sub	sp, #20
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d001      	beq.n	8003b1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e04e      	b.n	8003bba <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2202      	movs	r2, #2
 8003b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	68da      	ldr	r2, [r3, #12]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f042 0201 	orr.w	r2, r2, #1
 8003b32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a23      	ldr	r2, [pc, #140]	; (8003bc8 <HAL_TIM_Base_Start_IT+0xc4>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d022      	beq.n	8003b84 <HAL_TIM_Base_Start_IT+0x80>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b46:	d01d      	beq.n	8003b84 <HAL_TIM_Base_Start_IT+0x80>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a1f      	ldr	r2, [pc, #124]	; (8003bcc <HAL_TIM_Base_Start_IT+0xc8>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d018      	beq.n	8003b84 <HAL_TIM_Base_Start_IT+0x80>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a1e      	ldr	r2, [pc, #120]	; (8003bd0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d013      	beq.n	8003b84 <HAL_TIM_Base_Start_IT+0x80>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a1c      	ldr	r2, [pc, #112]	; (8003bd4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d00e      	beq.n	8003b84 <HAL_TIM_Base_Start_IT+0x80>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a1b      	ldr	r2, [pc, #108]	; (8003bd8 <HAL_TIM_Base_Start_IT+0xd4>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d009      	beq.n	8003b84 <HAL_TIM_Base_Start_IT+0x80>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a19      	ldr	r2, [pc, #100]	; (8003bdc <HAL_TIM_Base_Start_IT+0xd8>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d004      	beq.n	8003b84 <HAL_TIM_Base_Start_IT+0x80>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a18      	ldr	r2, [pc, #96]	; (8003be0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d111      	bne.n	8003ba8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f003 0307 	and.w	r3, r3, #7
 8003b8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2b06      	cmp	r3, #6
 8003b94:	d010      	beq.n	8003bb8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f042 0201 	orr.w	r2, r2, #1
 8003ba4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ba6:	e007      	b.n	8003bb8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f042 0201 	orr.w	r2, r2, #1
 8003bb6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003bb8:	2300      	movs	r3, #0
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3714      	adds	r7, #20
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop
 8003bc8:	40010000 	.word	0x40010000
 8003bcc:	40000400 	.word	0x40000400
 8003bd0:	40000800 	.word	0x40000800
 8003bd4:	40000c00 	.word	0x40000c00
 8003bd8:	40010400 	.word	0x40010400
 8003bdc:	40014000 	.word	0x40014000
 8003be0:	40001800 	.word	0x40001800

08003be4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	691b      	ldr	r3, [r3, #16]
 8003bf2:	f003 0302 	and.w	r3, r3, #2
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d122      	bne.n	8003c40 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	f003 0302 	and.w	r3, r3, #2
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	d11b      	bne.n	8003c40 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f06f 0202 	mvn.w	r2, #2
 8003c10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2201      	movs	r2, #1
 8003c16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	699b      	ldr	r3, [r3, #24]
 8003c1e:	f003 0303 	and.w	r3, r3, #3
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d003      	beq.n	8003c2e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f000 f8ee 	bl	8003e08 <HAL_TIM_IC_CaptureCallback>
 8003c2c:	e005      	b.n	8003c3a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f000 f8e0 	bl	8003df4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f000 f8f1 	bl	8003e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	f003 0304 	and.w	r3, r3, #4
 8003c4a:	2b04      	cmp	r3, #4
 8003c4c:	d122      	bne.n	8003c94 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	f003 0304 	and.w	r3, r3, #4
 8003c58:	2b04      	cmp	r3, #4
 8003c5a:	d11b      	bne.n	8003c94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f06f 0204 	mvn.w	r2, #4
 8003c64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2202      	movs	r2, #2
 8003c6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	699b      	ldr	r3, [r3, #24]
 8003c72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d003      	beq.n	8003c82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f000 f8c4 	bl	8003e08 <HAL_TIM_IC_CaptureCallback>
 8003c80:	e005      	b.n	8003c8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 f8b6 	bl	8003df4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f000 f8c7 	bl	8003e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	f003 0308 	and.w	r3, r3, #8
 8003c9e:	2b08      	cmp	r3, #8
 8003ca0:	d122      	bne.n	8003ce8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	f003 0308 	and.w	r3, r3, #8
 8003cac:	2b08      	cmp	r3, #8
 8003cae:	d11b      	bne.n	8003ce8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f06f 0208 	mvn.w	r2, #8
 8003cb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2204      	movs	r2, #4
 8003cbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	69db      	ldr	r3, [r3, #28]
 8003cc6:	f003 0303 	and.w	r3, r3, #3
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d003      	beq.n	8003cd6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f000 f89a 	bl	8003e08 <HAL_TIM_IC_CaptureCallback>
 8003cd4:	e005      	b.n	8003ce2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f000 f88c 	bl	8003df4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f000 f89d 	bl	8003e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	f003 0310 	and.w	r3, r3, #16
 8003cf2:	2b10      	cmp	r3, #16
 8003cf4:	d122      	bne.n	8003d3c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	f003 0310 	and.w	r3, r3, #16
 8003d00:	2b10      	cmp	r3, #16
 8003d02:	d11b      	bne.n	8003d3c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f06f 0210 	mvn.w	r2, #16
 8003d0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2208      	movs	r2, #8
 8003d12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	69db      	ldr	r3, [r3, #28]
 8003d1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d003      	beq.n	8003d2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 f870 	bl	8003e08 <HAL_TIM_IC_CaptureCallback>
 8003d28:	e005      	b.n	8003d36 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f000 f862 	bl	8003df4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f000 f873 	bl	8003e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	f003 0301 	and.w	r3, r3, #1
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d10e      	bne.n	8003d68 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	f003 0301 	and.w	r3, r3, #1
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d107      	bne.n	8003d68 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f06f 0201 	mvn.w	r2, #1
 8003d60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f7fc fdfc 	bl	8000960 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d72:	2b80      	cmp	r3, #128	; 0x80
 8003d74:	d10e      	bne.n	8003d94 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d80:	2b80      	cmp	r3, #128	; 0x80
 8003d82:	d107      	bne.n	8003d94 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f000 f902 	bl	8003f98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d9e:	2b40      	cmp	r3, #64	; 0x40
 8003da0:	d10e      	bne.n	8003dc0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dac:	2b40      	cmp	r3, #64	; 0x40
 8003dae:	d107      	bne.n	8003dc0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003db8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f000 f838 	bl	8003e30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	f003 0320 	and.w	r3, r3, #32
 8003dca:	2b20      	cmp	r3, #32
 8003dcc:	d10e      	bne.n	8003dec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	f003 0320 	and.w	r3, r3, #32
 8003dd8:	2b20      	cmp	r3, #32
 8003dda:	d107      	bne.n	8003dec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f06f 0220 	mvn.w	r2, #32
 8003de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 f8cc 	bl	8003f84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003dec:	bf00      	nop
 8003dee:	3708      	adds	r7, #8
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003dfc:	bf00      	nop
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr

08003e08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e10:	bf00      	nop
 8003e12:	370c      	adds	r7, #12
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e24:	bf00      	nop
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e38:	bf00      	nop
 8003e3a:	370c      	adds	r7, #12
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b085      	sub	sp, #20
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4a40      	ldr	r2, [pc, #256]	; (8003f58 <TIM_Base_SetConfig+0x114>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d013      	beq.n	8003e84 <TIM_Base_SetConfig+0x40>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e62:	d00f      	beq.n	8003e84 <TIM_Base_SetConfig+0x40>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a3d      	ldr	r2, [pc, #244]	; (8003f5c <TIM_Base_SetConfig+0x118>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d00b      	beq.n	8003e84 <TIM_Base_SetConfig+0x40>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4a3c      	ldr	r2, [pc, #240]	; (8003f60 <TIM_Base_SetConfig+0x11c>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d007      	beq.n	8003e84 <TIM_Base_SetConfig+0x40>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4a3b      	ldr	r2, [pc, #236]	; (8003f64 <TIM_Base_SetConfig+0x120>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d003      	beq.n	8003e84 <TIM_Base_SetConfig+0x40>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a3a      	ldr	r2, [pc, #232]	; (8003f68 <TIM_Base_SetConfig+0x124>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d108      	bne.n	8003e96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	68fa      	ldr	r2, [r7, #12]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a2f      	ldr	r2, [pc, #188]	; (8003f58 <TIM_Base_SetConfig+0x114>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d02b      	beq.n	8003ef6 <TIM_Base_SetConfig+0xb2>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ea4:	d027      	beq.n	8003ef6 <TIM_Base_SetConfig+0xb2>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a2c      	ldr	r2, [pc, #176]	; (8003f5c <TIM_Base_SetConfig+0x118>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d023      	beq.n	8003ef6 <TIM_Base_SetConfig+0xb2>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a2b      	ldr	r2, [pc, #172]	; (8003f60 <TIM_Base_SetConfig+0x11c>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d01f      	beq.n	8003ef6 <TIM_Base_SetConfig+0xb2>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a2a      	ldr	r2, [pc, #168]	; (8003f64 <TIM_Base_SetConfig+0x120>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d01b      	beq.n	8003ef6 <TIM_Base_SetConfig+0xb2>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a29      	ldr	r2, [pc, #164]	; (8003f68 <TIM_Base_SetConfig+0x124>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d017      	beq.n	8003ef6 <TIM_Base_SetConfig+0xb2>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a28      	ldr	r2, [pc, #160]	; (8003f6c <TIM_Base_SetConfig+0x128>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d013      	beq.n	8003ef6 <TIM_Base_SetConfig+0xb2>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a27      	ldr	r2, [pc, #156]	; (8003f70 <TIM_Base_SetConfig+0x12c>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d00f      	beq.n	8003ef6 <TIM_Base_SetConfig+0xb2>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a26      	ldr	r2, [pc, #152]	; (8003f74 <TIM_Base_SetConfig+0x130>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d00b      	beq.n	8003ef6 <TIM_Base_SetConfig+0xb2>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a25      	ldr	r2, [pc, #148]	; (8003f78 <TIM_Base_SetConfig+0x134>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d007      	beq.n	8003ef6 <TIM_Base_SetConfig+0xb2>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a24      	ldr	r2, [pc, #144]	; (8003f7c <TIM_Base_SetConfig+0x138>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d003      	beq.n	8003ef6 <TIM_Base_SetConfig+0xb2>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a23      	ldr	r2, [pc, #140]	; (8003f80 <TIM_Base_SetConfig+0x13c>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d108      	bne.n	8003f08 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003efc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	68fa      	ldr	r2, [r7, #12]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	695b      	ldr	r3, [r3, #20]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	68fa      	ldr	r2, [r7, #12]
 8003f1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	689a      	ldr	r2, [r3, #8]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	4a0a      	ldr	r2, [pc, #40]	; (8003f58 <TIM_Base_SetConfig+0x114>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d003      	beq.n	8003f3c <TIM_Base_SetConfig+0xf8>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	4a0c      	ldr	r2, [pc, #48]	; (8003f68 <TIM_Base_SetConfig+0x124>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d103      	bne.n	8003f44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	691a      	ldr	r2, [r3, #16]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	615a      	str	r2, [r3, #20]
}
 8003f4a:	bf00      	nop
 8003f4c:	3714      	adds	r7, #20
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr
 8003f56:	bf00      	nop
 8003f58:	40010000 	.word	0x40010000
 8003f5c:	40000400 	.word	0x40000400
 8003f60:	40000800 	.word	0x40000800
 8003f64:	40000c00 	.word	0x40000c00
 8003f68:	40010400 	.word	0x40010400
 8003f6c:	40014000 	.word	0x40014000
 8003f70:	40014400 	.word	0x40014400
 8003f74:	40014800 	.word	0x40014800
 8003f78:	40001800 	.word	0x40001800
 8003f7c:	40001c00 	.word	0x40001c00
 8003f80:	40002000 	.word	0x40002000

08003f84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f8c:	bf00      	nop
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003fa0:	bf00      	nop
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d101      	bne.n	8003fbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e03f      	b.n	800403e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d106      	bne.n	8003fd8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f7fc fd2a 	bl	8000a2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2224      	movs	r2, #36	; 0x24
 8003fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	68da      	ldr	r2, [r3, #12]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f000 f829 	bl	8004048 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	691a      	ldr	r2, [r3, #16]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004004:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	695a      	ldr	r2, [r3, #20]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004014:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68da      	ldr	r2, [r3, #12]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004024:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2220      	movs	r2, #32
 8004030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2220      	movs	r2, #32
 8004038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800403c:	2300      	movs	r3, #0
}
 800403e:	4618      	mov	r0, r3
 8004040:	3708      	adds	r7, #8
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
	...

08004048 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004048:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800404c:	b0c0      	sub	sp, #256	; 0x100
 800404e:	af00      	add	r7, sp, #0
 8004050:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	691b      	ldr	r3, [r3, #16]
 800405c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004064:	68d9      	ldr	r1, [r3, #12]
 8004066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	ea40 0301 	orr.w	r3, r0, r1
 8004070:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004076:	689a      	ldr	r2, [r3, #8]
 8004078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	431a      	orrs	r2, r3
 8004080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004084:	695b      	ldr	r3, [r3, #20]
 8004086:	431a      	orrs	r2, r3
 8004088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800408c:	69db      	ldr	r3, [r3, #28]
 800408e:	4313      	orrs	r3, r2
 8004090:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80040a0:	f021 010c 	bic.w	r1, r1, #12
 80040a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80040ae:	430b      	orrs	r3, r1
 80040b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	695b      	ldr	r3, [r3, #20]
 80040ba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80040be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040c2:	6999      	ldr	r1, [r3, #24]
 80040c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	ea40 0301 	orr.w	r3, r0, r1
 80040ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80040d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	4b8f      	ldr	r3, [pc, #572]	; (8004314 <UART_SetConfig+0x2cc>)
 80040d8:	429a      	cmp	r2, r3
 80040da:	d005      	beq.n	80040e8 <UART_SetConfig+0xa0>
 80040dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	4b8d      	ldr	r3, [pc, #564]	; (8004318 <UART_SetConfig+0x2d0>)
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d104      	bne.n	80040f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80040e8:	f7ff fbec 	bl	80038c4 <HAL_RCC_GetPCLK2Freq>
 80040ec:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80040f0:	e003      	b.n	80040fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80040f2:	f7ff fbd3 	bl	800389c <HAL_RCC_GetPCLK1Freq>
 80040f6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040fe:	69db      	ldr	r3, [r3, #28]
 8004100:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004104:	f040 810c 	bne.w	8004320 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004108:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800410c:	2200      	movs	r2, #0
 800410e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004112:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004116:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800411a:	4622      	mov	r2, r4
 800411c:	462b      	mov	r3, r5
 800411e:	1891      	adds	r1, r2, r2
 8004120:	65b9      	str	r1, [r7, #88]	; 0x58
 8004122:	415b      	adcs	r3, r3
 8004124:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004126:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800412a:	4621      	mov	r1, r4
 800412c:	eb12 0801 	adds.w	r8, r2, r1
 8004130:	4629      	mov	r1, r5
 8004132:	eb43 0901 	adc.w	r9, r3, r1
 8004136:	f04f 0200 	mov.w	r2, #0
 800413a:	f04f 0300 	mov.w	r3, #0
 800413e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004142:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004146:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800414a:	4690      	mov	r8, r2
 800414c:	4699      	mov	r9, r3
 800414e:	4623      	mov	r3, r4
 8004150:	eb18 0303 	adds.w	r3, r8, r3
 8004154:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004158:	462b      	mov	r3, r5
 800415a:	eb49 0303 	adc.w	r3, r9, r3
 800415e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800416e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004172:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004176:	460b      	mov	r3, r1
 8004178:	18db      	adds	r3, r3, r3
 800417a:	653b      	str	r3, [r7, #80]	; 0x50
 800417c:	4613      	mov	r3, r2
 800417e:	eb42 0303 	adc.w	r3, r2, r3
 8004182:	657b      	str	r3, [r7, #84]	; 0x54
 8004184:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004188:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800418c:	f7fc f898 	bl	80002c0 <__aeabi_uldivmod>
 8004190:	4602      	mov	r2, r0
 8004192:	460b      	mov	r3, r1
 8004194:	4b61      	ldr	r3, [pc, #388]	; (800431c <UART_SetConfig+0x2d4>)
 8004196:	fba3 2302 	umull	r2, r3, r3, r2
 800419a:	095b      	lsrs	r3, r3, #5
 800419c:	011c      	lsls	r4, r3, #4
 800419e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041a2:	2200      	movs	r2, #0
 80041a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80041a8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80041ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80041b0:	4642      	mov	r2, r8
 80041b2:	464b      	mov	r3, r9
 80041b4:	1891      	adds	r1, r2, r2
 80041b6:	64b9      	str	r1, [r7, #72]	; 0x48
 80041b8:	415b      	adcs	r3, r3
 80041ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80041c0:	4641      	mov	r1, r8
 80041c2:	eb12 0a01 	adds.w	sl, r2, r1
 80041c6:	4649      	mov	r1, r9
 80041c8:	eb43 0b01 	adc.w	fp, r3, r1
 80041cc:	f04f 0200 	mov.w	r2, #0
 80041d0:	f04f 0300 	mov.w	r3, #0
 80041d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80041d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80041dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041e0:	4692      	mov	sl, r2
 80041e2:	469b      	mov	fp, r3
 80041e4:	4643      	mov	r3, r8
 80041e6:	eb1a 0303 	adds.w	r3, sl, r3
 80041ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80041ee:	464b      	mov	r3, r9
 80041f0:	eb4b 0303 	adc.w	r3, fp, r3
 80041f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80041f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004204:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004208:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800420c:	460b      	mov	r3, r1
 800420e:	18db      	adds	r3, r3, r3
 8004210:	643b      	str	r3, [r7, #64]	; 0x40
 8004212:	4613      	mov	r3, r2
 8004214:	eb42 0303 	adc.w	r3, r2, r3
 8004218:	647b      	str	r3, [r7, #68]	; 0x44
 800421a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800421e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004222:	f7fc f84d 	bl	80002c0 <__aeabi_uldivmod>
 8004226:	4602      	mov	r2, r0
 8004228:	460b      	mov	r3, r1
 800422a:	4611      	mov	r1, r2
 800422c:	4b3b      	ldr	r3, [pc, #236]	; (800431c <UART_SetConfig+0x2d4>)
 800422e:	fba3 2301 	umull	r2, r3, r3, r1
 8004232:	095b      	lsrs	r3, r3, #5
 8004234:	2264      	movs	r2, #100	; 0x64
 8004236:	fb02 f303 	mul.w	r3, r2, r3
 800423a:	1acb      	subs	r3, r1, r3
 800423c:	00db      	lsls	r3, r3, #3
 800423e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004242:	4b36      	ldr	r3, [pc, #216]	; (800431c <UART_SetConfig+0x2d4>)
 8004244:	fba3 2302 	umull	r2, r3, r3, r2
 8004248:	095b      	lsrs	r3, r3, #5
 800424a:	005b      	lsls	r3, r3, #1
 800424c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004250:	441c      	add	r4, r3
 8004252:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004256:	2200      	movs	r2, #0
 8004258:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800425c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004260:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004264:	4642      	mov	r2, r8
 8004266:	464b      	mov	r3, r9
 8004268:	1891      	adds	r1, r2, r2
 800426a:	63b9      	str	r1, [r7, #56]	; 0x38
 800426c:	415b      	adcs	r3, r3
 800426e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004270:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004274:	4641      	mov	r1, r8
 8004276:	1851      	adds	r1, r2, r1
 8004278:	6339      	str	r1, [r7, #48]	; 0x30
 800427a:	4649      	mov	r1, r9
 800427c:	414b      	adcs	r3, r1
 800427e:	637b      	str	r3, [r7, #52]	; 0x34
 8004280:	f04f 0200 	mov.w	r2, #0
 8004284:	f04f 0300 	mov.w	r3, #0
 8004288:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800428c:	4659      	mov	r1, fp
 800428e:	00cb      	lsls	r3, r1, #3
 8004290:	4651      	mov	r1, sl
 8004292:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004296:	4651      	mov	r1, sl
 8004298:	00ca      	lsls	r2, r1, #3
 800429a:	4610      	mov	r0, r2
 800429c:	4619      	mov	r1, r3
 800429e:	4603      	mov	r3, r0
 80042a0:	4642      	mov	r2, r8
 80042a2:	189b      	adds	r3, r3, r2
 80042a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80042a8:	464b      	mov	r3, r9
 80042aa:	460a      	mov	r2, r1
 80042ac:	eb42 0303 	adc.w	r3, r2, r3
 80042b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80042b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80042c0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80042c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80042c8:	460b      	mov	r3, r1
 80042ca:	18db      	adds	r3, r3, r3
 80042cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80042ce:	4613      	mov	r3, r2
 80042d0:	eb42 0303 	adc.w	r3, r2, r3
 80042d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80042da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80042de:	f7fb ffef 	bl	80002c0 <__aeabi_uldivmod>
 80042e2:	4602      	mov	r2, r0
 80042e4:	460b      	mov	r3, r1
 80042e6:	4b0d      	ldr	r3, [pc, #52]	; (800431c <UART_SetConfig+0x2d4>)
 80042e8:	fba3 1302 	umull	r1, r3, r3, r2
 80042ec:	095b      	lsrs	r3, r3, #5
 80042ee:	2164      	movs	r1, #100	; 0x64
 80042f0:	fb01 f303 	mul.w	r3, r1, r3
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	00db      	lsls	r3, r3, #3
 80042f8:	3332      	adds	r3, #50	; 0x32
 80042fa:	4a08      	ldr	r2, [pc, #32]	; (800431c <UART_SetConfig+0x2d4>)
 80042fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004300:	095b      	lsrs	r3, r3, #5
 8004302:	f003 0207 	and.w	r2, r3, #7
 8004306:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4422      	add	r2, r4
 800430e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004310:	e106      	b.n	8004520 <UART_SetConfig+0x4d8>
 8004312:	bf00      	nop
 8004314:	40011000 	.word	0x40011000
 8004318:	40011400 	.word	0x40011400
 800431c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004320:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004324:	2200      	movs	r2, #0
 8004326:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800432a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800432e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004332:	4642      	mov	r2, r8
 8004334:	464b      	mov	r3, r9
 8004336:	1891      	adds	r1, r2, r2
 8004338:	6239      	str	r1, [r7, #32]
 800433a:	415b      	adcs	r3, r3
 800433c:	627b      	str	r3, [r7, #36]	; 0x24
 800433e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004342:	4641      	mov	r1, r8
 8004344:	1854      	adds	r4, r2, r1
 8004346:	4649      	mov	r1, r9
 8004348:	eb43 0501 	adc.w	r5, r3, r1
 800434c:	f04f 0200 	mov.w	r2, #0
 8004350:	f04f 0300 	mov.w	r3, #0
 8004354:	00eb      	lsls	r3, r5, #3
 8004356:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800435a:	00e2      	lsls	r2, r4, #3
 800435c:	4614      	mov	r4, r2
 800435e:	461d      	mov	r5, r3
 8004360:	4643      	mov	r3, r8
 8004362:	18e3      	adds	r3, r4, r3
 8004364:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004368:	464b      	mov	r3, r9
 800436a:	eb45 0303 	adc.w	r3, r5, r3
 800436e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800437e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004382:	f04f 0200 	mov.w	r2, #0
 8004386:	f04f 0300 	mov.w	r3, #0
 800438a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800438e:	4629      	mov	r1, r5
 8004390:	008b      	lsls	r3, r1, #2
 8004392:	4621      	mov	r1, r4
 8004394:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004398:	4621      	mov	r1, r4
 800439a:	008a      	lsls	r2, r1, #2
 800439c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80043a0:	f7fb ff8e 	bl	80002c0 <__aeabi_uldivmod>
 80043a4:	4602      	mov	r2, r0
 80043a6:	460b      	mov	r3, r1
 80043a8:	4b60      	ldr	r3, [pc, #384]	; (800452c <UART_SetConfig+0x4e4>)
 80043aa:	fba3 2302 	umull	r2, r3, r3, r2
 80043ae:	095b      	lsrs	r3, r3, #5
 80043b0:	011c      	lsls	r4, r3, #4
 80043b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043b6:	2200      	movs	r2, #0
 80043b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80043bc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80043c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80043c4:	4642      	mov	r2, r8
 80043c6:	464b      	mov	r3, r9
 80043c8:	1891      	adds	r1, r2, r2
 80043ca:	61b9      	str	r1, [r7, #24]
 80043cc:	415b      	adcs	r3, r3
 80043ce:	61fb      	str	r3, [r7, #28]
 80043d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043d4:	4641      	mov	r1, r8
 80043d6:	1851      	adds	r1, r2, r1
 80043d8:	6139      	str	r1, [r7, #16]
 80043da:	4649      	mov	r1, r9
 80043dc:	414b      	adcs	r3, r1
 80043de:	617b      	str	r3, [r7, #20]
 80043e0:	f04f 0200 	mov.w	r2, #0
 80043e4:	f04f 0300 	mov.w	r3, #0
 80043e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043ec:	4659      	mov	r1, fp
 80043ee:	00cb      	lsls	r3, r1, #3
 80043f0:	4651      	mov	r1, sl
 80043f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043f6:	4651      	mov	r1, sl
 80043f8:	00ca      	lsls	r2, r1, #3
 80043fa:	4610      	mov	r0, r2
 80043fc:	4619      	mov	r1, r3
 80043fe:	4603      	mov	r3, r0
 8004400:	4642      	mov	r2, r8
 8004402:	189b      	adds	r3, r3, r2
 8004404:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004408:	464b      	mov	r3, r9
 800440a:	460a      	mov	r2, r1
 800440c:	eb42 0303 	adc.w	r3, r2, r3
 8004410:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	67bb      	str	r3, [r7, #120]	; 0x78
 800441e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004420:	f04f 0200 	mov.w	r2, #0
 8004424:	f04f 0300 	mov.w	r3, #0
 8004428:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800442c:	4649      	mov	r1, r9
 800442e:	008b      	lsls	r3, r1, #2
 8004430:	4641      	mov	r1, r8
 8004432:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004436:	4641      	mov	r1, r8
 8004438:	008a      	lsls	r2, r1, #2
 800443a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800443e:	f7fb ff3f 	bl	80002c0 <__aeabi_uldivmod>
 8004442:	4602      	mov	r2, r0
 8004444:	460b      	mov	r3, r1
 8004446:	4611      	mov	r1, r2
 8004448:	4b38      	ldr	r3, [pc, #224]	; (800452c <UART_SetConfig+0x4e4>)
 800444a:	fba3 2301 	umull	r2, r3, r3, r1
 800444e:	095b      	lsrs	r3, r3, #5
 8004450:	2264      	movs	r2, #100	; 0x64
 8004452:	fb02 f303 	mul.w	r3, r2, r3
 8004456:	1acb      	subs	r3, r1, r3
 8004458:	011b      	lsls	r3, r3, #4
 800445a:	3332      	adds	r3, #50	; 0x32
 800445c:	4a33      	ldr	r2, [pc, #204]	; (800452c <UART_SetConfig+0x4e4>)
 800445e:	fba2 2303 	umull	r2, r3, r2, r3
 8004462:	095b      	lsrs	r3, r3, #5
 8004464:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004468:	441c      	add	r4, r3
 800446a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800446e:	2200      	movs	r2, #0
 8004470:	673b      	str	r3, [r7, #112]	; 0x70
 8004472:	677a      	str	r2, [r7, #116]	; 0x74
 8004474:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004478:	4642      	mov	r2, r8
 800447a:	464b      	mov	r3, r9
 800447c:	1891      	adds	r1, r2, r2
 800447e:	60b9      	str	r1, [r7, #8]
 8004480:	415b      	adcs	r3, r3
 8004482:	60fb      	str	r3, [r7, #12]
 8004484:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004488:	4641      	mov	r1, r8
 800448a:	1851      	adds	r1, r2, r1
 800448c:	6039      	str	r1, [r7, #0]
 800448e:	4649      	mov	r1, r9
 8004490:	414b      	adcs	r3, r1
 8004492:	607b      	str	r3, [r7, #4]
 8004494:	f04f 0200 	mov.w	r2, #0
 8004498:	f04f 0300 	mov.w	r3, #0
 800449c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80044a0:	4659      	mov	r1, fp
 80044a2:	00cb      	lsls	r3, r1, #3
 80044a4:	4651      	mov	r1, sl
 80044a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044aa:	4651      	mov	r1, sl
 80044ac:	00ca      	lsls	r2, r1, #3
 80044ae:	4610      	mov	r0, r2
 80044b0:	4619      	mov	r1, r3
 80044b2:	4603      	mov	r3, r0
 80044b4:	4642      	mov	r2, r8
 80044b6:	189b      	adds	r3, r3, r2
 80044b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80044ba:	464b      	mov	r3, r9
 80044bc:	460a      	mov	r2, r1
 80044be:	eb42 0303 	adc.w	r3, r2, r3
 80044c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80044c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	663b      	str	r3, [r7, #96]	; 0x60
 80044ce:	667a      	str	r2, [r7, #100]	; 0x64
 80044d0:	f04f 0200 	mov.w	r2, #0
 80044d4:	f04f 0300 	mov.w	r3, #0
 80044d8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80044dc:	4649      	mov	r1, r9
 80044de:	008b      	lsls	r3, r1, #2
 80044e0:	4641      	mov	r1, r8
 80044e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044e6:	4641      	mov	r1, r8
 80044e8:	008a      	lsls	r2, r1, #2
 80044ea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80044ee:	f7fb fee7 	bl	80002c0 <__aeabi_uldivmod>
 80044f2:	4602      	mov	r2, r0
 80044f4:	460b      	mov	r3, r1
 80044f6:	4b0d      	ldr	r3, [pc, #52]	; (800452c <UART_SetConfig+0x4e4>)
 80044f8:	fba3 1302 	umull	r1, r3, r3, r2
 80044fc:	095b      	lsrs	r3, r3, #5
 80044fe:	2164      	movs	r1, #100	; 0x64
 8004500:	fb01 f303 	mul.w	r3, r1, r3
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	011b      	lsls	r3, r3, #4
 8004508:	3332      	adds	r3, #50	; 0x32
 800450a:	4a08      	ldr	r2, [pc, #32]	; (800452c <UART_SetConfig+0x4e4>)
 800450c:	fba2 2303 	umull	r2, r3, r2, r3
 8004510:	095b      	lsrs	r3, r3, #5
 8004512:	f003 020f 	and.w	r2, r3, #15
 8004516:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4422      	add	r2, r4
 800451e:	609a      	str	r2, [r3, #8]
}
 8004520:	bf00      	nop
 8004522:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004526:	46bd      	mov	sp, r7
 8004528:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800452c:	51eb851f 	.word	0x51eb851f

08004530 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004530:	b5b0      	push	{r4, r5, r7, lr}
 8004532:	b08c      	sub	sp, #48	; 0x30
 8004534:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8004536:	2100      	movs	r1, #0
 8004538:	2000      	movs	r0, #0
 800453a:	f006 f963 	bl	800a804 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 800453e:	4b20      	ldr	r3, [pc, #128]	; (80045c0 <MX_LWIP_Init+0x90>)
 8004540:	2200      	movs	r2, #0
 8004542:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8004544:	4b1f      	ldr	r3, [pc, #124]	; (80045c4 <MX_LWIP_Init+0x94>)
 8004546:	2200      	movs	r2, #0
 8004548:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 800454a:	4b1f      	ldr	r3, [pc, #124]	; (80045c8 <MX_LWIP_Init+0x98>)
 800454c:	2200      	movs	r2, #0
 800454e:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8004550:	4b1e      	ldr	r3, [pc, #120]	; (80045cc <MX_LWIP_Init+0x9c>)
 8004552:	9302      	str	r3, [sp, #8]
 8004554:	4b1e      	ldr	r3, [pc, #120]	; (80045d0 <MX_LWIP_Init+0xa0>)
 8004556:	9301      	str	r3, [sp, #4]
 8004558:	2300      	movs	r3, #0
 800455a:	9300      	str	r3, [sp, #0]
 800455c:	4b1a      	ldr	r3, [pc, #104]	; (80045c8 <MX_LWIP_Init+0x98>)
 800455e:	4a19      	ldr	r2, [pc, #100]	; (80045c4 <MX_LWIP_Init+0x94>)
 8004560:	4917      	ldr	r1, [pc, #92]	; (80045c0 <MX_LWIP_Init+0x90>)
 8004562:	481c      	ldr	r0, [pc, #112]	; (80045d4 <MX_LWIP_Init+0xa4>)
 8004564:	f007 fd68 	bl	800c038 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004568:	481a      	ldr	r0, [pc, #104]	; (80045d4 <MX_LWIP_Init+0xa4>)
 800456a:	f007 ff1f 	bl	800c3ac <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800456e:	4b19      	ldr	r3, [pc, #100]	; (80045d4 <MX_LWIP_Init+0xa4>)
 8004570:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004574:	089b      	lsrs	r3, r3, #2
 8004576:	f003 0301 	and.w	r3, r3, #1
 800457a:	b2db      	uxtb	r3, r3
 800457c:	2b00      	cmp	r3, #0
 800457e:	d003      	beq.n	8004588 <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8004580:	4814      	ldr	r0, [pc, #80]	; (80045d4 <MX_LWIP_Init+0xa4>)
 8004582:	f007 ff23 	bl	800c3cc <netif_set_up>
 8004586:	e002      	b.n	800458e <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8004588:	4812      	ldr	r0, [pc, #72]	; (80045d4 <MX_LWIP_Init+0xa4>)
 800458a:	f007 ff8b 	bl	800c4a4 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800458e:	4912      	ldr	r1, [pc, #72]	; (80045d8 <MX_LWIP_Init+0xa8>)
 8004590:	4810      	ldr	r0, [pc, #64]	; (80045d4 <MX_LWIP_Init+0xa4>)
 8004592:	f008 f821 	bl	800c5d8 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 8004596:	4b11      	ldr	r3, [pc, #68]	; (80045dc <MX_LWIP_Init+0xac>)
 8004598:	1d3c      	adds	r4, r7, #4
 800459a:	461d      	mov	r5, r3
 800459c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800459e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80045a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80045a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 80045a8:	1d3b      	adds	r3, r7, #4
 80045aa:	490a      	ldr	r1, [pc, #40]	; (80045d4 <MX_LWIP_Init+0xa4>)
 80045ac:	4618      	mov	r0, r3
 80045ae:	f000 fd23 	bl	8004ff8 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 80045b2:	4808      	ldr	r0, [pc, #32]	; (80045d4 <MX_LWIP_Init+0xa4>)
 80045b4:	f010 f9f4 	bl	80149a0 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80045b8:	bf00      	nop
 80045ba:	3720      	adds	r7, #32
 80045bc:	46bd      	mov	sp, r7
 80045be:	bdb0      	pop	{r4, r5, r7, pc}
 80045c0:	20000530 	.word	0x20000530
 80045c4:	20000534 	.word	0x20000534
 80045c8:	20000538 	.word	0x20000538
 80045cc:	0800a715 	.word	0x0800a715
 80045d0:	08004a81 	.word	0x08004a81
 80045d4:	200004f8 	.word	0x200004f8
 80045d8:	080045e1 	.word	0x080045e1
 80045dc:	0801a028 	.word	0x0801a028

080045e0 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b083      	sub	sp, #12
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80045e8:	bf00      	nop
 80045ea:	370c      	adds	r7, #12
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr

080045f4 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b082      	sub	sp, #8
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 80045fc:	4b04      	ldr	r3, [pc, #16]	; (8004610 <HAL_ETH_RxCpltCallback+0x1c>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4618      	mov	r0, r3
 8004602:	f000 fe75 	bl	80052f0 <osSemaphoreRelease>
}
 8004606:	bf00      	nop
 8004608:	3708      	adds	r7, #8
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	20005008 	.word	0x20005008

08004614 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b082      	sub	sp, #8
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 800461c:	4b04      	ldr	r3, [pc, #16]	; (8004630 <HAL_ETH_TxCpltCallback+0x1c>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4618      	mov	r0, r3
 8004622:	f000 fe65 	bl	80052f0 <osSemaphoreRelease>
}
 8004626:	bf00      	nop
 8004628:	3708      	adds	r7, #8
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
 800462e:	bf00      	nop
 8004630:	2000500c 	.word	0x2000500c

08004634 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f7fd fee5 	bl	800240c <HAL_ETH_GetDMAError>
 8004642:	4603      	mov	r3, r0
 8004644:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004648:	2b80      	cmp	r3, #128	; 0x80
 800464a:	d104      	bne.n	8004656 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 800464c:	4b04      	ldr	r3, [pc, #16]	; (8004660 <HAL_ETH_ErrorCallback+0x2c>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4618      	mov	r0, r3
 8004652:	f000 fe4d 	bl	80052f0 <osSemaphoreRelease>
  }
}
 8004656:	bf00      	nop
 8004658:	3708      	adds	r7, #8
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop
 8004660:	20005008 	.word	0x20005008

08004664 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004664:	b5b0      	push	{r4, r5, r7, lr}
 8004666:	b0a8      	sub	sp, #160	; 0xa0
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800466c:	2300      	movs	r3, #0
 800466e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t duplex, speed = 0;
 8004672:	2300      	movs	r3, #0
 8004674:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  int32_t PHYLinkState = 0;
 8004678:	2300      	movs	r3, #0
 800467a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  ETH_MACConfigTypeDef MACConf = {0};
 800467e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004682:	2264      	movs	r2, #100	; 0x64
 8004684:	2100      	movs	r1, #0
 8004686:	4618      	mov	r0, r3
 8004688:	f014 fb25 	bl	8018cd6 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800468c:	4b85      	ldr	r3, [pc, #532]	; (80048a4 <low_level_init+0x240>)
 800468e:	4a86      	ldr	r2, [pc, #536]	; (80048a8 <low_level_init+0x244>)
 8004690:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8004692:	2300      	movs	r3, #0
 8004694:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  MACAddr[1] = 0x80;
 8004698:	2380      	movs	r3, #128	; 0x80
 800469a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  MACAddr[2] = 0xE1;
 800469e:	23e1      	movs	r3, #225	; 0xe1
 80046a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  MACAddr[3] = 0xFE;
 80046a4:	23fe      	movs	r3, #254	; 0xfe
 80046a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  MACAddr[4] = 0xEC;
 80046aa:	23ec      	movs	r3, #236	; 0xec
 80046ac:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  MACAddr[5] = 0x73;
 80046b0:	2373      	movs	r3, #115	; 0x73
 80046b2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  heth.Init.MACAddr = &MACAddr[0];
 80046b6:	4a7b      	ldr	r2, [pc, #492]	; (80048a4 <low_level_init+0x240>)
 80046b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046bc:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80046be:	4b79      	ldr	r3, [pc, #484]	; (80048a4 <low_level_init+0x240>)
 80046c0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80046c4:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80046c6:	4b77      	ldr	r3, [pc, #476]	; (80048a4 <low_level_init+0x240>)
 80046c8:	4a78      	ldr	r2, [pc, #480]	; (80048ac <low_level_init+0x248>)
 80046ca:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80046cc:	4b75      	ldr	r3, [pc, #468]	; (80048a4 <low_level_init+0x240>)
 80046ce:	4a78      	ldr	r2, [pc, #480]	; (80048b0 <low_level_init+0x24c>)
 80046d0:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80046d2:	4b74      	ldr	r3, [pc, #464]	; (80048a4 <low_level_init+0x240>)
 80046d4:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80046d8:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80046da:	4872      	ldr	r0, [pc, #456]	; (80048a4 <low_level_init+0x240>)
 80046dc:	f7fd f858 	bl	8001790 <HAL_ETH_Init>
 80046e0:	4603      	mov	r3, r0
 80046e2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80046e6:	2238      	movs	r2, #56	; 0x38
 80046e8:	2100      	movs	r1, #0
 80046ea:	4872      	ldr	r0, [pc, #456]	; (80048b4 <low_level_init+0x250>)
 80046ec:	f014 faf3 	bl	8018cd6 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80046f0:	4b70      	ldr	r3, [pc, #448]	; (80048b4 <low_level_init+0x250>)
 80046f2:	2221      	movs	r2, #33	; 0x21
 80046f4:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80046f6:	4b6f      	ldr	r3, [pc, #444]	; (80048b4 <low_level_init+0x250>)
 80046f8:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80046fc:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80046fe:	4b6d      	ldr	r3, [pc, #436]	; (80048b4 <low_level_init+0x250>)
 8004700:	2200      	movs	r2, #0
 8004702:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8004704:	486c      	ldr	r0, [pc, #432]	; (80048b8 <low_level_init+0x254>)
 8004706:	f007 fb51 	bl	800bdac <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2206      	movs	r2, #6
 800470e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004712:	4b64      	ldr	r3, [pc, #400]	; (80048a4 <low_level_init+0x240>)
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	781a      	ldrb	r2, [r3, #0]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800471e:	4b61      	ldr	r3, [pc, #388]	; (80048a4 <low_level_init+0x240>)
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	785a      	ldrb	r2, [r3, #1]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800472a:	4b5e      	ldr	r3, [pc, #376]	; (80048a4 <low_level_init+0x240>)
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	789a      	ldrb	r2, [r3, #2]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004736:	4b5b      	ldr	r3, [pc, #364]	; (80048a4 <low_level_init+0x240>)
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	78da      	ldrb	r2, [r3, #3]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004742:	4b58      	ldr	r3, [pc, #352]	; (80048a4 <low_level_init+0x240>)
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	791a      	ldrb	r2, [r3, #4]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800474e:	4b55      	ldr	r3, [pc, #340]	; (80048a4 <low_level_init+0x240>)
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	795a      	ldrb	r2, [r3, #5]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004760:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004768:	f043 030a 	orr.w	r3, r3, #10
 800476c:	b2da      	uxtb	r2, r3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = xSemaphoreCreateBinary();
 8004774:	2203      	movs	r2, #3
 8004776:	2100      	movs	r1, #0
 8004778:	2001      	movs	r0, #1
 800477a:	f001 f89d 	bl	80058b8 <xQueueGenericCreate>
 800477e:	4603      	mov	r3, r0
 8004780:	4a4e      	ldr	r2, [pc, #312]	; (80048bc <low_level_init+0x258>)
 8004782:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = xSemaphoreCreateBinary();
 8004784:	2203      	movs	r2, #3
 8004786:	2100      	movs	r1, #0
 8004788:	2001      	movs	r0, #1
 800478a:	f001 f895 	bl	80058b8 <xQueueGenericCreate>
 800478e:	4603      	mov	r3, r0
 8004790:	4a4b      	ldr	r2, [pc, #300]	; (80048c0 <low_level_init+0x25c>)
 8004792:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8004794:	4b4b      	ldr	r3, [pc, #300]	; (80048c4 <low_level_init+0x260>)
 8004796:	f107 0408 	add.w	r4, r7, #8
 800479a:	461d      	mov	r5, r3
 800479c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800479e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80047a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80047a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 80047a8:	f107 0308 	add.w	r3, r7, #8
 80047ac:	6879      	ldr	r1, [r7, #4]
 80047ae:	4618      	mov	r0, r3
 80047b0:	f000 fc22 	bl	8004ff8 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 80047b4:	4944      	ldr	r1, [pc, #272]	; (80048c8 <low_level_init+0x264>)
 80047b6:	4845      	ldr	r0, [pc, #276]	; (80048cc <low_level_init+0x268>)
 80047b8:	f7fc fd41 	bl	800123e <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 80047bc:	4843      	ldr	r0, [pc, #268]	; (80048cc <low_level_init+0x268>)
 80047be:	f7fc fd70 	bl	80012a2 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 80047c2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d165      	bne.n	8004896 <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80047ca:	4840      	ldr	r0, [pc, #256]	; (80048cc <low_level_init+0x268>)
 80047cc:	f7fc fe11 	bl	80013f2 <LAN8742_GetLinkState>
 80047d0:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 80047d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80047d8:	2b01      	cmp	r3, #1
 80047da:	dc06      	bgt.n	80047ea <low_level_init+0x186>
    {
      netif_set_link_down(netif);
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f007 fecb 	bl	800c578 <netif_set_link_down>
      netif_set_down(netif);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f007 fe5e 	bl	800c4a4 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80047e8:	e057      	b.n	800489a <low_level_init+0x236>
      switch (PHYLinkState)
 80047ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80047ee:	3b02      	subs	r3, #2
 80047f0:	2b03      	cmp	r3, #3
 80047f2:	d82b      	bhi.n	800484c <low_level_init+0x1e8>
 80047f4:	a201      	add	r2, pc, #4	; (adr r2, 80047fc <low_level_init+0x198>)
 80047f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047fa:	bf00      	nop
 80047fc:	0800480d 	.word	0x0800480d
 8004800:	0800481f 	.word	0x0800481f
 8004804:	0800482f 	.word	0x0800482f
 8004808:	0800483f 	.word	0x0800483f
        duplex = ETH_FULLDUPLEX_MODE;
 800480c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004810:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8004814:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004818:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 800481c:	e01f      	b.n	800485e <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 800481e:	2300      	movs	r3, #0
 8004820:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8004824:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004828:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 800482c:	e017      	b.n	800485e <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 800482e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004832:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 8004836:	2300      	movs	r3, #0
 8004838:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 800483c:	e00f      	b.n	800485e <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 800483e:	2300      	movs	r3, #0
 8004840:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 8004844:	2300      	movs	r3, #0
 8004846:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 800484a:	e008      	b.n	800485e <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 800484c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004850:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8004854:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004858:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 800485c:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800485e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004862:	4619      	mov	r1, r3
 8004864:	480f      	ldr	r0, [pc, #60]	; (80048a4 <low_level_init+0x240>)
 8004866:	f7fd fc77 	bl	8002158 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800486a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800486e:	647b      	str	r3, [r7, #68]	; 0x44
    MACConf.Speed = speed;
 8004870:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004874:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8004876:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800487a:	4619      	mov	r1, r3
 800487c:	4809      	ldr	r0, [pc, #36]	; (80048a4 <low_level_init+0x240>)
 800487e:	f7fd fd55 	bl	800232c <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8004882:	4808      	ldr	r0, [pc, #32]	; (80048a4 <low_level_init+0x240>)
 8004884:	f7fd f802 	bl	800188c <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f007 fd9f 	bl	800c3cc <netif_set_up>
    netif_set_link_up(netif);
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f007 fe3a 	bl	800c508 <netif_set_link_up>
}
 8004894:	e001      	b.n	800489a <low_level_init+0x236>
    Error_Handler();
 8004896:	f7fc f875 	bl	8000984 <Error_Handler>
}
 800489a:	bf00      	nop
 800489c:	37a0      	adds	r7, #160	; 0xa0
 800489e:	46bd      	mov	sp, r7
 80048a0:	bdb0      	pop	{r4, r5, r7, pc}
 80048a2:	bf00      	nop
 80048a4:	20005010 	.word	0x20005010
 80048a8:	40028000 	.word	0x40028000
 80048ac:	20004f68 	.word	0x20004f68
 80048b0:	20004ec8 	.word	0x20004ec8
 80048b4:	200050c0 	.word	0x200050c0
 80048b8:	0801db6c 	.word	0x0801db6c
 80048bc:	20005008 	.word	0x20005008
 80048c0:	2000500c 	.word	0x2000500c
 80048c4:	0801a04c 	.word	0x0801a04c
 80048c8:	2000000c 	.word	0x2000000c
 80048cc:	200050f8 	.word	0x200050f8

080048d0 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b092      	sub	sp, #72	; 0x48
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 80048da:	2300      	movs	r3, #0
 80048dc:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 80048de:	2300      	movs	r3, #0
 80048e0:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 80048e2:	2300      	movs	r3, #0
 80048e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 80048e8:	f107 030c 	add.w	r3, r7, #12
 80048ec:	2230      	movs	r2, #48	; 0x30
 80048ee:	2100      	movs	r1, #0
 80048f0:	4618      	mov	r0, r3
 80048f2:	f014 f9f0 	bl	8018cd6 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80048f6:	f107 030c 	add.w	r3, r7, #12
 80048fa:	2230      	movs	r2, #48	; 0x30
 80048fc:	2100      	movs	r1, #0
 80048fe:	4618      	mov	r0, r3
 8004900:	f014 f9e9 	bl	8018cd6 <memset>

  for(q = p; q != NULL; q = q->next)
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	643b      	str	r3, [r7, #64]	; 0x40
 8004908:	e045      	b.n	8004996 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800490a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800490c:	2b03      	cmp	r3, #3
 800490e:	d902      	bls.n	8004916 <low_level_output+0x46>
      return ERR_IF;
 8004910:	f06f 030b 	mvn.w	r3, #11
 8004914:	e065      	b.n	80049e2 <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 8004916:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004918:	6859      	ldr	r1, [r3, #4]
 800491a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800491c:	4613      	mov	r3, r2
 800491e:	005b      	lsls	r3, r3, #1
 8004920:	4413      	add	r3, r2
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	3348      	adds	r3, #72	; 0x48
 8004926:	443b      	add	r3, r7
 8004928:	3b3c      	subs	r3, #60	; 0x3c
 800492a:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800492c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800492e:	895b      	ldrh	r3, [r3, #10]
 8004930:	4619      	mov	r1, r3
 8004932:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004934:	4613      	mov	r3, r2
 8004936:	005b      	lsls	r3, r3, #1
 8004938:	4413      	add	r3, r2
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	3348      	adds	r3, #72	; 0x48
 800493e:	443b      	add	r3, r7
 8004940:	3b38      	subs	r3, #56	; 0x38
 8004942:	6019      	str	r1, [r3, #0]

    if(i>0)
 8004944:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004946:	2b00      	cmp	r3, #0
 8004948:	d011      	beq.n	800496e <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800494a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800494c:	1e5a      	subs	r2, r3, #1
 800494e:	f107 000c 	add.w	r0, r7, #12
 8004952:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004954:	460b      	mov	r3, r1
 8004956:	005b      	lsls	r3, r3, #1
 8004958:	440b      	add	r3, r1
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	18c1      	adds	r1, r0, r3
 800495e:	4613      	mov	r3, r2
 8004960:	005b      	lsls	r3, r3, #1
 8004962:	4413      	add	r3, r2
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	3348      	adds	r3, #72	; 0x48
 8004968:	443b      	add	r3, r7
 800496a:	3b34      	subs	r3, #52	; 0x34
 800496c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800496e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d109      	bne.n	800498a <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8004976:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004978:	4613      	mov	r3, r2
 800497a:	005b      	lsls	r3, r3, #1
 800497c:	4413      	add	r3, r2
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	3348      	adds	r3, #72	; 0x48
 8004982:	443b      	add	r3, r7
 8004984:	3b34      	subs	r3, #52	; 0x34
 8004986:	2200      	movs	r2, #0
 8004988:	601a      	str	r2, [r3, #0]
    }

    i++;
 800498a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800498c:	3301      	adds	r3, #1
 800498e:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8004990:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	643b      	str	r3, [r7, #64]	; 0x40
 8004996:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004998:	2b00      	cmp	r3, #0
 800499a:	d1b6      	bne.n	800490a <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	891b      	ldrh	r3, [r3, #8]
 80049a0:	461a      	mov	r2, r3
 80049a2:	4b12      	ldr	r3, [pc, #72]	; (80049ec <low_level_output+0x11c>)
 80049a4:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 80049a6:	4a11      	ldr	r2, [pc, #68]	; (80049ec <low_level_output+0x11c>)
 80049a8:	f107 030c 	add.w	r3, r7, #12
 80049ac:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 80049ae:	4a0f      	ldr	r2, [pc, #60]	; (80049ec <low_level_output+0x11c>)
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 80049b4:	6838      	ldr	r0, [r7, #0]
 80049b6:	f008 fa63 	bl	800ce80 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 80049ba:	490c      	ldr	r1, [pc, #48]	; (80049ec <low_level_output+0x11c>)
 80049bc:	480c      	ldr	r0, [pc, #48]	; (80049f0 <low_level_output+0x120>)
 80049be:	f7fd f872 	bl	8001aa6 <HAL_ETH_Transmit_IT>
  while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 80049c2:	bf00      	nop
 80049c4:	4b0b      	ldr	r3, [pc, #44]	; (80049f4 <low_level_output+0x124>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f04f 31ff 	mov.w	r1, #4294967295
 80049cc:	4618      	mov	r0, r3
 80049ce:	f000 fc41 	bl	8005254 <osSemaphoreWait>
 80049d2:	4603      	mov	r3, r0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d1f5      	bne.n	80049c4 <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 80049d8:	4805      	ldr	r0, [pc, #20]	; (80049f0 <low_level_output+0x120>)
 80049da:	f7fd f9f7 	bl	8001dcc <HAL_ETH_ReleaseTxPacket>

  return errval;
 80049de:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3748      	adds	r7, #72	; 0x48
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	200050c0 	.word	0x200050c0
 80049f0:	20005010 	.word	0x20005010
 80049f4:	2000500c 	.word	0x2000500c

080049f8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b084      	sub	sp, #16
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004a00:	2300      	movs	r3, #0
 8004a02:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8004a04:	4b07      	ldr	r3, [pc, #28]	; (8004a24 <low_level_input+0x2c>)
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d105      	bne.n	8004a18 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8004a0c:	f107 030c 	add.w	r3, r7, #12
 8004a10:	4619      	mov	r1, r3
 8004a12:	4805      	ldr	r0, [pc, #20]	; (8004a28 <low_level_input+0x30>)
 8004a14:	f7fd f8a3 	bl	8001b5e <HAL_ETH_ReadData>
  }

  return p;
 8004a18:	68fb      	ldr	r3, [r7, #12]
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3710      	adds	r7, #16
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	20004ec4 	.word	0x20004ec4
 8004a28:	20005010 	.word	0x20005010

08004a2c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004a34:	2300      	movs	r3, #0
 8004a36:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004a3c:	4b0f      	ldr	r3, [pc, #60]	; (8004a7c <ethernetif_input+0x50>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f04f 31ff 	mov.w	r1, #4294967295
 8004a44:	4618      	mov	r0, r3
 8004a46:	f000 fc05 	bl	8005254 <osSemaphoreWait>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d1f5      	bne.n	8004a3c <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8004a50:	68b8      	ldr	r0, [r7, #8]
 8004a52:	f7ff ffd1 	bl	80049f8 <low_level_input>
 8004a56:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00a      	beq.n	8004a74 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	68b9      	ldr	r1, [r7, #8]
 8004a64:	68f8      	ldr	r0, [r7, #12]
 8004a66:	4798      	blx	r3
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d002      	beq.n	8004a74 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8004a6e:	68f8      	ldr	r0, [r7, #12]
 8004a70:	f008 f960 	bl	800cd34 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d1ea      	bne.n	8004a50 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004a7a:	e7df      	b.n	8004a3c <ethernetif_input+0x10>
 8004a7c:	20005008 	.word	0x20005008

08004a80 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b082      	sub	sp, #8
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d106      	bne.n	8004a9c <ethernetif_init+0x1c>
 8004a8e:	4b0e      	ldr	r3, [pc, #56]	; (8004ac8 <ethernetif_init+0x48>)
 8004a90:	f240 12df 	movw	r2, #479	; 0x1df
 8004a94:	490d      	ldr	r1, [pc, #52]	; (8004acc <ethernetif_init+0x4c>)
 8004a96:	480e      	ldr	r0, [pc, #56]	; (8004ad0 <ethernetif_init+0x50>)
 8004a98:	f014 f87e 	bl	8018b98 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2273      	movs	r2, #115	; 0x73
 8004aa0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2274      	movs	r2, #116	; 0x74
 8004aa8:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	4a09      	ldr	r2, [pc, #36]	; (8004ad4 <ethernetif_init+0x54>)
 8004ab0:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a08      	ldr	r2, [pc, #32]	; (8004ad8 <ethernetif_init+0x58>)
 8004ab6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f7ff fdd3 	bl	8004664 <low_level_init>

  return ERR_OK;
 8004abe:	2300      	movs	r3, #0
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3708      	adds	r7, #8
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	0801a068 	.word	0x0801a068
 8004acc:	0801a084 	.word	0x0801a084
 8004ad0:	0801a094 	.word	0x0801a094
 8004ad4:	0801686d 	.word	0x0801686d
 8004ad8:	080048d1 	.word	0x080048d1

08004adc <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b084      	sub	sp, #16
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8004ae8:	68f9      	ldr	r1, [r7, #12]
 8004aea:	4809      	ldr	r0, [pc, #36]	; (8004b10 <pbuf_free_custom+0x34>)
 8004aec:	f007 fa4e 	bl	800bf8c <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8004af0:	4b08      	ldr	r3, [pc, #32]	; (8004b14 <pbuf_free_custom+0x38>)
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d107      	bne.n	8004b08 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8004af8:	4b06      	ldr	r3, [pc, #24]	; (8004b14 <pbuf_free_custom+0x38>)
 8004afa:	2200      	movs	r2, #0
 8004afc:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8004afe:	4b06      	ldr	r3, [pc, #24]	; (8004b18 <pbuf_free_custom+0x3c>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4618      	mov	r0, r3
 8004b04:	f000 fbf4 	bl	80052f0 <osSemaphoreRelease>
  }
}
 8004b08:	bf00      	nop
 8004b0a:	3710      	adds	r7, #16
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	0801db6c 	.word	0x0801db6c
 8004b14:	20004ec4 	.word	0x20004ec4
 8004b18:	20005008 	.word	0x20005008

08004b1c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004b20:	f7fc fd24 	bl	800156c <HAL_GetTick>
 8004b24:	4603      	mov	r3, r0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	bd80      	pop	{r7, pc}
	...

08004b2c <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b08e      	sub	sp, #56	; 0x38
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b38:	2200      	movs	r2, #0
 8004b3a:	601a      	str	r2, [r3, #0]
 8004b3c:	605a      	str	r2, [r3, #4]
 8004b3e:	609a      	str	r2, [r3, #8]
 8004b40:	60da      	str	r2, [r3, #12]
 8004b42:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a59      	ldr	r2, [pc, #356]	; (8004cb0 <HAL_ETH_MspInit+0x184>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	f040 80ac 	bne.w	8004ca8 <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004b50:	2300      	movs	r3, #0
 8004b52:	623b      	str	r3, [r7, #32]
 8004b54:	4b57      	ldr	r3, [pc, #348]	; (8004cb4 <HAL_ETH_MspInit+0x188>)
 8004b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b58:	4a56      	ldr	r2, [pc, #344]	; (8004cb4 <HAL_ETH_MspInit+0x188>)
 8004b5a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004b5e:	6313      	str	r3, [r2, #48]	; 0x30
 8004b60:	4b54      	ldr	r3, [pc, #336]	; (8004cb4 <HAL_ETH_MspInit+0x188>)
 8004b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b68:	623b      	str	r3, [r7, #32]
 8004b6a:	6a3b      	ldr	r3, [r7, #32]
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	61fb      	str	r3, [r7, #28]
 8004b70:	4b50      	ldr	r3, [pc, #320]	; (8004cb4 <HAL_ETH_MspInit+0x188>)
 8004b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b74:	4a4f      	ldr	r2, [pc, #316]	; (8004cb4 <HAL_ETH_MspInit+0x188>)
 8004b76:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b7a:	6313      	str	r3, [r2, #48]	; 0x30
 8004b7c:	4b4d      	ldr	r3, [pc, #308]	; (8004cb4 <HAL_ETH_MspInit+0x188>)
 8004b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b80:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b84:	61fb      	str	r3, [r7, #28]
 8004b86:	69fb      	ldr	r3, [r7, #28]
 8004b88:	2300      	movs	r3, #0
 8004b8a:	61bb      	str	r3, [r7, #24]
 8004b8c:	4b49      	ldr	r3, [pc, #292]	; (8004cb4 <HAL_ETH_MspInit+0x188>)
 8004b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b90:	4a48      	ldr	r2, [pc, #288]	; (8004cb4 <HAL_ETH_MspInit+0x188>)
 8004b92:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004b96:	6313      	str	r3, [r2, #48]	; 0x30
 8004b98:	4b46      	ldr	r3, [pc, #280]	; (8004cb4 <HAL_ETH_MspInit+0x188>)
 8004b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ba0:	61bb      	str	r3, [r7, #24]
 8004ba2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	617b      	str	r3, [r7, #20]
 8004ba8:	4b42      	ldr	r3, [pc, #264]	; (8004cb4 <HAL_ETH_MspInit+0x188>)
 8004baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bac:	4a41      	ldr	r2, [pc, #260]	; (8004cb4 <HAL_ETH_MspInit+0x188>)
 8004bae:	f043 0304 	orr.w	r3, r3, #4
 8004bb2:	6313      	str	r3, [r2, #48]	; 0x30
 8004bb4:	4b3f      	ldr	r3, [pc, #252]	; (8004cb4 <HAL_ETH_MspInit+0x188>)
 8004bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb8:	f003 0304 	and.w	r3, r3, #4
 8004bbc:	617b      	str	r3, [r7, #20]
 8004bbe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	613b      	str	r3, [r7, #16]
 8004bc4:	4b3b      	ldr	r3, [pc, #236]	; (8004cb4 <HAL_ETH_MspInit+0x188>)
 8004bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc8:	4a3a      	ldr	r2, [pc, #232]	; (8004cb4 <HAL_ETH_MspInit+0x188>)
 8004bca:	f043 0301 	orr.w	r3, r3, #1
 8004bce:	6313      	str	r3, [r2, #48]	; 0x30
 8004bd0:	4b38      	ldr	r3, [pc, #224]	; (8004cb4 <HAL_ETH_MspInit+0x188>)
 8004bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd4:	f003 0301 	and.w	r3, r3, #1
 8004bd8:	613b      	str	r3, [r7, #16]
 8004bda:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bdc:	2300      	movs	r3, #0
 8004bde:	60fb      	str	r3, [r7, #12]
 8004be0:	4b34      	ldr	r3, [pc, #208]	; (8004cb4 <HAL_ETH_MspInit+0x188>)
 8004be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be4:	4a33      	ldr	r2, [pc, #204]	; (8004cb4 <HAL_ETH_MspInit+0x188>)
 8004be6:	f043 0302 	orr.w	r3, r3, #2
 8004bea:	6313      	str	r3, [r2, #48]	; 0x30
 8004bec:	4b31      	ldr	r3, [pc, #196]	; (8004cb4 <HAL_ETH_MspInit+0x188>)
 8004bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf0:	f003 0302 	and.w	r3, r3, #2
 8004bf4:	60fb      	str	r3, [r7, #12]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	60bb      	str	r3, [r7, #8]
 8004bfc:	4b2d      	ldr	r3, [pc, #180]	; (8004cb4 <HAL_ETH_MspInit+0x188>)
 8004bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c00:	4a2c      	ldr	r2, [pc, #176]	; (8004cb4 <HAL_ETH_MspInit+0x188>)
 8004c02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c06:	6313      	str	r3, [r2, #48]	; 0x30
 8004c08:	4b2a      	ldr	r3, [pc, #168]	; (8004cb4 <HAL_ETH_MspInit+0x188>)
 8004c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c10:	60bb      	str	r3, [r7, #8]
 8004c12:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8004c14:	2332      	movs	r3, #50	; 0x32
 8004c16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c18:	2302      	movs	r3, #2
 8004c1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c20:	2303      	movs	r3, #3
 8004c22:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004c24:	230b      	movs	r3, #11
 8004c26:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c2c:	4619      	mov	r1, r3
 8004c2e:	4822      	ldr	r0, [pc, #136]	; (8004cb8 <HAL_ETH_MspInit+0x18c>)
 8004c30:	f7fd fffe 	bl	8002c30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8004c34:	2386      	movs	r3, #134	; 0x86
 8004c36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c38:	2302      	movs	r3, #2
 8004c3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c40:	2303      	movs	r3, #3
 8004c42:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004c44:	230b      	movs	r3, #11
 8004c46:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c4c:	4619      	mov	r1, r3
 8004c4e:	481b      	ldr	r0, [pc, #108]	; (8004cbc <HAL_ETH_MspInit+0x190>)
 8004c50:	f7fd ffee 	bl	8002c30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8004c54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004c58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c5a:	2302      	movs	r3, #2
 8004c5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c62:	2303      	movs	r3, #3
 8004c64:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004c66:	230b      	movs	r3, #11
 8004c68:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8004c6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c6e:	4619      	mov	r1, r3
 8004c70:	4813      	ldr	r0, [pc, #76]	; (8004cc0 <HAL_ETH_MspInit+0x194>)
 8004c72:	f7fd ffdd 	bl	8002c30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8004c76:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004c7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c7c:	2302      	movs	r3, #2
 8004c7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c80:	2300      	movs	r3, #0
 8004c82:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c84:	2303      	movs	r3, #3
 8004c86:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004c88:	230b      	movs	r3, #11
 8004c8a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004c8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c90:	4619      	mov	r1, r3
 8004c92:	480c      	ldr	r0, [pc, #48]	; (8004cc4 <HAL_ETH_MspInit+0x198>)
 8004c94:	f7fd ffcc 	bl	8002c30 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8004c98:	2200      	movs	r2, #0
 8004c9a:	2105      	movs	r1, #5
 8004c9c:	203d      	movs	r0, #61	; 0x3d
 8004c9e:	f7fc fd4d 	bl	800173c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8004ca2:	203d      	movs	r0, #61	; 0x3d
 8004ca4:	f7fc fd66 	bl	8001774 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004ca8:	bf00      	nop
 8004caa:	3738      	adds	r7, #56	; 0x38
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}
 8004cb0:	40028000 	.word	0x40028000
 8004cb4:	40023800 	.word	0x40023800
 8004cb8:	40020800 	.word	0x40020800
 8004cbc:	40020000 	.word	0x40020000
 8004cc0:	40020400 	.word	0x40020400
 8004cc4:	40021800 	.word	0x40021800

08004cc8 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8004ccc:	4802      	ldr	r0, [pc, #8]	; (8004cd8 <ETH_PHY_IO_Init+0x10>)
 8004cce:	f7fd fb47 	bl	8002360 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8004cd2:	2300      	movs	r3, #0
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	20005010 	.word	0x20005010

08004cdc <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	af00      	add	r7, sp, #0
  return 0;
 8004ce0:	2300      	movs	r3, #0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	60b9      	str	r1, [r7, #8]
 8004cf6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	68ba      	ldr	r2, [r7, #8]
 8004cfc:	68f9      	ldr	r1, [r7, #12]
 8004cfe:	4807      	ldr	r0, [pc, #28]	; (8004d1c <ETH_PHY_IO_ReadReg+0x30>)
 8004d00:	f7fd f996 	bl	8002030 <HAL_ETH_ReadPHYRegister>
 8004d04:	4603      	mov	r3, r0
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d002      	beq.n	8004d10 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8004d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8004d0e:	e000      	b.n	8004d12 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3710      	adds	r7, #16
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	20005010 	.word	0x20005010

08004d20 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b084      	sub	sp, #16
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	68ba      	ldr	r2, [r7, #8]
 8004d30:	68f9      	ldr	r1, [r7, #12]
 8004d32:	4807      	ldr	r0, [pc, #28]	; (8004d50 <ETH_PHY_IO_WriteReg+0x30>)
 8004d34:	f7fd f9c7 	bl	80020c6 <HAL_ETH_WritePHYRegister>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d002      	beq.n	8004d44 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8004d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8004d42:	e000      	b.n	8004d46 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3710      	adds	r7, #16
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	20005010 	.word	0x20005010

08004d54 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004d58:	f7fc fc08 	bl	800156c <HAL_GetTick>
 8004d5c:	4603      	mov	r3, r0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	bd80      	pop	{r7, pc}
	...

08004d64 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b0a0      	sub	sp, #128	; 0x80
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8004d6c:	f107 0308 	add.w	r3, r7, #8
 8004d70:	2264      	movs	r2, #100	; 0x64
 8004d72:	2100      	movs	r1, #0
 8004d74:	4618      	mov	r0, r3
 8004d76:	f013 ffae 	bl	8018cd6 <memset>
  int32_t PHYLinkState = 0;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004d82:	2300      	movs	r3, #0
 8004d84:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d86:	2300      	movs	r3, #0
 8004d88:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8004d8e:	483a      	ldr	r0, [pc, #232]	; (8004e78 <ethernet_link_thread+0x114>)
 8004d90:	f7fc fb2f 	bl	80013f2 <LAN8742_GetLinkState>
 8004d94:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8004d96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d98:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004d9c:	089b      	lsrs	r3, r3, #2
 8004d9e:	f003 0301 	and.w	r3, r3, #1
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d00c      	beq.n	8004dc2 <ethernet_link_thread+0x5e>
 8004da8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	dc09      	bgt.n	8004dc2 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8004dae:	4833      	ldr	r0, [pc, #204]	; (8004e7c <ethernet_link_thread+0x118>)
 8004db0:	f7fc fdfa 	bl	80019a8 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8004db4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004db6:	f007 fb75 	bl	800c4a4 <netif_set_down>
    netif_set_link_down(netif);
 8004dba:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004dbc:	f007 fbdc 	bl	800c578 <netif_set_link_down>
 8004dc0:	e055      	b.n	8004e6e <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8004dc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dc4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004dc8:	f003 0304 	and.w	r3, r3, #4
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d14e      	bne.n	8004e6e <ethernet_link_thread+0x10a>
 8004dd0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	dd4b      	ble.n	8004e6e <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8004dd6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004dd8:	3b02      	subs	r3, #2
 8004dda:	2b03      	cmp	r3, #3
 8004ddc:	d82a      	bhi.n	8004e34 <ethernet_link_thread+0xd0>
 8004dde:	a201      	add	r2, pc, #4	; (adr r2, 8004de4 <ethernet_link_thread+0x80>)
 8004de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004de4:	08004df5 	.word	0x08004df5
 8004de8:	08004e07 	.word	0x08004e07
 8004dec:	08004e17 	.word	0x08004e17
 8004df0:	08004e27 	.word	0x08004e27
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8004df4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004df8:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8004dfa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004dfe:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004e00:	2301      	movs	r3, #1
 8004e02:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004e04:	e017      	b.n	8004e36 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8004e06:	2300      	movs	r3, #0
 8004e08:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8004e0a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004e0e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004e10:	2301      	movs	r3, #1
 8004e12:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004e14:	e00f      	b.n	8004e36 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8004e16:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004e1a:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004e20:	2301      	movs	r3, #1
 8004e22:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004e24:	e007      	b.n	8004e36 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8004e26:	2300      	movs	r3, #0
 8004e28:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004e32:	e000      	b.n	8004e36 <ethernet_link_thread+0xd2>
    default:
      break;
 8004e34:	bf00      	nop
    }

    if(linkchanged)
 8004e36:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d018      	beq.n	8004e6e <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8004e3c:	f107 0308 	add.w	r3, r7, #8
 8004e40:	4619      	mov	r1, r3
 8004e42:	480e      	ldr	r0, [pc, #56]	; (8004e7c <ethernet_link_thread+0x118>)
 8004e44:	f7fd f988 	bl	8002158 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8004e48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e4a:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8004e4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e4e:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8004e50:	f107 0308 	add.w	r3, r7, #8
 8004e54:	4619      	mov	r1, r3
 8004e56:	4809      	ldr	r0, [pc, #36]	; (8004e7c <ethernet_link_thread+0x118>)
 8004e58:	f7fd fa68 	bl	800232c <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8004e5c:	4807      	ldr	r0, [pc, #28]	; (8004e7c <ethernet_link_thread+0x118>)
 8004e5e:	f7fc fd15 	bl	800188c <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8004e62:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004e64:	f007 fab2 	bl	800c3cc <netif_set_up>
      netif_set_link_up(netif);
 8004e68:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004e6a:	f007 fb4d 	bl	800c508 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8004e6e:	2064      	movs	r0, #100	; 0x64
 8004e70:	f000 f90e 	bl	8005090 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8004e74:	e78b      	b.n	8004d8e <ethernet_link_thread+0x2a>
 8004e76:	bf00      	nop
 8004e78:	200050f8 	.word	0x200050f8
 8004e7c:	20005010 	.word	0x20005010

08004e80 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b086      	sub	sp, #24
 8004e84:	af02      	add	r7, sp, #8
 8004e86:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8004e88:	4812      	ldr	r0, [pc, #72]	; (8004ed4 <HAL_ETH_RxAllocateCallback+0x54>)
 8004e8a:	f007 f80b 	bl	800bea4 <memp_malloc_pool>
 8004e8e:	60f8      	str	r0, [r7, #12]
  if (p)
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d014      	beq.n	8004ec0 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f103 0220 	add.w	r2, r3, #32
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	4a0d      	ldr	r2, [pc, #52]	; (8004ed8 <HAL_ETH_RxAllocateCallback+0x58>)
 8004ea4:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004eae:	9201      	str	r2, [sp, #4]
 8004eb0:	9300      	str	r3, [sp, #0]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2241      	movs	r2, #65	; 0x41
 8004eb6:	2100      	movs	r1, #0
 8004eb8:	2000      	movs	r0, #0
 8004eba:	f007 fd81 	bl	800c9c0 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8004ebe:	e005      	b.n	8004ecc <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8004ec0:	4b06      	ldr	r3, [pc, #24]	; (8004edc <HAL_ETH_RxAllocateCallback+0x5c>)
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	601a      	str	r2, [r3, #0]
}
 8004ecc:	bf00      	nop
 8004ece:	3710      	adds	r7, #16
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	0801db6c 	.word	0x0801db6c
 8004ed8:	08004add 	.word	0x08004add
 8004edc:	20004ec4 	.word	0x20004ec4

08004ee0 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b089      	sub	sp, #36	; 0x24
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	60f8      	str	r0, [r7, #12]
 8004ee8:	60b9      	str	r1, [r7, #8]
 8004eea:	607a      	str	r2, [r7, #4]
 8004eec:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	3b20      	subs	r3, #32
 8004efe:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	2200      	movs	r2, #0
 8004f04:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8004f0c:	69fb      	ldr	r3, [r7, #28]
 8004f0e:	887a      	ldrh	r2, [r7, #2]
 8004f10:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8004f12:	69bb      	ldr	r3, [r7, #24]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d103      	bne.n	8004f22 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8004f1a:	69bb      	ldr	r3, [r7, #24]
 8004f1c:	69fa      	ldr	r2, [r7, #28]
 8004f1e:	601a      	str	r2, [r3, #0]
 8004f20:	e003      	b.n	8004f2a <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	69fa      	ldr	r2, [r7, #28]
 8004f28:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	69fa      	ldr	r2, [r7, #28]
 8004f2e:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	61fb      	str	r3, [r7, #28]
 8004f36:	e009      	b.n	8004f4c <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8004f38:	69fb      	ldr	r3, [r7, #28]
 8004f3a:	891a      	ldrh	r2, [r3, #8]
 8004f3c:	887b      	ldrh	r3, [r7, #2]
 8004f3e:	4413      	add	r3, r2
 8004f40:	b29a      	uxth	r2, r3
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8004f46:	69fb      	ldr	r3, [r7, #28]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	61fb      	str	r3, [r7, #28]
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d1f2      	bne.n	8004f38 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 8004f52:	bf00      	nop
 8004f54:	bf00      	nop
 8004f56:	3724      	adds	r7, #36	; 0x24
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr

08004f60 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b082      	sub	sp, #8
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f007 fee3 	bl	800cd34 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8004f6e:	bf00      	nop
 8004f70:	3708      	adds	r7, #8
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}

08004f76 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004f76:	b480      	push	{r7}
 8004f78:	b085      	sub	sp, #20
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004f80:	2300      	movs	r3, #0
 8004f82:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004f84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f88:	2b84      	cmp	r3, #132	; 0x84
 8004f8a:	d005      	beq.n	8004f98 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004f8c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	4413      	add	r3, r2
 8004f94:	3303      	adds	r3, #3
 8004f96:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004f98:	68fb      	ldr	r3, [r7, #12]
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3714      	adds	r7, #20
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr

08004fa6 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8004fa6:	b480      	push	{r7}
 8004fa8:	b083      	sub	sp, #12
 8004faa:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004fac:	f3ef 8305 	mrs	r3, IPSR
 8004fb0:	607b      	str	r3, [r7, #4]
  return(result);
 8004fb2:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	bf14      	ite	ne
 8004fb8:	2301      	movne	r3, #1
 8004fba:	2300      	moveq	r3, #0
 8004fbc:	b2db      	uxtb	r3, r3
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	370c      	adds	r7, #12
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr

08004fca <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004fca:	b580      	push	{r7, lr}
 8004fcc:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004fce:	f001 fd3b 	bl	8006a48 <vTaskStartScheduler>
  
  return osOK;
 8004fd2:	2300      	movs	r3, #0
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	bd80      	pop	{r7, pc}

08004fd8 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8004fdc:	f7ff ffe3 	bl	8004fa6 <inHandlerMode>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d003      	beq.n	8004fee <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8004fe6:	f001 fe53 	bl	8006c90 <xTaskGetTickCountFromISR>
 8004fea:	4603      	mov	r3, r0
 8004fec:	e002      	b.n	8004ff4 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8004fee:	f001 fe3f 	bl	8006c70 <xTaskGetTickCount>
 8004ff2:	4603      	mov	r3, r0
  }
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	bd80      	pop	{r7, pc}

08004ff8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ffa:	b089      	sub	sp, #36	; 0x24
 8004ffc:	af04      	add	r7, sp, #16
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	695b      	ldr	r3, [r3, #20]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d020      	beq.n	800504c <osThreadCreate+0x54>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	699b      	ldr	r3, [r3, #24]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d01c      	beq.n	800504c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	685c      	ldr	r4, [r3, #4]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	691e      	ldr	r6, [r3, #16]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005024:	4618      	mov	r0, r3
 8005026:	f7ff ffa6 	bl	8004f76 <makeFreeRtosPriority>
 800502a:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	695b      	ldr	r3, [r3, #20]
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005034:	9202      	str	r2, [sp, #8]
 8005036:	9301      	str	r3, [sp, #4]
 8005038:	9100      	str	r1, [sp, #0]
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	4632      	mov	r2, r6
 800503e:	4629      	mov	r1, r5
 8005040:	4620      	mov	r0, r4
 8005042:	f001 fb23 	bl	800668c <xTaskCreateStatic>
 8005046:	4603      	mov	r3, r0
 8005048:	60fb      	str	r3, [r7, #12]
 800504a:	e01c      	b.n	8005086 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	685c      	ldr	r4, [r3, #4]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005058:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005060:	4618      	mov	r0, r3
 8005062:	f7ff ff88 	bl	8004f76 <makeFreeRtosPriority>
 8005066:	4602      	mov	r2, r0
 8005068:	f107 030c 	add.w	r3, r7, #12
 800506c:	9301      	str	r3, [sp, #4]
 800506e:	9200      	str	r2, [sp, #0]
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	4632      	mov	r2, r6
 8005074:	4629      	mov	r1, r5
 8005076:	4620      	mov	r0, r4
 8005078:	f001 fb65 	bl	8006746 <xTaskCreate>
 800507c:	4603      	mov	r3, r0
 800507e:	2b01      	cmp	r3, #1
 8005080:	d001      	beq.n	8005086 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005082:	2300      	movs	r3, #0
 8005084:	e000      	b.n	8005088 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005086:	68fb      	ldr	r3, [r7, #12]
}
 8005088:	4618      	mov	r0, r3
 800508a:	3714      	adds	r7, #20
 800508c:	46bd      	mov	sp, r7
 800508e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005090 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b084      	sub	sp, #16
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d001      	beq.n	80050a6 <osDelay+0x16>
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	e000      	b.n	80050a8 <osDelay+0x18>
 80050a6:	2301      	movs	r3, #1
 80050a8:	4618      	mov	r0, r3
 80050aa:	f001 fc99 	bl	80069e0 <vTaskDelay>
  
  return osOK;
 80050ae:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3710      	adds	r7, #16
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}

080050b8 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b082      	sub	sp, #8
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d007      	beq.n	80050d8 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	4619      	mov	r1, r3
 80050ce:	2001      	movs	r0, #1
 80050d0:	f000 fc7d 	bl	80059ce <xQueueCreateMutexStatic>
 80050d4:	4603      	mov	r3, r0
 80050d6:	e003      	b.n	80050e0 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80050d8:	2001      	movs	r0, #1
 80050da:	f000 fc60 	bl	800599e <xQueueCreateMutex>
 80050de:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3708      	adds	r7, #8
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}

080050e8 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80050f2:	2300      	movs	r3, #0
 80050f4:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d101      	bne.n	8005100 <osMutexWait+0x18>
    return osErrorParameter;
 80050fc:	2380      	movs	r3, #128	; 0x80
 80050fe:	e03a      	b.n	8005176 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8005100:	2300      	movs	r3, #0
 8005102:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800510a:	d103      	bne.n	8005114 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800510c:	f04f 33ff 	mov.w	r3, #4294967295
 8005110:	60fb      	str	r3, [r7, #12]
 8005112:	e009      	b.n	8005128 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d006      	beq.n	8005128 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d101      	bne.n	8005128 <osMutexWait+0x40>
      ticks = 1;
 8005124:	2301      	movs	r3, #1
 8005126:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005128:	f7ff ff3d 	bl	8004fa6 <inHandlerMode>
 800512c:	4603      	mov	r3, r0
 800512e:	2b00      	cmp	r3, #0
 8005130:	d017      	beq.n	8005162 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005132:	f107 0308 	add.w	r3, r7, #8
 8005136:	461a      	mov	r2, r3
 8005138:	2100      	movs	r1, #0
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f001 f874 	bl	8006228 <xQueueReceiveFromISR>
 8005140:	4603      	mov	r3, r0
 8005142:	2b01      	cmp	r3, #1
 8005144:	d001      	beq.n	800514a <osMutexWait+0x62>
      return osErrorOS;
 8005146:	23ff      	movs	r3, #255	; 0xff
 8005148:	e015      	b.n	8005176 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d011      	beq.n	8005174 <osMutexWait+0x8c>
 8005150:	4b0b      	ldr	r3, [pc, #44]	; (8005180 <osMutexWait+0x98>)
 8005152:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005156:	601a      	str	r2, [r3, #0]
 8005158:	f3bf 8f4f 	dsb	sy
 800515c:	f3bf 8f6f 	isb	sy
 8005160:	e008      	b.n	8005174 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8005162:	68f9      	ldr	r1, [r7, #12]
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f000 ff53 	bl	8006010 <xQueueSemaphoreTake>
 800516a:	4603      	mov	r3, r0
 800516c:	2b01      	cmp	r3, #1
 800516e:	d001      	beq.n	8005174 <osMutexWait+0x8c>
    return osErrorOS;
 8005170:	23ff      	movs	r3, #255	; 0xff
 8005172:	e000      	b.n	8005176 <osMutexWait+0x8e>
  }
  
  return osOK;
 8005174:	2300      	movs	r3, #0
}
 8005176:	4618      	mov	r0, r3
 8005178:	3710      	adds	r7, #16
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	e000ed04 	.word	0xe000ed04

08005184 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800518c:	2300      	movs	r3, #0
 800518e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005190:	2300      	movs	r3, #0
 8005192:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8005194:	f7ff ff07 	bl	8004fa6 <inHandlerMode>
 8005198:	4603      	mov	r3, r0
 800519a:	2b00      	cmp	r3, #0
 800519c:	d016      	beq.n	80051cc <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800519e:	f107 0308 	add.w	r3, r7, #8
 80051a2:	4619      	mov	r1, r3
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f000 fdc6 	bl	8005d36 <xQueueGiveFromISR>
 80051aa:	4603      	mov	r3, r0
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d001      	beq.n	80051b4 <osMutexRelease+0x30>
      return osErrorOS;
 80051b0:	23ff      	movs	r3, #255	; 0xff
 80051b2:	e017      	b.n	80051e4 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d013      	beq.n	80051e2 <osMutexRelease+0x5e>
 80051ba:	4b0c      	ldr	r3, [pc, #48]	; (80051ec <osMutexRelease+0x68>)
 80051bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051c0:	601a      	str	r2, [r3, #0]
 80051c2:	f3bf 8f4f 	dsb	sy
 80051c6:	f3bf 8f6f 	isb	sy
 80051ca:	e00a      	b.n	80051e2 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80051cc:	2300      	movs	r3, #0
 80051ce:	2200      	movs	r2, #0
 80051d0:	2100      	movs	r1, #0
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 fc16 	bl	8005a04 <xQueueGenericSend>
 80051d8:	4603      	mov	r3, r0
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d001      	beq.n	80051e2 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80051de:	23ff      	movs	r3, #255	; 0xff
 80051e0:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80051e2:	68fb      	ldr	r3, [r7, #12]
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3710      	adds	r7, #16
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}
 80051ec:	e000ed04 	.word	0xe000ed04

080051f0 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b086      	sub	sp, #24
 80051f4:	af02      	add	r7, sp, #8
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d00f      	beq.n	8005222 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	2b01      	cmp	r3, #1
 8005206:	d10a      	bne.n	800521e <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	2203      	movs	r2, #3
 800520e:	9200      	str	r2, [sp, #0]
 8005210:	2200      	movs	r2, #0
 8005212:	2100      	movs	r1, #0
 8005214:	2001      	movs	r0, #1
 8005216:	f000 fad7 	bl	80057c8 <xQueueGenericCreateStatic>
 800521a:	4603      	mov	r3, r0
 800521c:	e016      	b.n	800524c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800521e:	2300      	movs	r3, #0
 8005220:	e014      	b.n	800524c <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	2b01      	cmp	r3, #1
 8005226:	d110      	bne.n	800524a <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8005228:	2203      	movs	r2, #3
 800522a:	2100      	movs	r1, #0
 800522c:	2001      	movs	r0, #1
 800522e:	f000 fb43 	bl	80058b8 <xQueueGenericCreate>
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d005      	beq.n	8005246 <osSemaphoreCreate+0x56>
 800523a:	2300      	movs	r3, #0
 800523c:	2200      	movs	r2, #0
 800523e:	2100      	movs	r1, #0
 8005240:	68f8      	ldr	r0, [r7, #12]
 8005242:	f000 fbdf 	bl	8005a04 <xQueueGenericSend>
      return sema;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	e000      	b.n	800524c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800524a:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800524c:	4618      	mov	r0, r3
 800524e:	3710      	adds	r7, #16
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}

08005254 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800525e:	2300      	movs	r3, #0
 8005260:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d101      	bne.n	800526c <osSemaphoreWait+0x18>
    return osErrorParameter;
 8005268:	2380      	movs	r3, #128	; 0x80
 800526a:	e03a      	b.n	80052e2 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800526c:	2300      	movs	r3, #0
 800526e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005276:	d103      	bne.n	8005280 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8005278:	f04f 33ff 	mov.w	r3, #4294967295
 800527c:	60fb      	str	r3, [r7, #12]
 800527e:	e009      	b.n	8005294 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d006      	beq.n	8005294 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d101      	bne.n	8005294 <osSemaphoreWait+0x40>
      ticks = 1;
 8005290:	2301      	movs	r3, #1
 8005292:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005294:	f7ff fe87 	bl	8004fa6 <inHandlerMode>
 8005298:	4603      	mov	r3, r0
 800529a:	2b00      	cmp	r3, #0
 800529c:	d017      	beq.n	80052ce <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800529e:	f107 0308 	add.w	r3, r7, #8
 80052a2:	461a      	mov	r2, r3
 80052a4:	2100      	movs	r1, #0
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f000 ffbe 	bl	8006228 <xQueueReceiveFromISR>
 80052ac:	4603      	mov	r3, r0
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d001      	beq.n	80052b6 <osSemaphoreWait+0x62>
      return osErrorOS;
 80052b2:	23ff      	movs	r3, #255	; 0xff
 80052b4:	e015      	b.n	80052e2 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d011      	beq.n	80052e0 <osSemaphoreWait+0x8c>
 80052bc:	4b0b      	ldr	r3, [pc, #44]	; (80052ec <osSemaphoreWait+0x98>)
 80052be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052c2:	601a      	str	r2, [r3, #0]
 80052c4:	f3bf 8f4f 	dsb	sy
 80052c8:	f3bf 8f6f 	isb	sy
 80052cc:	e008      	b.n	80052e0 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80052ce:	68f9      	ldr	r1, [r7, #12]
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f000 fe9d 	bl	8006010 <xQueueSemaphoreTake>
 80052d6:	4603      	mov	r3, r0
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d001      	beq.n	80052e0 <osSemaphoreWait+0x8c>
    return osErrorOS;
 80052dc:	23ff      	movs	r3, #255	; 0xff
 80052de:	e000      	b.n	80052e2 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80052e0:	2300      	movs	r3, #0
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3710      	adds	r7, #16
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	bf00      	nop
 80052ec:	e000ed04 	.word	0xe000ed04

080052f0 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80052f8:	2300      	movs	r3, #0
 80052fa:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80052fc:	2300      	movs	r3, #0
 80052fe:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8005300:	f7ff fe51 	bl	8004fa6 <inHandlerMode>
 8005304:	4603      	mov	r3, r0
 8005306:	2b00      	cmp	r3, #0
 8005308:	d016      	beq.n	8005338 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800530a:	f107 0308 	add.w	r3, r7, #8
 800530e:	4619      	mov	r1, r3
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f000 fd10 	bl	8005d36 <xQueueGiveFromISR>
 8005316:	4603      	mov	r3, r0
 8005318:	2b01      	cmp	r3, #1
 800531a:	d001      	beq.n	8005320 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800531c:	23ff      	movs	r3, #255	; 0xff
 800531e:	e017      	b.n	8005350 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d013      	beq.n	800534e <osSemaphoreRelease+0x5e>
 8005326:	4b0c      	ldr	r3, [pc, #48]	; (8005358 <osSemaphoreRelease+0x68>)
 8005328:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800532c:	601a      	str	r2, [r3, #0]
 800532e:	f3bf 8f4f 	dsb	sy
 8005332:	f3bf 8f6f 	isb	sy
 8005336:	e00a      	b.n	800534e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8005338:	2300      	movs	r3, #0
 800533a:	2200      	movs	r2, #0
 800533c:	2100      	movs	r1, #0
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f000 fb60 	bl	8005a04 <xQueueGenericSend>
 8005344:	4603      	mov	r3, r0
 8005346:	2b01      	cmp	r3, #1
 8005348:	d001      	beq.n	800534e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800534a:	23ff      	movs	r3, #255	; 0xff
 800534c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800534e:	68fb      	ldr	r3, [r7, #12]
}
 8005350:	4618      	mov	r0, r3
 8005352:	3710      	adds	r7, #16
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}
 8005358:	e000ed04 	.word	0xe000ed04

0800535c <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b082      	sub	sp, #8
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8005364:	f7ff fe1f 	bl	8004fa6 <inHandlerMode>
 8005368:	4603      	mov	r3, r0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d001      	beq.n	8005372 <osSemaphoreDelete+0x16>
    return osErrorISR;
 800536e:	2382      	movs	r3, #130	; 0x82
 8005370:	e003      	b.n	800537a <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f001 f814 	bl	80063a0 <vQueueDelete>

  return osOK; 
 8005378:	2300      	movs	r3, #0
}
 800537a:	4618      	mov	r0, r3
 800537c:	3708      	adds	r7, #8
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}

08005382 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8005382:	b590      	push	{r4, r7, lr}
 8005384:	b085      	sub	sp, #20
 8005386:	af02      	add	r7, sp, #8
 8005388:	6078      	str	r0, [r7, #4]
 800538a:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d011      	beq.n	80053b8 <osMessageCreate+0x36>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d00d      	beq.n	80053b8 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6818      	ldr	r0, [r3, #0]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6859      	ldr	r1, [r3, #4]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	689a      	ldr	r2, [r3, #8]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	2400      	movs	r4, #0
 80053ae:	9400      	str	r4, [sp, #0]
 80053b0:	f000 fa0a 	bl	80057c8 <xQueueGenericCreateStatic>
 80053b4:	4603      	mov	r3, r0
 80053b6:	e008      	b.n	80053ca <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6818      	ldr	r0, [r3, #0]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	4619      	mov	r1, r3
 80053c4:	f000 fa78 	bl	80058b8 <xQueueGenericCreate>
 80053c8:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	370c      	adds	r7, #12
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd90      	pop	{r4, r7, pc}
	...

080053d4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b086      	sub	sp, #24
 80053d8:	af00      	add	r7, sp, #0
 80053da:	60f8      	str	r0, [r7, #12]
 80053dc:	60b9      	str	r1, [r7, #8]
 80053de:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80053e0:	2300      	movs	r3, #0
 80053e2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d101      	bne.n	80053f2 <osMessagePut+0x1e>
    ticks = 1;
 80053ee:	2301      	movs	r3, #1
 80053f0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80053f2:	f7ff fdd8 	bl	8004fa6 <inHandlerMode>
 80053f6:	4603      	mov	r3, r0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d018      	beq.n	800542e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80053fc:	f107 0210 	add.w	r2, r7, #16
 8005400:	f107 0108 	add.w	r1, r7, #8
 8005404:	2300      	movs	r3, #0
 8005406:	68f8      	ldr	r0, [r7, #12]
 8005408:	f000 fbfa 	bl	8005c00 <xQueueGenericSendFromISR>
 800540c:	4603      	mov	r3, r0
 800540e:	2b01      	cmp	r3, #1
 8005410:	d001      	beq.n	8005416 <osMessagePut+0x42>
      return osErrorOS;
 8005412:	23ff      	movs	r3, #255	; 0xff
 8005414:	e018      	b.n	8005448 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d014      	beq.n	8005446 <osMessagePut+0x72>
 800541c:	4b0c      	ldr	r3, [pc, #48]	; (8005450 <osMessagePut+0x7c>)
 800541e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005422:	601a      	str	r2, [r3, #0]
 8005424:	f3bf 8f4f 	dsb	sy
 8005428:	f3bf 8f6f 	isb	sy
 800542c:	e00b      	b.n	8005446 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800542e:	f107 0108 	add.w	r1, r7, #8
 8005432:	2300      	movs	r3, #0
 8005434:	697a      	ldr	r2, [r7, #20]
 8005436:	68f8      	ldr	r0, [r7, #12]
 8005438:	f000 fae4 	bl	8005a04 <xQueueGenericSend>
 800543c:	4603      	mov	r3, r0
 800543e:	2b01      	cmp	r3, #1
 8005440:	d001      	beq.n	8005446 <osMessagePut+0x72>
      return osErrorOS;
 8005442:	23ff      	movs	r3, #255	; 0xff
 8005444:	e000      	b.n	8005448 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8005446:	2300      	movs	r3, #0
}
 8005448:	4618      	mov	r0, r3
 800544a:	3718      	adds	r7, #24
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}
 8005450:	e000ed04 	.word	0xe000ed04

08005454 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8005454:	b590      	push	{r4, r7, lr}
 8005456:	b08b      	sub	sp, #44	; 0x2c
 8005458:	af00      	add	r7, sp, #0
 800545a:	60f8      	str	r0, [r7, #12]
 800545c:	60b9      	str	r1, [r7, #8]
 800545e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8005464:	2300      	movs	r3, #0
 8005466:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d10a      	bne.n	8005484 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800546e:	2380      	movs	r3, #128	; 0x80
 8005470:	617b      	str	r3, [r7, #20]
    return event;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	461c      	mov	r4, r3
 8005476:	f107 0314 	add.w	r3, r7, #20
 800547a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800547e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005482:	e054      	b.n	800552e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8005484:	2300      	movs	r3, #0
 8005486:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8005488:	2300      	movs	r3, #0
 800548a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005492:	d103      	bne.n	800549c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8005494:	f04f 33ff 	mov.w	r3, #4294967295
 8005498:	627b      	str	r3, [r7, #36]	; 0x24
 800549a:	e009      	b.n	80054b0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d006      	beq.n	80054b0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80054a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d101      	bne.n	80054b0 <osMessageGet+0x5c>
      ticks = 1;
 80054ac:	2301      	movs	r3, #1
 80054ae:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80054b0:	f7ff fd79 	bl	8004fa6 <inHandlerMode>
 80054b4:	4603      	mov	r3, r0
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d01c      	beq.n	80054f4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80054ba:	f107 0220 	add.w	r2, r7, #32
 80054be:	f107 0314 	add.w	r3, r7, #20
 80054c2:	3304      	adds	r3, #4
 80054c4:	4619      	mov	r1, r3
 80054c6:	68b8      	ldr	r0, [r7, #8]
 80054c8:	f000 feae 	bl	8006228 <xQueueReceiveFromISR>
 80054cc:	4603      	mov	r3, r0
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	d102      	bne.n	80054d8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80054d2:	2310      	movs	r3, #16
 80054d4:	617b      	str	r3, [r7, #20]
 80054d6:	e001      	b.n	80054dc <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80054d8:	2300      	movs	r3, #0
 80054da:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80054dc:	6a3b      	ldr	r3, [r7, #32]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d01d      	beq.n	800551e <osMessageGet+0xca>
 80054e2:	4b15      	ldr	r3, [pc, #84]	; (8005538 <osMessageGet+0xe4>)
 80054e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054e8:	601a      	str	r2, [r3, #0]
 80054ea:	f3bf 8f4f 	dsb	sy
 80054ee:	f3bf 8f6f 	isb	sy
 80054f2:	e014      	b.n	800551e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80054f4:	f107 0314 	add.w	r3, r7, #20
 80054f8:	3304      	adds	r3, #4
 80054fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054fc:	4619      	mov	r1, r3
 80054fe:	68b8      	ldr	r0, [r7, #8]
 8005500:	f000 fca6 	bl	8005e50 <xQueueReceive>
 8005504:	4603      	mov	r3, r0
 8005506:	2b01      	cmp	r3, #1
 8005508:	d102      	bne.n	8005510 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800550a:	2310      	movs	r3, #16
 800550c:	617b      	str	r3, [r7, #20]
 800550e:	e006      	b.n	800551e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8005510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005512:	2b00      	cmp	r3, #0
 8005514:	d101      	bne.n	800551a <osMessageGet+0xc6>
 8005516:	2300      	movs	r3, #0
 8005518:	e000      	b.n	800551c <osMessageGet+0xc8>
 800551a:	2340      	movs	r3, #64	; 0x40
 800551c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	461c      	mov	r4, r3
 8005522:	f107 0314 	add.w	r3, r7, #20
 8005526:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800552a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800552e:	68f8      	ldr	r0, [r7, #12]
 8005530:	372c      	adds	r7, #44	; 0x2c
 8005532:	46bd      	mov	sp, r7
 8005534:	bd90      	pop	{r4, r7, pc}
 8005536:	bf00      	nop
 8005538:	e000ed04 	.word	0xe000ed04

0800553c <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b082      	sub	sp, #8
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8005544:	f7ff fd2f 	bl	8004fa6 <inHandlerMode>
 8005548:	4603      	mov	r3, r0
 800554a:	2b00      	cmp	r3, #0
 800554c:	d004      	beq.n	8005558 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f000 ff08 	bl	8006364 <uxQueueMessagesWaitingFromISR>
 8005554:	4603      	mov	r3, r0
 8005556:	e003      	b.n	8005560 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f000 fee5 	bl	8006328 <uxQueueMessagesWaiting>
 800555e:	4603      	mov	r3, r0
  }
}
 8005560:	4618      	mov	r0, r3
 8005562:	3708      	adds	r7, #8
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}

08005568 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b082      	sub	sp, #8
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8005570:	f7ff fd19 	bl	8004fa6 <inHandlerMode>
 8005574:	4603      	mov	r3, r0
 8005576:	2b00      	cmp	r3, #0
 8005578:	d001      	beq.n	800557e <osMessageDelete+0x16>
    return osErrorISR;
 800557a:	2382      	movs	r3, #130	; 0x82
 800557c:	e003      	b.n	8005586 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f000 ff0e 	bl	80063a0 <vQueueDelete>

  return osOK; 
 8005584:	2300      	movs	r3, #0
}
 8005586:	4618      	mov	r0, r3
 8005588:	3708      	adds	r7, #8
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}

0800558e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800558e:	b480      	push	{r7}
 8005590:	b083      	sub	sp, #12
 8005592:	af00      	add	r7, sp, #0
 8005594:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f103 0208 	add.w	r2, r3, #8
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f04f 32ff 	mov.w	r2, #4294967295
 80055a6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f103 0208 	add.w	r2, r3, #8
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f103 0208 	add.w	r2, r3, #8
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2200      	movs	r2, #0
 80055c0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80055c2:	bf00      	nop
 80055c4:	370c      	adds	r7, #12
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr

080055ce <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80055ce:	b480      	push	{r7}
 80055d0:	b083      	sub	sp, #12
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80055dc:	bf00      	nop
 80055de:	370c      	adds	r7, #12
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr

080055e8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80055e8:	b480      	push	{r7}
 80055ea:	b085      	sub	sp, #20
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	68fa      	ldr	r2, [r7, #12]
 80055fc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	689a      	ldr	r2, [r3, #8]
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	683a      	ldr	r2, [r7, #0]
 800560c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	683a      	ldr	r2, [r7, #0]
 8005612:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	1c5a      	adds	r2, r3, #1
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	601a      	str	r2, [r3, #0]
}
 8005624:	bf00      	nop
 8005626:	3714      	adds	r7, #20
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr

08005630 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005630:	b480      	push	{r7}
 8005632:	b085      	sub	sp, #20
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005646:	d103      	bne.n	8005650 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	691b      	ldr	r3, [r3, #16]
 800564c:	60fb      	str	r3, [r7, #12]
 800564e:	e00c      	b.n	800566a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	3308      	adds	r3, #8
 8005654:	60fb      	str	r3, [r7, #12]
 8005656:	e002      	b.n	800565e <vListInsert+0x2e>
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	60fb      	str	r3, [r7, #12]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	68ba      	ldr	r2, [r7, #8]
 8005666:	429a      	cmp	r2, r3
 8005668:	d2f6      	bcs.n	8005658 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	685a      	ldr	r2, [r3, #4]
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	683a      	ldr	r2, [r7, #0]
 8005678:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	68fa      	ldr	r2, [r7, #12]
 800567e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	683a      	ldr	r2, [r7, #0]
 8005684:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	1c5a      	adds	r2, r3, #1
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	601a      	str	r2, [r3, #0]
}
 8005696:	bf00      	nop
 8005698:	3714      	adds	r7, #20
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr

080056a2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80056a2:	b480      	push	{r7}
 80056a4:	b085      	sub	sp, #20
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	6892      	ldr	r2, [r2, #8]
 80056b8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	6852      	ldr	r2, [r2, #4]
 80056c2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d103      	bne.n	80056d6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	689a      	ldr	r2, [r3, #8]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2200      	movs	r2, #0
 80056da:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	1e5a      	subs	r2, r3, #1
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3714      	adds	r7, #20
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr
	...

080056f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b084      	sub	sp, #16
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d10a      	bne.n	8005722 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800570c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005710:	f383 8811 	msr	BASEPRI, r3
 8005714:	f3bf 8f6f 	isb	sy
 8005718:	f3bf 8f4f 	dsb	sy
 800571c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800571e:	bf00      	nop
 8005720:	e7fe      	b.n	8005720 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005722:	f002 f917 	bl	8007954 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800572e:	68f9      	ldr	r1, [r7, #12]
 8005730:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005732:	fb01 f303 	mul.w	r3, r1, r3
 8005736:	441a      	add	r2, r3
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2200      	movs	r2, #0
 8005740:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005752:	3b01      	subs	r3, #1
 8005754:	68f9      	ldr	r1, [r7, #12]
 8005756:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005758:	fb01 f303 	mul.w	r3, r1, r3
 800575c:	441a      	add	r2, r3
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	22ff      	movs	r2, #255	; 0xff
 8005766:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	22ff      	movs	r2, #255	; 0xff
 800576e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d114      	bne.n	80057a2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	691b      	ldr	r3, [r3, #16]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d01a      	beq.n	80057b6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	3310      	adds	r3, #16
 8005784:	4618      	mov	r0, r3
 8005786:	f001 fbd3 	bl	8006f30 <xTaskRemoveFromEventList>
 800578a:	4603      	mov	r3, r0
 800578c:	2b00      	cmp	r3, #0
 800578e:	d012      	beq.n	80057b6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005790:	4b0c      	ldr	r3, [pc, #48]	; (80057c4 <xQueueGenericReset+0xcc>)
 8005792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005796:	601a      	str	r2, [r3, #0]
 8005798:	f3bf 8f4f 	dsb	sy
 800579c:	f3bf 8f6f 	isb	sy
 80057a0:	e009      	b.n	80057b6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	3310      	adds	r3, #16
 80057a6:	4618      	mov	r0, r3
 80057a8:	f7ff fef1 	bl	800558e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	3324      	adds	r3, #36	; 0x24
 80057b0:	4618      	mov	r0, r3
 80057b2:	f7ff feec 	bl	800558e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80057b6:	f002 f8fd 	bl	80079b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80057ba:	2301      	movs	r3, #1
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3710      	adds	r7, #16
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}
 80057c4:	e000ed04 	.word	0xe000ed04

080057c8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b08e      	sub	sp, #56	; 0x38
 80057cc:	af02      	add	r7, sp, #8
 80057ce:	60f8      	str	r0, [r7, #12]
 80057d0:	60b9      	str	r1, [r7, #8]
 80057d2:	607a      	str	r2, [r7, #4]
 80057d4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d10a      	bne.n	80057f2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80057dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e0:	f383 8811 	msr	BASEPRI, r3
 80057e4:	f3bf 8f6f 	isb	sy
 80057e8:	f3bf 8f4f 	dsb	sy
 80057ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80057ee:	bf00      	nop
 80057f0:	e7fe      	b.n	80057f0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d10a      	bne.n	800580e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80057f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057fc:	f383 8811 	msr	BASEPRI, r3
 8005800:	f3bf 8f6f 	isb	sy
 8005804:	f3bf 8f4f 	dsb	sy
 8005808:	627b      	str	r3, [r7, #36]	; 0x24
}
 800580a:	bf00      	nop
 800580c:	e7fe      	b.n	800580c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d002      	beq.n	800581a <xQueueGenericCreateStatic+0x52>
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d001      	beq.n	800581e <xQueueGenericCreateStatic+0x56>
 800581a:	2301      	movs	r3, #1
 800581c:	e000      	b.n	8005820 <xQueueGenericCreateStatic+0x58>
 800581e:	2300      	movs	r3, #0
 8005820:	2b00      	cmp	r3, #0
 8005822:	d10a      	bne.n	800583a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005828:	f383 8811 	msr	BASEPRI, r3
 800582c:	f3bf 8f6f 	isb	sy
 8005830:	f3bf 8f4f 	dsb	sy
 8005834:	623b      	str	r3, [r7, #32]
}
 8005836:	bf00      	nop
 8005838:	e7fe      	b.n	8005838 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d102      	bne.n	8005846 <xQueueGenericCreateStatic+0x7e>
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d101      	bne.n	800584a <xQueueGenericCreateStatic+0x82>
 8005846:	2301      	movs	r3, #1
 8005848:	e000      	b.n	800584c <xQueueGenericCreateStatic+0x84>
 800584a:	2300      	movs	r3, #0
 800584c:	2b00      	cmp	r3, #0
 800584e:	d10a      	bne.n	8005866 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005854:	f383 8811 	msr	BASEPRI, r3
 8005858:	f3bf 8f6f 	isb	sy
 800585c:	f3bf 8f4f 	dsb	sy
 8005860:	61fb      	str	r3, [r7, #28]
}
 8005862:	bf00      	nop
 8005864:	e7fe      	b.n	8005864 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005866:	2348      	movs	r3, #72	; 0x48
 8005868:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	2b48      	cmp	r3, #72	; 0x48
 800586e:	d00a      	beq.n	8005886 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005874:	f383 8811 	msr	BASEPRI, r3
 8005878:	f3bf 8f6f 	isb	sy
 800587c:	f3bf 8f4f 	dsb	sy
 8005880:	61bb      	str	r3, [r7, #24]
}
 8005882:	bf00      	nop
 8005884:	e7fe      	b.n	8005884 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005886:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800588c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800588e:	2b00      	cmp	r3, #0
 8005890:	d00d      	beq.n	80058ae <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005894:	2201      	movs	r2, #1
 8005896:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800589a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800589e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058a0:	9300      	str	r3, [sp, #0]
 80058a2:	4613      	mov	r3, r2
 80058a4:	687a      	ldr	r2, [r7, #4]
 80058a6:	68b9      	ldr	r1, [r7, #8]
 80058a8:	68f8      	ldr	r0, [r7, #12]
 80058aa:	f000 f83f 	bl	800592c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80058ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3730      	adds	r7, #48	; 0x30
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}

080058b8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b08a      	sub	sp, #40	; 0x28
 80058bc:	af02      	add	r7, sp, #8
 80058be:	60f8      	str	r0, [r7, #12]
 80058c0:	60b9      	str	r1, [r7, #8]
 80058c2:	4613      	mov	r3, r2
 80058c4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d10a      	bne.n	80058e2 <xQueueGenericCreate+0x2a>
	__asm volatile
 80058cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d0:	f383 8811 	msr	BASEPRI, r3
 80058d4:	f3bf 8f6f 	isb	sy
 80058d8:	f3bf 8f4f 	dsb	sy
 80058dc:	613b      	str	r3, [r7, #16]
}
 80058de:	bf00      	nop
 80058e0:	e7fe      	b.n	80058e0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	68ba      	ldr	r2, [r7, #8]
 80058e6:	fb02 f303 	mul.w	r3, r2, r3
 80058ea:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80058ec:	69fb      	ldr	r3, [r7, #28]
 80058ee:	3348      	adds	r3, #72	; 0x48
 80058f0:	4618      	mov	r0, r3
 80058f2:	f002 f951 	bl	8007b98 <pvPortMalloc>
 80058f6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80058f8:	69bb      	ldr	r3, [r7, #24]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d011      	beq.n	8005922 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80058fe:	69bb      	ldr	r3, [r7, #24]
 8005900:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	3348      	adds	r3, #72	; 0x48
 8005906:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005908:	69bb      	ldr	r3, [r7, #24]
 800590a:	2200      	movs	r2, #0
 800590c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005910:	79fa      	ldrb	r2, [r7, #7]
 8005912:	69bb      	ldr	r3, [r7, #24]
 8005914:	9300      	str	r3, [sp, #0]
 8005916:	4613      	mov	r3, r2
 8005918:	697a      	ldr	r2, [r7, #20]
 800591a:	68b9      	ldr	r1, [r7, #8]
 800591c:	68f8      	ldr	r0, [r7, #12]
 800591e:	f000 f805 	bl	800592c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005922:	69bb      	ldr	r3, [r7, #24]
	}
 8005924:	4618      	mov	r0, r3
 8005926:	3720      	adds	r7, #32
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}

0800592c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b084      	sub	sp, #16
 8005930:	af00      	add	r7, sp, #0
 8005932:	60f8      	str	r0, [r7, #12]
 8005934:	60b9      	str	r1, [r7, #8]
 8005936:	607a      	str	r2, [r7, #4]
 8005938:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d103      	bne.n	8005948 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005940:	69bb      	ldr	r3, [r7, #24]
 8005942:	69ba      	ldr	r2, [r7, #24]
 8005944:	601a      	str	r2, [r3, #0]
 8005946:	e002      	b.n	800594e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005948:	69bb      	ldr	r3, [r7, #24]
 800594a:	687a      	ldr	r2, [r7, #4]
 800594c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800594e:	69bb      	ldr	r3, [r7, #24]
 8005950:	68fa      	ldr	r2, [r7, #12]
 8005952:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005954:	69bb      	ldr	r3, [r7, #24]
 8005956:	68ba      	ldr	r2, [r7, #8]
 8005958:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800595a:	2101      	movs	r1, #1
 800595c:	69b8      	ldr	r0, [r7, #24]
 800595e:	f7ff fecb 	bl	80056f8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005962:	bf00      	nop
 8005964:	3710      	adds	r7, #16
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}

0800596a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800596a:	b580      	push	{r7, lr}
 800596c:	b082      	sub	sp, #8
 800596e:	af00      	add	r7, sp, #0
 8005970:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d00e      	beq.n	8005996 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2200      	movs	r2, #0
 800597c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800598a:	2300      	movs	r3, #0
 800598c:	2200      	movs	r2, #0
 800598e:	2100      	movs	r1, #0
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f000 f837 	bl	8005a04 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005996:	bf00      	nop
 8005998:	3708      	adds	r7, #8
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}

0800599e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800599e:	b580      	push	{r7, lr}
 80059a0:	b086      	sub	sp, #24
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	4603      	mov	r3, r0
 80059a6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80059a8:	2301      	movs	r3, #1
 80059aa:	617b      	str	r3, [r7, #20]
 80059ac:	2300      	movs	r3, #0
 80059ae:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80059b0:	79fb      	ldrb	r3, [r7, #7]
 80059b2:	461a      	mov	r2, r3
 80059b4:	6939      	ldr	r1, [r7, #16]
 80059b6:	6978      	ldr	r0, [r7, #20]
 80059b8:	f7ff ff7e 	bl	80058b8 <xQueueGenericCreate>
 80059bc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80059be:	68f8      	ldr	r0, [r7, #12]
 80059c0:	f7ff ffd3 	bl	800596a <prvInitialiseMutex>

		return xNewQueue;
 80059c4:	68fb      	ldr	r3, [r7, #12]
	}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3718      	adds	r7, #24
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}

080059ce <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80059ce:	b580      	push	{r7, lr}
 80059d0:	b088      	sub	sp, #32
 80059d2:	af02      	add	r7, sp, #8
 80059d4:	4603      	mov	r3, r0
 80059d6:	6039      	str	r1, [r7, #0]
 80059d8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80059da:	2301      	movs	r3, #1
 80059dc:	617b      	str	r3, [r7, #20]
 80059de:	2300      	movs	r3, #0
 80059e0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80059e2:	79fb      	ldrb	r3, [r7, #7]
 80059e4:	9300      	str	r3, [sp, #0]
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	2200      	movs	r2, #0
 80059ea:	6939      	ldr	r1, [r7, #16]
 80059ec:	6978      	ldr	r0, [r7, #20]
 80059ee:	f7ff feeb 	bl	80057c8 <xQueueGenericCreateStatic>
 80059f2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80059f4:	68f8      	ldr	r0, [r7, #12]
 80059f6:	f7ff ffb8 	bl	800596a <prvInitialiseMutex>

		return xNewQueue;
 80059fa:	68fb      	ldr	r3, [r7, #12]
	}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3718      	adds	r7, #24
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b08e      	sub	sp, #56	; 0x38
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	60f8      	str	r0, [r7, #12]
 8005a0c:	60b9      	str	r1, [r7, #8]
 8005a0e:	607a      	str	r2, [r7, #4]
 8005a10:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005a12:	2300      	movs	r3, #0
 8005a14:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d10a      	bne.n	8005a36 <xQueueGenericSend+0x32>
	__asm volatile
 8005a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a24:	f383 8811 	msr	BASEPRI, r3
 8005a28:	f3bf 8f6f 	isb	sy
 8005a2c:	f3bf 8f4f 	dsb	sy
 8005a30:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005a32:	bf00      	nop
 8005a34:	e7fe      	b.n	8005a34 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d103      	bne.n	8005a44 <xQueueGenericSend+0x40>
 8005a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d101      	bne.n	8005a48 <xQueueGenericSend+0x44>
 8005a44:	2301      	movs	r3, #1
 8005a46:	e000      	b.n	8005a4a <xQueueGenericSend+0x46>
 8005a48:	2300      	movs	r3, #0
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d10a      	bne.n	8005a64 <xQueueGenericSend+0x60>
	__asm volatile
 8005a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a52:	f383 8811 	msr	BASEPRI, r3
 8005a56:	f3bf 8f6f 	isb	sy
 8005a5a:	f3bf 8f4f 	dsb	sy
 8005a5e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005a60:	bf00      	nop
 8005a62:	e7fe      	b.n	8005a62 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	2b02      	cmp	r3, #2
 8005a68:	d103      	bne.n	8005a72 <xQueueGenericSend+0x6e>
 8005a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d101      	bne.n	8005a76 <xQueueGenericSend+0x72>
 8005a72:	2301      	movs	r3, #1
 8005a74:	e000      	b.n	8005a78 <xQueueGenericSend+0x74>
 8005a76:	2300      	movs	r3, #0
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d10a      	bne.n	8005a92 <xQueueGenericSend+0x8e>
	__asm volatile
 8005a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a80:	f383 8811 	msr	BASEPRI, r3
 8005a84:	f3bf 8f6f 	isb	sy
 8005a88:	f3bf 8f4f 	dsb	sy
 8005a8c:	623b      	str	r3, [r7, #32]
}
 8005a8e:	bf00      	nop
 8005a90:	e7fe      	b.n	8005a90 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a92:	f001 fc0d 	bl	80072b0 <xTaskGetSchedulerState>
 8005a96:	4603      	mov	r3, r0
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d102      	bne.n	8005aa2 <xQueueGenericSend+0x9e>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d101      	bne.n	8005aa6 <xQueueGenericSend+0xa2>
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e000      	b.n	8005aa8 <xQueueGenericSend+0xa4>
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d10a      	bne.n	8005ac2 <xQueueGenericSend+0xbe>
	__asm volatile
 8005aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab0:	f383 8811 	msr	BASEPRI, r3
 8005ab4:	f3bf 8f6f 	isb	sy
 8005ab8:	f3bf 8f4f 	dsb	sy
 8005abc:	61fb      	str	r3, [r7, #28]
}
 8005abe:	bf00      	nop
 8005ac0:	e7fe      	b.n	8005ac0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005ac2:	f001 ff47 	bl	8007954 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d302      	bcc.n	8005ad8 <xQueueGenericSend+0xd4>
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	2b02      	cmp	r3, #2
 8005ad6:	d129      	bne.n	8005b2c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005ad8:	683a      	ldr	r2, [r7, #0]
 8005ada:	68b9      	ldr	r1, [r7, #8]
 8005adc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ade:	f000 fc9a 	bl	8006416 <prvCopyDataToQueue>
 8005ae2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d010      	beq.n	8005b0e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aee:	3324      	adds	r3, #36	; 0x24
 8005af0:	4618      	mov	r0, r3
 8005af2:	f001 fa1d 	bl	8006f30 <xTaskRemoveFromEventList>
 8005af6:	4603      	mov	r3, r0
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d013      	beq.n	8005b24 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005afc:	4b3f      	ldr	r3, [pc, #252]	; (8005bfc <xQueueGenericSend+0x1f8>)
 8005afe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b02:	601a      	str	r2, [r3, #0]
 8005b04:	f3bf 8f4f 	dsb	sy
 8005b08:	f3bf 8f6f 	isb	sy
 8005b0c:	e00a      	b.n	8005b24 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d007      	beq.n	8005b24 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005b14:	4b39      	ldr	r3, [pc, #228]	; (8005bfc <xQueueGenericSend+0x1f8>)
 8005b16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b1a:	601a      	str	r2, [r3, #0]
 8005b1c:	f3bf 8f4f 	dsb	sy
 8005b20:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005b24:	f001 ff46 	bl	80079b4 <vPortExitCritical>
				return pdPASS;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	e063      	b.n	8005bf4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d103      	bne.n	8005b3a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005b32:	f001 ff3f 	bl	80079b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005b36:	2300      	movs	r3, #0
 8005b38:	e05c      	b.n	8005bf4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005b3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d106      	bne.n	8005b4e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005b40:	f107 0314 	add.w	r3, r7, #20
 8005b44:	4618      	mov	r0, r3
 8005b46:	f001 fa55 	bl	8006ff4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005b4e:	f001 ff31 	bl	80079b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005b52:	f000 ffe3 	bl	8006b1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005b56:	f001 fefd 	bl	8007954 <vPortEnterCritical>
 8005b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b60:	b25b      	sxtb	r3, r3
 8005b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b66:	d103      	bne.n	8005b70 <xQueueGenericSend+0x16c>
 8005b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b76:	b25b      	sxtb	r3, r3
 8005b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b7c:	d103      	bne.n	8005b86 <xQueueGenericSend+0x182>
 8005b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b80:	2200      	movs	r2, #0
 8005b82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b86:	f001 ff15 	bl	80079b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005b8a:	1d3a      	adds	r2, r7, #4
 8005b8c:	f107 0314 	add.w	r3, r7, #20
 8005b90:	4611      	mov	r1, r2
 8005b92:	4618      	mov	r0, r3
 8005b94:	f001 fa44 	bl	8007020 <xTaskCheckForTimeOut>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d124      	bne.n	8005be8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005b9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ba0:	f000 fd31 	bl	8006606 <prvIsQueueFull>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d018      	beq.n	8005bdc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bac:	3310      	adds	r3, #16
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	4611      	mov	r1, r2
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f001 f998 	bl	8006ee8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005bb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005bba:	f000 fcbc 	bl	8006536 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005bbe:	f000 ffbb 	bl	8006b38 <xTaskResumeAll>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	f47f af7c 	bne.w	8005ac2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005bca:	4b0c      	ldr	r3, [pc, #48]	; (8005bfc <xQueueGenericSend+0x1f8>)
 8005bcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bd0:	601a      	str	r2, [r3, #0]
 8005bd2:	f3bf 8f4f 	dsb	sy
 8005bd6:	f3bf 8f6f 	isb	sy
 8005bda:	e772      	b.n	8005ac2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005bdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005bde:	f000 fcaa 	bl	8006536 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005be2:	f000 ffa9 	bl	8006b38 <xTaskResumeAll>
 8005be6:	e76c      	b.n	8005ac2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005be8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005bea:	f000 fca4 	bl	8006536 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005bee:	f000 ffa3 	bl	8006b38 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005bf2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3738      	adds	r7, #56	; 0x38
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}
 8005bfc:	e000ed04 	.word	0xe000ed04

08005c00 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b090      	sub	sp, #64	; 0x40
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	60f8      	str	r0, [r7, #12]
 8005c08:	60b9      	str	r1, [r7, #8]
 8005c0a:	607a      	str	r2, [r7, #4]
 8005c0c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d10a      	bne.n	8005c2e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c1c:	f383 8811 	msr	BASEPRI, r3
 8005c20:	f3bf 8f6f 	isb	sy
 8005c24:	f3bf 8f4f 	dsb	sy
 8005c28:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005c2a:	bf00      	nop
 8005c2c:	e7fe      	b.n	8005c2c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d103      	bne.n	8005c3c <xQueueGenericSendFromISR+0x3c>
 8005c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d101      	bne.n	8005c40 <xQueueGenericSendFromISR+0x40>
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e000      	b.n	8005c42 <xQueueGenericSendFromISR+0x42>
 8005c40:	2300      	movs	r3, #0
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d10a      	bne.n	8005c5c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c4a:	f383 8811 	msr	BASEPRI, r3
 8005c4e:	f3bf 8f6f 	isb	sy
 8005c52:	f3bf 8f4f 	dsb	sy
 8005c56:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005c58:	bf00      	nop
 8005c5a:	e7fe      	b.n	8005c5a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	2b02      	cmp	r3, #2
 8005c60:	d103      	bne.n	8005c6a <xQueueGenericSendFromISR+0x6a>
 8005c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d101      	bne.n	8005c6e <xQueueGenericSendFromISR+0x6e>
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e000      	b.n	8005c70 <xQueueGenericSendFromISR+0x70>
 8005c6e:	2300      	movs	r3, #0
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d10a      	bne.n	8005c8a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c78:	f383 8811 	msr	BASEPRI, r3
 8005c7c:	f3bf 8f6f 	isb	sy
 8005c80:	f3bf 8f4f 	dsb	sy
 8005c84:	623b      	str	r3, [r7, #32]
}
 8005c86:	bf00      	nop
 8005c88:	e7fe      	b.n	8005c88 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005c8a:	f001 ff45 	bl	8007b18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005c8e:	f3ef 8211 	mrs	r2, BASEPRI
 8005c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c96:	f383 8811 	msr	BASEPRI, r3
 8005c9a:	f3bf 8f6f 	isb	sy
 8005c9e:	f3bf 8f4f 	dsb	sy
 8005ca2:	61fa      	str	r2, [r7, #28]
 8005ca4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005ca6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005ca8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d302      	bcc.n	8005cbc <xQueueGenericSendFromISR+0xbc>
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	2b02      	cmp	r3, #2
 8005cba:	d12f      	bne.n	8005d1c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cbe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005cc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cca:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005ccc:	683a      	ldr	r2, [r7, #0]
 8005cce:	68b9      	ldr	r1, [r7, #8]
 8005cd0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005cd2:	f000 fba0 	bl	8006416 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005cd6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cde:	d112      	bne.n	8005d06 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d016      	beq.n	8005d16 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cea:	3324      	adds	r3, #36	; 0x24
 8005cec:	4618      	mov	r0, r3
 8005cee:	f001 f91f 	bl	8006f30 <xTaskRemoveFromEventList>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d00e      	beq.n	8005d16 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d00b      	beq.n	8005d16 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2201      	movs	r2, #1
 8005d02:	601a      	str	r2, [r3, #0]
 8005d04:	e007      	b.n	8005d16 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005d06:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005d0a:	3301      	adds	r3, #1
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	b25a      	sxtb	r2, r3
 8005d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005d16:	2301      	movs	r3, #1
 8005d18:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005d1a:	e001      	b.n	8005d20 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d22:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005d2a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005d2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3740      	adds	r7, #64	; 0x40
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}

08005d36 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005d36:	b580      	push	{r7, lr}
 8005d38:	b08e      	sub	sp, #56	; 0x38
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	6078      	str	r0, [r7, #4]
 8005d3e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d10a      	bne.n	8005d60 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8005d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d4e:	f383 8811 	msr	BASEPRI, r3
 8005d52:	f3bf 8f6f 	isb	sy
 8005d56:	f3bf 8f4f 	dsb	sy
 8005d5a:	623b      	str	r3, [r7, #32]
}
 8005d5c:	bf00      	nop
 8005d5e:	e7fe      	b.n	8005d5e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d00a      	beq.n	8005d7e <xQueueGiveFromISR+0x48>
	__asm volatile
 8005d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d6c:	f383 8811 	msr	BASEPRI, r3
 8005d70:	f3bf 8f6f 	isb	sy
 8005d74:	f3bf 8f4f 	dsb	sy
 8005d78:	61fb      	str	r3, [r7, #28]
}
 8005d7a:	bf00      	nop
 8005d7c:	e7fe      	b.n	8005d7c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d103      	bne.n	8005d8e <xQueueGiveFromISR+0x58>
 8005d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d101      	bne.n	8005d92 <xQueueGiveFromISR+0x5c>
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e000      	b.n	8005d94 <xQueueGiveFromISR+0x5e>
 8005d92:	2300      	movs	r3, #0
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d10a      	bne.n	8005dae <xQueueGiveFromISR+0x78>
	__asm volatile
 8005d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d9c:	f383 8811 	msr	BASEPRI, r3
 8005da0:	f3bf 8f6f 	isb	sy
 8005da4:	f3bf 8f4f 	dsb	sy
 8005da8:	61bb      	str	r3, [r7, #24]
}
 8005daa:	bf00      	nop
 8005dac:	e7fe      	b.n	8005dac <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005dae:	f001 feb3 	bl	8007b18 <vPortValidateInterruptPriority>
	__asm volatile
 8005db2:	f3ef 8211 	mrs	r2, BASEPRI
 8005db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dba:	f383 8811 	msr	BASEPRI, r3
 8005dbe:	f3bf 8f6f 	isb	sy
 8005dc2:	f3bf 8f4f 	dsb	sy
 8005dc6:	617a      	str	r2, [r7, #20]
 8005dc8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005dca:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d22b      	bcs.n	8005e36 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005de4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dea:	1c5a      	adds	r2, r3, #1
 8005dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dee:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005df0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005df8:	d112      	bne.n	8005e20 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d016      	beq.n	8005e30 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e04:	3324      	adds	r3, #36	; 0x24
 8005e06:	4618      	mov	r0, r3
 8005e08:	f001 f892 	bl	8006f30 <xTaskRemoveFromEventList>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d00e      	beq.n	8005e30 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d00b      	beq.n	8005e30 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	601a      	str	r2, [r3, #0]
 8005e1e:	e007      	b.n	8005e30 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005e20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005e24:	3301      	adds	r3, #1
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	b25a      	sxtb	r2, r3
 8005e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005e30:	2301      	movs	r3, #1
 8005e32:	637b      	str	r3, [r7, #52]	; 0x34
 8005e34:	e001      	b.n	8005e3a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005e36:	2300      	movs	r3, #0
 8005e38:	637b      	str	r3, [r7, #52]	; 0x34
 8005e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e3c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	f383 8811 	msr	BASEPRI, r3
}
 8005e44:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3738      	adds	r7, #56	; 0x38
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b08c      	sub	sp, #48	; 0x30
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	60f8      	str	r0, [r7, #12]
 8005e58:	60b9      	str	r1, [r7, #8]
 8005e5a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d10a      	bne.n	8005e80 <xQueueReceive+0x30>
	__asm volatile
 8005e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e6e:	f383 8811 	msr	BASEPRI, r3
 8005e72:	f3bf 8f6f 	isb	sy
 8005e76:	f3bf 8f4f 	dsb	sy
 8005e7a:	623b      	str	r3, [r7, #32]
}
 8005e7c:	bf00      	nop
 8005e7e:	e7fe      	b.n	8005e7e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d103      	bne.n	8005e8e <xQueueReceive+0x3e>
 8005e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d101      	bne.n	8005e92 <xQueueReceive+0x42>
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e000      	b.n	8005e94 <xQueueReceive+0x44>
 8005e92:	2300      	movs	r3, #0
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d10a      	bne.n	8005eae <xQueueReceive+0x5e>
	__asm volatile
 8005e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e9c:	f383 8811 	msr	BASEPRI, r3
 8005ea0:	f3bf 8f6f 	isb	sy
 8005ea4:	f3bf 8f4f 	dsb	sy
 8005ea8:	61fb      	str	r3, [r7, #28]
}
 8005eaa:	bf00      	nop
 8005eac:	e7fe      	b.n	8005eac <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005eae:	f001 f9ff 	bl	80072b0 <xTaskGetSchedulerState>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d102      	bne.n	8005ebe <xQueueReceive+0x6e>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d101      	bne.n	8005ec2 <xQueueReceive+0x72>
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e000      	b.n	8005ec4 <xQueueReceive+0x74>
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d10a      	bne.n	8005ede <xQueueReceive+0x8e>
	__asm volatile
 8005ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ecc:	f383 8811 	msr	BASEPRI, r3
 8005ed0:	f3bf 8f6f 	isb	sy
 8005ed4:	f3bf 8f4f 	dsb	sy
 8005ed8:	61bb      	str	r3, [r7, #24]
}
 8005eda:	bf00      	nop
 8005edc:	e7fe      	b.n	8005edc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005ede:	f001 fd39 	bl	8007954 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d01f      	beq.n	8005f2e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005eee:	68b9      	ldr	r1, [r7, #8]
 8005ef0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ef2:	f000 fafa 	bl	80064ea <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef8:	1e5a      	subs	r2, r3, #1
 8005efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005efc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f00:	691b      	ldr	r3, [r3, #16]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d00f      	beq.n	8005f26 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f08:	3310      	adds	r3, #16
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f001 f810 	bl	8006f30 <xTaskRemoveFromEventList>
 8005f10:	4603      	mov	r3, r0
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d007      	beq.n	8005f26 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005f16:	4b3d      	ldr	r3, [pc, #244]	; (800600c <xQueueReceive+0x1bc>)
 8005f18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f1c:	601a      	str	r2, [r3, #0]
 8005f1e:	f3bf 8f4f 	dsb	sy
 8005f22:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005f26:	f001 fd45 	bl	80079b4 <vPortExitCritical>
				return pdPASS;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e069      	b.n	8006002 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d103      	bne.n	8005f3c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005f34:	f001 fd3e 	bl	80079b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	e062      	b.n	8006002 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d106      	bne.n	8005f50 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005f42:	f107 0310 	add.w	r3, r7, #16
 8005f46:	4618      	mov	r0, r3
 8005f48:	f001 f854 	bl	8006ff4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005f50:	f001 fd30 	bl	80079b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005f54:	f000 fde2 	bl	8006b1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005f58:	f001 fcfc 	bl	8007954 <vPortEnterCritical>
 8005f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f62:	b25b      	sxtb	r3, r3
 8005f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f68:	d103      	bne.n	8005f72 <xQueueReceive+0x122>
 8005f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f78:	b25b      	sxtb	r3, r3
 8005f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f7e:	d103      	bne.n	8005f88 <xQueueReceive+0x138>
 8005f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f82:	2200      	movs	r2, #0
 8005f84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f88:	f001 fd14 	bl	80079b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005f8c:	1d3a      	adds	r2, r7, #4
 8005f8e:	f107 0310 	add.w	r3, r7, #16
 8005f92:	4611      	mov	r1, r2
 8005f94:	4618      	mov	r0, r3
 8005f96:	f001 f843 	bl	8007020 <xTaskCheckForTimeOut>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d123      	bne.n	8005fe8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005fa0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fa2:	f000 fb1a 	bl	80065da <prvIsQueueEmpty>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d017      	beq.n	8005fdc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fae:	3324      	adds	r3, #36	; 0x24
 8005fb0:	687a      	ldr	r2, [r7, #4]
 8005fb2:	4611      	mov	r1, r2
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f000 ff97 	bl	8006ee8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005fba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fbc:	f000 fabb 	bl	8006536 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005fc0:	f000 fdba 	bl	8006b38 <xTaskResumeAll>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d189      	bne.n	8005ede <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005fca:	4b10      	ldr	r3, [pc, #64]	; (800600c <xQueueReceive+0x1bc>)
 8005fcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fd0:	601a      	str	r2, [r3, #0]
 8005fd2:	f3bf 8f4f 	dsb	sy
 8005fd6:	f3bf 8f6f 	isb	sy
 8005fda:	e780      	b.n	8005ede <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005fdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fde:	f000 faaa 	bl	8006536 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005fe2:	f000 fda9 	bl	8006b38 <xTaskResumeAll>
 8005fe6:	e77a      	b.n	8005ede <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005fe8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fea:	f000 faa4 	bl	8006536 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005fee:	f000 fda3 	bl	8006b38 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ff2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ff4:	f000 faf1 	bl	80065da <prvIsQueueEmpty>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	f43f af6f 	beq.w	8005ede <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006000:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006002:	4618      	mov	r0, r3
 8006004:	3730      	adds	r7, #48	; 0x30
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
 800600a:	bf00      	nop
 800600c:	e000ed04 	.word	0xe000ed04

08006010 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b08e      	sub	sp, #56	; 0x38
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800601a:	2300      	movs	r3, #0
 800601c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006022:	2300      	movs	r3, #0
 8006024:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006028:	2b00      	cmp	r3, #0
 800602a:	d10a      	bne.n	8006042 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800602c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006030:	f383 8811 	msr	BASEPRI, r3
 8006034:	f3bf 8f6f 	isb	sy
 8006038:	f3bf 8f4f 	dsb	sy
 800603c:	623b      	str	r3, [r7, #32]
}
 800603e:	bf00      	nop
 8006040:	e7fe      	b.n	8006040 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006046:	2b00      	cmp	r3, #0
 8006048:	d00a      	beq.n	8006060 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800604a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800604e:	f383 8811 	msr	BASEPRI, r3
 8006052:	f3bf 8f6f 	isb	sy
 8006056:	f3bf 8f4f 	dsb	sy
 800605a:	61fb      	str	r3, [r7, #28]
}
 800605c:	bf00      	nop
 800605e:	e7fe      	b.n	800605e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006060:	f001 f926 	bl	80072b0 <xTaskGetSchedulerState>
 8006064:	4603      	mov	r3, r0
 8006066:	2b00      	cmp	r3, #0
 8006068:	d102      	bne.n	8006070 <xQueueSemaphoreTake+0x60>
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d101      	bne.n	8006074 <xQueueSemaphoreTake+0x64>
 8006070:	2301      	movs	r3, #1
 8006072:	e000      	b.n	8006076 <xQueueSemaphoreTake+0x66>
 8006074:	2300      	movs	r3, #0
 8006076:	2b00      	cmp	r3, #0
 8006078:	d10a      	bne.n	8006090 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800607a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800607e:	f383 8811 	msr	BASEPRI, r3
 8006082:	f3bf 8f6f 	isb	sy
 8006086:	f3bf 8f4f 	dsb	sy
 800608a:	61bb      	str	r3, [r7, #24]
}
 800608c:	bf00      	nop
 800608e:	e7fe      	b.n	800608e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006090:	f001 fc60 	bl	8007954 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006098:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800609a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800609c:	2b00      	cmp	r3, #0
 800609e:	d024      	beq.n	80060ea <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80060a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a2:	1e5a      	subs	r2, r3, #1
 80060a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060a6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80060a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d104      	bne.n	80060ba <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80060b0:	f001 faa6 	bl	8007600 <pvTaskIncrementMutexHeldCount>
 80060b4:	4602      	mov	r2, r0
 80060b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060b8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80060ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060bc:	691b      	ldr	r3, [r3, #16]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d00f      	beq.n	80060e2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80060c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060c4:	3310      	adds	r3, #16
 80060c6:	4618      	mov	r0, r3
 80060c8:	f000 ff32 	bl	8006f30 <xTaskRemoveFromEventList>
 80060cc:	4603      	mov	r3, r0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d007      	beq.n	80060e2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80060d2:	4b54      	ldr	r3, [pc, #336]	; (8006224 <xQueueSemaphoreTake+0x214>)
 80060d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060d8:	601a      	str	r2, [r3, #0]
 80060da:	f3bf 8f4f 	dsb	sy
 80060de:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80060e2:	f001 fc67 	bl	80079b4 <vPortExitCritical>
				return pdPASS;
 80060e6:	2301      	movs	r3, #1
 80060e8:	e097      	b.n	800621a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d111      	bne.n	8006114 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80060f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d00a      	beq.n	800610c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80060f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060fa:	f383 8811 	msr	BASEPRI, r3
 80060fe:	f3bf 8f6f 	isb	sy
 8006102:	f3bf 8f4f 	dsb	sy
 8006106:	617b      	str	r3, [r7, #20]
}
 8006108:	bf00      	nop
 800610a:	e7fe      	b.n	800610a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800610c:	f001 fc52 	bl	80079b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006110:	2300      	movs	r3, #0
 8006112:	e082      	b.n	800621a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006116:	2b00      	cmp	r3, #0
 8006118:	d106      	bne.n	8006128 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800611a:	f107 030c 	add.w	r3, r7, #12
 800611e:	4618      	mov	r0, r3
 8006120:	f000 ff68 	bl	8006ff4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006124:	2301      	movs	r3, #1
 8006126:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006128:	f001 fc44 	bl	80079b4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800612c:	f000 fcf6 	bl	8006b1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006130:	f001 fc10 	bl	8007954 <vPortEnterCritical>
 8006134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006136:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800613a:	b25b      	sxtb	r3, r3
 800613c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006140:	d103      	bne.n	800614a <xQueueSemaphoreTake+0x13a>
 8006142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006144:	2200      	movs	r2, #0
 8006146:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800614a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800614c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006150:	b25b      	sxtb	r3, r3
 8006152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006156:	d103      	bne.n	8006160 <xQueueSemaphoreTake+0x150>
 8006158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800615a:	2200      	movs	r2, #0
 800615c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006160:	f001 fc28 	bl	80079b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006164:	463a      	mov	r2, r7
 8006166:	f107 030c 	add.w	r3, r7, #12
 800616a:	4611      	mov	r1, r2
 800616c:	4618      	mov	r0, r3
 800616e:	f000 ff57 	bl	8007020 <xTaskCheckForTimeOut>
 8006172:	4603      	mov	r3, r0
 8006174:	2b00      	cmp	r3, #0
 8006176:	d132      	bne.n	80061de <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006178:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800617a:	f000 fa2e 	bl	80065da <prvIsQueueEmpty>
 800617e:	4603      	mov	r3, r0
 8006180:	2b00      	cmp	r3, #0
 8006182:	d026      	beq.n	80061d2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d109      	bne.n	80061a0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800618c:	f001 fbe2 	bl	8007954 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	4618      	mov	r0, r3
 8006196:	f001 f8a9 	bl	80072ec <xTaskPriorityInherit>
 800619a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800619c:	f001 fc0a 	bl	80079b4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80061a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061a2:	3324      	adds	r3, #36	; 0x24
 80061a4:	683a      	ldr	r2, [r7, #0]
 80061a6:	4611      	mov	r1, r2
 80061a8:	4618      	mov	r0, r3
 80061aa:	f000 fe9d 	bl	8006ee8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80061ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80061b0:	f000 f9c1 	bl	8006536 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80061b4:	f000 fcc0 	bl	8006b38 <xTaskResumeAll>
 80061b8:	4603      	mov	r3, r0
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	f47f af68 	bne.w	8006090 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80061c0:	4b18      	ldr	r3, [pc, #96]	; (8006224 <xQueueSemaphoreTake+0x214>)
 80061c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061c6:	601a      	str	r2, [r3, #0]
 80061c8:	f3bf 8f4f 	dsb	sy
 80061cc:	f3bf 8f6f 	isb	sy
 80061d0:	e75e      	b.n	8006090 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80061d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80061d4:	f000 f9af 	bl	8006536 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80061d8:	f000 fcae 	bl	8006b38 <xTaskResumeAll>
 80061dc:	e758      	b.n	8006090 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80061de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80061e0:	f000 f9a9 	bl	8006536 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80061e4:	f000 fca8 	bl	8006b38 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80061e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80061ea:	f000 f9f6 	bl	80065da <prvIsQueueEmpty>
 80061ee:	4603      	mov	r3, r0
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	f43f af4d 	beq.w	8006090 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80061f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d00d      	beq.n	8006218 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80061fc:	f001 fbaa 	bl	8007954 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006200:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006202:	f000 f8f0 	bl	80063e6 <prvGetDisinheritPriorityAfterTimeout>
 8006206:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800620e:	4618      	mov	r0, r3
 8006210:	f001 f968 	bl	80074e4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006214:	f001 fbce 	bl	80079b4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006218:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800621a:	4618      	mov	r0, r3
 800621c:	3738      	adds	r7, #56	; 0x38
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}
 8006222:	bf00      	nop
 8006224:	e000ed04 	.word	0xe000ed04

08006228 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b08e      	sub	sp, #56	; 0x38
 800622c:	af00      	add	r7, sp, #0
 800622e:	60f8      	str	r0, [r7, #12]
 8006230:	60b9      	str	r1, [r7, #8]
 8006232:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800623a:	2b00      	cmp	r3, #0
 800623c:	d10a      	bne.n	8006254 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800623e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006242:	f383 8811 	msr	BASEPRI, r3
 8006246:	f3bf 8f6f 	isb	sy
 800624a:	f3bf 8f4f 	dsb	sy
 800624e:	623b      	str	r3, [r7, #32]
}
 8006250:	bf00      	nop
 8006252:	e7fe      	b.n	8006252 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d103      	bne.n	8006262 <xQueueReceiveFromISR+0x3a>
 800625a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800625c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800625e:	2b00      	cmp	r3, #0
 8006260:	d101      	bne.n	8006266 <xQueueReceiveFromISR+0x3e>
 8006262:	2301      	movs	r3, #1
 8006264:	e000      	b.n	8006268 <xQueueReceiveFromISR+0x40>
 8006266:	2300      	movs	r3, #0
 8006268:	2b00      	cmp	r3, #0
 800626a:	d10a      	bne.n	8006282 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800626c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006270:	f383 8811 	msr	BASEPRI, r3
 8006274:	f3bf 8f6f 	isb	sy
 8006278:	f3bf 8f4f 	dsb	sy
 800627c:	61fb      	str	r3, [r7, #28]
}
 800627e:	bf00      	nop
 8006280:	e7fe      	b.n	8006280 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006282:	f001 fc49 	bl	8007b18 <vPortValidateInterruptPriority>
	__asm volatile
 8006286:	f3ef 8211 	mrs	r2, BASEPRI
 800628a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800628e:	f383 8811 	msr	BASEPRI, r3
 8006292:	f3bf 8f6f 	isb	sy
 8006296:	f3bf 8f4f 	dsb	sy
 800629a:	61ba      	str	r2, [r7, #24]
 800629c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800629e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80062a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80062a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062a6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80062a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d02f      	beq.n	800630e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80062ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80062b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80062b8:	68b9      	ldr	r1, [r7, #8]
 80062ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80062bc:	f000 f915 	bl	80064ea <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80062c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c2:	1e5a      	subs	r2, r3, #1
 80062c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80062c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80062cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062d0:	d112      	bne.n	80062f8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80062d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d4:	691b      	ldr	r3, [r3, #16]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d016      	beq.n	8006308 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80062da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062dc:	3310      	adds	r3, #16
 80062de:	4618      	mov	r0, r3
 80062e0:	f000 fe26 	bl	8006f30 <xTaskRemoveFromEventList>
 80062e4:	4603      	mov	r3, r0
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d00e      	beq.n	8006308 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d00b      	beq.n	8006308 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2201      	movs	r2, #1
 80062f4:	601a      	str	r2, [r3, #0]
 80062f6:	e007      	b.n	8006308 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80062f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80062fc:	3301      	adds	r3, #1
 80062fe:	b2db      	uxtb	r3, r3
 8006300:	b25a      	sxtb	r2, r3
 8006302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006304:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006308:	2301      	movs	r3, #1
 800630a:	637b      	str	r3, [r7, #52]	; 0x34
 800630c:	e001      	b.n	8006312 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800630e:	2300      	movs	r3, #0
 8006310:	637b      	str	r3, [r7, #52]	; 0x34
 8006312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006314:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	f383 8811 	msr	BASEPRI, r3
}
 800631c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800631e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006320:	4618      	mov	r0, r3
 8006322:	3738      	adds	r7, #56	; 0x38
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}

08006328 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b084      	sub	sp, #16
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d10a      	bne.n	800634c <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8006336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800633a:	f383 8811 	msr	BASEPRI, r3
 800633e:	f3bf 8f6f 	isb	sy
 8006342:	f3bf 8f4f 	dsb	sy
 8006346:	60bb      	str	r3, [r7, #8]
}
 8006348:	bf00      	nop
 800634a:	e7fe      	b.n	800634a <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800634c:	f001 fb02 	bl	8007954 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006354:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8006356:	f001 fb2d 	bl	80079b4 <vPortExitCritical>

	return uxReturn;
 800635a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800635c:	4618      	mov	r0, r3
 800635e:	3710      	adds	r7, #16
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}

08006364 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8006364:	b480      	push	{r7}
 8006366:	b087      	sub	sp, #28
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d10a      	bne.n	800638c <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8006376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800637a:	f383 8811 	msr	BASEPRI, r3
 800637e:	f3bf 8f6f 	isb	sy
 8006382:	f3bf 8f4f 	dsb	sy
 8006386:	60fb      	str	r3, [r7, #12]
}
 8006388:	bf00      	nop
 800638a:	e7fe      	b.n	800638a <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006390:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8006392:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006394:	4618      	mov	r0, r3
 8006396:	371c      	adds	r7, #28
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr

080063a0 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b084      	sub	sp, #16
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d10a      	bne.n	80063c8 <vQueueDelete+0x28>
	__asm volatile
 80063b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b6:	f383 8811 	msr	BASEPRI, r3
 80063ba:	f3bf 8f6f 	isb	sy
 80063be:	f3bf 8f4f 	dsb	sy
 80063c2:	60bb      	str	r3, [r7, #8]
}
 80063c4:	bf00      	nop
 80063c6:	e7fe      	b.n	80063c6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80063c8:	68f8      	ldr	r0, [r7, #12]
 80063ca:	f000 f935 	bl	8006638 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d102      	bne.n	80063de <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80063d8:	68f8      	ldr	r0, [r7, #12]
 80063da:	f001 fca9 	bl	8007d30 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80063de:	bf00      	nop
 80063e0:	3710      	adds	r7, #16
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}

080063e6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80063e6:	b480      	push	{r7}
 80063e8:	b085      	sub	sp, #20
 80063ea:	af00      	add	r7, sp, #0
 80063ec:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d006      	beq.n	8006404 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f1c3 0307 	rsb	r3, r3, #7
 8006400:	60fb      	str	r3, [r7, #12]
 8006402:	e001      	b.n	8006408 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006404:	2300      	movs	r3, #0
 8006406:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006408:	68fb      	ldr	r3, [r7, #12]
	}
 800640a:	4618      	mov	r0, r3
 800640c:	3714      	adds	r7, #20
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr

08006416 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006416:	b580      	push	{r7, lr}
 8006418:	b086      	sub	sp, #24
 800641a:	af00      	add	r7, sp, #0
 800641c:	60f8      	str	r0, [r7, #12]
 800641e:	60b9      	str	r1, [r7, #8]
 8006420:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006422:	2300      	movs	r3, #0
 8006424:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800642a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006430:	2b00      	cmp	r3, #0
 8006432:	d10d      	bne.n	8006450 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d14d      	bne.n	80064d8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	4618      	mov	r0, r3
 8006442:	f000 ffc9 	bl	80073d8 <xTaskPriorityDisinherit>
 8006446:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2200      	movs	r2, #0
 800644c:	609a      	str	r2, [r3, #8]
 800644e:	e043      	b.n	80064d8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d119      	bne.n	800648a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	6858      	ldr	r0, [r3, #4]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800645e:	461a      	mov	r2, r3
 8006460:	68b9      	ldr	r1, [r7, #8]
 8006462:	f012 fd99 	bl	8018f98 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	685a      	ldr	r2, [r3, #4]
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800646e:	441a      	add	r2, r3
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	685a      	ldr	r2, [r3, #4]
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	689b      	ldr	r3, [r3, #8]
 800647c:	429a      	cmp	r2, r3
 800647e:	d32b      	bcc.n	80064d8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681a      	ldr	r2, [r3, #0]
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	605a      	str	r2, [r3, #4]
 8006488:	e026      	b.n	80064d8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	68d8      	ldr	r0, [r3, #12]
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006492:	461a      	mov	r2, r3
 8006494:	68b9      	ldr	r1, [r7, #8]
 8006496:	f012 fd7f 	bl	8018f98 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	68da      	ldr	r2, [r3, #12]
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a2:	425b      	negs	r3, r3
 80064a4:	441a      	add	r2, r3
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	68da      	ldr	r2, [r3, #12]
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d207      	bcs.n	80064c6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	689a      	ldr	r2, [r3, #8]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064be:	425b      	negs	r3, r3
 80064c0:	441a      	add	r2, r3
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2b02      	cmp	r3, #2
 80064ca:	d105      	bne.n	80064d8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d002      	beq.n	80064d8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	3b01      	subs	r3, #1
 80064d6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	1c5a      	adds	r2, r3, #1
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80064e0:	697b      	ldr	r3, [r7, #20]
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3718      	adds	r7, #24
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}

080064ea <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80064ea:	b580      	push	{r7, lr}
 80064ec:	b082      	sub	sp, #8
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	6078      	str	r0, [r7, #4]
 80064f2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d018      	beq.n	800652e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	68da      	ldr	r2, [r3, #12]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006504:	441a      	add	r2, r3
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	68da      	ldr	r2, [r3, #12]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	429a      	cmp	r2, r3
 8006514:	d303      	bcc.n	800651e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	68d9      	ldr	r1, [r3, #12]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006526:	461a      	mov	r2, r3
 8006528:	6838      	ldr	r0, [r7, #0]
 800652a:	f012 fd35 	bl	8018f98 <memcpy>
	}
}
 800652e:	bf00      	nop
 8006530:	3708      	adds	r7, #8
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}

08006536 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006536:	b580      	push	{r7, lr}
 8006538:	b084      	sub	sp, #16
 800653a:	af00      	add	r7, sp, #0
 800653c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800653e:	f001 fa09 	bl	8007954 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006548:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800654a:	e011      	b.n	8006570 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006550:	2b00      	cmp	r3, #0
 8006552:	d012      	beq.n	800657a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	3324      	adds	r3, #36	; 0x24
 8006558:	4618      	mov	r0, r3
 800655a:	f000 fce9 	bl	8006f30 <xTaskRemoveFromEventList>
 800655e:	4603      	mov	r3, r0
 8006560:	2b00      	cmp	r3, #0
 8006562:	d001      	beq.n	8006568 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006564:	f000 fdbe 	bl	80070e4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006568:	7bfb      	ldrb	r3, [r7, #15]
 800656a:	3b01      	subs	r3, #1
 800656c:	b2db      	uxtb	r3, r3
 800656e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006570:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006574:	2b00      	cmp	r3, #0
 8006576:	dce9      	bgt.n	800654c <prvUnlockQueue+0x16>
 8006578:	e000      	b.n	800657c <prvUnlockQueue+0x46>
					break;
 800657a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	22ff      	movs	r2, #255	; 0xff
 8006580:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006584:	f001 fa16 	bl	80079b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006588:	f001 f9e4 	bl	8007954 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006592:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006594:	e011      	b.n	80065ba <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	691b      	ldr	r3, [r3, #16]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d012      	beq.n	80065c4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	3310      	adds	r3, #16
 80065a2:	4618      	mov	r0, r3
 80065a4:	f000 fcc4 	bl	8006f30 <xTaskRemoveFromEventList>
 80065a8:	4603      	mov	r3, r0
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d001      	beq.n	80065b2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80065ae:	f000 fd99 	bl	80070e4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80065b2:	7bbb      	ldrb	r3, [r7, #14]
 80065b4:	3b01      	subs	r3, #1
 80065b6:	b2db      	uxtb	r3, r3
 80065b8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80065ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	dce9      	bgt.n	8006596 <prvUnlockQueue+0x60>
 80065c2:	e000      	b.n	80065c6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80065c4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	22ff      	movs	r2, #255	; 0xff
 80065ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80065ce:	f001 f9f1 	bl	80079b4 <vPortExitCritical>
}
 80065d2:	bf00      	nop
 80065d4:	3710      	adds	r7, #16
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}

080065da <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80065da:	b580      	push	{r7, lr}
 80065dc:	b084      	sub	sp, #16
 80065de:	af00      	add	r7, sp, #0
 80065e0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80065e2:	f001 f9b7 	bl	8007954 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d102      	bne.n	80065f4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80065ee:	2301      	movs	r3, #1
 80065f0:	60fb      	str	r3, [r7, #12]
 80065f2:	e001      	b.n	80065f8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80065f4:	2300      	movs	r3, #0
 80065f6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80065f8:	f001 f9dc 	bl	80079b4 <vPortExitCritical>

	return xReturn;
 80065fc:	68fb      	ldr	r3, [r7, #12]
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3710      	adds	r7, #16
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}

08006606 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006606:	b580      	push	{r7, lr}
 8006608:	b084      	sub	sp, #16
 800660a:	af00      	add	r7, sp, #0
 800660c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800660e:	f001 f9a1 	bl	8007954 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800661a:	429a      	cmp	r2, r3
 800661c:	d102      	bne.n	8006624 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800661e:	2301      	movs	r3, #1
 8006620:	60fb      	str	r3, [r7, #12]
 8006622:	e001      	b.n	8006628 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006624:	2300      	movs	r3, #0
 8006626:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006628:	f001 f9c4 	bl	80079b4 <vPortExitCritical>

	return xReturn;
 800662c:	68fb      	ldr	r3, [r7, #12]
}
 800662e:	4618      	mov	r0, r3
 8006630:	3710      	adds	r7, #16
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}
	...

08006638 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006638:	b480      	push	{r7}
 800663a:	b085      	sub	sp, #20
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006640:	2300      	movs	r3, #0
 8006642:	60fb      	str	r3, [r7, #12]
 8006644:	e016      	b.n	8006674 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006646:	4a10      	ldr	r2, [pc, #64]	; (8006688 <vQueueUnregisterQueue+0x50>)
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	00db      	lsls	r3, r3, #3
 800664c:	4413      	add	r3, r2
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	687a      	ldr	r2, [r7, #4]
 8006652:	429a      	cmp	r2, r3
 8006654:	d10b      	bne.n	800666e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006656:	4a0c      	ldr	r2, [pc, #48]	; (8006688 <vQueueUnregisterQueue+0x50>)
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2100      	movs	r1, #0
 800665c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006660:	4a09      	ldr	r2, [pc, #36]	; (8006688 <vQueueUnregisterQueue+0x50>)
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	00db      	lsls	r3, r3, #3
 8006666:	4413      	add	r3, r2
 8006668:	2200      	movs	r2, #0
 800666a:	605a      	str	r2, [r3, #4]
				break;
 800666c:	e006      	b.n	800667c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	3301      	adds	r3, #1
 8006672:	60fb      	str	r3, [r7, #12]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2b07      	cmp	r3, #7
 8006678:	d9e5      	bls.n	8006646 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800667a:	bf00      	nop
 800667c:	bf00      	nop
 800667e:	3714      	adds	r7, #20
 8006680:	46bd      	mov	sp, r7
 8006682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006686:	4770      	bx	lr
 8006688:	20005118 	.word	0x20005118

0800668c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800668c:	b580      	push	{r7, lr}
 800668e:	b08e      	sub	sp, #56	; 0x38
 8006690:	af04      	add	r7, sp, #16
 8006692:	60f8      	str	r0, [r7, #12]
 8006694:	60b9      	str	r1, [r7, #8]
 8006696:	607a      	str	r2, [r7, #4]
 8006698:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800669a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800669c:	2b00      	cmp	r3, #0
 800669e:	d10a      	bne.n	80066b6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80066a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a4:	f383 8811 	msr	BASEPRI, r3
 80066a8:	f3bf 8f6f 	isb	sy
 80066ac:	f3bf 8f4f 	dsb	sy
 80066b0:	623b      	str	r3, [r7, #32]
}
 80066b2:	bf00      	nop
 80066b4:	e7fe      	b.n	80066b4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80066b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d10a      	bne.n	80066d2 <xTaskCreateStatic+0x46>
	__asm volatile
 80066bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066c0:	f383 8811 	msr	BASEPRI, r3
 80066c4:	f3bf 8f6f 	isb	sy
 80066c8:	f3bf 8f4f 	dsb	sy
 80066cc:	61fb      	str	r3, [r7, #28]
}
 80066ce:	bf00      	nop
 80066d0:	e7fe      	b.n	80066d0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80066d2:	23a0      	movs	r3, #160	; 0xa0
 80066d4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	2ba0      	cmp	r3, #160	; 0xa0
 80066da:	d00a      	beq.n	80066f2 <xTaskCreateStatic+0x66>
	__asm volatile
 80066dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e0:	f383 8811 	msr	BASEPRI, r3
 80066e4:	f3bf 8f6f 	isb	sy
 80066e8:	f3bf 8f4f 	dsb	sy
 80066ec:	61bb      	str	r3, [r7, #24]
}
 80066ee:	bf00      	nop
 80066f0:	e7fe      	b.n	80066f0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80066f2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80066f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d01e      	beq.n	8006738 <xTaskCreateStatic+0xac>
 80066fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d01b      	beq.n	8006738 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006702:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006706:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006708:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800670a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670c:	2202      	movs	r2, #2
 800670e:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006712:	2300      	movs	r3, #0
 8006714:	9303      	str	r3, [sp, #12]
 8006716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006718:	9302      	str	r3, [sp, #8]
 800671a:	f107 0314 	add.w	r3, r7, #20
 800671e:	9301      	str	r3, [sp, #4]
 8006720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006722:	9300      	str	r3, [sp, #0]
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	687a      	ldr	r2, [r7, #4]
 8006728:	68b9      	ldr	r1, [r7, #8]
 800672a:	68f8      	ldr	r0, [r7, #12]
 800672c:	f000 f850 	bl	80067d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006730:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006732:	f000 f8eb 	bl	800690c <prvAddNewTaskToReadyList>
 8006736:	e001      	b.n	800673c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006738:	2300      	movs	r3, #0
 800673a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800673c:	697b      	ldr	r3, [r7, #20]
	}
 800673e:	4618      	mov	r0, r3
 8006740:	3728      	adds	r7, #40	; 0x28
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}

08006746 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006746:	b580      	push	{r7, lr}
 8006748:	b08c      	sub	sp, #48	; 0x30
 800674a:	af04      	add	r7, sp, #16
 800674c:	60f8      	str	r0, [r7, #12]
 800674e:	60b9      	str	r1, [r7, #8]
 8006750:	603b      	str	r3, [r7, #0]
 8006752:	4613      	mov	r3, r2
 8006754:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006756:	88fb      	ldrh	r3, [r7, #6]
 8006758:	009b      	lsls	r3, r3, #2
 800675a:	4618      	mov	r0, r3
 800675c:	f001 fa1c 	bl	8007b98 <pvPortMalloc>
 8006760:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d00e      	beq.n	8006786 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006768:	20a0      	movs	r0, #160	; 0xa0
 800676a:	f001 fa15 	bl	8007b98 <pvPortMalloc>
 800676e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006770:	69fb      	ldr	r3, [r7, #28]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d003      	beq.n	800677e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006776:	69fb      	ldr	r3, [r7, #28]
 8006778:	697a      	ldr	r2, [r7, #20]
 800677a:	631a      	str	r2, [r3, #48]	; 0x30
 800677c:	e005      	b.n	800678a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800677e:	6978      	ldr	r0, [r7, #20]
 8006780:	f001 fad6 	bl	8007d30 <vPortFree>
 8006784:	e001      	b.n	800678a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006786:	2300      	movs	r3, #0
 8006788:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800678a:	69fb      	ldr	r3, [r7, #28]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d017      	beq.n	80067c0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006790:	69fb      	ldr	r3, [r7, #28]
 8006792:	2200      	movs	r2, #0
 8006794:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006798:	88fa      	ldrh	r2, [r7, #6]
 800679a:	2300      	movs	r3, #0
 800679c:	9303      	str	r3, [sp, #12]
 800679e:	69fb      	ldr	r3, [r7, #28]
 80067a0:	9302      	str	r3, [sp, #8]
 80067a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067a4:	9301      	str	r3, [sp, #4]
 80067a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a8:	9300      	str	r3, [sp, #0]
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	68b9      	ldr	r1, [r7, #8]
 80067ae:	68f8      	ldr	r0, [r7, #12]
 80067b0:	f000 f80e 	bl	80067d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80067b4:	69f8      	ldr	r0, [r7, #28]
 80067b6:	f000 f8a9 	bl	800690c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80067ba:	2301      	movs	r3, #1
 80067bc:	61bb      	str	r3, [r7, #24]
 80067be:	e002      	b.n	80067c6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80067c0:	f04f 33ff 	mov.w	r3, #4294967295
 80067c4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80067c6:	69bb      	ldr	r3, [r7, #24]
	}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3720      	adds	r7, #32
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}

080067d0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b088      	sub	sp, #32
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	60f8      	str	r0, [r7, #12]
 80067d8:	60b9      	str	r1, [r7, #8]
 80067da:	607a      	str	r2, [r7, #4]
 80067dc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80067de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80067e8:	3b01      	subs	r3, #1
 80067ea:	009b      	lsls	r3, r3, #2
 80067ec:	4413      	add	r3, r2
 80067ee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80067f0:	69bb      	ldr	r3, [r7, #24]
 80067f2:	f023 0307 	bic.w	r3, r3, #7
 80067f6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80067f8:	69bb      	ldr	r3, [r7, #24]
 80067fa:	f003 0307 	and.w	r3, r3, #7
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d00a      	beq.n	8006818 <prvInitialiseNewTask+0x48>
	__asm volatile
 8006802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006806:	f383 8811 	msr	BASEPRI, r3
 800680a:	f3bf 8f6f 	isb	sy
 800680e:	f3bf 8f4f 	dsb	sy
 8006812:	617b      	str	r3, [r7, #20]
}
 8006814:	bf00      	nop
 8006816:	e7fe      	b.n	8006816 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d01f      	beq.n	800685e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800681e:	2300      	movs	r3, #0
 8006820:	61fb      	str	r3, [r7, #28]
 8006822:	e012      	b.n	800684a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006824:	68ba      	ldr	r2, [r7, #8]
 8006826:	69fb      	ldr	r3, [r7, #28]
 8006828:	4413      	add	r3, r2
 800682a:	7819      	ldrb	r1, [r3, #0]
 800682c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800682e:	69fb      	ldr	r3, [r7, #28]
 8006830:	4413      	add	r3, r2
 8006832:	3334      	adds	r3, #52	; 0x34
 8006834:	460a      	mov	r2, r1
 8006836:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006838:	68ba      	ldr	r2, [r7, #8]
 800683a:	69fb      	ldr	r3, [r7, #28]
 800683c:	4413      	add	r3, r2
 800683e:	781b      	ldrb	r3, [r3, #0]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d006      	beq.n	8006852 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006844:	69fb      	ldr	r3, [r7, #28]
 8006846:	3301      	adds	r3, #1
 8006848:	61fb      	str	r3, [r7, #28]
 800684a:	69fb      	ldr	r3, [r7, #28]
 800684c:	2b0f      	cmp	r3, #15
 800684e:	d9e9      	bls.n	8006824 <prvInitialiseNewTask+0x54>
 8006850:	e000      	b.n	8006854 <prvInitialiseNewTask+0x84>
			{
				break;
 8006852:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006856:	2200      	movs	r2, #0
 8006858:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800685c:	e003      	b.n	8006866 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800685e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006860:	2200      	movs	r2, #0
 8006862:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006868:	2b06      	cmp	r3, #6
 800686a:	d901      	bls.n	8006870 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800686c:	2306      	movs	r3, #6
 800686e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006872:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006874:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006878:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800687a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800687c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800687e:	2200      	movs	r2, #0
 8006880:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006884:	3304      	adds	r3, #4
 8006886:	4618      	mov	r0, r3
 8006888:	f7fe fea1 	bl	80055ce <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800688c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800688e:	3318      	adds	r3, #24
 8006890:	4618      	mov	r0, r3
 8006892:	f7fe fe9c 	bl	80055ce <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006898:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800689a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800689c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800689e:	f1c3 0207 	rsb	r2, r3, #7
 80068a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80068a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068aa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80068ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ae:	2200      	movs	r2, #0
 80068b0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80068b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b6:	2200      	movs	r2, #0
 80068b8:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80068bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068be:	334c      	adds	r3, #76	; 0x4c
 80068c0:	224c      	movs	r2, #76	; 0x4c
 80068c2:	2100      	movs	r1, #0
 80068c4:	4618      	mov	r0, r3
 80068c6:	f012 fa06 	bl	8018cd6 <memset>
 80068ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068cc:	4a0c      	ldr	r2, [pc, #48]	; (8006900 <prvInitialiseNewTask+0x130>)
 80068ce:	651a      	str	r2, [r3, #80]	; 0x50
 80068d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d2:	4a0c      	ldr	r2, [pc, #48]	; (8006904 <prvInitialiseNewTask+0x134>)
 80068d4:	655a      	str	r2, [r3, #84]	; 0x54
 80068d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d8:	4a0b      	ldr	r2, [pc, #44]	; (8006908 <prvInitialiseNewTask+0x138>)
 80068da:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80068dc:	683a      	ldr	r2, [r7, #0]
 80068de:	68f9      	ldr	r1, [r7, #12]
 80068e0:	69b8      	ldr	r0, [r7, #24]
 80068e2:	f000 ff07 	bl	80076f4 <pxPortInitialiseStack>
 80068e6:	4602      	mov	r2, r0
 80068e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ea:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80068ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d002      	beq.n	80068f8 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80068f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068f6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80068f8:	bf00      	nop
 80068fa:	3720      	adds	r7, #32
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}
 8006900:	20011004 	.word	0x20011004
 8006904:	2001106c 	.word	0x2001106c
 8006908:	200110d4 	.word	0x200110d4

0800690c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b082      	sub	sp, #8
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006914:	f001 f81e 	bl	8007954 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006918:	4b2a      	ldr	r3, [pc, #168]	; (80069c4 <prvAddNewTaskToReadyList+0xb8>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	3301      	adds	r3, #1
 800691e:	4a29      	ldr	r2, [pc, #164]	; (80069c4 <prvAddNewTaskToReadyList+0xb8>)
 8006920:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006922:	4b29      	ldr	r3, [pc, #164]	; (80069c8 <prvAddNewTaskToReadyList+0xbc>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d109      	bne.n	800693e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800692a:	4a27      	ldr	r2, [pc, #156]	; (80069c8 <prvAddNewTaskToReadyList+0xbc>)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006930:	4b24      	ldr	r3, [pc, #144]	; (80069c4 <prvAddNewTaskToReadyList+0xb8>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	2b01      	cmp	r3, #1
 8006936:	d110      	bne.n	800695a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006938:	f000 fbf8 	bl	800712c <prvInitialiseTaskLists>
 800693c:	e00d      	b.n	800695a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800693e:	4b23      	ldr	r3, [pc, #140]	; (80069cc <prvAddNewTaskToReadyList+0xc0>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d109      	bne.n	800695a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006946:	4b20      	ldr	r3, [pc, #128]	; (80069c8 <prvAddNewTaskToReadyList+0xbc>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006950:	429a      	cmp	r2, r3
 8006952:	d802      	bhi.n	800695a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006954:	4a1c      	ldr	r2, [pc, #112]	; (80069c8 <prvAddNewTaskToReadyList+0xbc>)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800695a:	4b1d      	ldr	r3, [pc, #116]	; (80069d0 <prvAddNewTaskToReadyList+0xc4>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	3301      	adds	r3, #1
 8006960:	4a1b      	ldr	r2, [pc, #108]	; (80069d0 <prvAddNewTaskToReadyList+0xc4>)
 8006962:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006968:	2201      	movs	r2, #1
 800696a:	409a      	lsls	r2, r3
 800696c:	4b19      	ldr	r3, [pc, #100]	; (80069d4 <prvAddNewTaskToReadyList+0xc8>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4313      	orrs	r3, r2
 8006972:	4a18      	ldr	r2, [pc, #96]	; (80069d4 <prvAddNewTaskToReadyList+0xc8>)
 8006974:	6013      	str	r3, [r2, #0]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800697a:	4613      	mov	r3, r2
 800697c:	009b      	lsls	r3, r3, #2
 800697e:	4413      	add	r3, r2
 8006980:	009b      	lsls	r3, r3, #2
 8006982:	4a15      	ldr	r2, [pc, #84]	; (80069d8 <prvAddNewTaskToReadyList+0xcc>)
 8006984:	441a      	add	r2, r3
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	3304      	adds	r3, #4
 800698a:	4619      	mov	r1, r3
 800698c:	4610      	mov	r0, r2
 800698e:	f7fe fe2b 	bl	80055e8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006992:	f001 f80f 	bl	80079b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006996:	4b0d      	ldr	r3, [pc, #52]	; (80069cc <prvAddNewTaskToReadyList+0xc0>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d00e      	beq.n	80069bc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800699e:	4b0a      	ldr	r3, [pc, #40]	; (80069c8 <prvAddNewTaskToReadyList+0xbc>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d207      	bcs.n	80069bc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80069ac:	4b0b      	ldr	r3, [pc, #44]	; (80069dc <prvAddNewTaskToReadyList+0xd0>)
 80069ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069b2:	601a      	str	r2, [r3, #0]
 80069b4:	f3bf 8f4f 	dsb	sy
 80069b8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80069bc:	bf00      	nop
 80069be:	3708      	adds	r7, #8
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}
 80069c4:	20005258 	.word	0x20005258
 80069c8:	20005158 	.word	0x20005158
 80069cc:	20005264 	.word	0x20005264
 80069d0:	20005274 	.word	0x20005274
 80069d4:	20005260 	.word	0x20005260
 80069d8:	2000515c 	.word	0x2000515c
 80069dc:	e000ed04 	.word	0xe000ed04

080069e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b084      	sub	sp, #16
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80069e8:	2300      	movs	r3, #0
 80069ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d017      	beq.n	8006a22 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80069f2:	4b13      	ldr	r3, [pc, #76]	; (8006a40 <vTaskDelay+0x60>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d00a      	beq.n	8006a10 <vTaskDelay+0x30>
	__asm volatile
 80069fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069fe:	f383 8811 	msr	BASEPRI, r3
 8006a02:	f3bf 8f6f 	isb	sy
 8006a06:	f3bf 8f4f 	dsb	sy
 8006a0a:	60bb      	str	r3, [r7, #8]
}
 8006a0c:	bf00      	nop
 8006a0e:	e7fe      	b.n	8006a0e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006a10:	f000 f884 	bl	8006b1c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006a14:	2100      	movs	r1, #0
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f000 fe06 	bl	8007628 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006a1c:	f000 f88c 	bl	8006b38 <xTaskResumeAll>
 8006a20:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d107      	bne.n	8006a38 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006a28:	4b06      	ldr	r3, [pc, #24]	; (8006a44 <vTaskDelay+0x64>)
 8006a2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a2e:	601a      	str	r2, [r3, #0]
 8006a30:	f3bf 8f4f 	dsb	sy
 8006a34:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006a38:	bf00      	nop
 8006a3a:	3710      	adds	r7, #16
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}
 8006a40:	20005280 	.word	0x20005280
 8006a44:	e000ed04 	.word	0xe000ed04

08006a48 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b08a      	sub	sp, #40	; 0x28
 8006a4c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006a52:	2300      	movs	r3, #0
 8006a54:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006a56:	463a      	mov	r2, r7
 8006a58:	1d39      	adds	r1, r7, #4
 8006a5a:	f107 0308 	add.w	r3, r7, #8
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f7f9 fdac 	bl	80005bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006a64:	6839      	ldr	r1, [r7, #0]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	68ba      	ldr	r2, [r7, #8]
 8006a6a:	9202      	str	r2, [sp, #8]
 8006a6c:	9301      	str	r3, [sp, #4]
 8006a6e:	2300      	movs	r3, #0
 8006a70:	9300      	str	r3, [sp, #0]
 8006a72:	2300      	movs	r3, #0
 8006a74:	460a      	mov	r2, r1
 8006a76:	4921      	ldr	r1, [pc, #132]	; (8006afc <vTaskStartScheduler+0xb4>)
 8006a78:	4821      	ldr	r0, [pc, #132]	; (8006b00 <vTaskStartScheduler+0xb8>)
 8006a7a:	f7ff fe07 	bl	800668c <xTaskCreateStatic>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	4a20      	ldr	r2, [pc, #128]	; (8006b04 <vTaskStartScheduler+0xbc>)
 8006a82:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006a84:	4b1f      	ldr	r3, [pc, #124]	; (8006b04 <vTaskStartScheduler+0xbc>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d002      	beq.n	8006a92 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	617b      	str	r3, [r7, #20]
 8006a90:	e001      	b.n	8006a96 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006a92:	2300      	movs	r3, #0
 8006a94:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	2b01      	cmp	r3, #1
 8006a9a:	d11b      	bne.n	8006ad4 <vTaskStartScheduler+0x8c>
	__asm volatile
 8006a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa0:	f383 8811 	msr	BASEPRI, r3
 8006aa4:	f3bf 8f6f 	isb	sy
 8006aa8:	f3bf 8f4f 	dsb	sy
 8006aac:	613b      	str	r3, [r7, #16]
}
 8006aae:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006ab0:	4b15      	ldr	r3, [pc, #84]	; (8006b08 <vTaskStartScheduler+0xc0>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	334c      	adds	r3, #76	; 0x4c
 8006ab6:	4a15      	ldr	r2, [pc, #84]	; (8006b0c <vTaskStartScheduler+0xc4>)
 8006ab8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006aba:	4b15      	ldr	r3, [pc, #84]	; (8006b10 <vTaskStartScheduler+0xc8>)
 8006abc:	f04f 32ff 	mov.w	r2, #4294967295
 8006ac0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006ac2:	4b14      	ldr	r3, [pc, #80]	; (8006b14 <vTaskStartScheduler+0xcc>)
 8006ac4:	2201      	movs	r2, #1
 8006ac6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006ac8:	4b13      	ldr	r3, [pc, #76]	; (8006b18 <vTaskStartScheduler+0xd0>)
 8006aca:	2200      	movs	r2, #0
 8006acc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006ace:	f000 fe9f 	bl	8007810 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006ad2:	e00e      	b.n	8006af2 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ada:	d10a      	bne.n	8006af2 <vTaskStartScheduler+0xaa>
	__asm volatile
 8006adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae0:	f383 8811 	msr	BASEPRI, r3
 8006ae4:	f3bf 8f6f 	isb	sy
 8006ae8:	f3bf 8f4f 	dsb	sy
 8006aec:	60fb      	str	r3, [r7, #12]
}
 8006aee:	bf00      	nop
 8006af0:	e7fe      	b.n	8006af0 <vTaskStartScheduler+0xa8>
}
 8006af2:	bf00      	nop
 8006af4:	3718      	adds	r7, #24
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	bf00      	nop
 8006afc:	0801a0bc 	.word	0x0801a0bc
 8006b00:	080070fd 	.word	0x080070fd
 8006b04:	2000527c 	.word	0x2000527c
 8006b08:	20005158 	.word	0x20005158
 8006b0c:	2000008c 	.word	0x2000008c
 8006b10:	20005278 	.word	0x20005278
 8006b14:	20005264 	.word	0x20005264
 8006b18:	2000525c 	.word	0x2000525c

08006b1c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006b20:	4b04      	ldr	r3, [pc, #16]	; (8006b34 <vTaskSuspendAll+0x18>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	3301      	adds	r3, #1
 8006b26:	4a03      	ldr	r2, [pc, #12]	; (8006b34 <vTaskSuspendAll+0x18>)
 8006b28:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006b2a:	bf00      	nop
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr
 8006b34:	20005280 	.word	0x20005280

08006b38 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b084      	sub	sp, #16
 8006b3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006b42:	2300      	movs	r3, #0
 8006b44:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006b46:	4b41      	ldr	r3, [pc, #260]	; (8006c4c <xTaskResumeAll+0x114>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d10a      	bne.n	8006b64 <xTaskResumeAll+0x2c>
	__asm volatile
 8006b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b52:	f383 8811 	msr	BASEPRI, r3
 8006b56:	f3bf 8f6f 	isb	sy
 8006b5a:	f3bf 8f4f 	dsb	sy
 8006b5e:	603b      	str	r3, [r7, #0]
}
 8006b60:	bf00      	nop
 8006b62:	e7fe      	b.n	8006b62 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006b64:	f000 fef6 	bl	8007954 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006b68:	4b38      	ldr	r3, [pc, #224]	; (8006c4c <xTaskResumeAll+0x114>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	3b01      	subs	r3, #1
 8006b6e:	4a37      	ldr	r2, [pc, #220]	; (8006c4c <xTaskResumeAll+0x114>)
 8006b70:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b72:	4b36      	ldr	r3, [pc, #216]	; (8006c4c <xTaskResumeAll+0x114>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d161      	bne.n	8006c3e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006b7a:	4b35      	ldr	r3, [pc, #212]	; (8006c50 <xTaskResumeAll+0x118>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d05d      	beq.n	8006c3e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006b82:	e02e      	b.n	8006be2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b84:	4b33      	ldr	r3, [pc, #204]	; (8006c54 <xTaskResumeAll+0x11c>)
 8006b86:	68db      	ldr	r3, [r3, #12]
 8006b88:	68db      	ldr	r3, [r3, #12]
 8006b8a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	3318      	adds	r3, #24
 8006b90:	4618      	mov	r0, r3
 8006b92:	f7fe fd86 	bl	80056a2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	3304      	adds	r3, #4
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f7fe fd81 	bl	80056a2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	409a      	lsls	r2, r3
 8006ba8:	4b2b      	ldr	r3, [pc, #172]	; (8006c58 <xTaskResumeAll+0x120>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4313      	orrs	r3, r2
 8006bae:	4a2a      	ldr	r2, [pc, #168]	; (8006c58 <xTaskResumeAll+0x120>)
 8006bb0:	6013      	str	r3, [r2, #0]
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bb6:	4613      	mov	r3, r2
 8006bb8:	009b      	lsls	r3, r3, #2
 8006bba:	4413      	add	r3, r2
 8006bbc:	009b      	lsls	r3, r3, #2
 8006bbe:	4a27      	ldr	r2, [pc, #156]	; (8006c5c <xTaskResumeAll+0x124>)
 8006bc0:	441a      	add	r2, r3
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	3304      	adds	r3, #4
 8006bc6:	4619      	mov	r1, r3
 8006bc8:	4610      	mov	r0, r2
 8006bca:	f7fe fd0d 	bl	80055e8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bd2:	4b23      	ldr	r3, [pc, #140]	; (8006c60 <xTaskResumeAll+0x128>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d302      	bcc.n	8006be2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006bdc:	4b21      	ldr	r3, [pc, #132]	; (8006c64 <xTaskResumeAll+0x12c>)
 8006bde:	2201      	movs	r2, #1
 8006be0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006be2:	4b1c      	ldr	r3, [pc, #112]	; (8006c54 <xTaskResumeAll+0x11c>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d1cc      	bne.n	8006b84 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d001      	beq.n	8006bf4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006bf0:	f000 fb3e 	bl	8007270 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006bf4:	4b1c      	ldr	r3, [pc, #112]	; (8006c68 <xTaskResumeAll+0x130>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d010      	beq.n	8006c22 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006c00:	f000 f858 	bl	8006cb4 <xTaskIncrementTick>
 8006c04:	4603      	mov	r3, r0
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d002      	beq.n	8006c10 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006c0a:	4b16      	ldr	r3, [pc, #88]	; (8006c64 <xTaskResumeAll+0x12c>)
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	3b01      	subs	r3, #1
 8006c14:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d1f1      	bne.n	8006c00 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006c1c:	4b12      	ldr	r3, [pc, #72]	; (8006c68 <xTaskResumeAll+0x130>)
 8006c1e:	2200      	movs	r2, #0
 8006c20:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006c22:	4b10      	ldr	r3, [pc, #64]	; (8006c64 <xTaskResumeAll+0x12c>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d009      	beq.n	8006c3e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006c2e:	4b0f      	ldr	r3, [pc, #60]	; (8006c6c <xTaskResumeAll+0x134>)
 8006c30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c34:	601a      	str	r2, [r3, #0]
 8006c36:	f3bf 8f4f 	dsb	sy
 8006c3a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006c3e:	f000 feb9 	bl	80079b4 <vPortExitCritical>

	return xAlreadyYielded;
 8006c42:	68bb      	ldr	r3, [r7, #8]
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3710      	adds	r7, #16
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}
 8006c4c:	20005280 	.word	0x20005280
 8006c50:	20005258 	.word	0x20005258
 8006c54:	20005218 	.word	0x20005218
 8006c58:	20005260 	.word	0x20005260
 8006c5c:	2000515c 	.word	0x2000515c
 8006c60:	20005158 	.word	0x20005158
 8006c64:	2000526c 	.word	0x2000526c
 8006c68:	20005268 	.word	0x20005268
 8006c6c:	e000ed04 	.word	0xe000ed04

08006c70 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006c70:	b480      	push	{r7}
 8006c72:	b083      	sub	sp, #12
 8006c74:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006c76:	4b05      	ldr	r3, [pc, #20]	; (8006c8c <xTaskGetTickCount+0x1c>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006c7c:	687b      	ldr	r3, [r7, #4]
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	370c      	adds	r7, #12
 8006c82:	46bd      	mov	sp, r7
 8006c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c88:	4770      	bx	lr
 8006c8a:	bf00      	nop
 8006c8c:	2000525c 	.word	0x2000525c

08006c90 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b082      	sub	sp, #8
 8006c94:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006c96:	f000 ff3f 	bl	8007b18 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8006c9e:	4b04      	ldr	r3, [pc, #16]	; (8006cb0 <xTaskGetTickCountFromISR+0x20>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006ca4:	683b      	ldr	r3, [r7, #0]
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3708      	adds	r7, #8
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}
 8006cae:	bf00      	nop
 8006cb0:	2000525c 	.word	0x2000525c

08006cb4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b086      	sub	sp, #24
 8006cb8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006cbe:	4b4e      	ldr	r3, [pc, #312]	; (8006df8 <xTaskIncrementTick+0x144>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	f040 808e 	bne.w	8006de4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006cc8:	4b4c      	ldr	r3, [pc, #304]	; (8006dfc <xTaskIncrementTick+0x148>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	3301      	adds	r3, #1
 8006cce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006cd0:	4a4a      	ldr	r2, [pc, #296]	; (8006dfc <xTaskIncrementTick+0x148>)
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d120      	bne.n	8006d1e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006cdc:	4b48      	ldr	r3, [pc, #288]	; (8006e00 <xTaskIncrementTick+0x14c>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d00a      	beq.n	8006cfc <xTaskIncrementTick+0x48>
	__asm volatile
 8006ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cea:	f383 8811 	msr	BASEPRI, r3
 8006cee:	f3bf 8f6f 	isb	sy
 8006cf2:	f3bf 8f4f 	dsb	sy
 8006cf6:	603b      	str	r3, [r7, #0]
}
 8006cf8:	bf00      	nop
 8006cfa:	e7fe      	b.n	8006cfa <xTaskIncrementTick+0x46>
 8006cfc:	4b40      	ldr	r3, [pc, #256]	; (8006e00 <xTaskIncrementTick+0x14c>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	60fb      	str	r3, [r7, #12]
 8006d02:	4b40      	ldr	r3, [pc, #256]	; (8006e04 <xTaskIncrementTick+0x150>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a3e      	ldr	r2, [pc, #248]	; (8006e00 <xTaskIncrementTick+0x14c>)
 8006d08:	6013      	str	r3, [r2, #0]
 8006d0a:	4a3e      	ldr	r2, [pc, #248]	; (8006e04 <xTaskIncrementTick+0x150>)
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	6013      	str	r3, [r2, #0]
 8006d10:	4b3d      	ldr	r3, [pc, #244]	; (8006e08 <xTaskIncrementTick+0x154>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	3301      	adds	r3, #1
 8006d16:	4a3c      	ldr	r2, [pc, #240]	; (8006e08 <xTaskIncrementTick+0x154>)
 8006d18:	6013      	str	r3, [r2, #0]
 8006d1a:	f000 faa9 	bl	8007270 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006d1e:	4b3b      	ldr	r3, [pc, #236]	; (8006e0c <xTaskIncrementTick+0x158>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	693a      	ldr	r2, [r7, #16]
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d348      	bcc.n	8006dba <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d28:	4b35      	ldr	r3, [pc, #212]	; (8006e00 <xTaskIncrementTick+0x14c>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d104      	bne.n	8006d3c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d32:	4b36      	ldr	r3, [pc, #216]	; (8006e0c <xTaskIncrementTick+0x158>)
 8006d34:	f04f 32ff 	mov.w	r2, #4294967295
 8006d38:	601a      	str	r2, [r3, #0]
					break;
 8006d3a:	e03e      	b.n	8006dba <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d3c:	4b30      	ldr	r3, [pc, #192]	; (8006e00 <xTaskIncrementTick+0x14c>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	68db      	ldr	r3, [r3, #12]
 8006d42:	68db      	ldr	r3, [r3, #12]
 8006d44:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006d4c:	693a      	ldr	r2, [r7, #16]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	429a      	cmp	r2, r3
 8006d52:	d203      	bcs.n	8006d5c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006d54:	4a2d      	ldr	r2, [pc, #180]	; (8006e0c <xTaskIncrementTick+0x158>)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006d5a:	e02e      	b.n	8006dba <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	3304      	adds	r3, #4
 8006d60:	4618      	mov	r0, r3
 8006d62:	f7fe fc9e 	bl	80056a2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d004      	beq.n	8006d78 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	3318      	adds	r3, #24
 8006d72:	4618      	mov	r0, r3
 8006d74:	f7fe fc95 	bl	80056a2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	409a      	lsls	r2, r3
 8006d80:	4b23      	ldr	r3, [pc, #140]	; (8006e10 <xTaskIncrementTick+0x15c>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4313      	orrs	r3, r2
 8006d86:	4a22      	ldr	r2, [pc, #136]	; (8006e10 <xTaskIncrementTick+0x15c>)
 8006d88:	6013      	str	r3, [r2, #0]
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d8e:	4613      	mov	r3, r2
 8006d90:	009b      	lsls	r3, r3, #2
 8006d92:	4413      	add	r3, r2
 8006d94:	009b      	lsls	r3, r3, #2
 8006d96:	4a1f      	ldr	r2, [pc, #124]	; (8006e14 <xTaskIncrementTick+0x160>)
 8006d98:	441a      	add	r2, r3
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	3304      	adds	r3, #4
 8006d9e:	4619      	mov	r1, r3
 8006da0:	4610      	mov	r0, r2
 8006da2:	f7fe fc21 	bl	80055e8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006daa:	4b1b      	ldr	r3, [pc, #108]	; (8006e18 <xTaskIncrementTick+0x164>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d3b9      	bcc.n	8006d28 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006db4:	2301      	movs	r3, #1
 8006db6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006db8:	e7b6      	b.n	8006d28 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006dba:	4b17      	ldr	r3, [pc, #92]	; (8006e18 <xTaskIncrementTick+0x164>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dc0:	4914      	ldr	r1, [pc, #80]	; (8006e14 <xTaskIncrementTick+0x160>)
 8006dc2:	4613      	mov	r3, r2
 8006dc4:	009b      	lsls	r3, r3, #2
 8006dc6:	4413      	add	r3, r2
 8006dc8:	009b      	lsls	r3, r3, #2
 8006dca:	440b      	add	r3, r1
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	d901      	bls.n	8006dd6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006dd6:	4b11      	ldr	r3, [pc, #68]	; (8006e1c <xTaskIncrementTick+0x168>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d007      	beq.n	8006dee <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006dde:	2301      	movs	r3, #1
 8006de0:	617b      	str	r3, [r7, #20]
 8006de2:	e004      	b.n	8006dee <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006de4:	4b0e      	ldr	r3, [pc, #56]	; (8006e20 <xTaskIncrementTick+0x16c>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	3301      	adds	r3, #1
 8006dea:	4a0d      	ldr	r2, [pc, #52]	; (8006e20 <xTaskIncrementTick+0x16c>)
 8006dec:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006dee:	697b      	ldr	r3, [r7, #20]
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3718      	adds	r7, #24
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}
 8006df8:	20005280 	.word	0x20005280
 8006dfc:	2000525c 	.word	0x2000525c
 8006e00:	20005210 	.word	0x20005210
 8006e04:	20005214 	.word	0x20005214
 8006e08:	20005270 	.word	0x20005270
 8006e0c:	20005278 	.word	0x20005278
 8006e10:	20005260 	.word	0x20005260
 8006e14:	2000515c 	.word	0x2000515c
 8006e18:	20005158 	.word	0x20005158
 8006e1c:	2000526c 	.word	0x2000526c
 8006e20:	20005268 	.word	0x20005268

08006e24 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006e24:	b480      	push	{r7}
 8006e26:	b087      	sub	sp, #28
 8006e28:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006e2a:	4b29      	ldr	r3, [pc, #164]	; (8006ed0 <vTaskSwitchContext+0xac>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d003      	beq.n	8006e3a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006e32:	4b28      	ldr	r3, [pc, #160]	; (8006ed4 <vTaskSwitchContext+0xb0>)
 8006e34:	2201      	movs	r2, #1
 8006e36:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006e38:	e044      	b.n	8006ec4 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8006e3a:	4b26      	ldr	r3, [pc, #152]	; (8006ed4 <vTaskSwitchContext+0xb0>)
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e40:	4b25      	ldr	r3, [pc, #148]	; (8006ed8 <vTaskSwitchContext+0xb4>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	fab3 f383 	clz	r3, r3
 8006e4c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006e4e:	7afb      	ldrb	r3, [r7, #11]
 8006e50:	f1c3 031f 	rsb	r3, r3, #31
 8006e54:	617b      	str	r3, [r7, #20]
 8006e56:	4921      	ldr	r1, [pc, #132]	; (8006edc <vTaskSwitchContext+0xb8>)
 8006e58:	697a      	ldr	r2, [r7, #20]
 8006e5a:	4613      	mov	r3, r2
 8006e5c:	009b      	lsls	r3, r3, #2
 8006e5e:	4413      	add	r3, r2
 8006e60:	009b      	lsls	r3, r3, #2
 8006e62:	440b      	add	r3, r1
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d10a      	bne.n	8006e80 <vTaskSwitchContext+0x5c>
	__asm volatile
 8006e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e6e:	f383 8811 	msr	BASEPRI, r3
 8006e72:	f3bf 8f6f 	isb	sy
 8006e76:	f3bf 8f4f 	dsb	sy
 8006e7a:	607b      	str	r3, [r7, #4]
}
 8006e7c:	bf00      	nop
 8006e7e:	e7fe      	b.n	8006e7e <vTaskSwitchContext+0x5a>
 8006e80:	697a      	ldr	r2, [r7, #20]
 8006e82:	4613      	mov	r3, r2
 8006e84:	009b      	lsls	r3, r3, #2
 8006e86:	4413      	add	r3, r2
 8006e88:	009b      	lsls	r3, r3, #2
 8006e8a:	4a14      	ldr	r2, [pc, #80]	; (8006edc <vTaskSwitchContext+0xb8>)
 8006e8c:	4413      	add	r3, r2
 8006e8e:	613b      	str	r3, [r7, #16]
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	685a      	ldr	r2, [r3, #4]
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	605a      	str	r2, [r3, #4]
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	685a      	ldr	r2, [r3, #4]
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	3308      	adds	r3, #8
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	d104      	bne.n	8006eb0 <vTaskSwitchContext+0x8c>
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	685a      	ldr	r2, [r3, #4]
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	605a      	str	r2, [r3, #4]
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	68db      	ldr	r3, [r3, #12]
 8006eb6:	4a0a      	ldr	r2, [pc, #40]	; (8006ee0 <vTaskSwitchContext+0xbc>)
 8006eb8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006eba:	4b09      	ldr	r3, [pc, #36]	; (8006ee0 <vTaskSwitchContext+0xbc>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	334c      	adds	r3, #76	; 0x4c
 8006ec0:	4a08      	ldr	r2, [pc, #32]	; (8006ee4 <vTaskSwitchContext+0xc0>)
 8006ec2:	6013      	str	r3, [r2, #0]
}
 8006ec4:	bf00      	nop
 8006ec6:	371c      	adds	r7, #28
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr
 8006ed0:	20005280 	.word	0x20005280
 8006ed4:	2000526c 	.word	0x2000526c
 8006ed8:	20005260 	.word	0x20005260
 8006edc:	2000515c 	.word	0x2000515c
 8006ee0:	20005158 	.word	0x20005158
 8006ee4:	2000008c 	.word	0x2000008c

08006ee8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b084      	sub	sp, #16
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d10a      	bne.n	8006f0e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006efc:	f383 8811 	msr	BASEPRI, r3
 8006f00:	f3bf 8f6f 	isb	sy
 8006f04:	f3bf 8f4f 	dsb	sy
 8006f08:	60fb      	str	r3, [r7, #12]
}
 8006f0a:	bf00      	nop
 8006f0c:	e7fe      	b.n	8006f0c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006f0e:	4b07      	ldr	r3, [pc, #28]	; (8006f2c <vTaskPlaceOnEventList+0x44>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	3318      	adds	r3, #24
 8006f14:	4619      	mov	r1, r3
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f7fe fb8a 	bl	8005630 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006f1c:	2101      	movs	r1, #1
 8006f1e:	6838      	ldr	r0, [r7, #0]
 8006f20:	f000 fb82 	bl	8007628 <prvAddCurrentTaskToDelayedList>
}
 8006f24:	bf00      	nop
 8006f26:	3710      	adds	r7, #16
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}
 8006f2c:	20005158 	.word	0x20005158

08006f30 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b086      	sub	sp, #24
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	68db      	ldr	r3, [r3, #12]
 8006f3c:	68db      	ldr	r3, [r3, #12]
 8006f3e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d10a      	bne.n	8006f5c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f4a:	f383 8811 	msr	BASEPRI, r3
 8006f4e:	f3bf 8f6f 	isb	sy
 8006f52:	f3bf 8f4f 	dsb	sy
 8006f56:	60fb      	str	r3, [r7, #12]
}
 8006f58:	bf00      	nop
 8006f5a:	e7fe      	b.n	8006f5a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	3318      	adds	r3, #24
 8006f60:	4618      	mov	r0, r3
 8006f62:	f7fe fb9e 	bl	80056a2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f66:	4b1d      	ldr	r3, [pc, #116]	; (8006fdc <xTaskRemoveFromEventList+0xac>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d11c      	bne.n	8006fa8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	3304      	adds	r3, #4
 8006f72:	4618      	mov	r0, r3
 8006f74:	f7fe fb95 	bl	80056a2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f7c:	2201      	movs	r2, #1
 8006f7e:	409a      	lsls	r2, r3
 8006f80:	4b17      	ldr	r3, [pc, #92]	; (8006fe0 <xTaskRemoveFromEventList+0xb0>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4313      	orrs	r3, r2
 8006f86:	4a16      	ldr	r2, [pc, #88]	; (8006fe0 <xTaskRemoveFromEventList+0xb0>)
 8006f88:	6013      	str	r3, [r2, #0]
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f8e:	4613      	mov	r3, r2
 8006f90:	009b      	lsls	r3, r3, #2
 8006f92:	4413      	add	r3, r2
 8006f94:	009b      	lsls	r3, r3, #2
 8006f96:	4a13      	ldr	r2, [pc, #76]	; (8006fe4 <xTaskRemoveFromEventList+0xb4>)
 8006f98:	441a      	add	r2, r3
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	3304      	adds	r3, #4
 8006f9e:	4619      	mov	r1, r3
 8006fa0:	4610      	mov	r0, r2
 8006fa2:	f7fe fb21 	bl	80055e8 <vListInsertEnd>
 8006fa6:	e005      	b.n	8006fb4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	3318      	adds	r3, #24
 8006fac:	4619      	mov	r1, r3
 8006fae:	480e      	ldr	r0, [pc, #56]	; (8006fe8 <xTaskRemoveFromEventList+0xb8>)
 8006fb0:	f7fe fb1a 	bl	80055e8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fb8:	4b0c      	ldr	r3, [pc, #48]	; (8006fec <xTaskRemoveFromEventList+0xbc>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	d905      	bls.n	8006fce <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006fc6:	4b0a      	ldr	r3, [pc, #40]	; (8006ff0 <xTaskRemoveFromEventList+0xc0>)
 8006fc8:	2201      	movs	r2, #1
 8006fca:	601a      	str	r2, [r3, #0]
 8006fcc:	e001      	b.n	8006fd2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006fd2:	697b      	ldr	r3, [r7, #20]
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3718      	adds	r7, #24
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}
 8006fdc:	20005280 	.word	0x20005280
 8006fe0:	20005260 	.word	0x20005260
 8006fe4:	2000515c 	.word	0x2000515c
 8006fe8:	20005218 	.word	0x20005218
 8006fec:	20005158 	.word	0x20005158
 8006ff0:	2000526c 	.word	0x2000526c

08006ff4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b083      	sub	sp, #12
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006ffc:	4b06      	ldr	r3, [pc, #24]	; (8007018 <vTaskInternalSetTimeOutState+0x24>)
 8006ffe:	681a      	ldr	r2, [r3, #0]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007004:	4b05      	ldr	r3, [pc, #20]	; (800701c <vTaskInternalSetTimeOutState+0x28>)
 8007006:	681a      	ldr	r2, [r3, #0]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	605a      	str	r2, [r3, #4]
}
 800700c:	bf00      	nop
 800700e:	370c      	adds	r7, #12
 8007010:	46bd      	mov	sp, r7
 8007012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007016:	4770      	bx	lr
 8007018:	20005270 	.word	0x20005270
 800701c:	2000525c 	.word	0x2000525c

08007020 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b088      	sub	sp, #32
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d10a      	bne.n	8007046 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007034:	f383 8811 	msr	BASEPRI, r3
 8007038:	f3bf 8f6f 	isb	sy
 800703c:	f3bf 8f4f 	dsb	sy
 8007040:	613b      	str	r3, [r7, #16]
}
 8007042:	bf00      	nop
 8007044:	e7fe      	b.n	8007044 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d10a      	bne.n	8007062 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800704c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007050:	f383 8811 	msr	BASEPRI, r3
 8007054:	f3bf 8f6f 	isb	sy
 8007058:	f3bf 8f4f 	dsb	sy
 800705c:	60fb      	str	r3, [r7, #12]
}
 800705e:	bf00      	nop
 8007060:	e7fe      	b.n	8007060 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007062:	f000 fc77 	bl	8007954 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007066:	4b1d      	ldr	r3, [pc, #116]	; (80070dc <xTaskCheckForTimeOut+0xbc>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	69ba      	ldr	r2, [r7, #24]
 8007072:	1ad3      	subs	r3, r2, r3
 8007074:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800707e:	d102      	bne.n	8007086 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007080:	2300      	movs	r3, #0
 8007082:	61fb      	str	r3, [r7, #28]
 8007084:	e023      	b.n	80070ce <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681a      	ldr	r2, [r3, #0]
 800708a:	4b15      	ldr	r3, [pc, #84]	; (80070e0 <xTaskCheckForTimeOut+0xc0>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	429a      	cmp	r2, r3
 8007090:	d007      	beq.n	80070a2 <xTaskCheckForTimeOut+0x82>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	69ba      	ldr	r2, [r7, #24]
 8007098:	429a      	cmp	r2, r3
 800709a:	d302      	bcc.n	80070a2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800709c:	2301      	movs	r3, #1
 800709e:	61fb      	str	r3, [r7, #28]
 80070a0:	e015      	b.n	80070ce <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	697a      	ldr	r2, [r7, #20]
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d20b      	bcs.n	80070c4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	681a      	ldr	r2, [r3, #0]
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	1ad2      	subs	r2, r2, r3
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f7ff ff9b 	bl	8006ff4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80070be:	2300      	movs	r3, #0
 80070c0:	61fb      	str	r3, [r7, #28]
 80070c2:	e004      	b.n	80070ce <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	2200      	movs	r2, #0
 80070c8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80070ca:	2301      	movs	r3, #1
 80070cc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80070ce:	f000 fc71 	bl	80079b4 <vPortExitCritical>

	return xReturn;
 80070d2:	69fb      	ldr	r3, [r7, #28]
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3720      	adds	r7, #32
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}
 80070dc:	2000525c 	.word	0x2000525c
 80070e0:	20005270 	.word	0x20005270

080070e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80070e4:	b480      	push	{r7}
 80070e6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80070e8:	4b03      	ldr	r3, [pc, #12]	; (80070f8 <vTaskMissedYield+0x14>)
 80070ea:	2201      	movs	r2, #1
 80070ec:	601a      	str	r2, [r3, #0]
}
 80070ee:	bf00      	nop
 80070f0:	46bd      	mov	sp, r7
 80070f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f6:	4770      	bx	lr
 80070f8:	2000526c 	.word	0x2000526c

080070fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b082      	sub	sp, #8
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007104:	f000 f852 	bl	80071ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007108:	4b06      	ldr	r3, [pc, #24]	; (8007124 <prvIdleTask+0x28>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	2b01      	cmp	r3, #1
 800710e:	d9f9      	bls.n	8007104 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007110:	4b05      	ldr	r3, [pc, #20]	; (8007128 <prvIdleTask+0x2c>)
 8007112:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007116:	601a      	str	r2, [r3, #0]
 8007118:	f3bf 8f4f 	dsb	sy
 800711c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007120:	e7f0      	b.n	8007104 <prvIdleTask+0x8>
 8007122:	bf00      	nop
 8007124:	2000515c 	.word	0x2000515c
 8007128:	e000ed04 	.word	0xe000ed04

0800712c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b082      	sub	sp, #8
 8007130:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007132:	2300      	movs	r3, #0
 8007134:	607b      	str	r3, [r7, #4]
 8007136:	e00c      	b.n	8007152 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007138:	687a      	ldr	r2, [r7, #4]
 800713a:	4613      	mov	r3, r2
 800713c:	009b      	lsls	r3, r3, #2
 800713e:	4413      	add	r3, r2
 8007140:	009b      	lsls	r3, r3, #2
 8007142:	4a12      	ldr	r2, [pc, #72]	; (800718c <prvInitialiseTaskLists+0x60>)
 8007144:	4413      	add	r3, r2
 8007146:	4618      	mov	r0, r3
 8007148:	f7fe fa21 	bl	800558e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	3301      	adds	r3, #1
 8007150:	607b      	str	r3, [r7, #4]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2b06      	cmp	r3, #6
 8007156:	d9ef      	bls.n	8007138 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007158:	480d      	ldr	r0, [pc, #52]	; (8007190 <prvInitialiseTaskLists+0x64>)
 800715a:	f7fe fa18 	bl	800558e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800715e:	480d      	ldr	r0, [pc, #52]	; (8007194 <prvInitialiseTaskLists+0x68>)
 8007160:	f7fe fa15 	bl	800558e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007164:	480c      	ldr	r0, [pc, #48]	; (8007198 <prvInitialiseTaskLists+0x6c>)
 8007166:	f7fe fa12 	bl	800558e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800716a:	480c      	ldr	r0, [pc, #48]	; (800719c <prvInitialiseTaskLists+0x70>)
 800716c:	f7fe fa0f 	bl	800558e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007170:	480b      	ldr	r0, [pc, #44]	; (80071a0 <prvInitialiseTaskLists+0x74>)
 8007172:	f7fe fa0c 	bl	800558e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007176:	4b0b      	ldr	r3, [pc, #44]	; (80071a4 <prvInitialiseTaskLists+0x78>)
 8007178:	4a05      	ldr	r2, [pc, #20]	; (8007190 <prvInitialiseTaskLists+0x64>)
 800717a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800717c:	4b0a      	ldr	r3, [pc, #40]	; (80071a8 <prvInitialiseTaskLists+0x7c>)
 800717e:	4a05      	ldr	r2, [pc, #20]	; (8007194 <prvInitialiseTaskLists+0x68>)
 8007180:	601a      	str	r2, [r3, #0]
}
 8007182:	bf00      	nop
 8007184:	3708      	adds	r7, #8
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}
 800718a:	bf00      	nop
 800718c:	2000515c 	.word	0x2000515c
 8007190:	200051e8 	.word	0x200051e8
 8007194:	200051fc 	.word	0x200051fc
 8007198:	20005218 	.word	0x20005218
 800719c:	2000522c 	.word	0x2000522c
 80071a0:	20005244 	.word	0x20005244
 80071a4:	20005210 	.word	0x20005210
 80071a8:	20005214 	.word	0x20005214

080071ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b082      	sub	sp, #8
 80071b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80071b2:	e019      	b.n	80071e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80071b4:	f000 fbce 	bl	8007954 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071b8:	4b10      	ldr	r3, [pc, #64]	; (80071fc <prvCheckTasksWaitingTermination+0x50>)
 80071ba:	68db      	ldr	r3, [r3, #12]
 80071bc:	68db      	ldr	r3, [r3, #12]
 80071be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	3304      	adds	r3, #4
 80071c4:	4618      	mov	r0, r3
 80071c6:	f7fe fa6c 	bl	80056a2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80071ca:	4b0d      	ldr	r3, [pc, #52]	; (8007200 <prvCheckTasksWaitingTermination+0x54>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	3b01      	subs	r3, #1
 80071d0:	4a0b      	ldr	r2, [pc, #44]	; (8007200 <prvCheckTasksWaitingTermination+0x54>)
 80071d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80071d4:	4b0b      	ldr	r3, [pc, #44]	; (8007204 <prvCheckTasksWaitingTermination+0x58>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	3b01      	subs	r3, #1
 80071da:	4a0a      	ldr	r2, [pc, #40]	; (8007204 <prvCheckTasksWaitingTermination+0x58>)
 80071dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80071de:	f000 fbe9 	bl	80079b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 f810 	bl	8007208 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80071e8:	4b06      	ldr	r3, [pc, #24]	; (8007204 <prvCheckTasksWaitingTermination+0x58>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d1e1      	bne.n	80071b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80071f0:	bf00      	nop
 80071f2:	bf00      	nop
 80071f4:	3708      	adds	r7, #8
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}
 80071fa:	bf00      	nop
 80071fc:	2000522c 	.word	0x2000522c
 8007200:	20005258 	.word	0x20005258
 8007204:	20005240 	.word	0x20005240

08007208 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007208:	b580      	push	{r7, lr}
 800720a:	b084      	sub	sp, #16
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	334c      	adds	r3, #76	; 0x4c
 8007214:	4618      	mov	r0, r3
 8007216:	f011 fe0d 	bl	8018e34 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8007220:	2b00      	cmp	r3, #0
 8007222:	d108      	bne.n	8007236 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007228:	4618      	mov	r0, r3
 800722a:	f000 fd81 	bl	8007d30 <vPortFree>
				vPortFree( pxTCB );
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 fd7e 	bl	8007d30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007234:	e018      	b.n	8007268 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800723c:	2b01      	cmp	r3, #1
 800723e:	d103      	bne.n	8007248 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f000 fd75 	bl	8007d30 <vPortFree>
	}
 8007246:	e00f      	b.n	8007268 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800724e:	2b02      	cmp	r3, #2
 8007250:	d00a      	beq.n	8007268 <prvDeleteTCB+0x60>
	__asm volatile
 8007252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007256:	f383 8811 	msr	BASEPRI, r3
 800725a:	f3bf 8f6f 	isb	sy
 800725e:	f3bf 8f4f 	dsb	sy
 8007262:	60fb      	str	r3, [r7, #12]
}
 8007264:	bf00      	nop
 8007266:	e7fe      	b.n	8007266 <prvDeleteTCB+0x5e>
	}
 8007268:	bf00      	nop
 800726a:	3710      	adds	r7, #16
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}

08007270 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007270:	b480      	push	{r7}
 8007272:	b083      	sub	sp, #12
 8007274:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007276:	4b0c      	ldr	r3, [pc, #48]	; (80072a8 <prvResetNextTaskUnblockTime+0x38>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d104      	bne.n	800728a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007280:	4b0a      	ldr	r3, [pc, #40]	; (80072ac <prvResetNextTaskUnblockTime+0x3c>)
 8007282:	f04f 32ff 	mov.w	r2, #4294967295
 8007286:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007288:	e008      	b.n	800729c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800728a:	4b07      	ldr	r3, [pc, #28]	; (80072a8 <prvResetNextTaskUnblockTime+0x38>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	68db      	ldr	r3, [r3, #12]
 8007290:	68db      	ldr	r3, [r3, #12]
 8007292:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	4a04      	ldr	r2, [pc, #16]	; (80072ac <prvResetNextTaskUnblockTime+0x3c>)
 800729a:	6013      	str	r3, [r2, #0]
}
 800729c:	bf00      	nop
 800729e:	370c      	adds	r7, #12
 80072a0:	46bd      	mov	sp, r7
 80072a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a6:	4770      	bx	lr
 80072a8:	20005210 	.word	0x20005210
 80072ac:	20005278 	.word	0x20005278

080072b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80072b0:	b480      	push	{r7}
 80072b2:	b083      	sub	sp, #12
 80072b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80072b6:	4b0b      	ldr	r3, [pc, #44]	; (80072e4 <xTaskGetSchedulerState+0x34>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d102      	bne.n	80072c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80072be:	2301      	movs	r3, #1
 80072c0:	607b      	str	r3, [r7, #4]
 80072c2:	e008      	b.n	80072d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80072c4:	4b08      	ldr	r3, [pc, #32]	; (80072e8 <xTaskGetSchedulerState+0x38>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d102      	bne.n	80072d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80072cc:	2302      	movs	r3, #2
 80072ce:	607b      	str	r3, [r7, #4]
 80072d0:	e001      	b.n	80072d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80072d2:	2300      	movs	r3, #0
 80072d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80072d6:	687b      	ldr	r3, [r7, #4]
	}
 80072d8:	4618      	mov	r0, r3
 80072da:	370c      	adds	r7, #12
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr
 80072e4:	20005264 	.word	0x20005264
 80072e8:	20005280 	.word	0x20005280

080072ec <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b084      	sub	sp, #16
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80072f8:	2300      	movs	r3, #0
 80072fa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d05e      	beq.n	80073c0 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007306:	4b31      	ldr	r3, [pc, #196]	; (80073cc <xTaskPriorityInherit+0xe0>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800730c:	429a      	cmp	r2, r3
 800730e:	d24e      	bcs.n	80073ae <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	699b      	ldr	r3, [r3, #24]
 8007314:	2b00      	cmp	r3, #0
 8007316:	db06      	blt.n	8007326 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007318:	4b2c      	ldr	r3, [pc, #176]	; (80073cc <xTaskPriorityInherit+0xe0>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800731e:	f1c3 0207 	rsb	r2, r3, #7
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	6959      	ldr	r1, [r3, #20]
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800732e:	4613      	mov	r3, r2
 8007330:	009b      	lsls	r3, r3, #2
 8007332:	4413      	add	r3, r2
 8007334:	009b      	lsls	r3, r3, #2
 8007336:	4a26      	ldr	r2, [pc, #152]	; (80073d0 <xTaskPriorityInherit+0xe4>)
 8007338:	4413      	add	r3, r2
 800733a:	4299      	cmp	r1, r3
 800733c:	d12f      	bne.n	800739e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	3304      	adds	r3, #4
 8007342:	4618      	mov	r0, r3
 8007344:	f7fe f9ad 	bl	80056a2 <uxListRemove>
 8007348:	4603      	mov	r3, r0
 800734a:	2b00      	cmp	r3, #0
 800734c:	d10a      	bne.n	8007364 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007352:	2201      	movs	r2, #1
 8007354:	fa02 f303 	lsl.w	r3, r2, r3
 8007358:	43da      	mvns	r2, r3
 800735a:	4b1e      	ldr	r3, [pc, #120]	; (80073d4 <xTaskPriorityInherit+0xe8>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4013      	ands	r3, r2
 8007360:	4a1c      	ldr	r2, [pc, #112]	; (80073d4 <xTaskPriorityInherit+0xe8>)
 8007362:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007364:	4b19      	ldr	r3, [pc, #100]	; (80073cc <xTaskPriorityInherit+0xe0>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007372:	2201      	movs	r2, #1
 8007374:	409a      	lsls	r2, r3
 8007376:	4b17      	ldr	r3, [pc, #92]	; (80073d4 <xTaskPriorityInherit+0xe8>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4313      	orrs	r3, r2
 800737c:	4a15      	ldr	r2, [pc, #84]	; (80073d4 <xTaskPriorityInherit+0xe8>)
 800737e:	6013      	str	r3, [r2, #0]
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007384:	4613      	mov	r3, r2
 8007386:	009b      	lsls	r3, r3, #2
 8007388:	4413      	add	r3, r2
 800738a:	009b      	lsls	r3, r3, #2
 800738c:	4a10      	ldr	r2, [pc, #64]	; (80073d0 <xTaskPriorityInherit+0xe4>)
 800738e:	441a      	add	r2, r3
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	3304      	adds	r3, #4
 8007394:	4619      	mov	r1, r3
 8007396:	4610      	mov	r0, r2
 8007398:	f7fe f926 	bl	80055e8 <vListInsertEnd>
 800739c:	e004      	b.n	80073a8 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800739e:	4b0b      	ldr	r3, [pc, #44]	; (80073cc <xTaskPriorityInherit+0xe0>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80073a8:	2301      	movs	r3, #1
 80073aa:	60fb      	str	r3, [r7, #12]
 80073ac:	e008      	b.n	80073c0 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80073b2:	4b06      	ldr	r3, [pc, #24]	; (80073cc <xTaskPriorityInherit+0xe0>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d201      	bcs.n	80073c0 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80073bc:	2301      	movs	r3, #1
 80073be:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80073c0:	68fb      	ldr	r3, [r7, #12]
	}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3710      	adds	r7, #16
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}
 80073ca:	bf00      	nop
 80073cc:	20005158 	.word	0x20005158
 80073d0:	2000515c 	.word	0x2000515c
 80073d4:	20005260 	.word	0x20005260

080073d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b086      	sub	sp, #24
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80073e4:	2300      	movs	r3, #0
 80073e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d06e      	beq.n	80074cc <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80073ee:	4b3a      	ldr	r3, [pc, #232]	; (80074d8 <xTaskPriorityDisinherit+0x100>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	693a      	ldr	r2, [r7, #16]
 80073f4:	429a      	cmp	r2, r3
 80073f6:	d00a      	beq.n	800740e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80073f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073fc:	f383 8811 	msr	BASEPRI, r3
 8007400:	f3bf 8f6f 	isb	sy
 8007404:	f3bf 8f4f 	dsb	sy
 8007408:	60fb      	str	r3, [r7, #12]
}
 800740a:	bf00      	nop
 800740c:	e7fe      	b.n	800740c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007412:	2b00      	cmp	r3, #0
 8007414:	d10a      	bne.n	800742c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800741a:	f383 8811 	msr	BASEPRI, r3
 800741e:	f3bf 8f6f 	isb	sy
 8007422:	f3bf 8f4f 	dsb	sy
 8007426:	60bb      	str	r3, [r7, #8]
}
 8007428:	bf00      	nop
 800742a:	e7fe      	b.n	800742a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007430:	1e5a      	subs	r2, r3, #1
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800743e:	429a      	cmp	r2, r3
 8007440:	d044      	beq.n	80074cc <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007446:	2b00      	cmp	r3, #0
 8007448:	d140      	bne.n	80074cc <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	3304      	adds	r3, #4
 800744e:	4618      	mov	r0, r3
 8007450:	f7fe f927 	bl	80056a2 <uxListRemove>
 8007454:	4603      	mov	r3, r0
 8007456:	2b00      	cmp	r3, #0
 8007458:	d115      	bne.n	8007486 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800745e:	491f      	ldr	r1, [pc, #124]	; (80074dc <xTaskPriorityDisinherit+0x104>)
 8007460:	4613      	mov	r3, r2
 8007462:	009b      	lsls	r3, r3, #2
 8007464:	4413      	add	r3, r2
 8007466:	009b      	lsls	r3, r3, #2
 8007468:	440b      	add	r3, r1
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d10a      	bne.n	8007486 <xTaskPriorityDisinherit+0xae>
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007474:	2201      	movs	r2, #1
 8007476:	fa02 f303 	lsl.w	r3, r2, r3
 800747a:	43da      	mvns	r2, r3
 800747c:	4b18      	ldr	r3, [pc, #96]	; (80074e0 <xTaskPriorityDisinherit+0x108>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4013      	ands	r3, r2
 8007482:	4a17      	ldr	r2, [pc, #92]	; (80074e0 <xTaskPriorityDisinherit+0x108>)
 8007484:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007492:	f1c3 0207 	rsb	r2, r3, #7
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800749e:	2201      	movs	r2, #1
 80074a0:	409a      	lsls	r2, r3
 80074a2:	4b0f      	ldr	r3, [pc, #60]	; (80074e0 <xTaskPriorityDisinherit+0x108>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4313      	orrs	r3, r2
 80074a8:	4a0d      	ldr	r2, [pc, #52]	; (80074e0 <xTaskPriorityDisinherit+0x108>)
 80074aa:	6013      	str	r3, [r2, #0]
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074b0:	4613      	mov	r3, r2
 80074b2:	009b      	lsls	r3, r3, #2
 80074b4:	4413      	add	r3, r2
 80074b6:	009b      	lsls	r3, r3, #2
 80074b8:	4a08      	ldr	r2, [pc, #32]	; (80074dc <xTaskPriorityDisinherit+0x104>)
 80074ba:	441a      	add	r2, r3
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	3304      	adds	r3, #4
 80074c0:	4619      	mov	r1, r3
 80074c2:	4610      	mov	r0, r2
 80074c4:	f7fe f890 	bl	80055e8 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80074c8:	2301      	movs	r3, #1
 80074ca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80074cc:	697b      	ldr	r3, [r7, #20]
	}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3718      	adds	r7, #24
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}
 80074d6:	bf00      	nop
 80074d8:	20005158 	.word	0x20005158
 80074dc:	2000515c 	.word	0x2000515c
 80074e0:	20005260 	.word	0x20005260

080074e4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b088      	sub	sp, #32
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80074f2:	2301      	movs	r3, #1
 80074f4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d077      	beq.n	80075ec <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80074fc:	69bb      	ldr	r3, [r7, #24]
 80074fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007500:	2b00      	cmp	r3, #0
 8007502:	d10a      	bne.n	800751a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007508:	f383 8811 	msr	BASEPRI, r3
 800750c:	f3bf 8f6f 	isb	sy
 8007510:	f3bf 8f4f 	dsb	sy
 8007514:	60fb      	str	r3, [r7, #12]
}
 8007516:	bf00      	nop
 8007518:	e7fe      	b.n	8007518 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800751a:	69bb      	ldr	r3, [r7, #24]
 800751c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800751e:	683a      	ldr	r2, [r7, #0]
 8007520:	429a      	cmp	r2, r3
 8007522:	d902      	bls.n	800752a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	61fb      	str	r3, [r7, #28]
 8007528:	e002      	b.n	8007530 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800752a:	69bb      	ldr	r3, [r7, #24]
 800752c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800752e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007530:	69bb      	ldr	r3, [r7, #24]
 8007532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007534:	69fa      	ldr	r2, [r7, #28]
 8007536:	429a      	cmp	r2, r3
 8007538:	d058      	beq.n	80075ec <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800753a:	69bb      	ldr	r3, [r7, #24]
 800753c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800753e:	697a      	ldr	r2, [r7, #20]
 8007540:	429a      	cmp	r2, r3
 8007542:	d153      	bne.n	80075ec <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007544:	4b2b      	ldr	r3, [pc, #172]	; (80075f4 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	69ba      	ldr	r2, [r7, #24]
 800754a:	429a      	cmp	r2, r3
 800754c:	d10a      	bne.n	8007564 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800754e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007552:	f383 8811 	msr	BASEPRI, r3
 8007556:	f3bf 8f6f 	isb	sy
 800755a:	f3bf 8f4f 	dsb	sy
 800755e:	60bb      	str	r3, [r7, #8]
}
 8007560:	bf00      	nop
 8007562:	e7fe      	b.n	8007562 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007564:	69bb      	ldr	r3, [r7, #24]
 8007566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007568:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800756a:	69bb      	ldr	r3, [r7, #24]
 800756c:	69fa      	ldr	r2, [r7, #28]
 800756e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007570:	69bb      	ldr	r3, [r7, #24]
 8007572:	699b      	ldr	r3, [r3, #24]
 8007574:	2b00      	cmp	r3, #0
 8007576:	db04      	blt.n	8007582 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007578:	69fb      	ldr	r3, [r7, #28]
 800757a:	f1c3 0207 	rsb	r2, r3, #7
 800757e:	69bb      	ldr	r3, [r7, #24]
 8007580:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007582:	69bb      	ldr	r3, [r7, #24]
 8007584:	6959      	ldr	r1, [r3, #20]
 8007586:	693a      	ldr	r2, [r7, #16]
 8007588:	4613      	mov	r3, r2
 800758a:	009b      	lsls	r3, r3, #2
 800758c:	4413      	add	r3, r2
 800758e:	009b      	lsls	r3, r3, #2
 8007590:	4a19      	ldr	r2, [pc, #100]	; (80075f8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007592:	4413      	add	r3, r2
 8007594:	4299      	cmp	r1, r3
 8007596:	d129      	bne.n	80075ec <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007598:	69bb      	ldr	r3, [r7, #24]
 800759a:	3304      	adds	r3, #4
 800759c:	4618      	mov	r0, r3
 800759e:	f7fe f880 	bl	80056a2 <uxListRemove>
 80075a2:	4603      	mov	r3, r0
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d10a      	bne.n	80075be <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80075a8:	69bb      	ldr	r3, [r7, #24]
 80075aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ac:	2201      	movs	r2, #1
 80075ae:	fa02 f303 	lsl.w	r3, r2, r3
 80075b2:	43da      	mvns	r2, r3
 80075b4:	4b11      	ldr	r3, [pc, #68]	; (80075fc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4013      	ands	r3, r2
 80075ba:	4a10      	ldr	r2, [pc, #64]	; (80075fc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80075bc:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80075be:	69bb      	ldr	r3, [r7, #24]
 80075c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075c2:	2201      	movs	r2, #1
 80075c4:	409a      	lsls	r2, r3
 80075c6:	4b0d      	ldr	r3, [pc, #52]	; (80075fc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4313      	orrs	r3, r2
 80075cc:	4a0b      	ldr	r2, [pc, #44]	; (80075fc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80075ce:	6013      	str	r3, [r2, #0]
 80075d0:	69bb      	ldr	r3, [r7, #24]
 80075d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075d4:	4613      	mov	r3, r2
 80075d6:	009b      	lsls	r3, r3, #2
 80075d8:	4413      	add	r3, r2
 80075da:	009b      	lsls	r3, r3, #2
 80075dc:	4a06      	ldr	r2, [pc, #24]	; (80075f8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80075de:	441a      	add	r2, r3
 80075e0:	69bb      	ldr	r3, [r7, #24]
 80075e2:	3304      	adds	r3, #4
 80075e4:	4619      	mov	r1, r3
 80075e6:	4610      	mov	r0, r2
 80075e8:	f7fd fffe 	bl	80055e8 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80075ec:	bf00      	nop
 80075ee:	3720      	adds	r7, #32
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}
 80075f4:	20005158 	.word	0x20005158
 80075f8:	2000515c 	.word	0x2000515c
 80075fc:	20005260 	.word	0x20005260

08007600 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007600:	b480      	push	{r7}
 8007602:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007604:	4b07      	ldr	r3, [pc, #28]	; (8007624 <pvTaskIncrementMutexHeldCount+0x24>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d004      	beq.n	8007616 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800760c:	4b05      	ldr	r3, [pc, #20]	; (8007624 <pvTaskIncrementMutexHeldCount+0x24>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007612:	3201      	adds	r2, #1
 8007614:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8007616:	4b03      	ldr	r3, [pc, #12]	; (8007624 <pvTaskIncrementMutexHeldCount+0x24>)
 8007618:	681b      	ldr	r3, [r3, #0]
	}
 800761a:	4618      	mov	r0, r3
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr
 8007624:	20005158 	.word	0x20005158

08007628 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b084      	sub	sp, #16
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
 8007630:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007632:	4b29      	ldr	r3, [pc, #164]	; (80076d8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007638:	4b28      	ldr	r3, [pc, #160]	; (80076dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	3304      	adds	r3, #4
 800763e:	4618      	mov	r0, r3
 8007640:	f7fe f82f 	bl	80056a2 <uxListRemove>
 8007644:	4603      	mov	r3, r0
 8007646:	2b00      	cmp	r3, #0
 8007648:	d10b      	bne.n	8007662 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800764a:	4b24      	ldr	r3, [pc, #144]	; (80076dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007650:	2201      	movs	r2, #1
 8007652:	fa02 f303 	lsl.w	r3, r2, r3
 8007656:	43da      	mvns	r2, r3
 8007658:	4b21      	ldr	r3, [pc, #132]	; (80076e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4013      	ands	r3, r2
 800765e:	4a20      	ldr	r2, [pc, #128]	; (80076e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007660:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007668:	d10a      	bne.n	8007680 <prvAddCurrentTaskToDelayedList+0x58>
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d007      	beq.n	8007680 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007670:	4b1a      	ldr	r3, [pc, #104]	; (80076dc <prvAddCurrentTaskToDelayedList+0xb4>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	3304      	adds	r3, #4
 8007676:	4619      	mov	r1, r3
 8007678:	481a      	ldr	r0, [pc, #104]	; (80076e4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800767a:	f7fd ffb5 	bl	80055e8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800767e:	e026      	b.n	80076ce <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007680:	68fa      	ldr	r2, [r7, #12]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	4413      	add	r3, r2
 8007686:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007688:	4b14      	ldr	r3, [pc, #80]	; (80076dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	68ba      	ldr	r2, [r7, #8]
 800768e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007690:	68ba      	ldr	r2, [r7, #8]
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	429a      	cmp	r2, r3
 8007696:	d209      	bcs.n	80076ac <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007698:	4b13      	ldr	r3, [pc, #76]	; (80076e8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800769a:	681a      	ldr	r2, [r3, #0]
 800769c:	4b0f      	ldr	r3, [pc, #60]	; (80076dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	3304      	adds	r3, #4
 80076a2:	4619      	mov	r1, r3
 80076a4:	4610      	mov	r0, r2
 80076a6:	f7fd ffc3 	bl	8005630 <vListInsert>
}
 80076aa:	e010      	b.n	80076ce <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80076ac:	4b0f      	ldr	r3, [pc, #60]	; (80076ec <prvAddCurrentTaskToDelayedList+0xc4>)
 80076ae:	681a      	ldr	r2, [r3, #0]
 80076b0:	4b0a      	ldr	r3, [pc, #40]	; (80076dc <prvAddCurrentTaskToDelayedList+0xb4>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	3304      	adds	r3, #4
 80076b6:	4619      	mov	r1, r3
 80076b8:	4610      	mov	r0, r2
 80076ba:	f7fd ffb9 	bl	8005630 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80076be:	4b0c      	ldr	r3, [pc, #48]	; (80076f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	68ba      	ldr	r2, [r7, #8]
 80076c4:	429a      	cmp	r2, r3
 80076c6:	d202      	bcs.n	80076ce <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80076c8:	4a09      	ldr	r2, [pc, #36]	; (80076f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	6013      	str	r3, [r2, #0]
}
 80076ce:	bf00      	nop
 80076d0:	3710      	adds	r7, #16
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}
 80076d6:	bf00      	nop
 80076d8:	2000525c 	.word	0x2000525c
 80076dc:	20005158 	.word	0x20005158
 80076e0:	20005260 	.word	0x20005260
 80076e4:	20005244 	.word	0x20005244
 80076e8:	20005214 	.word	0x20005214
 80076ec:	20005210 	.word	0x20005210
 80076f0:	20005278 	.word	0x20005278

080076f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80076f4:	b480      	push	{r7}
 80076f6:	b085      	sub	sp, #20
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	60f8      	str	r0, [r7, #12]
 80076fc:	60b9      	str	r1, [r7, #8]
 80076fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	3b04      	subs	r3, #4
 8007704:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800770c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	3b04      	subs	r3, #4
 8007712:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	f023 0201 	bic.w	r2, r3, #1
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	3b04      	subs	r3, #4
 8007722:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007724:	4a0c      	ldr	r2, [pc, #48]	; (8007758 <pxPortInitialiseStack+0x64>)
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	3b14      	subs	r3, #20
 800772e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007730:	687a      	ldr	r2, [r7, #4]
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	3b04      	subs	r3, #4
 800773a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f06f 0202 	mvn.w	r2, #2
 8007742:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	3b20      	subs	r3, #32
 8007748:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800774a:	68fb      	ldr	r3, [r7, #12]
}
 800774c:	4618      	mov	r0, r3
 800774e:	3714      	adds	r7, #20
 8007750:	46bd      	mov	sp, r7
 8007752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007756:	4770      	bx	lr
 8007758:	0800775d 	.word	0x0800775d

0800775c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800775c:	b480      	push	{r7}
 800775e:	b085      	sub	sp, #20
 8007760:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007762:	2300      	movs	r3, #0
 8007764:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007766:	4b12      	ldr	r3, [pc, #72]	; (80077b0 <prvTaskExitError+0x54>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800776e:	d00a      	beq.n	8007786 <prvTaskExitError+0x2a>
	__asm volatile
 8007770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007774:	f383 8811 	msr	BASEPRI, r3
 8007778:	f3bf 8f6f 	isb	sy
 800777c:	f3bf 8f4f 	dsb	sy
 8007780:	60fb      	str	r3, [r7, #12]
}
 8007782:	bf00      	nop
 8007784:	e7fe      	b.n	8007784 <prvTaskExitError+0x28>
	__asm volatile
 8007786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800778a:	f383 8811 	msr	BASEPRI, r3
 800778e:	f3bf 8f6f 	isb	sy
 8007792:	f3bf 8f4f 	dsb	sy
 8007796:	60bb      	str	r3, [r7, #8]
}
 8007798:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800779a:	bf00      	nop
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d0fc      	beq.n	800779c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80077a2:	bf00      	nop
 80077a4:	bf00      	nop
 80077a6:	3714      	adds	r7, #20
 80077a8:	46bd      	mov	sp, r7
 80077aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ae:	4770      	bx	lr
 80077b0:	20000020 	.word	0x20000020
	...

080077c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80077c0:	4b07      	ldr	r3, [pc, #28]	; (80077e0 <pxCurrentTCBConst2>)
 80077c2:	6819      	ldr	r1, [r3, #0]
 80077c4:	6808      	ldr	r0, [r1, #0]
 80077c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077ca:	f380 8809 	msr	PSP, r0
 80077ce:	f3bf 8f6f 	isb	sy
 80077d2:	f04f 0000 	mov.w	r0, #0
 80077d6:	f380 8811 	msr	BASEPRI, r0
 80077da:	4770      	bx	lr
 80077dc:	f3af 8000 	nop.w

080077e0 <pxCurrentTCBConst2>:
 80077e0:	20005158 	.word	0x20005158
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80077e4:	bf00      	nop
 80077e6:	bf00      	nop

080077e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80077e8:	4808      	ldr	r0, [pc, #32]	; (800780c <prvPortStartFirstTask+0x24>)
 80077ea:	6800      	ldr	r0, [r0, #0]
 80077ec:	6800      	ldr	r0, [r0, #0]
 80077ee:	f380 8808 	msr	MSP, r0
 80077f2:	f04f 0000 	mov.w	r0, #0
 80077f6:	f380 8814 	msr	CONTROL, r0
 80077fa:	b662      	cpsie	i
 80077fc:	b661      	cpsie	f
 80077fe:	f3bf 8f4f 	dsb	sy
 8007802:	f3bf 8f6f 	isb	sy
 8007806:	df00      	svc	0
 8007808:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800780a:	bf00      	nop
 800780c:	e000ed08 	.word	0xe000ed08

08007810 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b086      	sub	sp, #24
 8007814:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007816:	4b46      	ldr	r3, [pc, #280]	; (8007930 <xPortStartScheduler+0x120>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4a46      	ldr	r2, [pc, #280]	; (8007934 <xPortStartScheduler+0x124>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d10a      	bne.n	8007836 <xPortStartScheduler+0x26>
	__asm volatile
 8007820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007824:	f383 8811 	msr	BASEPRI, r3
 8007828:	f3bf 8f6f 	isb	sy
 800782c:	f3bf 8f4f 	dsb	sy
 8007830:	613b      	str	r3, [r7, #16]
}
 8007832:	bf00      	nop
 8007834:	e7fe      	b.n	8007834 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007836:	4b3e      	ldr	r3, [pc, #248]	; (8007930 <xPortStartScheduler+0x120>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4a3f      	ldr	r2, [pc, #252]	; (8007938 <xPortStartScheduler+0x128>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d10a      	bne.n	8007856 <xPortStartScheduler+0x46>
	__asm volatile
 8007840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007844:	f383 8811 	msr	BASEPRI, r3
 8007848:	f3bf 8f6f 	isb	sy
 800784c:	f3bf 8f4f 	dsb	sy
 8007850:	60fb      	str	r3, [r7, #12]
}
 8007852:	bf00      	nop
 8007854:	e7fe      	b.n	8007854 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007856:	4b39      	ldr	r3, [pc, #228]	; (800793c <xPortStartScheduler+0x12c>)
 8007858:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	781b      	ldrb	r3, [r3, #0]
 800785e:	b2db      	uxtb	r3, r3
 8007860:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	22ff      	movs	r2, #255	; 0xff
 8007866:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	781b      	ldrb	r3, [r3, #0]
 800786c:	b2db      	uxtb	r3, r3
 800786e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007870:	78fb      	ldrb	r3, [r7, #3]
 8007872:	b2db      	uxtb	r3, r3
 8007874:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007878:	b2da      	uxtb	r2, r3
 800787a:	4b31      	ldr	r3, [pc, #196]	; (8007940 <xPortStartScheduler+0x130>)
 800787c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800787e:	4b31      	ldr	r3, [pc, #196]	; (8007944 <xPortStartScheduler+0x134>)
 8007880:	2207      	movs	r2, #7
 8007882:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007884:	e009      	b.n	800789a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007886:	4b2f      	ldr	r3, [pc, #188]	; (8007944 <xPortStartScheduler+0x134>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	3b01      	subs	r3, #1
 800788c:	4a2d      	ldr	r2, [pc, #180]	; (8007944 <xPortStartScheduler+0x134>)
 800788e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007890:	78fb      	ldrb	r3, [r7, #3]
 8007892:	b2db      	uxtb	r3, r3
 8007894:	005b      	lsls	r3, r3, #1
 8007896:	b2db      	uxtb	r3, r3
 8007898:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800789a:	78fb      	ldrb	r3, [r7, #3]
 800789c:	b2db      	uxtb	r3, r3
 800789e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078a2:	2b80      	cmp	r3, #128	; 0x80
 80078a4:	d0ef      	beq.n	8007886 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80078a6:	4b27      	ldr	r3, [pc, #156]	; (8007944 <xPortStartScheduler+0x134>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f1c3 0307 	rsb	r3, r3, #7
 80078ae:	2b04      	cmp	r3, #4
 80078b0:	d00a      	beq.n	80078c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80078b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b6:	f383 8811 	msr	BASEPRI, r3
 80078ba:	f3bf 8f6f 	isb	sy
 80078be:	f3bf 8f4f 	dsb	sy
 80078c2:	60bb      	str	r3, [r7, #8]
}
 80078c4:	bf00      	nop
 80078c6:	e7fe      	b.n	80078c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80078c8:	4b1e      	ldr	r3, [pc, #120]	; (8007944 <xPortStartScheduler+0x134>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	021b      	lsls	r3, r3, #8
 80078ce:	4a1d      	ldr	r2, [pc, #116]	; (8007944 <xPortStartScheduler+0x134>)
 80078d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80078d2:	4b1c      	ldr	r3, [pc, #112]	; (8007944 <xPortStartScheduler+0x134>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80078da:	4a1a      	ldr	r2, [pc, #104]	; (8007944 <xPortStartScheduler+0x134>)
 80078dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	b2da      	uxtb	r2, r3
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80078e6:	4b18      	ldr	r3, [pc, #96]	; (8007948 <xPortStartScheduler+0x138>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a17      	ldr	r2, [pc, #92]	; (8007948 <xPortStartScheduler+0x138>)
 80078ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80078f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80078f2:	4b15      	ldr	r3, [pc, #84]	; (8007948 <xPortStartScheduler+0x138>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4a14      	ldr	r2, [pc, #80]	; (8007948 <xPortStartScheduler+0x138>)
 80078f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80078fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80078fe:	f000 f8dd 	bl	8007abc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007902:	4b12      	ldr	r3, [pc, #72]	; (800794c <xPortStartScheduler+0x13c>)
 8007904:	2200      	movs	r2, #0
 8007906:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007908:	f000 f8fc 	bl	8007b04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800790c:	4b10      	ldr	r3, [pc, #64]	; (8007950 <xPortStartScheduler+0x140>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4a0f      	ldr	r2, [pc, #60]	; (8007950 <xPortStartScheduler+0x140>)
 8007912:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007916:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007918:	f7ff ff66 	bl	80077e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800791c:	f7ff fa82 	bl	8006e24 <vTaskSwitchContext>
	prvTaskExitError();
 8007920:	f7ff ff1c 	bl	800775c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007924:	2300      	movs	r3, #0
}
 8007926:	4618      	mov	r0, r3
 8007928:	3718      	adds	r7, #24
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}
 800792e:	bf00      	nop
 8007930:	e000ed00 	.word	0xe000ed00
 8007934:	410fc271 	.word	0x410fc271
 8007938:	410fc270 	.word	0x410fc270
 800793c:	e000e400 	.word	0xe000e400
 8007940:	20005284 	.word	0x20005284
 8007944:	20005288 	.word	0x20005288
 8007948:	e000ed20 	.word	0xe000ed20
 800794c:	20000020 	.word	0x20000020
 8007950:	e000ef34 	.word	0xe000ef34

08007954 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007954:	b480      	push	{r7}
 8007956:	b083      	sub	sp, #12
 8007958:	af00      	add	r7, sp, #0
	__asm volatile
 800795a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800795e:	f383 8811 	msr	BASEPRI, r3
 8007962:	f3bf 8f6f 	isb	sy
 8007966:	f3bf 8f4f 	dsb	sy
 800796a:	607b      	str	r3, [r7, #4]
}
 800796c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800796e:	4b0f      	ldr	r3, [pc, #60]	; (80079ac <vPortEnterCritical+0x58>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	3301      	adds	r3, #1
 8007974:	4a0d      	ldr	r2, [pc, #52]	; (80079ac <vPortEnterCritical+0x58>)
 8007976:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007978:	4b0c      	ldr	r3, [pc, #48]	; (80079ac <vPortEnterCritical+0x58>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	2b01      	cmp	r3, #1
 800797e:	d10f      	bne.n	80079a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007980:	4b0b      	ldr	r3, [pc, #44]	; (80079b0 <vPortEnterCritical+0x5c>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	b2db      	uxtb	r3, r3
 8007986:	2b00      	cmp	r3, #0
 8007988:	d00a      	beq.n	80079a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800798a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800798e:	f383 8811 	msr	BASEPRI, r3
 8007992:	f3bf 8f6f 	isb	sy
 8007996:	f3bf 8f4f 	dsb	sy
 800799a:	603b      	str	r3, [r7, #0]
}
 800799c:	bf00      	nop
 800799e:	e7fe      	b.n	800799e <vPortEnterCritical+0x4a>
	}
}
 80079a0:	bf00      	nop
 80079a2:	370c      	adds	r7, #12
 80079a4:	46bd      	mov	sp, r7
 80079a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079aa:	4770      	bx	lr
 80079ac:	20000020 	.word	0x20000020
 80079b0:	e000ed04 	.word	0xe000ed04

080079b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80079b4:	b480      	push	{r7}
 80079b6:	b083      	sub	sp, #12
 80079b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80079ba:	4b12      	ldr	r3, [pc, #72]	; (8007a04 <vPortExitCritical+0x50>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d10a      	bne.n	80079d8 <vPortExitCritical+0x24>
	__asm volatile
 80079c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079c6:	f383 8811 	msr	BASEPRI, r3
 80079ca:	f3bf 8f6f 	isb	sy
 80079ce:	f3bf 8f4f 	dsb	sy
 80079d2:	607b      	str	r3, [r7, #4]
}
 80079d4:	bf00      	nop
 80079d6:	e7fe      	b.n	80079d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80079d8:	4b0a      	ldr	r3, [pc, #40]	; (8007a04 <vPortExitCritical+0x50>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	3b01      	subs	r3, #1
 80079de:	4a09      	ldr	r2, [pc, #36]	; (8007a04 <vPortExitCritical+0x50>)
 80079e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80079e2:	4b08      	ldr	r3, [pc, #32]	; (8007a04 <vPortExitCritical+0x50>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d105      	bne.n	80079f6 <vPortExitCritical+0x42>
 80079ea:	2300      	movs	r3, #0
 80079ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	f383 8811 	msr	BASEPRI, r3
}
 80079f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80079f6:	bf00      	nop
 80079f8:	370c      	adds	r7, #12
 80079fa:	46bd      	mov	sp, r7
 80079fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a00:	4770      	bx	lr
 8007a02:	bf00      	nop
 8007a04:	20000020 	.word	0x20000020
	...

08007a10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007a10:	f3ef 8009 	mrs	r0, PSP
 8007a14:	f3bf 8f6f 	isb	sy
 8007a18:	4b15      	ldr	r3, [pc, #84]	; (8007a70 <pxCurrentTCBConst>)
 8007a1a:	681a      	ldr	r2, [r3, #0]
 8007a1c:	f01e 0f10 	tst.w	lr, #16
 8007a20:	bf08      	it	eq
 8007a22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007a26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a2a:	6010      	str	r0, [r2, #0]
 8007a2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007a30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007a34:	f380 8811 	msr	BASEPRI, r0
 8007a38:	f3bf 8f4f 	dsb	sy
 8007a3c:	f3bf 8f6f 	isb	sy
 8007a40:	f7ff f9f0 	bl	8006e24 <vTaskSwitchContext>
 8007a44:	f04f 0000 	mov.w	r0, #0
 8007a48:	f380 8811 	msr	BASEPRI, r0
 8007a4c:	bc09      	pop	{r0, r3}
 8007a4e:	6819      	ldr	r1, [r3, #0]
 8007a50:	6808      	ldr	r0, [r1, #0]
 8007a52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a56:	f01e 0f10 	tst.w	lr, #16
 8007a5a:	bf08      	it	eq
 8007a5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007a60:	f380 8809 	msr	PSP, r0
 8007a64:	f3bf 8f6f 	isb	sy
 8007a68:	4770      	bx	lr
 8007a6a:	bf00      	nop
 8007a6c:	f3af 8000 	nop.w

08007a70 <pxCurrentTCBConst>:
 8007a70:	20005158 	.word	0x20005158
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007a74:	bf00      	nop
 8007a76:	bf00      	nop

08007a78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b082      	sub	sp, #8
 8007a7c:	af00      	add	r7, sp, #0
	__asm volatile
 8007a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a82:	f383 8811 	msr	BASEPRI, r3
 8007a86:	f3bf 8f6f 	isb	sy
 8007a8a:	f3bf 8f4f 	dsb	sy
 8007a8e:	607b      	str	r3, [r7, #4]
}
 8007a90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007a92:	f7ff f90f 	bl	8006cb4 <xTaskIncrementTick>
 8007a96:	4603      	mov	r3, r0
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d003      	beq.n	8007aa4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007a9c:	4b06      	ldr	r3, [pc, #24]	; (8007ab8 <SysTick_Handler+0x40>)
 8007a9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007aa2:	601a      	str	r2, [r3, #0]
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	f383 8811 	msr	BASEPRI, r3
}
 8007aae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007ab0:	bf00      	nop
 8007ab2:	3708      	adds	r7, #8
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}
 8007ab8:	e000ed04 	.word	0xe000ed04

08007abc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007abc:	b480      	push	{r7}
 8007abe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007ac0:	4b0b      	ldr	r3, [pc, #44]	; (8007af0 <vPortSetupTimerInterrupt+0x34>)
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007ac6:	4b0b      	ldr	r3, [pc, #44]	; (8007af4 <vPortSetupTimerInterrupt+0x38>)
 8007ac8:	2200      	movs	r2, #0
 8007aca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007acc:	4b0a      	ldr	r3, [pc, #40]	; (8007af8 <vPortSetupTimerInterrupt+0x3c>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a0a      	ldr	r2, [pc, #40]	; (8007afc <vPortSetupTimerInterrupt+0x40>)
 8007ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ad6:	099b      	lsrs	r3, r3, #6
 8007ad8:	4a09      	ldr	r2, [pc, #36]	; (8007b00 <vPortSetupTimerInterrupt+0x44>)
 8007ada:	3b01      	subs	r3, #1
 8007adc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007ade:	4b04      	ldr	r3, [pc, #16]	; (8007af0 <vPortSetupTimerInterrupt+0x34>)
 8007ae0:	2207      	movs	r2, #7
 8007ae2:	601a      	str	r2, [r3, #0]
}
 8007ae4:	bf00      	nop
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aec:	4770      	bx	lr
 8007aee:	bf00      	nop
 8007af0:	e000e010 	.word	0xe000e010
 8007af4:	e000e018 	.word	0xe000e018
 8007af8:	20000000 	.word	0x20000000
 8007afc:	10624dd3 	.word	0x10624dd3
 8007b00:	e000e014 	.word	0xe000e014

08007b04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007b04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007b14 <vPortEnableVFP+0x10>
 8007b08:	6801      	ldr	r1, [r0, #0]
 8007b0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007b0e:	6001      	str	r1, [r0, #0]
 8007b10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007b12:	bf00      	nop
 8007b14:	e000ed88 	.word	0xe000ed88

08007b18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007b18:	b480      	push	{r7}
 8007b1a:	b085      	sub	sp, #20
 8007b1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007b1e:	f3ef 8305 	mrs	r3, IPSR
 8007b22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	2b0f      	cmp	r3, #15
 8007b28:	d914      	bls.n	8007b54 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007b2a:	4a17      	ldr	r2, [pc, #92]	; (8007b88 <vPortValidateInterruptPriority+0x70>)
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	4413      	add	r3, r2
 8007b30:	781b      	ldrb	r3, [r3, #0]
 8007b32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007b34:	4b15      	ldr	r3, [pc, #84]	; (8007b8c <vPortValidateInterruptPriority+0x74>)
 8007b36:	781b      	ldrb	r3, [r3, #0]
 8007b38:	7afa      	ldrb	r2, [r7, #11]
 8007b3a:	429a      	cmp	r2, r3
 8007b3c:	d20a      	bcs.n	8007b54 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b42:	f383 8811 	msr	BASEPRI, r3
 8007b46:	f3bf 8f6f 	isb	sy
 8007b4a:	f3bf 8f4f 	dsb	sy
 8007b4e:	607b      	str	r3, [r7, #4]
}
 8007b50:	bf00      	nop
 8007b52:	e7fe      	b.n	8007b52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007b54:	4b0e      	ldr	r3, [pc, #56]	; (8007b90 <vPortValidateInterruptPriority+0x78>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007b5c:	4b0d      	ldr	r3, [pc, #52]	; (8007b94 <vPortValidateInterruptPriority+0x7c>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	429a      	cmp	r2, r3
 8007b62:	d90a      	bls.n	8007b7a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b68:	f383 8811 	msr	BASEPRI, r3
 8007b6c:	f3bf 8f6f 	isb	sy
 8007b70:	f3bf 8f4f 	dsb	sy
 8007b74:	603b      	str	r3, [r7, #0]
}
 8007b76:	bf00      	nop
 8007b78:	e7fe      	b.n	8007b78 <vPortValidateInterruptPriority+0x60>
	}
 8007b7a:	bf00      	nop
 8007b7c:	3714      	adds	r7, #20
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b84:	4770      	bx	lr
 8007b86:	bf00      	nop
 8007b88:	e000e3f0 	.word	0xe000e3f0
 8007b8c:	20005284 	.word	0x20005284
 8007b90:	e000ed0c 	.word	0xe000ed0c
 8007b94:	20005288 	.word	0x20005288

08007b98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b08a      	sub	sp, #40	; 0x28
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007ba4:	f7fe ffba 	bl	8006b1c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007ba8:	4b5b      	ldr	r3, [pc, #364]	; (8007d18 <pvPortMalloc+0x180>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d101      	bne.n	8007bb4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007bb0:	f000 f920 	bl	8007df4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007bb4:	4b59      	ldr	r3, [pc, #356]	; (8007d1c <pvPortMalloc+0x184>)
 8007bb6:	681a      	ldr	r2, [r3, #0]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	4013      	ands	r3, r2
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	f040 8093 	bne.w	8007ce8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d01d      	beq.n	8007c04 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007bc8:	2208      	movs	r2, #8
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	4413      	add	r3, r2
 8007bce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f003 0307 	and.w	r3, r3, #7
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d014      	beq.n	8007c04 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f023 0307 	bic.w	r3, r3, #7
 8007be0:	3308      	adds	r3, #8
 8007be2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f003 0307 	and.w	r3, r3, #7
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d00a      	beq.n	8007c04 <pvPortMalloc+0x6c>
	__asm volatile
 8007bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bf2:	f383 8811 	msr	BASEPRI, r3
 8007bf6:	f3bf 8f6f 	isb	sy
 8007bfa:	f3bf 8f4f 	dsb	sy
 8007bfe:	617b      	str	r3, [r7, #20]
}
 8007c00:	bf00      	nop
 8007c02:	e7fe      	b.n	8007c02 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d06e      	beq.n	8007ce8 <pvPortMalloc+0x150>
 8007c0a:	4b45      	ldr	r3, [pc, #276]	; (8007d20 <pvPortMalloc+0x188>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	687a      	ldr	r2, [r7, #4]
 8007c10:	429a      	cmp	r2, r3
 8007c12:	d869      	bhi.n	8007ce8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007c14:	4b43      	ldr	r3, [pc, #268]	; (8007d24 <pvPortMalloc+0x18c>)
 8007c16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007c18:	4b42      	ldr	r3, [pc, #264]	; (8007d24 <pvPortMalloc+0x18c>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c1e:	e004      	b.n	8007c2a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	687a      	ldr	r2, [r7, #4]
 8007c30:	429a      	cmp	r2, r3
 8007c32:	d903      	bls.n	8007c3c <pvPortMalloc+0xa4>
 8007c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d1f1      	bne.n	8007c20 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007c3c:	4b36      	ldr	r3, [pc, #216]	; (8007d18 <pvPortMalloc+0x180>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c42:	429a      	cmp	r2, r3
 8007c44:	d050      	beq.n	8007ce8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007c46:	6a3b      	ldr	r3, [r7, #32]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	2208      	movs	r2, #8
 8007c4c:	4413      	add	r3, r2
 8007c4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c52:	681a      	ldr	r2, [r3, #0]
 8007c54:	6a3b      	ldr	r3, [r7, #32]
 8007c56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c5a:	685a      	ldr	r2, [r3, #4]
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	1ad2      	subs	r2, r2, r3
 8007c60:	2308      	movs	r3, #8
 8007c62:	005b      	lsls	r3, r3, #1
 8007c64:	429a      	cmp	r2, r3
 8007c66:	d91f      	bls.n	8007ca8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007c68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	4413      	add	r3, r2
 8007c6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c70:	69bb      	ldr	r3, [r7, #24]
 8007c72:	f003 0307 	and.w	r3, r3, #7
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d00a      	beq.n	8007c90 <pvPortMalloc+0xf8>
	__asm volatile
 8007c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c7e:	f383 8811 	msr	BASEPRI, r3
 8007c82:	f3bf 8f6f 	isb	sy
 8007c86:	f3bf 8f4f 	dsb	sy
 8007c8a:	613b      	str	r3, [r7, #16]
}
 8007c8c:	bf00      	nop
 8007c8e:	e7fe      	b.n	8007c8e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c92:	685a      	ldr	r2, [r3, #4]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	1ad2      	subs	r2, r2, r3
 8007c98:	69bb      	ldr	r3, [r7, #24]
 8007c9a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c9e:	687a      	ldr	r2, [r7, #4]
 8007ca0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007ca2:	69b8      	ldr	r0, [r7, #24]
 8007ca4:	f000 f908 	bl	8007eb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007ca8:	4b1d      	ldr	r3, [pc, #116]	; (8007d20 <pvPortMalloc+0x188>)
 8007caa:	681a      	ldr	r2, [r3, #0]
 8007cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	1ad3      	subs	r3, r2, r3
 8007cb2:	4a1b      	ldr	r2, [pc, #108]	; (8007d20 <pvPortMalloc+0x188>)
 8007cb4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007cb6:	4b1a      	ldr	r3, [pc, #104]	; (8007d20 <pvPortMalloc+0x188>)
 8007cb8:	681a      	ldr	r2, [r3, #0]
 8007cba:	4b1b      	ldr	r3, [pc, #108]	; (8007d28 <pvPortMalloc+0x190>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	429a      	cmp	r2, r3
 8007cc0:	d203      	bcs.n	8007cca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007cc2:	4b17      	ldr	r3, [pc, #92]	; (8007d20 <pvPortMalloc+0x188>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a18      	ldr	r2, [pc, #96]	; (8007d28 <pvPortMalloc+0x190>)
 8007cc8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ccc:	685a      	ldr	r2, [r3, #4]
 8007cce:	4b13      	ldr	r3, [pc, #76]	; (8007d1c <pvPortMalloc+0x184>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	431a      	orrs	r2, r3
 8007cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cda:	2200      	movs	r2, #0
 8007cdc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007cde:	4b13      	ldr	r3, [pc, #76]	; (8007d2c <pvPortMalloc+0x194>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	3301      	adds	r3, #1
 8007ce4:	4a11      	ldr	r2, [pc, #68]	; (8007d2c <pvPortMalloc+0x194>)
 8007ce6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007ce8:	f7fe ff26 	bl	8006b38 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007cec:	69fb      	ldr	r3, [r7, #28]
 8007cee:	f003 0307 	and.w	r3, r3, #7
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d00a      	beq.n	8007d0c <pvPortMalloc+0x174>
	__asm volatile
 8007cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cfa:	f383 8811 	msr	BASEPRI, r3
 8007cfe:	f3bf 8f6f 	isb	sy
 8007d02:	f3bf 8f4f 	dsb	sy
 8007d06:	60fb      	str	r3, [r7, #12]
}
 8007d08:	bf00      	nop
 8007d0a:	e7fe      	b.n	8007d0a <pvPortMalloc+0x172>
	return pvReturn;
 8007d0c:	69fb      	ldr	r3, [r7, #28]
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3728      	adds	r7, #40	; 0x28
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}
 8007d16:	bf00      	nop
 8007d18:	2000d294 	.word	0x2000d294
 8007d1c:	2000d2a8 	.word	0x2000d2a8
 8007d20:	2000d298 	.word	0x2000d298
 8007d24:	2000d28c 	.word	0x2000d28c
 8007d28:	2000d29c 	.word	0x2000d29c
 8007d2c:	2000d2a0 	.word	0x2000d2a0

08007d30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b086      	sub	sp, #24
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d04d      	beq.n	8007dde <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007d42:	2308      	movs	r3, #8
 8007d44:	425b      	negs	r3, r3
 8007d46:	697a      	ldr	r2, [r7, #20]
 8007d48:	4413      	add	r3, r2
 8007d4a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	685a      	ldr	r2, [r3, #4]
 8007d54:	4b24      	ldr	r3, [pc, #144]	; (8007de8 <vPortFree+0xb8>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4013      	ands	r3, r2
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d10a      	bne.n	8007d74 <vPortFree+0x44>
	__asm volatile
 8007d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d62:	f383 8811 	msr	BASEPRI, r3
 8007d66:	f3bf 8f6f 	isb	sy
 8007d6a:	f3bf 8f4f 	dsb	sy
 8007d6e:	60fb      	str	r3, [r7, #12]
}
 8007d70:	bf00      	nop
 8007d72:	e7fe      	b.n	8007d72 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d00a      	beq.n	8007d92 <vPortFree+0x62>
	__asm volatile
 8007d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d80:	f383 8811 	msr	BASEPRI, r3
 8007d84:	f3bf 8f6f 	isb	sy
 8007d88:	f3bf 8f4f 	dsb	sy
 8007d8c:	60bb      	str	r3, [r7, #8]
}
 8007d8e:	bf00      	nop
 8007d90:	e7fe      	b.n	8007d90 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	685a      	ldr	r2, [r3, #4]
 8007d96:	4b14      	ldr	r3, [pc, #80]	; (8007de8 <vPortFree+0xb8>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	4013      	ands	r3, r2
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d01e      	beq.n	8007dde <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d11a      	bne.n	8007dde <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	685a      	ldr	r2, [r3, #4]
 8007dac:	4b0e      	ldr	r3, [pc, #56]	; (8007de8 <vPortFree+0xb8>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	43db      	mvns	r3, r3
 8007db2:	401a      	ands	r2, r3
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007db8:	f7fe feb0 	bl	8006b1c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007dbc:	693b      	ldr	r3, [r7, #16]
 8007dbe:	685a      	ldr	r2, [r3, #4]
 8007dc0:	4b0a      	ldr	r3, [pc, #40]	; (8007dec <vPortFree+0xbc>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4413      	add	r3, r2
 8007dc6:	4a09      	ldr	r2, [pc, #36]	; (8007dec <vPortFree+0xbc>)
 8007dc8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007dca:	6938      	ldr	r0, [r7, #16]
 8007dcc:	f000 f874 	bl	8007eb8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007dd0:	4b07      	ldr	r3, [pc, #28]	; (8007df0 <vPortFree+0xc0>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	3301      	adds	r3, #1
 8007dd6:	4a06      	ldr	r2, [pc, #24]	; (8007df0 <vPortFree+0xc0>)
 8007dd8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007dda:	f7fe fead 	bl	8006b38 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007dde:	bf00      	nop
 8007de0:	3718      	adds	r7, #24
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}
 8007de6:	bf00      	nop
 8007de8:	2000d2a8 	.word	0x2000d2a8
 8007dec:	2000d298 	.word	0x2000d298
 8007df0:	2000d2a4 	.word	0x2000d2a4

08007df4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007df4:	b480      	push	{r7}
 8007df6:	b085      	sub	sp, #20
 8007df8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007dfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007dfe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007e00:	4b27      	ldr	r3, [pc, #156]	; (8007ea0 <prvHeapInit+0xac>)
 8007e02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f003 0307 	and.w	r3, r3, #7
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d00c      	beq.n	8007e28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	3307      	adds	r3, #7
 8007e12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f023 0307 	bic.w	r3, r3, #7
 8007e1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007e1c:	68ba      	ldr	r2, [r7, #8]
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	1ad3      	subs	r3, r2, r3
 8007e22:	4a1f      	ldr	r2, [pc, #124]	; (8007ea0 <prvHeapInit+0xac>)
 8007e24:	4413      	add	r3, r2
 8007e26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007e2c:	4a1d      	ldr	r2, [pc, #116]	; (8007ea4 <prvHeapInit+0xb0>)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007e32:	4b1c      	ldr	r3, [pc, #112]	; (8007ea4 <prvHeapInit+0xb0>)
 8007e34:	2200      	movs	r2, #0
 8007e36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	68ba      	ldr	r2, [r7, #8]
 8007e3c:	4413      	add	r3, r2
 8007e3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007e40:	2208      	movs	r2, #8
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	1a9b      	subs	r3, r3, r2
 8007e46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f023 0307 	bic.w	r3, r3, #7
 8007e4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	4a15      	ldr	r2, [pc, #84]	; (8007ea8 <prvHeapInit+0xb4>)
 8007e54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007e56:	4b14      	ldr	r3, [pc, #80]	; (8007ea8 <prvHeapInit+0xb4>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007e5e:	4b12      	ldr	r3, [pc, #72]	; (8007ea8 <prvHeapInit+0xb4>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	2200      	movs	r2, #0
 8007e64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	68fa      	ldr	r2, [r7, #12]
 8007e6e:	1ad2      	subs	r2, r2, r3
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007e74:	4b0c      	ldr	r3, [pc, #48]	; (8007ea8 <prvHeapInit+0xb4>)
 8007e76:	681a      	ldr	r2, [r3, #0]
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	4a0a      	ldr	r2, [pc, #40]	; (8007eac <prvHeapInit+0xb8>)
 8007e82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	4a09      	ldr	r2, [pc, #36]	; (8007eb0 <prvHeapInit+0xbc>)
 8007e8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007e8c:	4b09      	ldr	r3, [pc, #36]	; (8007eb4 <prvHeapInit+0xc0>)
 8007e8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007e92:	601a      	str	r2, [r3, #0]
}
 8007e94:	bf00      	nop
 8007e96:	3714      	adds	r7, #20
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9e:	4770      	bx	lr
 8007ea0:	2000528c 	.word	0x2000528c
 8007ea4:	2000d28c 	.word	0x2000d28c
 8007ea8:	2000d294 	.word	0x2000d294
 8007eac:	2000d29c 	.word	0x2000d29c
 8007eb0:	2000d298 	.word	0x2000d298
 8007eb4:	2000d2a8 	.word	0x2000d2a8

08007eb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b085      	sub	sp, #20
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007ec0:	4b28      	ldr	r3, [pc, #160]	; (8007f64 <prvInsertBlockIntoFreeList+0xac>)
 8007ec2:	60fb      	str	r3, [r7, #12]
 8007ec4:	e002      	b.n	8007ecc <prvInsertBlockIntoFreeList+0x14>
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	60fb      	str	r3, [r7, #12]
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	687a      	ldr	r2, [r7, #4]
 8007ed2:	429a      	cmp	r2, r3
 8007ed4:	d8f7      	bhi.n	8007ec6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	68ba      	ldr	r2, [r7, #8]
 8007ee0:	4413      	add	r3, r2
 8007ee2:	687a      	ldr	r2, [r7, #4]
 8007ee4:	429a      	cmp	r2, r3
 8007ee6:	d108      	bne.n	8007efa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	685a      	ldr	r2, [r3, #4]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	685b      	ldr	r3, [r3, #4]
 8007ef0:	441a      	add	r2, r3
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	68ba      	ldr	r2, [r7, #8]
 8007f04:	441a      	add	r2, r3
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	429a      	cmp	r2, r3
 8007f0c:	d118      	bne.n	8007f40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681a      	ldr	r2, [r3, #0]
 8007f12:	4b15      	ldr	r3, [pc, #84]	; (8007f68 <prvInsertBlockIntoFreeList+0xb0>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	429a      	cmp	r2, r3
 8007f18:	d00d      	beq.n	8007f36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	685a      	ldr	r2, [r3, #4]
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	441a      	add	r2, r3
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	681a      	ldr	r2, [r3, #0]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	601a      	str	r2, [r3, #0]
 8007f34:	e008      	b.n	8007f48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007f36:	4b0c      	ldr	r3, [pc, #48]	; (8007f68 <prvInsertBlockIntoFreeList+0xb0>)
 8007f38:	681a      	ldr	r2, [r3, #0]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	601a      	str	r2, [r3, #0]
 8007f3e:	e003      	b.n	8007f48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681a      	ldr	r2, [r3, #0]
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007f48:	68fa      	ldr	r2, [r7, #12]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	429a      	cmp	r2, r3
 8007f4e:	d002      	beq.n	8007f56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	687a      	ldr	r2, [r7, #4]
 8007f54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007f56:	bf00      	nop
 8007f58:	3714      	adds	r7, #20
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f60:	4770      	bx	lr
 8007f62:	bf00      	nop
 8007f64:	2000d28c 	.word	0x2000d28c
 8007f68:	2000d294 	.word	0x2000d294

08007f6c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b084      	sub	sp, #16
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
 8007f74:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	330c      	adds	r3, #12
 8007f7c:	461a      	mov	r2, r3
 8007f7e:	6839      	ldr	r1, [r7, #0]
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f002 fc29 	bl	800a7d8 <tcpip_send_msg_wait_sem>
 8007f86:	4603      	mov	r3, r0
 8007f88:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8007f8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d103      	bne.n	8007f9a <netconn_apimsg+0x2e>
    return apimsg->err;
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8007f98:	e001      	b.n	8007f9e <netconn_apimsg+0x32>
  }
  return err;
 8007f9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3710      	adds	r7, #16
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}
	...

08007fa8 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b08c      	sub	sp, #48	; 0x30
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	4603      	mov	r3, r0
 8007fb0:	603a      	str	r2, [r7, #0]
 8007fb2:	71fb      	strb	r3, [r7, #7]
 8007fb4:	460b      	mov	r3, r1
 8007fb6:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8007fb8:	79fb      	ldrb	r3, [r7, #7]
 8007fba:	6839      	ldr	r1, [r7, #0]
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f001 f95b 	bl	8009278 <netconn_alloc>
 8007fc2:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 8007fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d054      	beq.n	8008074 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8007fca:	79bb      	ldrb	r3, [r7, #6]
 8007fcc:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 8007fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fd0:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8007fd2:	f107 0308 	add.w	r3, r7, #8
 8007fd6:	4619      	mov	r1, r3
 8007fd8:	4829      	ldr	r0, [pc, #164]	; (8008080 <netconn_new_with_proto_and_callback+0xd8>)
 8007fda:	f7ff ffc7 	bl	8007f6c <netconn_apimsg>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 8007fe4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d043      	beq.n	8008074 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8007fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fee:	685b      	ldr	r3, [r3, #4]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d005      	beq.n	8008000 <netconn_new_with_proto_and_callback+0x58>
 8007ff4:	4b23      	ldr	r3, [pc, #140]	; (8008084 <netconn_new_with_proto_and_callback+0xdc>)
 8007ff6:	22a3      	movs	r2, #163	; 0xa3
 8007ff8:	4923      	ldr	r1, [pc, #140]	; (8008088 <netconn_new_with_proto_and_callback+0xe0>)
 8007ffa:	4824      	ldr	r0, [pc, #144]	; (800808c <netconn_new_with_proto_and_callback+0xe4>)
 8007ffc:	f010 fdcc 	bl	8018b98 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8008000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008002:	3310      	adds	r3, #16
 8008004:	4618      	mov	r0, r3
 8008006:	f010 fb72 	bl	80186ee <sys_mbox_valid>
 800800a:	4603      	mov	r3, r0
 800800c:	2b00      	cmp	r3, #0
 800800e:	d105      	bne.n	800801c <netconn_new_with_proto_and_callback+0x74>
 8008010:	4b1c      	ldr	r3, [pc, #112]	; (8008084 <netconn_new_with_proto_and_callback+0xdc>)
 8008012:	22a4      	movs	r2, #164	; 0xa4
 8008014:	491e      	ldr	r1, [pc, #120]	; (8008090 <netconn_new_with_proto_and_callback+0xe8>)
 8008016:	481d      	ldr	r0, [pc, #116]	; (800808c <netconn_new_with_proto_and_callback+0xe4>)
 8008018:	f010 fdbe 	bl	8018b98 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800801c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800801e:	3314      	adds	r3, #20
 8008020:	4618      	mov	r0, r3
 8008022:	f010 fb64 	bl	80186ee <sys_mbox_valid>
 8008026:	4603      	mov	r3, r0
 8008028:	2b00      	cmp	r3, #0
 800802a:	d005      	beq.n	8008038 <netconn_new_with_proto_and_callback+0x90>
 800802c:	4b15      	ldr	r3, [pc, #84]	; (8008084 <netconn_new_with_proto_and_callback+0xdc>)
 800802e:	22a6      	movs	r2, #166	; 0xa6
 8008030:	4918      	ldr	r1, [pc, #96]	; (8008094 <netconn_new_with_proto_and_callback+0xec>)
 8008032:	4816      	ldr	r0, [pc, #88]	; (800808c <netconn_new_with_proto_and_callback+0xe4>)
 8008034:	f010 fdb0 	bl	8018b98 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8008038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800803a:	330c      	adds	r3, #12
 800803c:	4618      	mov	r0, r3
 800803e:	f010 fbe7 	bl	8018810 <sys_sem_valid>
 8008042:	4603      	mov	r3, r0
 8008044:	2b00      	cmp	r3, #0
 8008046:	d105      	bne.n	8008054 <netconn_new_with_proto_and_callback+0xac>
 8008048:	4b0e      	ldr	r3, [pc, #56]	; (8008084 <netconn_new_with_proto_and_callback+0xdc>)
 800804a:	22a9      	movs	r2, #169	; 0xa9
 800804c:	4912      	ldr	r1, [pc, #72]	; (8008098 <netconn_new_with_proto_and_callback+0xf0>)
 800804e:	480f      	ldr	r0, [pc, #60]	; (800808c <netconn_new_with_proto_and_callback+0xe4>)
 8008050:	f010 fda2 	bl	8018b98 <iprintf>
      sys_sem_free(&conn->op_completed);
 8008054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008056:	330c      	adds	r3, #12
 8008058:	4618      	mov	r0, r3
 800805a:	f010 fbcc 	bl	80187f6 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800805e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008060:	3310      	adds	r3, #16
 8008062:	4618      	mov	r0, r3
 8008064:	f010 fabc 	bl	80185e0 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8008068:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800806a:	2007      	movs	r0, #7
 800806c:	f003 ffb2 	bl	800bfd4 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8008070:	2300      	movs	r3, #0
 8008072:	e000      	b.n	8008076 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8008074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008076:	4618      	mov	r0, r3
 8008078:	3730      	adds	r7, #48	; 0x30
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}
 800807e:	bf00      	nop
 8008080:	0800924d 	.word	0x0800924d
 8008084:	0801a0c4 	.word	0x0801a0c4
 8008088:	0801a0f8 	.word	0x0801a0f8
 800808c:	0801a11c 	.word	0x0801a11c
 8008090:	0801a144 	.word	0x0801a144
 8008094:	0801a15c 	.word	0x0801a15c
 8008098:	0801a180 	.word	0x0801a180

0800809c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b08c      	sub	sp, #48	; 0x30
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d101      	bne.n	80080ae <netconn_prepare_delete+0x12>
    return ERR_OK;
 80080aa:	2300      	movs	r3, #0
 80080ac:	e014      	b.n	80080d8 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 80080b2:	2329      	movs	r3, #41	; 0x29
 80080b4:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 80080b6:	f107 030c 	add.w	r3, r7, #12
 80080ba:	4619      	mov	r1, r3
 80080bc:	4808      	ldr	r0, [pc, #32]	; (80080e0 <netconn_prepare_delete+0x44>)
 80080be:	f7ff ff55 	bl	8007f6c <netconn_apimsg>
 80080c2:	4603      	mov	r3, r0
 80080c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 80080c8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d002      	beq.n	80080d6 <netconn_prepare_delete+0x3a>
    return err;
 80080d0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80080d4:	e000      	b.n	80080d8 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 80080d6:	2300      	movs	r3, #0
}
 80080d8:	4618      	mov	r0, r3
 80080da:	3730      	adds	r7, #48	; 0x30
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}
 80080e0:	080097b9 	.word	0x080097b9

080080e4 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b084      	sub	sp, #16
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d101      	bne.n	80080f6 <netconn_delete+0x12>
    return ERR_OK;
 80080f2:	2300      	movs	r3, #0
 80080f4:	e00d      	b.n	8008112 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f7ff ffd0 	bl	800809c <netconn_prepare_delete>
 80080fc:	4603      	mov	r3, r0
 80080fe:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8008100:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d102      	bne.n	800810e <netconn_delete+0x2a>
    netconn_free(conn);
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f001 f923 	bl	8009354 <netconn_free>
  }
  return err;
 800810e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008112:	4618      	mov	r0, r3
 8008114:	3710      	adds	r7, #16
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}
	...

0800811c <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b08e      	sub	sp, #56	; 0x38
 8008120:	af00      	add	r7, sp, #0
 8008122:	60f8      	str	r0, [r7, #12]
 8008124:	60b9      	str	r1, [r7, #8]
 8008126:	4613      	mov	r3, r2
 8008128:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d109      	bne.n	8008144 <netconn_bind+0x28>
 8008130:	4b11      	ldr	r3, [pc, #68]	; (8008178 <netconn_bind+0x5c>)
 8008132:	f44f 729c 	mov.w	r2, #312	; 0x138
 8008136:	4911      	ldr	r1, [pc, #68]	; (800817c <netconn_bind+0x60>)
 8008138:	4811      	ldr	r0, [pc, #68]	; (8008180 <netconn_bind+0x64>)
 800813a:	f010 fd2d 	bl	8018b98 <iprintf>
 800813e:	f06f 030f 	mvn.w	r3, #15
 8008142:	e015      	b.n	8008170 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d101      	bne.n	800814e <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800814a:	4b0e      	ldr	r3, [pc, #56]	; (8008184 <netconn_bind+0x68>)
 800814c:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8008156:	88fb      	ldrh	r3, [r7, #6]
 8008158:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800815a:	f107 0314 	add.w	r3, r7, #20
 800815e:	4619      	mov	r1, r3
 8008160:	4809      	ldr	r0, [pc, #36]	; (8008188 <netconn_bind+0x6c>)
 8008162:	f7ff ff03 	bl	8007f6c <netconn_apimsg>
 8008166:	4603      	mov	r3, r0
 8008168:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800816c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8008170:	4618      	mov	r0, r3
 8008172:	3738      	adds	r7, #56	; 0x38
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}
 8008178:	0801a0c4 	.word	0x0801a0c4
 800817c:	0801a1fc 	.word	0x0801a1fc
 8008180:	0801a11c 	.word	0x0801a11c
 8008184:	08027dd4 	.word	0x08027dd4
 8008188:	08009981 	.word	0x08009981

0800818c <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b08e      	sub	sp, #56	; 0x38
 8008190:	af00      	add	r7, sp, #0
 8008192:	60f8      	str	r0, [r7, #12]
 8008194:	60b9      	str	r1, [r7, #8]
 8008196:	4613      	mov	r3, r2
 8008198:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d109      	bne.n	80081b4 <netconn_connect+0x28>
 80081a0:	4b11      	ldr	r3, [pc, #68]	; (80081e8 <netconn_connect+0x5c>)
 80081a2:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 80081a6:	4911      	ldr	r1, [pc, #68]	; (80081ec <netconn_connect+0x60>)
 80081a8:	4811      	ldr	r0, [pc, #68]	; (80081f0 <netconn_connect+0x64>)
 80081aa:	f010 fcf5 	bl	8018b98 <iprintf>
 80081ae:	f06f 030f 	mvn.w	r3, #15
 80081b2:	e015      	b.n	80081e0 <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d101      	bne.n	80081be <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 80081ba:	4b0e      	ldr	r3, [pc, #56]	; (80081f4 <netconn_connect+0x68>)
 80081bc:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 80081c6:	88fb      	ldrh	r3, [r7, #6]
 80081c8:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 80081ca:	f107 0314 	add.w	r3, r7, #20
 80081ce:	4619      	mov	r1, r3
 80081d0:	4809      	ldr	r0, [pc, #36]	; (80081f8 <netconn_connect+0x6c>)
 80081d2:	f7ff fecb 	bl	8007f6c <netconn_apimsg>
 80081d6:	4603      	mov	r3, r0
 80081d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 80081dc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	3738      	adds	r7, #56	; 0x38
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}
 80081e8:	0801a0c4 	.word	0x0801a0c4
 80081ec:	0801a238 	.word	0x0801a238
 80081f0:	0801a11c 	.word	0x0801a11c
 80081f4:	08027dd4 	.word	0x08027dd4
 80081f8:	08009b15 	.word	0x08009b15

080081fc <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b08c      	sub	sp, #48	; 0x30
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
 8008204:	460b      	mov	r3, r1
 8008206:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d109      	bne.n	8008222 <netconn_listen_with_backlog+0x26>
 800820e:	4b0d      	ldr	r3, [pc, #52]	; (8008244 <netconn_listen_with_backlog+0x48>)
 8008210:	f240 12bb 	movw	r2, #443	; 0x1bb
 8008214:	490c      	ldr	r1, [pc, #48]	; (8008248 <netconn_listen_with_backlog+0x4c>)
 8008216:	480d      	ldr	r0, [pc, #52]	; (800824c <netconn_listen_with_backlog+0x50>)
 8008218:	f010 fcbe 	bl	8018b98 <iprintf>
 800821c:	f06f 030f 	mvn.w	r3, #15
 8008220:	e00c      	b.n	800823c <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8008226:	f107 030c 	add.w	r3, r7, #12
 800822a:	4619      	mov	r1, r3
 800822c:	4808      	ldr	r0, [pc, #32]	; (8008250 <netconn_listen_with_backlog+0x54>)
 800822e:	f7ff fe9d 	bl	8007f6c <netconn_apimsg>
 8008232:	4603      	mov	r3, r0
 8008234:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8008238:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800823c:	4618      	mov	r0, r3
 800823e:	3730      	adds	r7, #48	; 0x30
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}
 8008244:	0801a0c4 	.word	0x0801a0c4
 8008248:	0801a27c 	.word	0x0801a27c
 800824c:	0801a11c 	.word	0x0801a11c
 8008250:	08009c91 	.word	0x08009c91

08008254 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b086      	sub	sp, #24
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
 800825c:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d109      	bne.n	8008278 <netconn_accept+0x24>
 8008264:	4b3d      	ldr	r3, [pc, #244]	; (800835c <netconn_accept+0x108>)
 8008266:	f240 12e1 	movw	r2, #481	; 0x1e1
 800826a:	493d      	ldr	r1, [pc, #244]	; (8008360 <netconn_accept+0x10c>)
 800826c:	483d      	ldr	r0, [pc, #244]	; (8008364 <netconn_accept+0x110>)
 800826e:	f010 fc93 	bl	8018b98 <iprintf>
 8008272:	f06f 030f 	mvn.w	r3, #15
 8008276:	e06c      	b.n	8008352 <netconn_accept+0xfe>
  *new_conn = NULL;
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	2200      	movs	r2, #0
 800827c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d109      	bne.n	8008298 <netconn_accept+0x44>
 8008284:	4b35      	ldr	r3, [pc, #212]	; (800835c <netconn_accept+0x108>)
 8008286:	f240 12e3 	movw	r2, #483	; 0x1e3
 800828a:	4937      	ldr	r1, [pc, #220]	; (8008368 <netconn_accept+0x114>)
 800828c:	4835      	ldr	r0, [pc, #212]	; (8008364 <netconn_accept+0x110>)
 800828e:	f010 fc83 	bl	8018b98 <iprintf>
 8008292:	f06f 030f 	mvn.w	r3, #15
 8008296:	e05c      	b.n	8008352 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f000 fb6c 	bl	8008976 <netconn_err>
 800829e:	4603      	mov	r3, r0
 80082a0:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 80082a2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d002      	beq.n	80082b0 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 80082aa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80082ae:	e050      	b.n	8008352 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	3314      	adds	r3, #20
 80082b4:	4618      	mov	r0, r3
 80082b6:	f010 fa1a 	bl	80186ee <sys_mbox_valid>
 80082ba:	4603      	mov	r3, r0
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d005      	beq.n	80082cc <netconn_accept+0x78>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	7f1b      	ldrb	r3, [r3, #28]
 80082c4:	f003 0301 	and.w	r3, r3, #1
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d002      	beq.n	80082d2 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 80082cc:	f06f 030e 	mvn.w	r3, #14
 80082d0:	e03f      	b.n	8008352 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	7f1b      	ldrb	r3, [r3, #28]
 80082d6:	f003 0302 	and.w	r3, r3, #2
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d00e      	beq.n	80082fc <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	3314      	adds	r3, #20
 80082e2:	f107 020c 	add.w	r2, r7, #12
 80082e6:	4611      	mov	r1, r2
 80082e8:	4618      	mov	r0, r3
 80082ea:	f010 f9e4 	bl	80186b6 <sys_arch_mbox_tryfetch>
 80082ee:	4603      	mov	r3, r0
 80082f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082f4:	d10a      	bne.n	800830c <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 80082f6:	f06f 0306 	mvn.w	r3, #6
 80082fa:	e02a      	b.n	8008352 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	3314      	adds	r3, #20
 8008300:	f107 010c 	add.w	r1, r7, #12
 8008304:	2200      	movs	r2, #0
 8008306:	4618      	mov	r0, r3
 8008308:	f010 f996 	bl	8018638 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008310:	2b00      	cmp	r3, #0
 8008312:	d005      	beq.n	8008320 <netconn_accept+0xcc>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008318:	2200      	movs	r2, #0
 800831a:	2101      	movs	r1, #1
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	f107 0213 	add.w	r2, r7, #19
 8008326:	4611      	mov	r1, r2
 8008328:	4618      	mov	r0, r3
 800832a:	f000 fb75 	bl	8008a18 <lwip_netconn_is_err_msg>
 800832e:	4603      	mov	r3, r0
 8008330:	2b00      	cmp	r3, #0
 8008332:	d002      	beq.n	800833a <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 8008334:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008338:	e00b      	b.n	8008352 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d102      	bne.n	8008346 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 8008340:	f06f 030e 	mvn.w	r3, #14
 8008344:	e005      	b.n	8008352 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	697a      	ldr	r2, [r7, #20]
 800834e:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8008350:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8008352:	4618      	mov	r0, r3
 8008354:	3718      	adds	r7, #24
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}
 800835a:	bf00      	nop
 800835c:	0801a0c4 	.word	0x0801a0c4
 8008360:	0801a29c 	.word	0x0801a29c
 8008364:	0801a11c 	.word	0x0801a11c
 8008368:	0801a2bc 	.word	0x0801a2bc

0800836c <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b088      	sub	sp, #32
 8008370:	af00      	add	r7, sp, #0
 8008372:	60f8      	str	r0, [r7, #12]
 8008374:	60b9      	str	r1, [r7, #8]
 8008376:	4613      	mov	r3, r2
 8008378:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800837a:	2300      	movs	r3, #0
 800837c:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d109      	bne.n	8008398 <netconn_recv_data+0x2c>
 8008384:	4b58      	ldr	r3, [pc, #352]	; (80084e8 <netconn_recv_data+0x17c>)
 8008386:	f44f 7212 	mov.w	r2, #584	; 0x248
 800838a:	4958      	ldr	r1, [pc, #352]	; (80084ec <netconn_recv_data+0x180>)
 800838c:	4858      	ldr	r0, [pc, #352]	; (80084f0 <netconn_recv_data+0x184>)
 800838e:	f010 fc03 	bl	8018b98 <iprintf>
 8008392:	f06f 030f 	mvn.w	r3, #15
 8008396:	e0a2      	b.n	80084de <netconn_recv_data+0x172>
  *new_buf = NULL;
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	2200      	movs	r2, #0
 800839c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d109      	bne.n	80083b8 <netconn_recv_data+0x4c>
 80083a4:	4b50      	ldr	r3, [pc, #320]	; (80084e8 <netconn_recv_data+0x17c>)
 80083a6:	f240 224a 	movw	r2, #586	; 0x24a
 80083aa:	4952      	ldr	r1, [pc, #328]	; (80084f4 <netconn_recv_data+0x188>)
 80083ac:	4850      	ldr	r0, [pc, #320]	; (80084f0 <netconn_recv_data+0x184>)
 80083ae:	f010 fbf3 	bl	8018b98 <iprintf>
 80083b2:	f06f 030f 	mvn.w	r3, #15
 80083b6:	e092      	b.n	80084de <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	3310      	adds	r3, #16
 80083bc:	4618      	mov	r0, r3
 80083be:	f010 f996 	bl	80186ee <sys_mbox_valid>
 80083c2:	4603      	mov	r3, r0
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d10e      	bne.n	80083e6 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 80083c8:	68f8      	ldr	r0, [r7, #12]
 80083ca:	f000 fad4 	bl	8008976 <netconn_err>
 80083ce:	4603      	mov	r3, r0
 80083d0:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 80083d2:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d002      	beq.n	80083e0 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 80083da:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80083de:	e07e      	b.n	80084de <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 80083e0:	f06f 030a 	mvn.w	r3, #10
 80083e4:	e07b      	b.n	80084de <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	7f1b      	ldrb	r3, [r3, #28]
 80083ea:	f003 0302 	and.w	r3, r3, #2
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d10f      	bne.n	8008412 <netconn_recv_data+0xa6>
 80083f2:	79fb      	ldrb	r3, [r7, #7]
 80083f4:	f003 0304 	and.w	r3, r3, #4
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d10a      	bne.n	8008412 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	7f1b      	ldrb	r3, [r3, #28]
 8008400:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8008404:	2b00      	cmp	r3, #0
 8008406:	d104      	bne.n	8008412 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d023      	beq.n	800845a <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	3310      	adds	r3, #16
 8008416:	f107 0218 	add.w	r2, r7, #24
 800841a:	4611      	mov	r1, r2
 800841c:	4618      	mov	r0, r3
 800841e:	f010 f94a 	bl	80186b6 <sys_arch_mbox_tryfetch>
 8008422:	4603      	mov	r3, r0
 8008424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008428:	d11f      	bne.n	800846a <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800842a:	68f8      	ldr	r0, [r7, #12]
 800842c:	f000 faa3 	bl	8008976 <netconn_err>
 8008430:	4603      	mov	r3, r0
 8008432:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8008434:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d002      	beq.n	8008442 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800843c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8008440:	e04d      	b.n	80084de <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	7f1b      	ldrb	r3, [r3, #28]
 8008446:	f003 0301 	and.w	r3, r3, #1
 800844a:	2b00      	cmp	r3, #0
 800844c:	d002      	beq.n	8008454 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800844e:	f06f 030a 	mvn.w	r3, #10
 8008452:	e044      	b.n	80084de <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 8008454:	f06f 0306 	mvn.w	r3, #6
 8008458:	e041      	b.n	80084de <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	3310      	adds	r3, #16
 800845e:	f107 0118 	add.w	r1, r7, #24
 8008462:	2200      	movs	r2, #0
 8008464:	4618      	mov	r0, r3
 8008466:	f010 f8e7 	bl	8018638 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	781b      	ldrb	r3, [r3, #0]
 800846e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008472:	2b10      	cmp	r3, #16
 8008474:	d117      	bne.n	80084a6 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8008476:	69bb      	ldr	r3, [r7, #24]
 8008478:	f107 0217 	add.w	r2, r7, #23
 800847c:	4611      	mov	r1, r2
 800847e:	4618      	mov	r0, r3
 8008480:	f000 faca 	bl	8008a18 <lwip_netconn_is_err_msg>
 8008484:	4603      	mov	r3, r0
 8008486:	2b00      	cmp	r3, #0
 8008488:	d009      	beq.n	800849e <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800848a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800848e:	f113 0f0f 	cmn.w	r3, #15
 8008492:	d101      	bne.n	8008498 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 8008494:	2300      	movs	r3, #0
 8008496:	e022      	b.n	80084de <netconn_recv_data+0x172>
      }
      return err;
 8008498:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800849c:	e01f      	b.n	80084de <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800849e:	69bb      	ldr	r3, [r7, #24]
 80084a0:	891b      	ldrh	r3, [r3, #8]
 80084a2:	83fb      	strh	r3, [r7, #30]
 80084a4:	e00d      	b.n	80084c2 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 80084a6:	69bb      	ldr	r3, [r7, #24]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d106      	bne.n	80084ba <netconn_recv_data+0x14e>
 80084ac:	4b0e      	ldr	r3, [pc, #56]	; (80084e8 <netconn_recv_data+0x17c>)
 80084ae:	f240 2291 	movw	r2, #657	; 0x291
 80084b2:	4911      	ldr	r1, [pc, #68]	; (80084f8 <netconn_recv_data+0x18c>)
 80084b4:	480e      	ldr	r0, [pc, #56]	; (80084f0 <netconn_recv_data+0x184>)
 80084b6:	f010 fb6f 	bl	8018b98 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 80084ba:	69bb      	ldr	r3, [r7, #24]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	891b      	ldrh	r3, [r3, #8]
 80084c0:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d005      	beq.n	80084d6 <netconn_recv_data+0x16a>
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ce:	8bfa      	ldrh	r2, [r7, #30]
 80084d0:	2101      	movs	r1, #1
 80084d2:	68f8      	ldr	r0, [r7, #12]
 80084d4:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 80084d6:	69ba      	ldr	r2, [r7, #24]
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 80084dc:	2300      	movs	r3, #0
}
 80084de:	4618      	mov	r0, r3
 80084e0:	3720      	adds	r7, #32
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}
 80084e6:	bf00      	nop
 80084e8:	0801a0c4 	.word	0x0801a0c4
 80084ec:	0801a2dc 	.word	0x0801a2dc
 80084f0:	0801a11c 	.word	0x0801a11c
 80084f4:	0801a2fc 	.word	0x0801a2fc
 80084f8:	0801a318 	.word	0x0801a318

080084fc <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b084      	sub	sp, #16
 8008500:	af00      	add	r7, sp, #0
 8008502:	60f8      	str	r0, [r7, #12]
 8008504:	60b9      	str	r1, [r7, #8]
 8008506:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d005      	beq.n	800851a <netconn_tcp_recvd_msg+0x1e>
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	781b      	ldrb	r3, [r3, #0]
 8008512:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008516:	2b10      	cmp	r3, #16
 8008518:	d009      	beq.n	800852e <netconn_tcp_recvd_msg+0x32>
 800851a:	4b0c      	ldr	r3, [pc, #48]	; (800854c <netconn_tcp_recvd_msg+0x50>)
 800851c:	f240 22a7 	movw	r2, #679	; 0x2a7
 8008520:	490b      	ldr	r1, [pc, #44]	; (8008550 <netconn_tcp_recvd_msg+0x54>)
 8008522:	480c      	ldr	r0, [pc, #48]	; (8008554 <netconn_tcp_recvd_msg+0x58>)
 8008524:	f010 fb38 	bl	8018b98 <iprintf>
 8008528:	f06f 030f 	mvn.w	r3, #15
 800852c:	e00a      	b.n	8008544 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	68fa      	ldr	r2, [r7, #12]
 8008532:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	68ba      	ldr	r2, [r7, #8]
 8008538:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800853a:	6879      	ldr	r1, [r7, #4]
 800853c:	4806      	ldr	r0, [pc, #24]	; (8008558 <netconn_tcp_recvd_msg+0x5c>)
 800853e:	f7ff fd15 	bl	8007f6c <netconn_apimsg>
 8008542:	4603      	mov	r3, r0
}
 8008544:	4618      	mov	r0, r3
 8008546:	3710      	adds	r7, #16
 8008548:	46bd      	mov	sp, r7
 800854a:	bd80      	pop	{r7, pc}
 800854c:	0801a0c4 	.word	0x0801a0c4
 8008550:	0801a324 	.word	0x0801a324
 8008554:	0801a11c 	.word	0x0801a11c
 8008558:	08009dc1 	.word	0x08009dc1

0800855c <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b090      	sub	sp, #64	; 0x40
 8008560:	af00      	add	r7, sp, #0
 8008562:	60f8      	str	r0, [r7, #12]
 8008564:	60b9      	str	r1, [r7, #8]
 8008566:	4613      	mov	r3, r2
 8008568:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	3310      	adds	r3, #16
 800856e:	4618      	mov	r0, r3
 8008570:	f010 f8bd 	bl	80186ee <sys_mbox_valid>
 8008574:	4603      	mov	r3, r0
 8008576:	2b00      	cmp	r3, #0
 8008578:	d102      	bne.n	8008580 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800857a:	f06f 030a 	mvn.w	r3, #10
 800857e:	e06d      	b.n	800865c <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	7f1b      	ldrb	r3, [r3, #28]
 8008584:	b25b      	sxtb	r3, r3
 8008586:	2b00      	cmp	r3, #0
 8008588:	da07      	bge.n	800859a <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	7f1b      	ldrb	r3, [r3, #28]
 800858e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008592:	b2da      	uxtb	r2, r3
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 8008598:	e039      	b.n	800860e <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800859a:	79fb      	ldrb	r3, [r7, #7]
 800859c:	461a      	mov	r2, r3
 800859e:	68b9      	ldr	r1, [r7, #8]
 80085a0:	68f8      	ldr	r0, [r7, #12]
 80085a2:	f7ff fee3 	bl	800836c <netconn_recv_data>
 80085a6:	4603      	mov	r3, r0
 80085a8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 80085ac:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d002      	beq.n	80085ba <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 80085b4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80085b8:	e050      	b.n	800865c <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 80085c0:	79fb      	ldrb	r3, [r7, #7]
 80085c2:	f003 0308 	and.w	r3, r3, #8
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d10e      	bne.n	80085e8 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 80085ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d002      	beq.n	80085d6 <netconn_recv_data_tcp+0x7a>
 80085d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085d2:	891b      	ldrh	r3, [r3, #8]
 80085d4:	e000      	b.n	80085d8 <netconn_recv_data_tcp+0x7c>
 80085d6:	2301      	movs	r3, #1
 80085d8:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 80085da:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80085dc:	f107 0214 	add.w	r2, r7, #20
 80085e0:	4619      	mov	r1, r3
 80085e2:	68f8      	ldr	r0, [r7, #12]
 80085e4:	f7ff ff8a 	bl	80084fc <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 80085e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d134      	bne.n	8008658 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 80085ee:	79fb      	ldrb	r3, [r7, #7]
 80085f0:	f003 0310 	and.w	r3, r3, #16
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d009      	beq.n	800860c <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	7f1b      	ldrb	r3, [r3, #28]
 80085fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008600:	b2da      	uxtb	r2, r3
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 8008606:	f06f 0306 	mvn.w	r3, #6
 800860a:	e027      	b.n	800865c <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800860c:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008612:	2b00      	cmp	r3, #0
 8008614:	d005      	beq.n	8008622 <netconn_recv_data_tcp+0xc6>
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800861a:	2200      	movs	r2, #0
 800861c:	2101      	movs	r1, #1
 800861e:	68f8      	ldr	r0, [r7, #12]
 8008620:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	685b      	ldr	r3, [r3, #4]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d10f      	bne.n	800864a <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800862a:	68f8      	ldr	r0, [r7, #12]
 800862c:	f000 f9a3 	bl	8008976 <netconn_err>
 8008630:	4603      	mov	r3, r0
 8008632:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 8008636:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800863a:	2b00      	cmp	r3, #0
 800863c:	d002      	beq.n	8008644 <netconn_recv_data_tcp+0xe8>
          return err;
 800863e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008642:	e00b      	b.n	800865c <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 8008644:	f06f 030d 	mvn.w	r3, #13
 8008648:	e008      	b.n	800865c <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800864a:	2101      	movs	r1, #1
 800864c:	68f8      	ldr	r0, [r7, #12]
 800864e:	f000 f955 	bl	80088fc <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8008652:	f06f 030e 	mvn.w	r3, #14
 8008656:	e001      	b.n	800865c <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 8008658:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800865c:	4618      	mov	r0, r3
 800865e:	3740      	adds	r7, #64	; 0x40
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}

08008664 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b086      	sub	sp, #24
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
 800866c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800866e:	2300      	movs	r3, #0
 8008670:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d109      	bne.n	800868c <netconn_recv+0x28>
 8008678:	4b32      	ldr	r3, [pc, #200]	; (8008744 <netconn_recv+0xe0>)
 800867a:	f240 3263 	movw	r2, #867	; 0x363
 800867e:	4932      	ldr	r1, [pc, #200]	; (8008748 <netconn_recv+0xe4>)
 8008680:	4832      	ldr	r0, [pc, #200]	; (800874c <netconn_recv+0xe8>)
 8008682:	f010 fa89 	bl	8018b98 <iprintf>
 8008686:	f06f 030f 	mvn.w	r3, #15
 800868a:	e056      	b.n	800873a <netconn_recv+0xd6>
  *new_buf = NULL;
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	2200      	movs	r2, #0
 8008690:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d109      	bne.n	80086ac <netconn_recv+0x48>
 8008698:	4b2a      	ldr	r3, [pc, #168]	; (8008744 <netconn_recv+0xe0>)
 800869a:	f240 3265 	movw	r2, #869	; 0x365
 800869e:	492c      	ldr	r1, [pc, #176]	; (8008750 <netconn_recv+0xec>)
 80086a0:	482a      	ldr	r0, [pc, #168]	; (800874c <netconn_recv+0xe8>)
 80086a2:	f010 fa79 	bl	8018b98 <iprintf>
 80086a6:	f06f 030f 	mvn.w	r3, #15
 80086aa:	e046      	b.n	800873a <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	781b      	ldrb	r3, [r3, #0]
 80086b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80086b4:	2b10      	cmp	r3, #16
 80086b6:	d13a      	bne.n	800872e <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 80086b8:	2300      	movs	r3, #0
 80086ba:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80086bc:	2006      	movs	r0, #6
 80086be:	f003 fc13 	bl	800bee8 <memp_malloc>
 80086c2:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 80086c4:	697b      	ldr	r3, [r7, #20]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d102      	bne.n	80086d0 <netconn_recv+0x6c>
      return ERR_MEM;
 80086ca:	f04f 33ff 	mov.w	r3, #4294967295
 80086ce:	e034      	b.n	800873a <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 80086d0:	f107 030c 	add.w	r3, r7, #12
 80086d4:	2200      	movs	r2, #0
 80086d6:	4619      	mov	r1, r3
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f7ff ff3f 	bl	800855c <netconn_recv_data_tcp>
 80086de:	4603      	mov	r3, r0
 80086e0:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80086e2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d006      	beq.n	80086f8 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 80086ea:	6979      	ldr	r1, [r7, #20]
 80086ec:	2006      	movs	r0, #6
 80086ee:	f003 fc71 	bl	800bfd4 <memp_free>
      return err;
 80086f2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80086f6:	e020      	b.n	800873a <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d106      	bne.n	800870c <netconn_recv+0xa8>
 80086fe:	4b11      	ldr	r3, [pc, #68]	; (8008744 <netconn_recv+0xe0>)
 8008700:	f240 3279 	movw	r2, #889	; 0x379
 8008704:	4913      	ldr	r1, [pc, #76]	; (8008754 <netconn_recv+0xf0>)
 8008706:	4811      	ldr	r0, [pc, #68]	; (800874c <netconn_recv+0xe8>)
 8008708:	f010 fa46 	bl	8018b98 <iprintf>

    buf->p = p;
 800870c:	68fa      	ldr	r2, [r7, #12]
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8008712:	68fa      	ldr	r2, [r7, #12]
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	2200      	movs	r2, #0
 800871c:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	2200      	movs	r2, #0
 8008722:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	697a      	ldr	r2, [r7, #20]
 8008728:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800872a:	2300      	movs	r3, #0
 800872c:	e005      	b.n	800873a <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800872e:	2200      	movs	r2, #0
 8008730:	6839      	ldr	r1, [r7, #0]
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f7ff fe1a 	bl	800836c <netconn_recv_data>
 8008738:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800873a:	4618      	mov	r0, r3
 800873c:	3718      	adds	r7, #24
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}
 8008742:	bf00      	nop
 8008744:	0801a0c4 	.word	0x0801a0c4
 8008748:	0801a2dc 	.word	0x0801a2dc
 800874c:	0801a11c 	.word	0x0801a11c
 8008750:	0801a2fc 	.word	0x0801a2fc
 8008754:	0801a374 	.word	0x0801a374

08008758 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b088      	sub	sp, #32
 800875c:	af02      	add	r7, sp, #8
 800875e:	60f8      	str	r0, [r7, #12]
 8008760:	60b9      	str	r1, [r7, #8]
 8008762:	607a      	str	r2, [r7, #4]
 8008764:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800876e:	78fa      	ldrb	r2, [r7, #3]
 8008770:	f107 0110 	add.w	r1, r7, #16
 8008774:	6a3b      	ldr	r3, [r7, #32]
 8008776:	9300      	str	r3, [sp, #0]
 8008778:	4613      	mov	r3, r2
 800877a:	2201      	movs	r2, #1
 800877c:	68f8      	ldr	r0, [r7, #12]
 800877e:	f000 f805 	bl	800878c <netconn_write_vectors_partly>
 8008782:	4603      	mov	r3, r0
}
 8008784:	4618      	mov	r0, r3
 8008786:	3718      	adds	r7, #24
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}

0800878c <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b092      	sub	sp, #72	; 0x48
 8008790:	af00      	add	r7, sp, #0
 8008792:	60f8      	str	r0, [r7, #12]
 8008794:	60b9      	str	r1, [r7, #8]
 8008796:	4611      	mov	r1, r2
 8008798:	461a      	mov	r2, r3
 800879a:	460b      	mov	r3, r1
 800879c:	80fb      	strh	r3, [r7, #6]
 800879e:	4613      	mov	r3, r2
 80087a0:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d109      	bne.n	80087bc <netconn_write_vectors_partly+0x30>
 80087a8:	4b4e      	ldr	r3, [pc, #312]	; (80088e4 <netconn_write_vectors_partly+0x158>)
 80087aa:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80087ae:	494e      	ldr	r1, [pc, #312]	; (80088e8 <netconn_write_vectors_partly+0x15c>)
 80087b0:	484e      	ldr	r0, [pc, #312]	; (80088ec <netconn_write_vectors_partly+0x160>)
 80087b2:	f010 f9f1 	bl	8018b98 <iprintf>
 80087b6:	f06f 030f 	mvn.w	r3, #15
 80087ba:	e08e      	b.n	80088da <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	781b      	ldrb	r3, [r3, #0]
 80087c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80087c4:	2b10      	cmp	r3, #16
 80087c6:	d009      	beq.n	80087dc <netconn_write_vectors_partly+0x50>
 80087c8:	4b46      	ldr	r3, [pc, #280]	; (80088e4 <netconn_write_vectors_partly+0x158>)
 80087ca:	f240 32ef 	movw	r2, #1007	; 0x3ef
 80087ce:	4948      	ldr	r1, [pc, #288]	; (80088f0 <netconn_write_vectors_partly+0x164>)
 80087d0:	4846      	ldr	r0, [pc, #280]	; (80088ec <netconn_write_vectors_partly+0x160>)
 80087d2:	f010 f9e1 	bl	8018b98 <iprintf>
 80087d6:	f06f 0305 	mvn.w	r3, #5
 80087da:	e07e      	b.n	80088da <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	7f1b      	ldrb	r3, [r3, #28]
 80087e0:	f003 0302 	and.w	r3, r3, #2
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d104      	bne.n	80087f2 <netconn_write_vectors_partly+0x66>
 80087e8:	797b      	ldrb	r3, [r7, #5]
 80087ea:	f003 0304 	and.w	r3, r3, #4
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d001      	beq.n	80087f6 <netconn_write_vectors_partly+0x6a>
 80087f2:	2301      	movs	r3, #1
 80087f4:	e000      	b.n	80087f8 <netconn_write_vectors_partly+0x6c>
 80087f6:	2300      	movs	r3, #0
 80087f8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 80087fc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008800:	2b00      	cmp	r3, #0
 8008802:	d005      	beq.n	8008810 <netconn_write_vectors_partly+0x84>
 8008804:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008806:	2b00      	cmp	r3, #0
 8008808:	d102      	bne.n	8008810 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800880a:	f06f 0305 	mvn.w	r3, #5
 800880e:	e064      	b.n	80088da <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 8008810:	2300      	movs	r3, #0
 8008812:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 8008814:	2300      	movs	r3, #0
 8008816:	643b      	str	r3, [r7, #64]	; 0x40
 8008818:	e015      	b.n	8008846 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800881a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800881c:	00db      	lsls	r3, r3, #3
 800881e:	68ba      	ldr	r2, [r7, #8]
 8008820:	4413      	add	r3, r2
 8008822:	685b      	ldr	r3, [r3, #4]
 8008824:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008826:	4413      	add	r3, r2
 8008828:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 800882a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800882c:	00db      	lsls	r3, r3, #3
 800882e:	68ba      	ldr	r2, [r7, #8]
 8008830:	4413      	add	r3, r2
 8008832:	685b      	ldr	r3, [r3, #4]
 8008834:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008836:	429a      	cmp	r2, r3
 8008838:	d202      	bcs.n	8008840 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800883a:	f06f 0305 	mvn.w	r3, #5
 800883e:	e04c      	b.n	80088da <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 8008840:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008842:	3301      	adds	r3, #1
 8008844:	643b      	str	r3, [r7, #64]	; 0x40
 8008846:	88fb      	ldrh	r3, [r7, #6]
 8008848:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800884a:	429a      	cmp	r2, r3
 800884c:	dbe5      	blt.n	800881a <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800884e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008850:	2b00      	cmp	r3, #0
 8008852:	d101      	bne.n	8008858 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 8008854:	2300      	movs	r3, #0
 8008856:	e040      	b.n	80088da <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 8008858:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800885a:	2b00      	cmp	r3, #0
 800885c:	da0a      	bge.n	8008874 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800885e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008860:	2b00      	cmp	r3, #0
 8008862:	d102      	bne.n	800886a <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 8008864:	f06f 0305 	mvn.w	r3, #5
 8008868:	e037      	b.n	80088da <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800886a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800886e:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 8008870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008872:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800887c:	88fb      	ldrh	r3, [r7, #6]
 800887e:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8008880:	2300      	movs	r3, #0
 8008882:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8008884:	797b      	ldrb	r3, [r7, #5]
 8008886:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800888a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800888c:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800888e:	2300      	movs	r3, #0
 8008890:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8008892:	f107 0314 	add.w	r3, r7, #20
 8008896:	4619      	mov	r1, r3
 8008898:	4816      	ldr	r0, [pc, #88]	; (80088f4 <netconn_write_vectors_partly+0x168>)
 800889a:	f7ff fb67 	bl	8007f6c <netconn_apimsg>
 800889e:	4603      	mov	r3, r0
 80088a0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 80088a4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d114      	bne.n	80088d6 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 80088ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d002      	beq.n	80088b8 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 80088b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80088b6:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 80088b8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d10a      	bne.n	80088d6 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 80088c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80088c4:	429a      	cmp	r2, r3
 80088c6:	d006      	beq.n	80088d6 <netconn_write_vectors_partly+0x14a>
 80088c8:	4b06      	ldr	r3, [pc, #24]	; (80088e4 <netconn_write_vectors_partly+0x158>)
 80088ca:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80088ce:	490a      	ldr	r1, [pc, #40]	; (80088f8 <netconn_write_vectors_partly+0x16c>)
 80088d0:	4806      	ldr	r0, [pc, #24]	; (80088ec <netconn_write_vectors_partly+0x160>)
 80088d2:	f010 f961 	bl	8018b98 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 80088d6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 80088da:	4618      	mov	r0, r3
 80088dc:	3748      	adds	r7, #72	; 0x48
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}
 80088e2:	bf00      	nop
 80088e4:	0801a0c4 	.word	0x0801a0c4
 80088e8:	0801a39c 	.word	0x0801a39c
 80088ec:	0801a11c 	.word	0x0801a11c
 80088f0:	0801a3b8 	.word	0x0801a3b8
 80088f4:	0800a1c5 	.word	0x0800a1c5
 80088f8:	0801a3dc 	.word	0x0801a3dc

080088fc <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b08c      	sub	sp, #48	; 0x30
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
 8008904:	460b      	mov	r3, r1
 8008906:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d109      	bne.n	8008922 <netconn_close_shutdown+0x26>
 800890e:	4b0f      	ldr	r3, [pc, #60]	; (800894c <netconn_close_shutdown+0x50>)
 8008910:	f240 4247 	movw	r2, #1095	; 0x447
 8008914:	490e      	ldr	r1, [pc, #56]	; (8008950 <netconn_close_shutdown+0x54>)
 8008916:	480f      	ldr	r0, [pc, #60]	; (8008954 <netconn_close_shutdown+0x58>)
 8008918:	f010 f93e 	bl	8018b98 <iprintf>
 800891c:	f06f 030f 	mvn.w	r3, #15
 8008920:	e010      	b.n	8008944 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8008926:	78fb      	ldrb	r3, [r7, #3]
 8008928:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800892a:	2329      	movs	r3, #41	; 0x29
 800892c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800892e:	f107 030c 	add.w	r3, r7, #12
 8008932:	4619      	mov	r1, r3
 8008934:	4808      	ldr	r0, [pc, #32]	; (8008958 <netconn_close_shutdown+0x5c>)
 8008936:	f7ff fb19 	bl	8007f6c <netconn_apimsg>
 800893a:	4603      	mov	r3, r0
 800893c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8008940:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8008944:	4618      	mov	r0, r3
 8008946:	3730      	adds	r7, #48	; 0x30
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}
 800894c:	0801a0c4 	.word	0x0801a0c4
 8008950:	0801a400 	.word	0x0801a400
 8008954:	0801a11c 	.word	0x0801a11c
 8008958:	0800a2dd 	.word	0x0800a2dd

0800895c <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b082      	sub	sp, #8
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8008964:	2103      	movs	r1, #3
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f7ff ffc8 	bl	80088fc <netconn_close_shutdown>
 800896c:	4603      	mov	r3, r0
}
 800896e:	4618      	mov	r0, r3
 8008970:	3708      	adds	r7, #8
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}

08008976 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8008976:	b580      	push	{r7, lr}
 8008978:	b084      	sub	sp, #16
 800897a:	af00      	add	r7, sp, #0
 800897c:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d101      	bne.n	8008988 <netconn_err+0x12>
    return ERR_OK;
 8008984:	2300      	movs	r3, #0
 8008986:	e00d      	b.n	80089a4 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8008988:	f00f ffcc 	bl	8018924 <sys_arch_protect>
 800898c:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	7a1b      	ldrb	r3, [r3, #8]
 8008992:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2200      	movs	r2, #0
 8008998:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800899a:	68f8      	ldr	r0, [r7, #12]
 800899c:	f00f ffd0 	bl	8018940 <sys_arch_unprotect>
  return err;
 80089a0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	3710      	adds	r7, #16
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}

080089ac <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b082      	sub	sp, #8
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	4603      	mov	r3, r0
 80089b4:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 80089b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089ba:	f113 0f0d 	cmn.w	r3, #13
 80089be:	d009      	beq.n	80089d4 <lwip_netconn_err_to_msg+0x28>
 80089c0:	f113 0f0d 	cmn.w	r3, #13
 80089c4:	dc0c      	bgt.n	80089e0 <lwip_netconn_err_to_msg+0x34>
 80089c6:	f113 0f0f 	cmn.w	r3, #15
 80089ca:	d007      	beq.n	80089dc <lwip_netconn_err_to_msg+0x30>
 80089cc:	f113 0f0e 	cmn.w	r3, #14
 80089d0:	d002      	beq.n	80089d8 <lwip_netconn_err_to_msg+0x2c>
 80089d2:	e005      	b.n	80089e0 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 80089d4:	4b0a      	ldr	r3, [pc, #40]	; (8008a00 <lwip_netconn_err_to_msg+0x54>)
 80089d6:	e00e      	b.n	80089f6 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 80089d8:	4b0a      	ldr	r3, [pc, #40]	; (8008a04 <lwip_netconn_err_to_msg+0x58>)
 80089da:	e00c      	b.n	80089f6 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 80089dc:	4b0a      	ldr	r3, [pc, #40]	; (8008a08 <lwip_netconn_err_to_msg+0x5c>)
 80089de:	e00a      	b.n	80089f6 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 80089e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d005      	beq.n	80089f4 <lwip_netconn_err_to_msg+0x48>
 80089e8:	4b08      	ldr	r3, [pc, #32]	; (8008a0c <lwip_netconn_err_to_msg+0x60>)
 80089ea:	227d      	movs	r2, #125	; 0x7d
 80089ec:	4908      	ldr	r1, [pc, #32]	; (8008a10 <lwip_netconn_err_to_msg+0x64>)
 80089ee:	4809      	ldr	r0, [pc, #36]	; (8008a14 <lwip_netconn_err_to_msg+0x68>)
 80089f0:	f010 f8d2 	bl	8018b98 <iprintf>
      return NULL;
 80089f4:	2300      	movs	r3, #0
  }
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3708      	adds	r7, #8
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}
 80089fe:	bf00      	nop
 8008a00:	0801db78 	.word	0x0801db78
 8008a04:	0801db79 	.word	0x0801db79
 8008a08:	0801db7a 	.word	0x0801db7a
 8008a0c:	0801a41c 	.word	0x0801a41c
 8008a10:	0801a450 	.word	0x0801a450
 8008a14:	0801a460 	.word	0x0801a460

08008a18 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b082      	sub	sp, #8
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
 8008a20:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d105      	bne.n	8008a34 <lwip_netconn_is_err_msg+0x1c>
 8008a28:	4b12      	ldr	r3, [pc, #72]	; (8008a74 <lwip_netconn_is_err_msg+0x5c>)
 8008a2a:	2285      	movs	r2, #133	; 0x85
 8008a2c:	4912      	ldr	r1, [pc, #72]	; (8008a78 <lwip_netconn_is_err_msg+0x60>)
 8008a2e:	4813      	ldr	r0, [pc, #76]	; (8008a7c <lwip_netconn_is_err_msg+0x64>)
 8008a30:	f010 f8b2 	bl	8018b98 <iprintf>

  if (msg == &netconn_aborted) {
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	4a12      	ldr	r2, [pc, #72]	; (8008a80 <lwip_netconn_is_err_msg+0x68>)
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d104      	bne.n	8008a46 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	22f3      	movs	r2, #243	; 0xf3
 8008a40:	701a      	strb	r2, [r3, #0]
    return 1;
 8008a42:	2301      	movs	r3, #1
 8008a44:	e012      	b.n	8008a6c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	4a0e      	ldr	r2, [pc, #56]	; (8008a84 <lwip_netconn_is_err_msg+0x6c>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d104      	bne.n	8008a58 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	22f2      	movs	r2, #242	; 0xf2
 8008a52:	701a      	strb	r2, [r3, #0]
    return 1;
 8008a54:	2301      	movs	r3, #1
 8008a56:	e009      	b.n	8008a6c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	4a0b      	ldr	r2, [pc, #44]	; (8008a88 <lwip_netconn_is_err_msg+0x70>)
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	d104      	bne.n	8008a6a <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	22f1      	movs	r2, #241	; 0xf1
 8008a64:	701a      	strb	r2, [r3, #0]
    return 1;
 8008a66:	2301      	movs	r3, #1
 8008a68:	e000      	b.n	8008a6c <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 8008a6a:	2300      	movs	r3, #0
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	3708      	adds	r7, #8
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}
 8008a74:	0801a41c 	.word	0x0801a41c
 8008a78:	0801a488 	.word	0x0801a488
 8008a7c:	0801a460 	.word	0x0801a460
 8008a80:	0801db78 	.word	0x0801db78
 8008a84:	0801db79 	.word	0x0801db79
 8008a88:	0801db7a 	.word	0x0801db7a

08008a8c <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b088      	sub	sp, #32
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	60f8      	str	r0, [r7, #12]
 8008a94:	60b9      	str	r1, [r7, #8]
 8008a96:	607a      	str	r2, [r7, #4]
 8008a98:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8008a9a:	68bb      	ldr	r3, [r7, #8]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d105      	bne.n	8008aac <recv_udp+0x20>
 8008aa0:	4b34      	ldr	r3, [pc, #208]	; (8008b74 <recv_udp+0xe8>)
 8008aa2:	22e5      	movs	r2, #229	; 0xe5
 8008aa4:	4934      	ldr	r1, [pc, #208]	; (8008b78 <recv_udp+0xec>)
 8008aa6:	4835      	ldr	r0, [pc, #212]	; (8008b7c <recv_udp+0xf0>)
 8008aa8:	f010 f876 	bl	8018b98 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d105      	bne.n	8008abe <recv_udp+0x32>
 8008ab2:	4b30      	ldr	r3, [pc, #192]	; (8008b74 <recv_udp+0xe8>)
 8008ab4:	22e6      	movs	r2, #230	; 0xe6
 8008ab6:	4932      	ldr	r1, [pc, #200]	; (8008b80 <recv_udp+0xf4>)
 8008ab8:	4830      	ldr	r0, [pc, #192]	; (8008b7c <recv_udp+0xf0>)
 8008aba:	f010 f86d 	bl	8018b98 <iprintf>
  conn = (struct netconn *)arg;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8008ac2:	69fb      	ldr	r3, [r7, #28]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d103      	bne.n	8008ad0 <recv_udp+0x44>
    pbuf_free(p);
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	f004 f933 	bl	800cd34 <pbuf_free>
    return;
 8008ace:	e04d      	b.n	8008b6c <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8008ad0:	69fb      	ldr	r3, [r7, #28]
 8008ad2:	685b      	ldr	r3, [r3, #4]
 8008ad4:	68ba      	ldr	r2, [r7, #8]
 8008ad6:	429a      	cmp	r2, r3
 8008ad8:	d005      	beq.n	8008ae6 <recv_udp+0x5a>
 8008ada:	4b26      	ldr	r3, [pc, #152]	; (8008b74 <recv_udp+0xe8>)
 8008adc:	22ee      	movs	r2, #238	; 0xee
 8008ade:	4929      	ldr	r1, [pc, #164]	; (8008b84 <recv_udp+0xf8>)
 8008ae0:	4826      	ldr	r0, [pc, #152]	; (8008b7c <recv_udp+0xf0>)
 8008ae2:	f010 f859 	bl	8018b98 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8008ae6:	69fb      	ldr	r3, [r7, #28]
 8008ae8:	3310      	adds	r3, #16
 8008aea:	4618      	mov	r0, r3
 8008aec:	f00f fdff 	bl	80186ee <sys_mbox_valid>
 8008af0:	4603      	mov	r3, r0
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d103      	bne.n	8008afe <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f004 f91c 	bl	800cd34 <pbuf_free>
    return;
 8008afc:	e036      	b.n	8008b6c <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8008afe:	2006      	movs	r0, #6
 8008b00:	f003 f9f2 	bl	800bee8 <memp_malloc>
 8008b04:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8008b06:	69bb      	ldr	r3, [r7, #24]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d103      	bne.n	8008b14 <recv_udp+0x88>
    pbuf_free(p);
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f004 f911 	bl	800cd34 <pbuf_free>
    return;
 8008b12:	e02b      	b.n	8008b6c <recv_udp+0xe0>
  } else {
    buf->p = p;
 8008b14:	69bb      	ldr	r3, [r7, #24]
 8008b16:	687a      	ldr	r2, [r7, #4]
 8008b18:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8008b1a:	69bb      	ldr	r3, [r7, #24]
 8008b1c:	687a      	ldr	r2, [r7, #4]
 8008b1e:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d002      	beq.n	8008b2c <recv_udp+0xa0>
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	e000      	b.n	8008b2e <recv_udp+0xa2>
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	69ba      	ldr	r2, [r7, #24]
 8008b30:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8008b32:	69bb      	ldr	r3, [r7, #24]
 8008b34:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008b36:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	891b      	ldrh	r3, [r3, #8]
 8008b3c:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8008b3e:	69fb      	ldr	r3, [r7, #28]
 8008b40:	3310      	adds	r3, #16
 8008b42:	69b9      	ldr	r1, [r7, #24]
 8008b44:	4618      	mov	r0, r3
 8008b46:	f00f fd5d 	bl	8018604 <sys_mbox_trypost>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d003      	beq.n	8008b58 <recv_udp+0xcc>
    netbuf_delete(buf);
 8008b50:	69b8      	ldr	r0, [r7, #24]
 8008b52:	f001 fc4f 	bl	800a3f4 <netbuf_delete>
    return;
 8008b56:	e009      	b.n	8008b6c <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8008b58:	69fb      	ldr	r3, [r7, #28]
 8008b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d005      	beq.n	8008b6c <recv_udp+0xe0>
 8008b60:	69fb      	ldr	r3, [r7, #28]
 8008b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b64:	8afa      	ldrh	r2, [r7, #22]
 8008b66:	2100      	movs	r1, #0
 8008b68:	69f8      	ldr	r0, [r7, #28]
 8008b6a:	4798      	blx	r3
  }
}
 8008b6c:	3720      	adds	r7, #32
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}
 8008b72:	bf00      	nop
 8008b74:	0801a41c 	.word	0x0801a41c
 8008b78:	0801a494 	.word	0x0801a494
 8008b7c:	0801a460 	.word	0x0801a460
 8008b80:	0801a4b8 	.word	0x0801a4b8
 8008b84:	0801a4d8 	.word	0x0801a4d8

08008b88 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b088      	sub	sp, #32
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	60f8      	str	r0, [r7, #12]
 8008b90:	60b9      	str	r1, [r7, #8]
 8008b92:	607a      	str	r2, [r7, #4]
 8008b94:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d106      	bne.n	8008baa <recv_tcp+0x22>
 8008b9c:	4b36      	ldr	r3, [pc, #216]	; (8008c78 <recv_tcp+0xf0>)
 8008b9e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008ba2:	4936      	ldr	r1, [pc, #216]	; (8008c7c <recv_tcp+0xf4>)
 8008ba4:	4836      	ldr	r0, [pc, #216]	; (8008c80 <recv_tcp+0xf8>)
 8008ba6:	f00f fff7 	bl	8018b98 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d106      	bne.n	8008bbe <recv_tcp+0x36>
 8008bb0:	4b31      	ldr	r3, [pc, #196]	; (8008c78 <recv_tcp+0xf0>)
 8008bb2:	f240 122d 	movw	r2, #301	; 0x12d
 8008bb6:	4933      	ldr	r1, [pc, #204]	; (8008c84 <recv_tcp+0xfc>)
 8008bb8:	4831      	ldr	r0, [pc, #196]	; (8008c80 <recv_tcp+0xf8>)
 8008bba:	f00f ffed 	bl	8018b98 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8008bbe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d006      	beq.n	8008bd4 <recv_tcp+0x4c>
 8008bc6:	4b2c      	ldr	r3, [pc, #176]	; (8008c78 <recv_tcp+0xf0>)
 8008bc8:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8008bcc:	492e      	ldr	r1, [pc, #184]	; (8008c88 <recv_tcp+0x100>)
 8008bce:	482c      	ldr	r0, [pc, #176]	; (8008c80 <recv_tcp+0xf8>)
 8008bd0:	f00f ffe2 	bl	8018b98 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8008bd8:	697b      	ldr	r3, [r7, #20]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d102      	bne.n	8008be4 <recv_tcp+0x5c>
    return ERR_VAL;
 8008bde:	f06f 0305 	mvn.w	r3, #5
 8008be2:	e045      	b.n	8008c70 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8008be4:	697b      	ldr	r3, [r7, #20]
 8008be6:	685b      	ldr	r3, [r3, #4]
 8008be8:	68ba      	ldr	r2, [r7, #8]
 8008bea:	429a      	cmp	r2, r3
 8008bec:	d006      	beq.n	8008bfc <recv_tcp+0x74>
 8008bee:	4b22      	ldr	r3, [pc, #136]	; (8008c78 <recv_tcp+0xf0>)
 8008bf0:	f240 1235 	movw	r2, #309	; 0x135
 8008bf4:	4925      	ldr	r1, [pc, #148]	; (8008c8c <recv_tcp+0x104>)
 8008bf6:	4822      	ldr	r0, [pc, #136]	; (8008c80 <recv_tcp+0xf8>)
 8008bf8:	f00f ffce 	bl	8018b98 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8008bfc:	697b      	ldr	r3, [r7, #20]
 8008bfe:	3310      	adds	r3, #16
 8008c00:	4618      	mov	r0, r3
 8008c02:	f00f fd74 	bl	80186ee <sys_mbox_valid>
 8008c06:	4603      	mov	r3, r0
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d10d      	bne.n	8008c28 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d008      	beq.n	8008c24 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	891b      	ldrh	r3, [r3, #8]
 8008c16:	4619      	mov	r1, r3
 8008c18:	68b8      	ldr	r0, [r7, #8]
 8008c1a:	f005 f865 	bl	800dce8 <tcp_recved>
      pbuf_free(p);
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f004 f888 	bl	800cd34 <pbuf_free>
    }
    return ERR_OK;
 8008c24:	2300      	movs	r3, #0
 8008c26:	e023      	b.n	8008c70 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d005      	beq.n	8008c3a <recv_tcp+0xb2>
    msg = p;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	891b      	ldrh	r3, [r3, #8]
 8008c36:	83fb      	strh	r3, [r7, #30]
 8008c38:	e003      	b.n	8008c42 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8008c3a:	4b15      	ldr	r3, [pc, #84]	; (8008c90 <recv_tcp+0x108>)
 8008c3c:	61bb      	str	r3, [r7, #24]
    len = 0;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	3310      	adds	r3, #16
 8008c46:	69b9      	ldr	r1, [r7, #24]
 8008c48:	4618      	mov	r0, r3
 8008c4a:	f00f fcdb 	bl	8018604 <sys_mbox_trypost>
 8008c4e:	4603      	mov	r3, r0
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d002      	beq.n	8008c5a <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8008c54:	f04f 33ff 	mov.w	r3, #4294967295
 8008c58:	e00a      	b.n	8008c70 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8008c5a:	697b      	ldr	r3, [r7, #20]
 8008c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d005      	beq.n	8008c6e <recv_tcp+0xe6>
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c66:	8bfa      	ldrh	r2, [r7, #30]
 8008c68:	2100      	movs	r1, #0
 8008c6a:	6978      	ldr	r0, [r7, #20]
 8008c6c:	4798      	blx	r3
  }

  return ERR_OK;
 8008c6e:	2300      	movs	r3, #0
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	3720      	adds	r7, #32
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bd80      	pop	{r7, pc}
 8008c78:	0801a41c 	.word	0x0801a41c
 8008c7c:	0801a4f8 	.word	0x0801a4f8
 8008c80:	0801a460 	.word	0x0801a460
 8008c84:	0801a51c 	.word	0x0801a51c
 8008c88:	0801a53c 	.word	0x0801a53c
 8008c8c:	0801a554 	.word	0x0801a554
 8008c90:	0801db7a 	.word	0x0801db7a

08008c94 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b084      	sub	sp, #16
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
 8008c9c:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d106      	bne.n	8008cb6 <poll_tcp+0x22>
 8008ca8:	4b29      	ldr	r3, [pc, #164]	; (8008d50 <poll_tcp+0xbc>)
 8008caa:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8008cae:	4929      	ldr	r1, [pc, #164]	; (8008d54 <poll_tcp+0xc0>)
 8008cb0:	4829      	ldr	r0, [pc, #164]	; (8008d58 <poll_tcp+0xc4>)
 8008cb2:	f00f ff71 	bl	8018b98 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	785b      	ldrb	r3, [r3, #1]
 8008cba:	2b01      	cmp	r3, #1
 8008cbc:	d104      	bne.n	8008cc8 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8008cbe:	2101      	movs	r1, #1
 8008cc0:	68f8      	ldr	r0, [r7, #12]
 8008cc2:	f001 f8b3 	bl	8009e2c <lwip_netconn_do_writemore>
 8008cc6:	e016      	b.n	8008cf6 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	785b      	ldrb	r3, [r3, #1]
 8008ccc:	2b04      	cmp	r3, #4
 8008cce:	d112      	bne.n	8008cf6 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	6a1b      	ldr	r3, [r3, #32]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d00a      	beq.n	8008cee <poll_tcp+0x5a>
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	6a1b      	ldr	r3, [r3, #32]
 8008cdc:	7a5b      	ldrb	r3, [r3, #9]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d005      	beq.n	8008cee <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	6a1b      	ldr	r3, [r3, #32]
 8008ce6:	7a5a      	ldrb	r2, [r3, #9]
 8008ce8:	3a01      	subs	r2, #1
 8008cea:	b2d2      	uxtb	r2, r2
 8008cec:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8008cee:	2101      	movs	r1, #1
 8008cf0:	68f8      	ldr	r0, [r7, #12]
 8008cf2:	f000 fbf7 	bl	80094e4 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	7f1b      	ldrb	r3, [r3, #28]
 8008cfa:	f003 0310 	and.w	r3, r3, #16
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d021      	beq.n	8008d46 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	685b      	ldr	r3, [r3, #4]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d01d      	beq.n	8008d46 <poll_tcp+0xb2>
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	685b      	ldr	r3, [r3, #4]
 8008d0e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008d12:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8008d16:	d316      	bcc.n	8008d46 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	685b      	ldr	r3, [r3, #4]
 8008d1c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008d20:	2b04      	cmp	r3, #4
 8008d22:	d810      	bhi.n	8008d46 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	7f1b      	ldrb	r3, [r3, #28]
 8008d28:	f023 0310 	bic.w	r3, r3, #16
 8008d2c:	b2da      	uxtb	r2, r3
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d005      	beq.n	8008d46 <poll_tcp+0xb2>
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d3e:	2200      	movs	r2, #0
 8008d40:	2102      	movs	r1, #2
 8008d42:	68f8      	ldr	r0, [r7, #12]
 8008d44:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8008d46:	2300      	movs	r3, #0
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	3710      	adds	r7, #16
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}
 8008d50:	0801a41c 	.word	0x0801a41c
 8008d54:	0801a574 	.word	0x0801a574
 8008d58:	0801a460 	.word	0x0801a460

08008d5c <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b086      	sub	sp, #24
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	60f8      	str	r0, [r7, #12]
 8008d64:	60b9      	str	r1, [r7, #8]
 8008d66:	4613      	mov	r3, r2
 8008d68:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d106      	bne.n	8008d82 <sent_tcp+0x26>
 8008d74:	4b20      	ldr	r3, [pc, #128]	; (8008df8 <sent_tcp+0x9c>)
 8008d76:	f240 1293 	movw	r2, #403	; 0x193
 8008d7a:	4920      	ldr	r1, [pc, #128]	; (8008dfc <sent_tcp+0xa0>)
 8008d7c:	4820      	ldr	r0, [pc, #128]	; (8008e00 <sent_tcp+0xa4>)
 8008d7e:	f00f ff0b 	bl	8018b98 <iprintf>

  if (conn) {
 8008d82:	697b      	ldr	r3, [r7, #20]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d032      	beq.n	8008dee <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 8008d88:	697b      	ldr	r3, [r7, #20]
 8008d8a:	785b      	ldrb	r3, [r3, #1]
 8008d8c:	2b01      	cmp	r3, #1
 8008d8e:	d104      	bne.n	8008d9a <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8008d90:	2101      	movs	r1, #1
 8008d92:	6978      	ldr	r0, [r7, #20]
 8008d94:	f001 f84a 	bl	8009e2c <lwip_netconn_do_writemore>
 8008d98:	e007      	b.n	8008daa <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 8008d9a:	697b      	ldr	r3, [r7, #20]
 8008d9c:	785b      	ldrb	r3, [r3, #1]
 8008d9e:	2b04      	cmp	r3, #4
 8008da0:	d103      	bne.n	8008daa <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8008da2:	2101      	movs	r1, #1
 8008da4:	6978      	ldr	r0, [r7, #20]
 8008da6:	f000 fb9d 	bl	80094e4 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	685b      	ldr	r3, [r3, #4]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d01d      	beq.n	8008dee <sent_tcp+0x92>
 8008db2:	697b      	ldr	r3, [r7, #20]
 8008db4:	685b      	ldr	r3, [r3, #4]
 8008db6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008dba:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8008dbe:	d316      	bcc.n	8008dee <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8008dc0:	697b      	ldr	r3, [r7, #20]
 8008dc2:	685b      	ldr	r3, [r3, #4]
 8008dc4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008dc8:	2b04      	cmp	r3, #4
 8008dca:	d810      	bhi.n	8008dee <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8008dcc:	697b      	ldr	r3, [r7, #20]
 8008dce:	7f1b      	ldrb	r3, [r3, #28]
 8008dd0:	f023 0310 	bic.w	r3, r3, #16
 8008dd4:	b2da      	uxtb	r2, r3
 8008dd6:	697b      	ldr	r3, [r7, #20]
 8008dd8:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8008dda:	697b      	ldr	r3, [r7, #20]
 8008ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d005      	beq.n	8008dee <sent_tcp+0x92>
 8008de2:	697b      	ldr	r3, [r7, #20]
 8008de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008de6:	88fa      	ldrh	r2, [r7, #6]
 8008de8:	2102      	movs	r1, #2
 8008dea:	6978      	ldr	r0, [r7, #20]
 8008dec:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8008dee:	2300      	movs	r3, #0
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	3718      	adds	r7, #24
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}
 8008df8:	0801a41c 	.word	0x0801a41c
 8008dfc:	0801a574 	.word	0x0801a574
 8008e00:	0801a460 	.word	0x0801a460

08008e04 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b088      	sub	sp, #32
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
 8008e0c:	460b      	mov	r3, r1
 8008e0e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8008e14:	69fb      	ldr	r3, [r7, #28]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d106      	bne.n	8008e28 <err_tcp+0x24>
 8008e1a:	4b5f      	ldr	r3, [pc, #380]	; (8008f98 <err_tcp+0x194>)
 8008e1c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8008e20:	495e      	ldr	r1, [pc, #376]	; (8008f9c <err_tcp+0x198>)
 8008e22:	485f      	ldr	r0, [pc, #380]	; (8008fa0 <err_tcp+0x19c>)
 8008e24:	f00f feb8 	bl	8018b98 <iprintf>

  SYS_ARCH_PROTECT(lev);
 8008e28:	f00f fd7c 	bl	8018924 <sys_arch_protect>
 8008e2c:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 8008e2e:	69fb      	ldr	r3, [r7, #28]
 8008e30:	2200      	movs	r2, #0
 8008e32:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8008e34:	69fb      	ldr	r3, [r7, #28]
 8008e36:	78fa      	ldrb	r2, [r7, #3]
 8008e38:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8008e3a:	69fb      	ldr	r3, [r7, #28]
 8008e3c:	7f1b      	ldrb	r3, [r3, #28]
 8008e3e:	f043 0301 	orr.w	r3, r3, #1
 8008e42:	b2da      	uxtb	r2, r3
 8008e44:	69fb      	ldr	r3, [r7, #28]
 8008e46:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8008e48:	69fb      	ldr	r3, [r7, #28]
 8008e4a:	785b      	ldrb	r3, [r3, #1]
 8008e4c:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 8008e4e:	69fb      	ldr	r3, [r7, #28]
 8008e50:	2200      	movs	r2, #0
 8008e52:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8008e54:	69b8      	ldr	r0, [r7, #24]
 8008e56:	f00f fd73 	bl	8018940 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8008e5a:	69fb      	ldr	r3, [r7, #28]
 8008e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d005      	beq.n	8008e6e <err_tcp+0x6a>
 8008e62:	69fb      	ldr	r3, [r7, #28]
 8008e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e66:	2200      	movs	r2, #0
 8008e68:	2104      	movs	r1, #4
 8008e6a:	69f8      	ldr	r0, [r7, #28]
 8008e6c:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008e6e:	69fb      	ldr	r3, [r7, #28]
 8008e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d005      	beq.n	8008e82 <err_tcp+0x7e>
 8008e76:	69fb      	ldr	r3, [r7, #28]
 8008e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	2100      	movs	r1, #0
 8008e7e:	69f8      	ldr	r0, [r7, #28]
 8008e80:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8008e82:	69fb      	ldr	r3, [r7, #28]
 8008e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d005      	beq.n	8008e96 <err_tcp+0x92>
 8008e8a:	69fb      	ldr	r3, [r7, #28]
 8008e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e8e:	2200      	movs	r2, #0
 8008e90:	2102      	movs	r1, #2
 8008e92:	69f8      	ldr	r0, [r7, #28]
 8008e94:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8008e96:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	f7ff fd86 	bl	80089ac <lwip_netconn_err_to_msg>
 8008ea0:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8008ea2:	69fb      	ldr	r3, [r7, #28]
 8008ea4:	3310      	adds	r3, #16
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f00f fc21 	bl	80186ee <sys_mbox_valid>
 8008eac:	4603      	mov	r3, r0
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d005      	beq.n	8008ebe <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8008eb2:	69fb      	ldr	r3, [r7, #28]
 8008eb4:	3310      	adds	r3, #16
 8008eb6:	6939      	ldr	r1, [r7, #16]
 8008eb8:	4618      	mov	r0, r3
 8008eba:	f00f fba3 	bl	8018604 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8008ebe:	69fb      	ldr	r3, [r7, #28]
 8008ec0:	3314      	adds	r3, #20
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f00f fc13 	bl	80186ee <sys_mbox_valid>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d005      	beq.n	8008eda <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 8008ece:	69fb      	ldr	r3, [r7, #28]
 8008ed0:	3314      	adds	r3, #20
 8008ed2:	6939      	ldr	r1, [r7, #16]
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f00f fb95 	bl	8018604 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8008eda:	7dfb      	ldrb	r3, [r7, #23]
 8008edc:	2b01      	cmp	r3, #1
 8008ede:	d005      	beq.n	8008eec <err_tcp+0xe8>
 8008ee0:	7dfb      	ldrb	r3, [r7, #23]
 8008ee2:	2b04      	cmp	r3, #4
 8008ee4:	d002      	beq.n	8008eec <err_tcp+0xe8>
 8008ee6:	7dfb      	ldrb	r3, [r7, #23]
 8008ee8:	2b03      	cmp	r3, #3
 8008eea:	d143      	bne.n	8008f74 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8008eec:	69fb      	ldr	r3, [r7, #28]
 8008eee:	7f1b      	ldrb	r3, [r3, #28]
 8008ef0:	f003 0304 	and.w	r3, r3, #4
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	bf14      	ite	ne
 8008ef8:	2301      	movne	r3, #1
 8008efa:	2300      	moveq	r3, #0
 8008efc:	b2db      	uxtb	r3, r3
 8008efe:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8008f00:	69fb      	ldr	r3, [r7, #28]
 8008f02:	7f1b      	ldrb	r3, [r3, #28]
 8008f04:	f023 0304 	bic.w	r3, r3, #4
 8008f08:	b2da      	uxtb	r2, r3
 8008f0a:	69fb      	ldr	r3, [r7, #28]
 8008f0c:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d13b      	bne.n	8008f8c <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8008f14:	69fb      	ldr	r3, [r7, #28]
 8008f16:	6a1b      	ldr	r3, [r3, #32]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d106      	bne.n	8008f2a <err_tcp+0x126>
 8008f1c:	4b1e      	ldr	r3, [pc, #120]	; (8008f98 <err_tcp+0x194>)
 8008f1e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8008f22:	4920      	ldr	r1, [pc, #128]	; (8008fa4 <err_tcp+0x1a0>)
 8008f24:	481e      	ldr	r0, [pc, #120]	; (8008fa0 <err_tcp+0x19c>)
 8008f26:	f00f fe37 	bl	8018b98 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 8008f2a:	7dfb      	ldrb	r3, [r7, #23]
 8008f2c:	2b04      	cmp	r3, #4
 8008f2e:	d104      	bne.n	8008f3a <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8008f30:	69fb      	ldr	r3, [r7, #28]
 8008f32:	6a1b      	ldr	r3, [r3, #32]
 8008f34:	2200      	movs	r2, #0
 8008f36:	711a      	strb	r2, [r3, #4]
 8008f38:	e003      	b.n	8008f42 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 8008f3a:	69fb      	ldr	r3, [r7, #28]
 8008f3c:	6a1b      	ldr	r3, [r3, #32]
 8008f3e:	78fa      	ldrb	r2, [r7, #3]
 8008f40:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8008f42:	69fb      	ldr	r3, [r7, #28]
 8008f44:	6a1b      	ldr	r3, [r3, #32]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	330c      	adds	r3, #12
 8008f4a:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8008f4c:	68b8      	ldr	r0, [r7, #8]
 8008f4e:	f00f fc5f 	bl	8018810 <sys_sem_valid>
 8008f52:	4603      	mov	r3, r0
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d106      	bne.n	8008f66 <err_tcp+0x162>
 8008f58:	4b0f      	ldr	r3, [pc, #60]	; (8008f98 <err_tcp+0x194>)
 8008f5a:	f240 12ef 	movw	r2, #495	; 0x1ef
 8008f5e:	4912      	ldr	r1, [pc, #72]	; (8008fa8 <err_tcp+0x1a4>)
 8008f60:	480f      	ldr	r0, [pc, #60]	; (8008fa0 <err_tcp+0x19c>)
 8008f62:	f00f fe19 	bl	8018b98 <iprintf>
      conn->current_msg = NULL;
 8008f66:	69fb      	ldr	r3, [r7, #28]
 8008f68:	2200      	movs	r2, #0
 8008f6a:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 8008f6c:	68b8      	ldr	r0, [r7, #8]
 8008f6e:	f00f fc35 	bl	80187dc <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8008f72:	e00b      	b.n	8008f8c <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8008f74:	69fb      	ldr	r3, [r7, #28]
 8008f76:	6a1b      	ldr	r3, [r3, #32]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d008      	beq.n	8008f8e <err_tcp+0x18a>
 8008f7c:	4b06      	ldr	r3, [pc, #24]	; (8008f98 <err_tcp+0x194>)
 8008f7e:	f240 12f7 	movw	r2, #503	; 0x1f7
 8008f82:	490a      	ldr	r1, [pc, #40]	; (8008fac <err_tcp+0x1a8>)
 8008f84:	4806      	ldr	r0, [pc, #24]	; (8008fa0 <err_tcp+0x19c>)
 8008f86:	f00f fe07 	bl	8018b98 <iprintf>
  }
}
 8008f8a:	e000      	b.n	8008f8e <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 8008f8c:	bf00      	nop
}
 8008f8e:	bf00      	nop
 8008f90:	3720      	adds	r7, #32
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}
 8008f96:	bf00      	nop
 8008f98:	0801a41c 	.word	0x0801a41c
 8008f9c:	0801a574 	.word	0x0801a574
 8008fa0:	0801a460 	.word	0x0801a460
 8008fa4:	0801a584 	.word	0x0801a584
 8008fa8:	0801a5a0 	.word	0x0801a5a0
 8008fac:	0801a5bc 	.word	0x0801a5bc

08008fb0 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b084      	sub	sp, #16
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	685b      	ldr	r3, [r3, #4]
 8008fbc:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 8008fbe:	6879      	ldr	r1, [r7, #4]
 8008fc0:	68f8      	ldr	r0, [r7, #12]
 8008fc2:	f005 fe8d 	bl	800ece0 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8008fc6:	490a      	ldr	r1, [pc, #40]	; (8008ff0 <setup_tcp+0x40>)
 8008fc8:	68f8      	ldr	r0, [r7, #12]
 8008fca:	f005 fe9b 	bl	800ed04 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8008fce:	4909      	ldr	r1, [pc, #36]	; (8008ff4 <setup_tcp+0x44>)
 8008fd0:	68f8      	ldr	r0, [r7, #12]
 8008fd2:	f005 feb9 	bl	800ed48 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8008fd6:	2202      	movs	r2, #2
 8008fd8:	4907      	ldr	r1, [pc, #28]	; (8008ff8 <setup_tcp+0x48>)
 8008fda:	68f8      	ldr	r0, [r7, #12]
 8008fdc:	f005 ff10 	bl	800ee00 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8008fe0:	4906      	ldr	r1, [pc, #24]	; (8008ffc <setup_tcp+0x4c>)
 8008fe2:	68f8      	ldr	r0, [r7, #12]
 8008fe4:	f005 fed2 	bl	800ed8c <tcp_err>
}
 8008fe8:	bf00      	nop
 8008fea:	3710      	adds	r7, #16
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}
 8008ff0:	08008b89 	.word	0x08008b89
 8008ff4:	08008d5d 	.word	0x08008d5d
 8008ff8:	08008c95 	.word	0x08008c95
 8008ffc:	08008e05 	.word	0x08008e05

08009000 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8009000:	b590      	push	{r4, r7, lr}
 8009002:	b089      	sub	sp, #36	; 0x24
 8009004:	af00      	add	r7, sp, #0
 8009006:	60f8      	str	r0, [r7, #12]
 8009008:	60b9      	str	r1, [r7, #8]
 800900a:	4613      	mov	r3, r2
 800900c:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8009012:	69fb      	ldr	r3, [r7, #28]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d102      	bne.n	800901e <accept_function+0x1e>
    return ERR_VAL;
 8009018:	f06f 0305 	mvn.w	r3, #5
 800901c:	e0a1      	b.n	8009162 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800901e:	69fb      	ldr	r3, [r7, #28]
 8009020:	3314      	adds	r3, #20
 8009022:	4618      	mov	r0, r3
 8009024:	f00f fb63 	bl	80186ee <sys_mbox_valid>
 8009028:	4603      	mov	r3, r0
 800902a:	2b00      	cmp	r3, #0
 800902c:	d102      	bne.n	8009034 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800902e:	f06f 0305 	mvn.w	r3, #5
 8009032:	e096      	b.n	8009162 <accept_function+0x162>
  }

  if (newpcb == NULL) {
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d11b      	bne.n	8009072 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800903a:	69fb      	ldr	r3, [r7, #28]
 800903c:	f103 0414 	add.w	r4, r3, #20
 8009040:	f06f 000c 	mvn.w	r0, #12
 8009044:	f7ff fcb2 	bl	80089ac <lwip_netconn_err_to_msg>
 8009048:	4603      	mov	r3, r0
 800904a:	4619      	mov	r1, r3
 800904c:	4620      	mov	r0, r4
 800904e:	f00f fad9 	bl	8018604 <sys_mbox_trypost>
 8009052:	4603      	mov	r3, r0
 8009054:	2b00      	cmp	r3, #0
 8009056:	d109      	bne.n	800906c <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009058:	69fb      	ldr	r3, [r7, #28]
 800905a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800905c:	2b00      	cmp	r3, #0
 800905e:	d005      	beq.n	800906c <accept_function+0x6c>
 8009060:	69fb      	ldr	r3, [r7, #28]
 8009062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009064:	2200      	movs	r2, #0
 8009066:	2100      	movs	r1, #0
 8009068:	69f8      	ldr	r0, [r7, #28]
 800906a:	4798      	blx	r3
    }
    return ERR_VAL;
 800906c:	f06f 0305 	mvn.w	r3, #5
 8009070:	e077      	b.n	8009162 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 8009072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d006      	beq.n	8009088 <accept_function+0x88>
 800907a:	4b3c      	ldr	r3, [pc, #240]	; (800916c <accept_function+0x16c>)
 800907c:	f240 222a 	movw	r2, #554	; 0x22a
 8009080:	493b      	ldr	r1, [pc, #236]	; (8009170 <accept_function+0x170>)
 8009082:	483c      	ldr	r0, [pc, #240]	; (8009174 <accept_function+0x174>)
 8009084:	f00f fd88 	bl	8018b98 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 8009088:	69fb      	ldr	r3, [r7, #28]
 800908a:	781a      	ldrb	r2, [r3, #0]
 800908c:	69fb      	ldr	r3, [r7, #28]
 800908e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009090:	4619      	mov	r1, r3
 8009092:	4610      	mov	r0, r2
 8009094:	f000 f8f0 	bl	8009278 <netconn_alloc>
 8009098:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800909a:	69bb      	ldr	r3, [r7, #24]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d11b      	bne.n	80090d8 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 80090a0:	69fb      	ldr	r3, [r7, #28]
 80090a2:	f103 0414 	add.w	r4, r3, #20
 80090a6:	f06f 000c 	mvn.w	r0, #12
 80090aa:	f7ff fc7f 	bl	80089ac <lwip_netconn_err_to_msg>
 80090ae:	4603      	mov	r3, r0
 80090b0:	4619      	mov	r1, r3
 80090b2:	4620      	mov	r0, r4
 80090b4:	f00f faa6 	bl	8018604 <sys_mbox_trypost>
 80090b8:	4603      	mov	r3, r0
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d109      	bne.n	80090d2 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80090be:	69fb      	ldr	r3, [r7, #28]
 80090c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d005      	beq.n	80090d2 <accept_function+0xd2>
 80090c6:	69fb      	ldr	r3, [r7, #28]
 80090c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ca:	2200      	movs	r2, #0
 80090cc:	2100      	movs	r1, #0
 80090ce:	69f8      	ldr	r0, [r7, #28]
 80090d0:	4798      	blx	r3
    }
    return ERR_MEM;
 80090d2:	f04f 33ff 	mov.w	r3, #4294967295
 80090d6:	e044      	b.n	8009162 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 80090d8:	69bb      	ldr	r3, [r7, #24]
 80090da:	68ba      	ldr	r2, [r7, #8]
 80090dc:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 80090de:	69b8      	ldr	r0, [r7, #24]
 80090e0:	f7ff ff66 	bl	8008fb0 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 80090e4:	69fb      	ldr	r3, [r7, #28]
 80090e6:	3314      	adds	r3, #20
 80090e8:	69b9      	ldr	r1, [r7, #24]
 80090ea:	4618      	mov	r0, r3
 80090ec:	f00f fa8a 	bl	8018604 <sys_mbox_trypost>
 80090f0:	4603      	mov	r3, r0
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d02a      	beq.n	800914c <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 80090f6:	69bb      	ldr	r3, [r7, #24]
 80090f8:	685b      	ldr	r3, [r3, #4]
 80090fa:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 80090fc:	2100      	movs	r1, #0
 80090fe:	6978      	ldr	r0, [r7, #20]
 8009100:	f005 fdee 	bl	800ece0 <tcp_arg>
    tcp_recv(pcb, NULL);
 8009104:	2100      	movs	r1, #0
 8009106:	6978      	ldr	r0, [r7, #20]
 8009108:	f005 fdfc 	bl	800ed04 <tcp_recv>
    tcp_sent(pcb, NULL);
 800910c:	2100      	movs	r1, #0
 800910e:	6978      	ldr	r0, [r7, #20]
 8009110:	f005 fe1a 	bl	800ed48 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8009114:	2200      	movs	r2, #0
 8009116:	2100      	movs	r1, #0
 8009118:	6978      	ldr	r0, [r7, #20]
 800911a:	f005 fe71 	bl	800ee00 <tcp_poll>
    tcp_err(pcb, NULL);
 800911e:	2100      	movs	r1, #0
 8009120:	6978      	ldr	r0, [r7, #20]
 8009122:	f005 fe33 	bl	800ed8c <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 8009126:	69bb      	ldr	r3, [r7, #24]
 8009128:	2200      	movs	r2, #0
 800912a:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800912c:	69bb      	ldr	r3, [r7, #24]
 800912e:	3310      	adds	r3, #16
 8009130:	4618      	mov	r0, r3
 8009132:	f00f fa55 	bl	80185e0 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 8009136:	69bb      	ldr	r3, [r7, #24]
 8009138:	3310      	adds	r3, #16
 800913a:	4618      	mov	r0, r3
 800913c:	f00f fae8 	bl	8018710 <sys_mbox_set_invalid>
    netconn_free(newconn);
 8009140:	69b8      	ldr	r0, [r7, #24]
 8009142:	f000 f907 	bl	8009354 <netconn_free>
    return ERR_MEM;
 8009146:	f04f 33ff 	mov.w	r3, #4294967295
 800914a:	e00a      	b.n	8009162 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800914c:	69fb      	ldr	r3, [r7, #28]
 800914e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009150:	2b00      	cmp	r3, #0
 8009152:	d005      	beq.n	8009160 <accept_function+0x160>
 8009154:	69fb      	ldr	r3, [r7, #28]
 8009156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009158:	2200      	movs	r2, #0
 800915a:	2100      	movs	r1, #0
 800915c:	69f8      	ldr	r0, [r7, #28]
 800915e:	4798      	blx	r3
  }

  return ERR_OK;
 8009160:	2300      	movs	r3, #0
}
 8009162:	4618      	mov	r0, r3
 8009164:	3724      	adds	r7, #36	; 0x24
 8009166:	46bd      	mov	sp, r7
 8009168:	bd90      	pop	{r4, r7, pc}
 800916a:	bf00      	nop
 800916c:	0801a41c 	.word	0x0801a41c
 8009170:	0801a5d8 	.word	0x0801a5d8
 8009174:	0801a460 	.word	0x0801a460

08009178 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8009178:	b590      	push	{r4, r7, lr}
 800917a:	b085      	sub	sp, #20
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8009180:	2300      	movs	r3, #0
 8009182:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	685b      	ldr	r3, [r3, #4]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d006      	beq.n	800919c <pcb_new+0x24>
 800918e:	4b2b      	ldr	r3, [pc, #172]	; (800923c <pcb_new+0xc4>)
 8009190:	f240 2265 	movw	r2, #613	; 0x265
 8009194:	492a      	ldr	r1, [pc, #168]	; (8009240 <pcb_new+0xc8>)
 8009196:	482b      	ldr	r0, [pc, #172]	; (8009244 <pcb_new+0xcc>)
 8009198:	f00f fcfe 	bl	8018b98 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	781b      	ldrb	r3, [r3, #0]
 80091a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80091a6:	2b10      	cmp	r3, #16
 80091a8:	d022      	beq.n	80091f0 <pcb_new+0x78>
 80091aa:	2b20      	cmp	r3, #32
 80091ac:	d133      	bne.n	8009216 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681c      	ldr	r4, [r3, #0]
 80091b2:	7bfb      	ldrb	r3, [r7, #15]
 80091b4:	4618      	mov	r0, r3
 80091b6:	f00b f83a 	bl	801422e <udp_new_ip_type>
 80091ba:	4603      	mov	r3, r0
 80091bc:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	685b      	ldr	r3, [r3, #4]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d02a      	beq.n	800921e <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	781b      	ldrb	r3, [r3, #0]
 80091ce:	2b22      	cmp	r3, #34	; 0x22
 80091d0:	d104      	bne.n	80091dc <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	685b      	ldr	r3, [r3, #4]
 80091d8:	2201      	movs	r2, #1
 80091da:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	6858      	ldr	r0, [r3, #4]
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	461a      	mov	r2, r3
 80091e8:	4917      	ldr	r1, [pc, #92]	; (8009248 <pcb_new+0xd0>)
 80091ea:	f00a ffa7 	bl	801413c <udp_recv>
      }
      break;
 80091ee:	e016      	b.n	800921e <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681c      	ldr	r4, [r3, #0]
 80091f4:	7bfb      	ldrb	r3, [r7, #15]
 80091f6:	4618      	mov	r0, r3
 80091f8:	f005 fd64 	bl	800ecc4 <tcp_new_ip_type>
 80091fc:	4603      	mov	r3, r0
 80091fe:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	685b      	ldr	r3, [r3, #4]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d00b      	beq.n	8009222 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	4618      	mov	r0, r3
 8009210:	f7ff fece 	bl	8008fb0 <setup_tcp>
      }
      break;
 8009214:	e005      	b.n	8009222 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	22fa      	movs	r2, #250	; 0xfa
 800921a:	711a      	strb	r2, [r3, #4]
      return;
 800921c:	e00a      	b.n	8009234 <pcb_new+0xbc>
      break;
 800921e:	bf00      	nop
 8009220:	e000      	b.n	8009224 <pcb_new+0xac>
      break;
 8009222:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	685b      	ldr	r3, [r3, #4]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d102      	bne.n	8009234 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	22ff      	movs	r2, #255	; 0xff
 8009232:	711a      	strb	r2, [r3, #4]
  }
}
 8009234:	3714      	adds	r7, #20
 8009236:	46bd      	mov	sp, r7
 8009238:	bd90      	pop	{r4, r7, pc}
 800923a:	bf00      	nop
 800923c:	0801a41c 	.word	0x0801a41c
 8009240:	0801a600 	.word	0x0801a600
 8009244:	0801a460 	.word	0x0801a460
 8009248:	08008a8d 	.word	0x08008a8d

0800924c <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b084      	sub	sp, #16
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	2200      	movs	r2, #0
 800925c:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	685b      	ldr	r3, [r3, #4]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d102      	bne.n	800926e <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8009268:	68f8      	ldr	r0, [r7, #12]
 800926a:	f7ff ff85 	bl	8009178 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800926e:	bf00      	nop
 8009270:	3710      	adds	r7, #16
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}
	...

08009278 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b086      	sub	sp, #24
 800927c:	af00      	add	r7, sp, #0
 800927e:	4603      	mov	r3, r0
 8009280:	6039      	str	r1, [r7, #0]
 8009282:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8009284:	2300      	movs	r3, #0
 8009286:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8009288:	2007      	movs	r0, #7
 800928a:	f002 fe2d 	bl	800bee8 <memp_malloc>
 800928e:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d101      	bne.n	800929a <netconn_alloc+0x22>
    return NULL;
 8009296:	2300      	movs	r3, #0
 8009298:	e052      	b.n	8009340 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	2200      	movs	r2, #0
 800929e:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	79fa      	ldrb	r2, [r7, #7]
 80092a4:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	2200      	movs	r2, #0
 80092aa:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 80092ac:	79fb      	ldrb	r3, [r7, #7]
 80092ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80092b2:	2b10      	cmp	r3, #16
 80092b4:	d004      	beq.n	80092c0 <netconn_alloc+0x48>
 80092b6:	2b20      	cmp	r3, #32
 80092b8:	d105      	bne.n	80092c6 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 80092ba:	2306      	movs	r3, #6
 80092bc:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 80092be:	e00a      	b.n	80092d6 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 80092c0:	2306      	movs	r3, #6
 80092c2:	617b      	str	r3, [r7, #20]
      break;
 80092c4:	e007      	b.n	80092d6 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 80092c6:	4b20      	ldr	r3, [pc, #128]	; (8009348 <netconn_alloc+0xd0>)
 80092c8:	f240 22e5 	movw	r2, #741	; 0x2e5
 80092cc:	491f      	ldr	r1, [pc, #124]	; (800934c <netconn_alloc+0xd4>)
 80092ce:	4820      	ldr	r0, [pc, #128]	; (8009350 <netconn_alloc+0xd8>)
 80092d0:	f00f fc62 	bl	8018b98 <iprintf>
      goto free_and_return;
 80092d4:	e02f      	b.n	8009336 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	3310      	adds	r3, #16
 80092da:	6979      	ldr	r1, [r7, #20]
 80092dc:	4618      	mov	r0, r3
 80092de:	f00f f95d 	bl	801859c <sys_mbox_new>
 80092e2:	4603      	mov	r3, r0
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d125      	bne.n	8009334 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	330c      	adds	r3, #12
 80092ec:	2100      	movs	r1, #0
 80092ee:	4618      	mov	r0, r3
 80092f0:	f00f fa1b 	bl	801872a <sys_sem_new>
 80092f4:	4603      	mov	r3, r0
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d005      	beq.n	8009306 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	3310      	adds	r3, #16
 80092fe:	4618      	mov	r0, r3
 8009300:	f00f f96e 	bl	80185e0 <sys_mbox_free>
    goto free_and_return;
 8009304:	e017      	b.n	8009336 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	3314      	adds	r3, #20
 800930a:	4618      	mov	r0, r3
 800930c:	f00f fa00 	bl	8018710 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	2200      	movs	r2, #0
 8009314:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	f04f 32ff 	mov.w	r2, #4294967295
 800931c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	683a      	ldr	r2, [r7, #0]
 8009322:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	2200      	movs	r2, #0
 8009328:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	7cfa      	ldrb	r2, [r7, #19]
 800932e:	771a      	strb	r2, [r3, #28]
  return conn;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	e005      	b.n	8009340 <netconn_alloc+0xc8>
    goto free_and_return;
 8009334:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8009336:	68f9      	ldr	r1, [r7, #12]
 8009338:	2007      	movs	r0, #7
 800933a:	f002 fe4b 	bl	800bfd4 <memp_free>
  return NULL;
 800933e:	2300      	movs	r3, #0
}
 8009340:	4618      	mov	r0, r3
 8009342:	3718      	adds	r7, #24
 8009344:	46bd      	mov	sp, r7
 8009346:	bd80      	pop	{r7, pc}
 8009348:	0801a41c 	.word	0x0801a41c
 800934c:	0801a620 	.word	0x0801a620
 8009350:	0801a460 	.word	0x0801a460

08009354 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b082      	sub	sp, #8
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	685b      	ldr	r3, [r3, #4]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d006      	beq.n	8009372 <netconn_free+0x1e>
 8009364:	4b1b      	ldr	r3, [pc, #108]	; (80093d4 <netconn_free+0x80>)
 8009366:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800936a:	491b      	ldr	r1, [pc, #108]	; (80093d8 <netconn_free+0x84>)
 800936c:	481b      	ldr	r0, [pc, #108]	; (80093dc <netconn_free+0x88>)
 800936e:	f00f fc13 	bl	8018b98 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	3310      	adds	r3, #16
 8009376:	4618      	mov	r0, r3
 8009378:	f00f f9b9 	bl	80186ee <sys_mbox_valid>
 800937c:	4603      	mov	r3, r0
 800937e:	2b00      	cmp	r3, #0
 8009380:	d006      	beq.n	8009390 <netconn_free+0x3c>
 8009382:	4b14      	ldr	r3, [pc, #80]	; (80093d4 <netconn_free+0x80>)
 8009384:	f240 3223 	movw	r2, #803	; 0x323
 8009388:	4915      	ldr	r1, [pc, #84]	; (80093e0 <netconn_free+0x8c>)
 800938a:	4814      	ldr	r0, [pc, #80]	; (80093dc <netconn_free+0x88>)
 800938c:	f00f fc04 	bl	8018b98 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	3314      	adds	r3, #20
 8009394:	4618      	mov	r0, r3
 8009396:	f00f f9aa 	bl	80186ee <sys_mbox_valid>
 800939a:	4603      	mov	r3, r0
 800939c:	2b00      	cmp	r3, #0
 800939e:	d006      	beq.n	80093ae <netconn_free+0x5a>
 80093a0:	4b0c      	ldr	r3, [pc, #48]	; (80093d4 <netconn_free+0x80>)
 80093a2:	f240 3226 	movw	r2, #806	; 0x326
 80093a6:	490f      	ldr	r1, [pc, #60]	; (80093e4 <netconn_free+0x90>)
 80093a8:	480c      	ldr	r0, [pc, #48]	; (80093dc <netconn_free+0x88>)
 80093aa:	f00f fbf5 	bl	8018b98 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	330c      	adds	r3, #12
 80093b2:	4618      	mov	r0, r3
 80093b4:	f00f fa1f 	bl	80187f6 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	330c      	adds	r3, #12
 80093bc:	4618      	mov	r0, r3
 80093be:	f00f fa38 	bl	8018832 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 80093c2:	6879      	ldr	r1, [r7, #4]
 80093c4:	2007      	movs	r0, #7
 80093c6:	f002 fe05 	bl	800bfd4 <memp_free>
}
 80093ca:	bf00      	nop
 80093cc:	3708      	adds	r7, #8
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bd80      	pop	{r7, pc}
 80093d2:	bf00      	nop
 80093d4:	0801a41c 	.word	0x0801a41c
 80093d8:	0801a648 	.word	0x0801a648
 80093dc:	0801a460 	.word	0x0801a460
 80093e0:	0801a678 	.word	0x0801a678
 80093e4:	0801a6b4 	.word	0x0801a6b4

080093e8 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b086      	sub	sp, #24
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	3310      	adds	r3, #16
 80093f4:	4618      	mov	r0, r3
 80093f6:	f00f f97a 	bl	80186ee <sys_mbox_valid>
 80093fa:	4603      	mov	r3, r0
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d02f      	beq.n	8009460 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8009400:	e018      	b.n	8009434 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	781b      	ldrb	r3, [r3, #0]
 8009406:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800940a:	2b10      	cmp	r3, #16
 800940c:	d10e      	bne.n	800942c <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800940e:	693b      	ldr	r3, [r7, #16]
 8009410:	f107 020f 	add.w	r2, r7, #15
 8009414:	4611      	mov	r1, r2
 8009416:	4618      	mov	r0, r3
 8009418:	f7ff fafe 	bl	8008a18 <lwip_netconn_is_err_msg>
 800941c:	4603      	mov	r3, r0
 800941e:	2b00      	cmp	r3, #0
 8009420:	d108      	bne.n	8009434 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 8009422:	693b      	ldr	r3, [r7, #16]
 8009424:	4618      	mov	r0, r3
 8009426:	f003 fc85 	bl	800cd34 <pbuf_free>
 800942a:	e003      	b.n	8009434 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800942c:	693b      	ldr	r3, [r7, #16]
 800942e:	4618      	mov	r0, r3
 8009430:	f000 ffe0 	bl	800a3f4 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	3310      	adds	r3, #16
 8009438:	f107 0210 	add.w	r2, r7, #16
 800943c:	4611      	mov	r1, r2
 800943e:	4618      	mov	r0, r3
 8009440:	f00f f939 	bl	80186b6 <sys_arch_mbox_tryfetch>
 8009444:	4603      	mov	r3, r0
 8009446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800944a:	d1da      	bne.n	8009402 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	3310      	adds	r3, #16
 8009450:	4618      	mov	r0, r3
 8009452:	f00f f8c5 	bl	80185e0 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	3310      	adds	r3, #16
 800945a:	4618      	mov	r0, r3
 800945c:	f00f f958 	bl	8018710 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	3314      	adds	r3, #20
 8009464:	4618      	mov	r0, r3
 8009466:	f00f f942 	bl	80186ee <sys_mbox_valid>
 800946a:	4603      	mov	r3, r0
 800946c:	2b00      	cmp	r3, #0
 800946e:	d034      	beq.n	80094da <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8009470:	e01d      	b.n	80094ae <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8009472:	693b      	ldr	r3, [r7, #16]
 8009474:	f107 020e 	add.w	r2, r7, #14
 8009478:	4611      	mov	r1, r2
 800947a:	4618      	mov	r0, r3
 800947c:	f7ff facc 	bl	8008a18 <lwip_netconn_is_err_msg>
 8009480:	4603      	mov	r3, r0
 8009482:	2b00      	cmp	r3, #0
 8009484:	d113      	bne.n	80094ae <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 8009486:	693b      	ldr	r3, [r7, #16]
 8009488:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800948a:	6978      	ldr	r0, [r7, #20]
 800948c:	f7ff ffac 	bl	80093e8 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8009490:	697b      	ldr	r3, [r7, #20]
 8009492:	685b      	ldr	r3, [r3, #4]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d007      	beq.n	80094a8 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 8009498:	697b      	ldr	r3, [r7, #20]
 800949a:	685b      	ldr	r3, [r3, #4]
 800949c:	4618      	mov	r0, r3
 800949e:	f004 fa49 	bl	800d934 <tcp_abort>
            newconn->pcb.tcp = NULL;
 80094a2:	697b      	ldr	r3, [r7, #20]
 80094a4:	2200      	movs	r2, #0
 80094a6:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 80094a8:	6978      	ldr	r0, [r7, #20]
 80094aa:	f7ff ff53 	bl	8009354 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	3314      	adds	r3, #20
 80094b2:	f107 0210 	add.w	r2, r7, #16
 80094b6:	4611      	mov	r1, r2
 80094b8:	4618      	mov	r0, r3
 80094ba:	f00f f8fc 	bl	80186b6 <sys_arch_mbox_tryfetch>
 80094be:	4603      	mov	r3, r0
 80094c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094c4:	d1d5      	bne.n	8009472 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	3314      	adds	r3, #20
 80094ca:	4618      	mov	r0, r3
 80094cc:	f00f f888 	bl	80185e0 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	3314      	adds	r3, #20
 80094d4:	4618      	mov	r0, r3
 80094d6:	f00f f91b 	bl	8018710 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 80094da:	bf00      	nop
 80094dc:	3718      	adds	r7, #24
 80094de:	46bd      	mov	sp, r7
 80094e0:	bd80      	pop	{r7, pc}
	...

080094e4 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b086      	sub	sp, #24
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
 80094ec:	460b      	mov	r3, r1
 80094ee:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 80094f0:	2300      	movs	r3, #0
 80094f2:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d106      	bne.n	8009508 <lwip_netconn_do_close_internal+0x24>
 80094fa:	4b87      	ldr	r3, [pc, #540]	; (8009718 <lwip_netconn_do_close_internal+0x234>)
 80094fc:	f240 32a2 	movw	r2, #930	; 0x3a2
 8009500:	4986      	ldr	r1, [pc, #536]	; (800971c <lwip_netconn_do_close_internal+0x238>)
 8009502:	4887      	ldr	r0, [pc, #540]	; (8009720 <lwip_netconn_do_close_internal+0x23c>)
 8009504:	f00f fb48 	bl	8018b98 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	781b      	ldrb	r3, [r3, #0]
 800950c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009510:	2b10      	cmp	r3, #16
 8009512:	d006      	beq.n	8009522 <lwip_netconn_do_close_internal+0x3e>
 8009514:	4b80      	ldr	r3, [pc, #512]	; (8009718 <lwip_netconn_do_close_internal+0x234>)
 8009516:	f240 32a3 	movw	r2, #931	; 0x3a3
 800951a:	4982      	ldr	r1, [pc, #520]	; (8009724 <lwip_netconn_do_close_internal+0x240>)
 800951c:	4880      	ldr	r0, [pc, #512]	; (8009720 <lwip_netconn_do_close_internal+0x23c>)
 800951e:	f00f fb3b 	bl	8018b98 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	785b      	ldrb	r3, [r3, #1]
 8009526:	2b04      	cmp	r3, #4
 8009528:	d006      	beq.n	8009538 <lwip_netconn_do_close_internal+0x54>
 800952a:	4b7b      	ldr	r3, [pc, #492]	; (8009718 <lwip_netconn_do_close_internal+0x234>)
 800952c:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 8009530:	497d      	ldr	r1, [pc, #500]	; (8009728 <lwip_netconn_do_close_internal+0x244>)
 8009532:	487b      	ldr	r0, [pc, #492]	; (8009720 <lwip_netconn_do_close_internal+0x23c>)
 8009534:	f00f fb30 	bl	8018b98 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	685b      	ldr	r3, [r3, #4]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d106      	bne.n	800954e <lwip_netconn_do_close_internal+0x6a>
 8009540:	4b75      	ldr	r3, [pc, #468]	; (8009718 <lwip_netconn_do_close_internal+0x234>)
 8009542:	f240 32a5 	movw	r2, #933	; 0x3a5
 8009546:	4979      	ldr	r1, [pc, #484]	; (800972c <lwip_netconn_do_close_internal+0x248>)
 8009548:	4875      	ldr	r0, [pc, #468]	; (8009720 <lwip_netconn_do_close_internal+0x23c>)
 800954a:	f00f fb25 	bl	8018b98 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	6a1b      	ldr	r3, [r3, #32]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d106      	bne.n	8009564 <lwip_netconn_do_close_internal+0x80>
 8009556:	4b70      	ldr	r3, [pc, #448]	; (8009718 <lwip_netconn_do_close_internal+0x234>)
 8009558:	f240 32a6 	movw	r2, #934	; 0x3a6
 800955c:	4974      	ldr	r1, [pc, #464]	; (8009730 <lwip_netconn_do_close_internal+0x24c>)
 800955e:	4870      	ldr	r0, [pc, #448]	; (8009720 <lwip_netconn_do_close_internal+0x23c>)
 8009560:	f00f fb1a 	bl	8018b98 <iprintf>

  tpcb = conn->pcb.tcp;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	685b      	ldr	r3, [r3, #4]
 8009568:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6a1b      	ldr	r3, [r3, #32]
 800956e:	7a1b      	ldrb	r3, [r3, #8]
 8009570:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 8009572:	7bfb      	ldrb	r3, [r7, #15]
 8009574:	f003 0301 	and.w	r3, r3, #1
 8009578:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800957a:	7bfb      	ldrb	r3, [r7, #15]
 800957c:	f003 0302 	and.w	r3, r3, #2
 8009580:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 8009582:	7bfb      	ldrb	r3, [r7, #15]
 8009584:	2b03      	cmp	r3, #3
 8009586:	d102      	bne.n	800958e <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 8009588:	2301      	movs	r3, #1
 800958a:	75bb      	strb	r3, [r7, #22]
 800958c:	e01f      	b.n	80095ce <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800958e:	7bbb      	ldrb	r3, [r7, #14]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d00e      	beq.n	80095b2 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8009594:	693b      	ldr	r3, [r7, #16]
 8009596:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8009598:	2b05      	cmp	r3, #5
 800959a:	d007      	beq.n	80095ac <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800959c:	693b      	ldr	r3, [r7, #16]
 800959e:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 80095a0:	2b06      	cmp	r3, #6
 80095a2:	d003      	beq.n	80095ac <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 80095a4:	693b      	ldr	r3, [r7, #16]
 80095a6:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 80095a8:	2b08      	cmp	r3, #8
 80095aa:	d102      	bne.n	80095b2 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 80095ac:	2301      	movs	r3, #1
 80095ae:	75bb      	strb	r3, [r7, #22]
 80095b0:	e00d      	b.n	80095ce <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 80095b2:	7b7b      	ldrb	r3, [r7, #13]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d008      	beq.n	80095ca <lwip_netconn_do_close_internal+0xe6>
 80095b8:	693b      	ldr	r3, [r7, #16]
 80095ba:	8b5b      	ldrh	r3, [r3, #26]
 80095bc:	f003 0310 	and.w	r3, r3, #16
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d002      	beq.n	80095ca <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 80095c4:	2301      	movs	r3, #1
 80095c6:	75bb      	strb	r3, [r7, #22]
 80095c8:	e001      	b.n	80095ce <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 80095ca:	2300      	movs	r3, #0
 80095cc:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 80095ce:	7dbb      	ldrb	r3, [r7, #22]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d003      	beq.n	80095dc <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 80095d4:	2100      	movs	r1, #0
 80095d6:	6938      	ldr	r0, [r7, #16]
 80095d8:	f005 fb82 	bl	800ece0 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 80095dc:	693b      	ldr	r3, [r7, #16]
 80095de:	7d1b      	ldrb	r3, [r3, #20]
 80095e0:	2b01      	cmp	r3, #1
 80095e2:	d104      	bne.n	80095ee <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 80095e4:	2100      	movs	r1, #0
 80095e6:	6938      	ldr	r0, [r7, #16]
 80095e8:	f005 fbf2 	bl	800edd0 <tcp_accept>
 80095ec:	e01d      	b.n	800962a <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 80095ee:	7bbb      	ldrb	r3, [r7, #14]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d007      	beq.n	8009604 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 80095f4:	2100      	movs	r1, #0
 80095f6:	6938      	ldr	r0, [r7, #16]
 80095f8:	f005 fb84 	bl	800ed04 <tcp_recv>
      tcp_accept(tpcb, NULL);
 80095fc:	2100      	movs	r1, #0
 80095fe:	6938      	ldr	r0, [r7, #16]
 8009600:	f005 fbe6 	bl	800edd0 <tcp_accept>
    }
    if (shut_tx) {
 8009604:	7b7b      	ldrb	r3, [r7, #13]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d003      	beq.n	8009612 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800960a:	2100      	movs	r1, #0
 800960c:	6938      	ldr	r0, [r7, #16]
 800960e:	f005 fb9b 	bl	800ed48 <tcp_sent>
    }
    if (shut_close) {
 8009612:	7dbb      	ldrb	r3, [r7, #22]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d008      	beq.n	800962a <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8009618:	2200      	movs	r2, #0
 800961a:	2100      	movs	r1, #0
 800961c:	6938      	ldr	r0, [r7, #16]
 800961e:	f005 fbef 	bl	800ee00 <tcp_poll>
      tcp_err(tpcb, NULL);
 8009622:	2100      	movs	r1, #0
 8009624:	6938      	ldr	r0, [r7, #16]
 8009626:	f005 fbb1 	bl	800ed8c <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800962a:	7dbb      	ldrb	r3, [r7, #22]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d005      	beq.n	800963c <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8009630:	6938      	ldr	r0, [r7, #16]
 8009632:	f004 f839 	bl	800d6a8 <tcp_close>
 8009636:	4603      	mov	r3, r0
 8009638:	75fb      	strb	r3, [r7, #23]
 800963a:	e007      	b.n	800964c <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800963c:	7bbb      	ldrb	r3, [r7, #14]
 800963e:	7b7a      	ldrb	r2, [r7, #13]
 8009640:	4619      	mov	r1, r3
 8009642:	6938      	ldr	r0, [r7, #16]
 8009644:	f004 f85c 	bl	800d700 <tcp_shutdown>
 8009648:	4603      	mov	r3, r0
 800964a:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800964c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d102      	bne.n	800965a <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8009654:	2301      	movs	r3, #1
 8009656:	757b      	strb	r3, [r7, #21]
 8009658:	e016      	b.n	8009688 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800965a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800965e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009662:	d10f      	bne.n	8009684 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6a1b      	ldr	r3, [r3, #32]
 8009668:	7a5b      	ldrb	r3, [r3, #9]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d10c      	bne.n	8009688 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800966e:	2301      	movs	r3, #1
 8009670:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 8009672:	7dbb      	ldrb	r3, [r7, #22]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d007      	beq.n	8009688 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8009678:	6938      	ldr	r0, [r7, #16]
 800967a:	f004 f95b 	bl	800d934 <tcp_abort>
          err = ERR_OK;
 800967e:	2300      	movs	r3, #0
 8009680:	75fb      	strb	r3, [r7, #23]
 8009682:	e001      	b.n	8009688 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8009684:	2301      	movs	r3, #1
 8009686:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 8009688:	7d7b      	ldrb	r3, [r7, #21]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d052      	beq.n	8009734 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6a1b      	ldr	r3, [r3, #32]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	330c      	adds	r3, #12
 8009696:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	6a1b      	ldr	r3, [r3, #32]
 800969c:	7dfa      	ldrb	r2, [r7, #23]
 800969e:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2200      	movs	r2, #0
 80096a4:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2200      	movs	r2, #0
 80096aa:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 80096ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d129      	bne.n	8009708 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 80096b4:	7dbb      	ldrb	r3, [r7, #22]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d00c      	beq.n	80096d4 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2200      	movs	r2, #0
 80096be:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d005      	beq.n	80096d4 <lwip_netconn_do_close_internal+0x1f0>
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096cc:	2200      	movs	r2, #0
 80096ce:	2104      	movs	r1, #4
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	4798      	blx	r3
      }
      if (shut_rx) {
 80096d4:	7bbb      	ldrb	r3, [r7, #14]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d009      	beq.n	80096ee <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d005      	beq.n	80096ee <lwip_netconn_do_close_internal+0x20a>
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096e6:	2200      	movs	r2, #0
 80096e8:	2100      	movs	r1, #0
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	4798      	blx	r3
      }
      if (shut_tx) {
 80096ee:	7b7b      	ldrb	r3, [r7, #13]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d009      	beq.n	8009708 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d005      	beq.n	8009708 <lwip_netconn_do_close_internal+0x224>
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009700:	2200      	movs	r2, #0
 8009702:	2102      	movs	r1, #2
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8009708:	78fb      	ldrb	r3, [r7, #3]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d002      	beq.n	8009714 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800970e:	68b8      	ldr	r0, [r7, #8]
 8009710:	f00f f864 	bl	80187dc <sys_sem_signal>
    }
    return ERR_OK;
 8009714:	2300      	movs	r3, #0
 8009716:	e03c      	b.n	8009792 <lwip_netconn_do_close_internal+0x2ae>
 8009718:	0801a41c 	.word	0x0801a41c
 800971c:	0801a6f0 	.word	0x0801a6f0
 8009720:	0801a460 	.word	0x0801a460
 8009724:	0801a700 	.word	0x0801a700
 8009728:	0801a720 	.word	0x0801a720
 800972c:	0801a744 	.word	0x0801a744
 8009730:	0801a584 	.word	0x0801a584
  }
  if (!close_finished) {
 8009734:	7d7b      	ldrb	r3, [r7, #21]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d11e      	bne.n	8009778 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800973a:	693b      	ldr	r3, [r7, #16]
 800973c:	7d1b      	ldrb	r3, [r3, #20]
 800973e:	2b01      	cmp	r3, #1
 8009740:	d106      	bne.n	8009750 <lwip_netconn_do_close_internal+0x26c>
 8009742:	4b16      	ldr	r3, [pc, #88]	; (800979c <lwip_netconn_do_close_internal+0x2b8>)
 8009744:	f240 4241 	movw	r2, #1089	; 0x441
 8009748:	4915      	ldr	r1, [pc, #84]	; (80097a0 <lwip_netconn_do_close_internal+0x2bc>)
 800974a:	4816      	ldr	r0, [pc, #88]	; (80097a4 <lwip_netconn_do_close_internal+0x2c0>)
 800974c:	f00f fa24 	bl	8018b98 <iprintf>
    if (shut_tx) {
 8009750:	7b7b      	ldrb	r3, [r7, #13]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d003      	beq.n	800975e <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 8009756:	4914      	ldr	r1, [pc, #80]	; (80097a8 <lwip_netconn_do_close_internal+0x2c4>)
 8009758:	6938      	ldr	r0, [r7, #16]
 800975a:	f005 faf5 	bl	800ed48 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800975e:	2201      	movs	r2, #1
 8009760:	4912      	ldr	r1, [pc, #72]	; (80097ac <lwip_netconn_do_close_internal+0x2c8>)
 8009762:	6938      	ldr	r0, [r7, #16]
 8009764:	f005 fb4c 	bl	800ee00 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8009768:	4911      	ldr	r1, [pc, #68]	; (80097b0 <lwip_netconn_do_close_internal+0x2cc>)
 800976a:	6938      	ldr	r0, [r7, #16]
 800976c:	f005 fb0e 	bl	800ed8c <tcp_err>
    tcp_arg(tpcb, conn);
 8009770:	6879      	ldr	r1, [r7, #4]
 8009772:	6938      	ldr	r0, [r7, #16]
 8009774:	f005 fab4 	bl	800ece0 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8009778:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d106      	bne.n	800978e <lwip_netconn_do_close_internal+0x2aa>
 8009780:	4b06      	ldr	r3, [pc, #24]	; (800979c <lwip_netconn_do_close_internal+0x2b8>)
 8009782:	f240 424d 	movw	r2, #1101	; 0x44d
 8009786:	490b      	ldr	r1, [pc, #44]	; (80097b4 <lwip_netconn_do_close_internal+0x2d0>)
 8009788:	4806      	ldr	r0, [pc, #24]	; (80097a4 <lwip_netconn_do_close_internal+0x2c0>)
 800978a:	f00f fa05 	bl	8018b98 <iprintf>
  return err;
 800978e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009792:	4618      	mov	r0, r3
 8009794:	3718      	adds	r7, #24
 8009796:	46bd      	mov	sp, r7
 8009798:	bd80      	pop	{r7, pc}
 800979a:	bf00      	nop
 800979c:	0801a41c 	.word	0x0801a41c
 80097a0:	0801a758 	.word	0x0801a758
 80097a4:	0801a460 	.word	0x0801a460
 80097a8:	08008d5d 	.word	0x08008d5d
 80097ac:	08008c95 	.word	0x08008c95
 80097b0:	08008e05 	.word	0x08008e05
 80097b4:	0801a77c 	.word	0x0801a77c

080097b8 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b084      	sub	sp, #16
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	785b      	ldrb	r3, [r3, #1]
 80097ca:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 80097cc:	7afb      	ldrb	r3, [r7, #11]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d00d      	beq.n	80097ee <lwip_netconn_do_delconn+0x36>
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	781b      	ldrb	r3, [r3, #0]
 80097d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80097dc:	2b10      	cmp	r3, #16
 80097de:	d006      	beq.n	80097ee <lwip_netconn_do_delconn+0x36>
 80097e0:	4b60      	ldr	r3, [pc, #384]	; (8009964 <lwip_netconn_do_delconn+0x1ac>)
 80097e2:	f240 425e 	movw	r2, #1118	; 0x45e
 80097e6:	4960      	ldr	r1, [pc, #384]	; (8009968 <lwip_netconn_do_delconn+0x1b0>)
 80097e8:	4860      	ldr	r0, [pc, #384]	; (800996c <lwip_netconn_do_delconn+0x1b4>)
 80097ea:	f00f f9d5 	bl	8018b98 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 80097ee:	7afb      	ldrb	r3, [r7, #11]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d005      	beq.n	8009800 <lwip_netconn_do_delconn+0x48>
 80097f4:	7afb      	ldrb	r3, [r7, #11]
 80097f6:	2b02      	cmp	r3, #2
 80097f8:	d002      	beq.n	8009800 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 80097fa:	7afb      	ldrb	r3, [r7, #11]
 80097fc:	2b03      	cmp	r3, #3
 80097fe:	d109      	bne.n	8009814 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8009800:	7afb      	ldrb	r3, [r7, #11]
 8009802:	2b03      	cmp	r3, #3
 8009804:	d10a      	bne.n	800981c <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	7f1b      	ldrb	r3, [r3, #28]
 800980c:	f003 0304 	and.w	r3, r3, #4
 8009810:	2b00      	cmp	r3, #0
 8009812:	d103      	bne.n	800981c <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	22fb      	movs	r2, #251	; 0xfb
 8009818:	711a      	strb	r2, [r3, #4]
 800981a:	e097      	b.n	800994c <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800981c:	7afb      	ldrb	r3, [r7, #11]
 800981e:	2b03      	cmp	r3, #3
 8009820:	d10d      	bne.n	800983e <lwip_netconn_do_delconn+0x86>
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	7f1b      	ldrb	r3, [r3, #28]
 8009828:	f003 0304 	and.w	r3, r3, #4
 800982c:	2b00      	cmp	r3, #0
 800982e:	d106      	bne.n	800983e <lwip_netconn_do_delconn+0x86>
 8009830:	4b4c      	ldr	r3, [pc, #304]	; (8009964 <lwip_netconn_do_delconn+0x1ac>)
 8009832:	f240 427a 	movw	r2, #1146	; 0x47a
 8009836:	494e      	ldr	r1, [pc, #312]	; (8009970 <lwip_netconn_do_delconn+0x1b8>)
 8009838:	484c      	ldr	r0, [pc, #304]	; (800996c <lwip_netconn_do_delconn+0x1b4>)
 800983a:	f00f f9ad 	bl	8018b98 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	2200      	movs	r2, #0
 8009842:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	4618      	mov	r0, r3
 800984a:	f7ff fdcd 	bl	80093e8 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	685b      	ldr	r3, [r3, #4]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d05f      	beq.n	8009918 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	781b      	ldrb	r3, [r3, #0]
 800985e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009862:	2b10      	cmp	r3, #16
 8009864:	d00d      	beq.n	8009882 <lwip_netconn_do_delconn+0xca>
 8009866:	2b20      	cmp	r3, #32
 8009868:	d151      	bne.n	800990e <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	685b      	ldr	r3, [r3, #4]
 8009870:	2200      	movs	r2, #0
 8009872:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	685b      	ldr	r3, [r3, #4]
 800987a:	4618      	mov	r0, r3
 800987c:	f00a fc7e 	bl	801417c <udp_remove>
          break;
 8009880:	e046      	b.n	8009910 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	6a1b      	ldr	r3, [r3, #32]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d006      	beq.n	800989a <lwip_netconn_do_delconn+0xe2>
 800988c:	4b35      	ldr	r3, [pc, #212]	; (8009964 <lwip_netconn_do_delconn+0x1ac>)
 800988e:	f240 4294 	movw	r2, #1172	; 0x494
 8009892:	4938      	ldr	r1, [pc, #224]	; (8009974 <lwip_netconn_do_delconn+0x1bc>)
 8009894:	4835      	ldr	r0, [pc, #212]	; (800996c <lwip_netconn_do_delconn+0x1b4>)
 8009896:	f00f f97f 	bl	8018b98 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	2204      	movs	r2, #4
 80098a0:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	2203      	movs	r2, #3
 80098a6:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	68fa      	ldr	r2, [r7, #12]
 80098ae:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	2100      	movs	r1, #0
 80098b6:	4618      	mov	r0, r3
 80098b8:	f7ff fe14 	bl	80094e4 <lwip_netconn_do_close_internal>
 80098bc:	4603      	mov	r3, r0
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d04b      	beq.n	800995a <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	785b      	ldrb	r3, [r3, #1]
 80098c8:	2b04      	cmp	r3, #4
 80098ca:	d006      	beq.n	80098da <lwip_netconn_do_delconn+0x122>
 80098cc:	4b25      	ldr	r3, [pc, #148]	; (8009964 <lwip_netconn_do_delconn+0x1ac>)
 80098ce:	f240 429a 	movw	r2, #1178	; 0x49a
 80098d2:	4929      	ldr	r1, [pc, #164]	; (8009978 <lwip_netconn_do_delconn+0x1c0>)
 80098d4:	4825      	ldr	r0, [pc, #148]	; (800996c <lwip_netconn_do_delconn+0x1b4>)
 80098d6:	f00f f95f 	bl	8018b98 <iprintf>
            UNLOCK_TCPIP_CORE();
 80098da:	4828      	ldr	r0, [pc, #160]	; (800997c <lwip_netconn_do_delconn+0x1c4>)
 80098dc:	f00e ffef 	bl	80188be <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	330c      	adds	r3, #12
 80098e6:	2100      	movs	r1, #0
 80098e8:	4618      	mov	r0, r3
 80098ea:	f00e ff46 	bl	801877a <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 80098ee:	4823      	ldr	r0, [pc, #140]	; (800997c <lwip_netconn_do_delconn+0x1c4>)
 80098f0:	f00e ffd6 	bl	80188a0 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	785b      	ldrb	r3, [r3, #1]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d02d      	beq.n	800995a <lwip_netconn_do_delconn+0x1a2>
 80098fe:	4b19      	ldr	r3, [pc, #100]	; (8009964 <lwip_netconn_do_delconn+0x1ac>)
 8009900:	f240 429e 	movw	r2, #1182	; 0x49e
 8009904:	491c      	ldr	r1, [pc, #112]	; (8009978 <lwip_netconn_do_delconn+0x1c0>)
 8009906:	4819      	ldr	r0, [pc, #100]	; (800996c <lwip_netconn_do_delconn+0x1b4>)
 8009908:	f00f f946 	bl	8018b98 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800990c:	e025      	b.n	800995a <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800990e:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	2200      	movs	r2, #0
 8009916:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800991e:	2b00      	cmp	r3, #0
 8009920:	d007      	beq.n	8009932 <lwip_netconn_do_delconn+0x17a>
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009928:	68fa      	ldr	r2, [r7, #12]
 800992a:	6810      	ldr	r0, [r2, #0]
 800992c:	2200      	movs	r2, #0
 800992e:	2100      	movs	r1, #0
 8009930:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009938:	2b00      	cmp	r3, #0
 800993a:	d007      	beq.n	800994c <lwip_netconn_do_delconn+0x194>
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009942:	68fa      	ldr	r2, [r7, #12]
 8009944:	6810      	ldr	r0, [r2, #0]
 8009946:	2200      	movs	r2, #0
 8009948:	2102      	movs	r1, #2
 800994a:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	330c      	adds	r3, #12
 8009952:	4618      	mov	r0, r3
 8009954:	f00e ff5c 	bl	8018810 <sys_sem_valid>
 8009958:	e000      	b.n	800995c <lwip_netconn_do_delconn+0x1a4>
          return;
 800995a:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800995c:	3710      	adds	r7, #16
 800995e:	46bd      	mov	sp, r7
 8009960:	bd80      	pop	{r7, pc}
 8009962:	bf00      	nop
 8009964:	0801a41c 	.word	0x0801a41c
 8009968:	0801a78c 	.word	0x0801a78c
 800996c:	0801a460 	.word	0x0801a460
 8009970:	0801a7a0 	.word	0x0801a7a0
 8009974:	0801a7c0 	.word	0x0801a7c0
 8009978:	0801a7dc 	.word	0x0801a7dc
 800997c:	2000d2b8 	.word	0x2000d2b8

08009980 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b084      	sub	sp, #16
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	685b      	ldr	r3, [r3, #4]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d025      	beq.n	80099e2 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009996:	68bb      	ldr	r3, [r7, #8]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	781b      	ldrb	r3, [r3, #0]
 800999c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80099a0:	2b10      	cmp	r3, #16
 80099a2:	d00e      	beq.n	80099c2 <lwip_netconn_do_bind+0x42>
 80099a4:	2b20      	cmp	r3, #32
 80099a6:	d119      	bne.n	80099dc <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 80099a8:	68bb      	ldr	r3, [r7, #8]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	6858      	ldr	r0, [r3, #4]
 80099ae:	68bb      	ldr	r3, [r7, #8]
 80099b0:	6899      	ldr	r1, [r3, #8]
 80099b2:	68bb      	ldr	r3, [r7, #8]
 80099b4:	899b      	ldrh	r3, [r3, #12]
 80099b6:	461a      	mov	r2, r3
 80099b8:	f00a faca 	bl	8013f50 <udp_bind>
 80099bc:	4603      	mov	r3, r0
 80099be:	73fb      	strb	r3, [r7, #15]
        break;
 80099c0:	e011      	b.n	80099e6 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 80099c2:	68bb      	ldr	r3, [r7, #8]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	6858      	ldr	r0, [r3, #4]
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	6899      	ldr	r1, [r3, #8]
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	899b      	ldrh	r3, [r3, #12]
 80099d0:	461a      	mov	r2, r3
 80099d2:	f003 ffbb 	bl	800d94c <tcp_bind>
 80099d6:	4603      	mov	r3, r0
 80099d8:	73fb      	strb	r3, [r7, #15]
        break;
 80099da:	e004      	b.n	80099e6 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 80099dc:	23fa      	movs	r3, #250	; 0xfa
 80099de:	73fb      	strb	r3, [r7, #15]
        break;
 80099e0:	e001      	b.n	80099e6 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 80099e2:	23fa      	movs	r3, #250	; 0xfa
 80099e4:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 80099e6:	68bb      	ldr	r3, [r7, #8]
 80099e8:	7bfa      	ldrb	r2, [r7, #15]
 80099ea:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 80099ec:	bf00      	nop
 80099ee:	3710      	adds	r7, #16
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}

080099f4 <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b088      	sub	sp, #32
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	60f8      	str	r0, [r7, #12]
 80099fc:	60b9      	str	r1, [r7, #8]
 80099fe:	4613      	mov	r3, r2
 8009a00:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t *op_completed_sem = NULL;
 8009a02:	2300      	movs	r3, #0
 8009a04:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 8009a0a:	69bb      	ldr	r3, [r7, #24]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d102      	bne.n	8009a16 <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 8009a10:	f06f 0305 	mvn.w	r3, #5
 8009a14:	e070      	b.n	8009af8 <lwip_netconn_do_connected+0x104>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 8009a16:	69bb      	ldr	r3, [r7, #24]
 8009a18:	785b      	ldrb	r3, [r3, #1]
 8009a1a:	2b03      	cmp	r3, #3
 8009a1c:	d006      	beq.n	8009a2c <lwip_netconn_do_connected+0x38>
 8009a1e:	4b38      	ldr	r3, [pc, #224]	; (8009b00 <lwip_netconn_do_connected+0x10c>)
 8009a20:	f240 5223 	movw	r2, #1315	; 0x523
 8009a24:	4937      	ldr	r1, [pc, #220]	; (8009b04 <lwip_netconn_do_connected+0x110>)
 8009a26:	4838      	ldr	r0, [pc, #224]	; (8009b08 <lwip_netconn_do_connected+0x114>)
 8009a28:	f00f f8b6 	bl	8018b98 <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 8009a2c:	69bb      	ldr	r3, [r7, #24]
 8009a2e:	6a1b      	ldr	r3, [r3, #32]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d10c      	bne.n	8009a4e <lwip_netconn_do_connected+0x5a>
 8009a34:	69bb      	ldr	r3, [r7, #24]
 8009a36:	7f1b      	ldrb	r3, [r3, #28]
 8009a38:	f003 0304 	and.w	r3, r3, #4
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d106      	bne.n	8009a4e <lwip_netconn_do_connected+0x5a>
 8009a40:	4b2f      	ldr	r3, [pc, #188]	; (8009b00 <lwip_netconn_do_connected+0x10c>)
 8009a42:	f240 5224 	movw	r2, #1316	; 0x524
 8009a46:	4931      	ldr	r1, [pc, #196]	; (8009b0c <lwip_netconn_do_connected+0x118>)
 8009a48:	482f      	ldr	r0, [pc, #188]	; (8009b08 <lwip_netconn_do_connected+0x114>)
 8009a4a:	f00f f8a5 	bl	8018b98 <iprintf>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 8009a4e:	69bb      	ldr	r3, [r7, #24]
 8009a50:	6a1b      	ldr	r3, [r3, #32]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d008      	beq.n	8009a68 <lwip_netconn_do_connected+0x74>
    conn->current_msg->err = err;
 8009a56:	69bb      	ldr	r3, [r7, #24]
 8009a58:	6a1b      	ldr	r3, [r3, #32]
 8009a5a:	79fa      	ldrb	r2, [r7, #7]
 8009a5c:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009a5e:	69bb      	ldr	r3, [r7, #24]
 8009a60:	6a1b      	ldr	r3, [r3, #32]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	330c      	adds	r3, #12
 8009a66:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 8009a68:	69bb      	ldr	r3, [r7, #24]
 8009a6a:	781b      	ldrb	r3, [r3, #0]
 8009a6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009a70:	2b10      	cmp	r3, #16
 8009a72:	d106      	bne.n	8009a82 <lwip_netconn_do_connected+0x8e>
 8009a74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d102      	bne.n	8009a82 <lwip_netconn_do_connected+0x8e>
    setup_tcp(conn);
 8009a7c:	69b8      	ldr	r0, [r7, #24]
 8009a7e:	f7ff fa97 	bl	8008fb0 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 8009a82:	69bb      	ldr	r3, [r7, #24]
 8009a84:	7f1b      	ldrb	r3, [r3, #28]
 8009a86:	f003 0304 	and.w	r3, r3, #4
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	bf0c      	ite	eq
 8009a8e:	2301      	moveq	r3, #1
 8009a90:	2300      	movne	r3, #0
 8009a92:	b2db      	uxtb	r3, r3
 8009a94:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 8009a96:	69bb      	ldr	r3, [r7, #24]
 8009a98:	7f1b      	ldrb	r3, [r3, #28]
 8009a9a:	f023 0304 	bic.w	r3, r3, #4
 8009a9e:	b2da      	uxtb	r2, r3
 8009aa0:	69bb      	ldr	r3, [r7, #24]
 8009aa2:	771a      	strb	r2, [r3, #28]
  LWIP_ASSERT("blocking connect state error",
 8009aa4:	697b      	ldr	r3, [r7, #20]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d002      	beq.n	8009ab0 <lwip_netconn_do_connected+0xbc>
 8009aaa:	69fb      	ldr	r3, [r7, #28]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d10c      	bne.n	8009aca <lwip_netconn_do_connected+0xd6>
 8009ab0:	697b      	ldr	r3, [r7, #20]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d102      	bne.n	8009abc <lwip_netconn_do_connected+0xc8>
 8009ab6:	69fb      	ldr	r3, [r7, #28]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d006      	beq.n	8009aca <lwip_netconn_do_connected+0xd6>
 8009abc:	4b10      	ldr	r3, [pc, #64]	; (8009b00 <lwip_netconn_do_connected+0x10c>)
 8009abe:	f44f 62a6 	mov.w	r2, #1328	; 0x530
 8009ac2:	4913      	ldr	r1, [pc, #76]	; (8009b10 <lwip_netconn_do_connected+0x11c>)
 8009ac4:	4810      	ldr	r0, [pc, #64]	; (8009b08 <lwip_netconn_do_connected+0x114>)
 8009ac6:	f00f f867 	bl	8018b98 <iprintf>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 8009aca:	69bb      	ldr	r3, [r7, #24]
 8009acc:	2200      	movs	r2, #0
 8009ace:	621a      	str	r2, [r3, #32]
  conn->state = NETCONN_NONE;
 8009ad0:	69bb      	ldr	r3, [r7, #24]
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	705a      	strb	r2, [r3, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009ad6:	69bb      	ldr	r3, [r7, #24]
 8009ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d005      	beq.n	8009aea <lwip_netconn_do_connected+0xf6>
 8009ade:	69bb      	ldr	r3, [r7, #24]
 8009ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	2102      	movs	r1, #2
 8009ae6:	69b8      	ldr	r0, [r7, #24]
 8009ae8:	4798      	blx	r3

  if (was_blocking) {
 8009aea:	697b      	ldr	r3, [r7, #20]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d002      	beq.n	8009af6 <lwip_netconn_do_connected+0x102>
    sys_sem_signal(op_completed_sem);
 8009af0:	69f8      	ldr	r0, [r7, #28]
 8009af2:	f00e fe73 	bl	80187dc <sys_sem_signal>
  }
  return ERR_OK;
 8009af6:	2300      	movs	r3, #0
}
 8009af8:	4618      	mov	r0, r3
 8009afa:	3720      	adds	r7, #32
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}
 8009b00:	0801a41c 	.word	0x0801a41c
 8009b04:	0801a7e4 	.word	0x0801a7e4
 8009b08:	0801a460 	.word	0x0801a460
 8009b0c:	0801a804 	.word	0x0801a804
 8009b10:	0801a844 	.word	0x0801a844

08009b14 <lwip_netconn_do_connect>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b086      	sub	sp, #24
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	613b      	str	r3, [r7, #16]
  err_t err;

  if (msg->conn->pcb.tcp == NULL) {
 8009b20:	693b      	ldr	r3, [r7, #16]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	685b      	ldr	r3, [r3, #4]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d102      	bne.n	8009b30 <lwip_netconn_do_connect+0x1c>
    /* This may happen when calling netconn_connect() a second time */
    err = ERR_CLSD;
 8009b2a:	23f1      	movs	r3, #241	; 0xf1
 8009b2c:	75fb      	strb	r3, [r7, #23]
 8009b2e:	e09b      	b.n	8009c68 <lwip_netconn_do_connect+0x154>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009b30:	693b      	ldr	r3, [r7, #16]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	781b      	ldrb	r3, [r3, #0]
 8009b36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009b3a:	2b10      	cmp	r3, #16
 8009b3c:	d00f      	beq.n	8009b5e <lwip_netconn_do_connect+0x4a>
 8009b3e:	2b20      	cmp	r3, #32
 8009b40:	f040 8087 	bne.w	8009c52 <lwip_netconn_do_connect+0x13e>
        err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8009b44:	693b      	ldr	r3, [r7, #16]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	6858      	ldr	r0, [r3, #4]
 8009b4a:	693b      	ldr	r3, [r7, #16]
 8009b4c:	6899      	ldr	r1, [r3, #8]
 8009b4e:	693b      	ldr	r3, [r7, #16]
 8009b50:	899b      	ldrh	r3, [r3, #12]
 8009b52:	461a      	mov	r2, r3
 8009b54:	f00a fa84 	bl	8014060 <udp_connect>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	75fb      	strb	r3, [r7, #23]
        break;
 8009b5c:	e084      	b.n	8009c68 <lwip_netconn_do_connect+0x154>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        /* Prevent connect while doing any other action. */
        if (msg->conn->state == NETCONN_CONNECT) {
 8009b5e:	693b      	ldr	r3, [r7, #16]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	785b      	ldrb	r3, [r3, #1]
 8009b64:	2b03      	cmp	r3, #3
 8009b66:	d102      	bne.n	8009b6e <lwip_netconn_do_connect+0x5a>
          err = ERR_ALREADY;
 8009b68:	23f7      	movs	r3, #247	; 0xf7
 8009b6a:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_TCPIP_CORE_LOCKING */
              return;
            }
          }
        }
        break;
 8009b6c:	e07b      	b.n	8009c66 <lwip_netconn_do_connect+0x152>
        } else if (msg->conn->state != NETCONN_NONE) {
 8009b6e:	693b      	ldr	r3, [r7, #16]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	785b      	ldrb	r3, [r3, #1]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d002      	beq.n	8009b7e <lwip_netconn_do_connect+0x6a>
          err = ERR_ISCONN;
 8009b78:	23f6      	movs	r3, #246	; 0xf6
 8009b7a:	75fb      	strb	r3, [r7, #23]
        break;
 8009b7c:	e073      	b.n	8009c66 <lwip_netconn_do_connect+0x152>
          setup_tcp(msg->conn);
 8009b7e:	693b      	ldr	r3, [r7, #16]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	4618      	mov	r0, r3
 8009b84:	f7ff fa14 	bl	8008fb0 <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 8009b88:	693b      	ldr	r3, [r7, #16]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	6858      	ldr	r0, [r3, #4]
 8009b8e:	693b      	ldr	r3, [r7, #16]
 8009b90:	6899      	ldr	r1, [r3, #8]
 8009b92:	693b      	ldr	r3, [r7, #16]
 8009b94:	899a      	ldrh	r2, [r3, #12]
 8009b96:	4b38      	ldr	r3, [pc, #224]	; (8009c78 <lwip_netconn_do_connect+0x164>)
 8009b98:	f004 f93c 	bl	800de14 <tcp_connect>
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	75fb      	strb	r3, [r7, #23]
          if (err == ERR_OK) {
 8009ba0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d15e      	bne.n	8009c66 <lwip_netconn_do_connect+0x152>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 8009ba8:	693b      	ldr	r3, [r7, #16]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	7f1b      	ldrb	r3, [r3, #28]
 8009bae:	f003 0302 	and.w	r3, r3, #2
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	bf14      	ite	ne
 8009bb6:	2301      	movne	r3, #1
 8009bb8:	2300      	moveq	r3, #0
 8009bba:	b2db      	uxtb	r3, r3
 8009bbc:	73fb      	strb	r3, [r7, #15]
            msg->conn->state = NETCONN_CONNECT;
 8009bbe:	693b      	ldr	r3, [r7, #16]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	2203      	movs	r2, #3
 8009bc4:	705a      	strb	r2, [r3, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 8009bc6:	7bfb      	ldrb	r3, [r7, #15]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d009      	beq.n	8009be0 <lwip_netconn_do_connect+0xcc>
 8009bcc:	693b      	ldr	r3, [r7, #16]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	7f1a      	ldrb	r2, [r3, #28]
 8009bd2:	693b      	ldr	r3, [r7, #16]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	f042 0204 	orr.w	r2, r2, #4
 8009bda:	b2d2      	uxtb	r2, r2
 8009bdc:	771a      	strb	r2, [r3, #28]
 8009bde:	e008      	b.n	8009bf2 <lwip_netconn_do_connect+0xde>
 8009be0:	693b      	ldr	r3, [r7, #16]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	7f1a      	ldrb	r2, [r3, #28]
 8009be6:	693b      	ldr	r3, [r7, #16]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	f022 0204 	bic.w	r2, r2, #4
 8009bee:	b2d2      	uxtb	r2, r2
 8009bf0:	771a      	strb	r2, [r3, #28]
            if (non_blocking) {
 8009bf2:	7bfb      	ldrb	r3, [r7, #15]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d002      	beq.n	8009bfe <lwip_netconn_do_connect+0xea>
              err = ERR_INPROGRESS;
 8009bf8:	23fb      	movs	r3, #251	; 0xfb
 8009bfa:	75fb      	strb	r3, [r7, #23]
        break;
 8009bfc:	e033      	b.n	8009c66 <lwip_netconn_do_connect+0x152>
              msg->conn->current_msg = msg;
 8009bfe:	693b      	ldr	r3, [r7, #16]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	693a      	ldr	r2, [r7, #16]
 8009c04:	621a      	str	r2, [r3, #32]
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 8009c06:	693b      	ldr	r3, [r7, #16]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	785b      	ldrb	r3, [r3, #1]
 8009c0c:	2b03      	cmp	r3, #3
 8009c0e:	d006      	beq.n	8009c1e <lwip_netconn_do_connect+0x10a>
 8009c10:	4b1a      	ldr	r3, [pc, #104]	; (8009c7c <lwip_netconn_do_connect+0x168>)
 8009c12:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 8009c16:	491a      	ldr	r1, [pc, #104]	; (8009c80 <lwip_netconn_do_connect+0x16c>)
 8009c18:	481a      	ldr	r0, [pc, #104]	; (8009c84 <lwip_netconn_do_connect+0x170>)
 8009c1a:	f00e ffbd 	bl	8018b98 <iprintf>
              UNLOCK_TCPIP_CORE();
 8009c1e:	481a      	ldr	r0, [pc, #104]	; (8009c88 <lwip_netconn_do_connect+0x174>)
 8009c20:	f00e fe4d 	bl	80188be <sys_mutex_unlock>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009c24:	693b      	ldr	r3, [r7, #16]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	330c      	adds	r3, #12
 8009c2a:	2100      	movs	r1, #0
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	f00e fda4 	bl	801877a <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 8009c32:	4815      	ldr	r0, [pc, #84]	; (8009c88 <lwip_netconn_do_connect+0x174>)
 8009c34:	f00e fe34 	bl	80188a0 <sys_mutex_lock>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 8009c38:	693b      	ldr	r3, [r7, #16]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	785b      	ldrb	r3, [r3, #1]
 8009c3e:	2b03      	cmp	r3, #3
 8009c40:	d116      	bne.n	8009c70 <lwip_netconn_do_connect+0x15c>
 8009c42:	4b0e      	ldr	r3, [pc, #56]	; (8009c7c <lwip_netconn_do_connect+0x168>)
 8009c44:	f240 5274 	movw	r2, #1396	; 0x574
 8009c48:	490d      	ldr	r1, [pc, #52]	; (8009c80 <lwip_netconn_do_connect+0x16c>)
 8009c4a:	480e      	ldr	r0, [pc, #56]	; (8009c84 <lwip_netconn_do_connect+0x170>)
 8009c4c:	f00e ffa4 	bl	8018b98 <iprintf>
              return;
 8009c50:	e00e      	b.n	8009c70 <lwip_netconn_do_connect+0x15c>
#endif /* LWIP_TCP */
      default:
        LWIP_ERROR("Invalid netconn type", 0, do {
 8009c52:	4b0a      	ldr	r3, [pc, #40]	; (8009c7c <lwip_netconn_do_connect+0x168>)
 8009c54:	f240 527d 	movw	r2, #1405	; 0x57d
 8009c58:	490c      	ldr	r1, [pc, #48]	; (8009c8c <lwip_netconn_do_connect+0x178>)
 8009c5a:	480a      	ldr	r0, [pc, #40]	; (8009c84 <lwip_netconn_do_connect+0x170>)
 8009c5c:	f00e ff9c 	bl	8018b98 <iprintf>
 8009c60:	23fa      	movs	r3, #250	; 0xfa
 8009c62:	75fb      	strb	r3, [r7, #23]
          err = ERR_VAL;
        } while (0));
        break;
 8009c64:	e000      	b.n	8009c68 <lwip_netconn_do_connect+0x154>
        break;
 8009c66:	bf00      	nop
    }
  }
  msg->err = err;
 8009c68:	693b      	ldr	r3, [r7, #16]
 8009c6a:	7dfa      	ldrb	r2, [r7, #23]
 8009c6c:	711a      	strb	r2, [r3, #4]
 8009c6e:	e000      	b.n	8009c72 <lwip_netconn_do_connect+0x15e>
              return;
 8009c70:	bf00      	nop
  /* For all other protocols, netconn_connect() calls netconn_apimsg(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
}
 8009c72:	3718      	adds	r7, #24
 8009c74:	46bd      	mov	sp, r7
 8009c76:	bd80      	pop	{r7, pc}
 8009c78:	080099f5 	.word	0x080099f5
 8009c7c:	0801a41c 	.word	0x0801a41c
 8009c80:	0801a7dc 	.word	0x0801a7dc
 8009c84:	0801a460 	.word	0x0801a460
 8009c88:	2000d2b8 	.word	0x2000d2b8
 8009c8c:	0801a864 	.word	0x0801a864

08009c90 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b086      	sub	sp, #24
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8009c9c:	697b      	ldr	r3, [r7, #20]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	685b      	ldr	r3, [r3, #4]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d07f      	beq.n	8009da6 <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8009ca6:	697b      	ldr	r3, [r7, #20]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	781b      	ldrb	r3, [r3, #0]
 8009cac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009cb0:	2b10      	cmp	r3, #16
 8009cb2:	d175      	bne.n	8009da0 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 8009cb4:	697b      	ldr	r3, [r7, #20]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	785b      	ldrb	r3, [r3, #1]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d165      	bne.n	8009d8a <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 8009cbe:	697b      	ldr	r3, [r7, #20]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	685b      	ldr	r3, [r3, #4]
 8009cc4:	7d1b      	ldrb	r3, [r3, #20]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d002      	beq.n	8009cd0 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 8009cca:	23fa      	movs	r3, #250	; 0xfa
 8009ccc:	72fb      	strb	r3, [r7, #11]
 8009cce:	e06c      	b.n	8009daa <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 8009cd0:	23ff      	movs	r3, #255	; 0xff
 8009cd2:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 8009cd4:	697b      	ldr	r3, [r7, #20]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	685b      	ldr	r3, [r3, #4]
 8009cda:	f107 020b 	add.w	r2, r7, #11
 8009cde:	7cf9      	ldrb	r1, [r7, #19]
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	f003 fefd 	bl	800dae0 <tcp_listen_with_backlog_and_err>
 8009ce6:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d05d      	beq.n	8009daa <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 8009cee:	697b      	ldr	r3, [r7, #20]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	3310      	adds	r3, #16
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	f00e fcfa 	bl	80186ee <sys_mbox_valid>
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d00b      	beq.n	8009d18 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 8009d00:	697b      	ldr	r3, [r7, #20]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	3310      	adds	r3, #16
 8009d06:	4618      	mov	r0, r3
 8009d08:	f00e fc6a 	bl	80185e0 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 8009d0c:	697b      	ldr	r3, [r7, #20]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	3310      	adds	r3, #16
 8009d12:	4618      	mov	r0, r3
 8009d14:	f00e fcfc 	bl	8018710 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 8009d18:	2300      	movs	r3, #0
 8009d1a:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8009d1c:	697b      	ldr	r3, [r7, #20]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	3314      	adds	r3, #20
 8009d22:	4618      	mov	r0, r3
 8009d24:	f00e fce3 	bl	80186ee <sys_mbox_valid>
 8009d28:	4603      	mov	r3, r0
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d108      	bne.n	8009d40 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 8009d2e:	697b      	ldr	r3, [r7, #20]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	3314      	adds	r3, #20
 8009d34:	2106      	movs	r1, #6
 8009d36:	4618      	mov	r0, r3
 8009d38:	f00e fc30 	bl	801859c <sys_mbox_new>
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 8009d40:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d118      	bne.n	8009d7a <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 8009d48:	697b      	ldr	r3, [r7, #20]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	2202      	movs	r2, #2
 8009d4e:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 8009d50:	697b      	ldr	r3, [r7, #20]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	68fa      	ldr	r2, [r7, #12]
 8009d56:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 8009d58:	697b      	ldr	r3, [r7, #20]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	685a      	ldr	r2, [r3, #4]
 8009d5e:	697b      	ldr	r3, [r7, #20]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	4619      	mov	r1, r3
 8009d64:	4610      	mov	r0, r2
 8009d66:	f004 ffbb 	bl	800ece0 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 8009d6a:	697b      	ldr	r3, [r7, #20]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	685b      	ldr	r3, [r3, #4]
 8009d70:	4912      	ldr	r1, [pc, #72]	; (8009dbc <lwip_netconn_do_listen+0x12c>)
 8009d72:	4618      	mov	r0, r3
 8009d74:	f005 f82c 	bl	800edd0 <tcp_accept>
 8009d78:	e017      	b.n	8009daa <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 8009d7a:	68f8      	ldr	r0, [r7, #12]
 8009d7c:	f003 fc94 	bl	800d6a8 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 8009d80:	697b      	ldr	r3, [r7, #20]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	2200      	movs	r2, #0
 8009d86:	605a      	str	r2, [r3, #4]
 8009d88:	e00f      	b.n	8009daa <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 8009d8a:	697b      	ldr	r3, [r7, #20]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	785b      	ldrb	r3, [r3, #1]
 8009d90:	2b02      	cmp	r3, #2
 8009d92:	d102      	bne.n	8009d9a <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 8009d94:	2300      	movs	r3, #0
 8009d96:	72fb      	strb	r3, [r7, #11]
 8009d98:	e007      	b.n	8009daa <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 8009d9a:	23f5      	movs	r3, #245	; 0xf5
 8009d9c:	72fb      	strb	r3, [r7, #11]
 8009d9e:	e004      	b.n	8009daa <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 8009da0:	23f0      	movs	r3, #240	; 0xf0
 8009da2:	72fb      	strb	r3, [r7, #11]
 8009da4:	e001      	b.n	8009daa <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 8009da6:	23f5      	movs	r3, #245	; 0xf5
 8009da8:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 8009daa:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8009dae:	697b      	ldr	r3, [r7, #20]
 8009db0:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8009db2:	bf00      	nop
 8009db4:	3718      	adds	r7, #24
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bd80      	pop	{r7, pc}
 8009dba:	bf00      	nop
 8009dbc:	08009001 	.word	0x08009001

08009dc0 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b086      	sub	sp, #24
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 8009dcc:	693b      	ldr	r3, [r7, #16]
 8009dce:	2200      	movs	r2, #0
 8009dd0:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8009dd2:	693b      	ldr	r3, [r7, #16]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	685b      	ldr	r3, [r3, #4]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d022      	beq.n	8009e22 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8009ddc:	693b      	ldr	r3, [r7, #16]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	781b      	ldrb	r3, [r3, #0]
 8009de2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009de6:	2b10      	cmp	r3, #16
 8009de8:	d11b      	bne.n	8009e22 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 8009dea:	693b      	ldr	r3, [r7, #16]
 8009dec:	689b      	ldr	r3, [r3, #8]
 8009dee:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 8009df0:	697b      	ldr	r3, [r7, #20]
 8009df2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009df6:	d202      	bcs.n	8009dfe <lwip_netconn_do_recv+0x3e>
 8009df8:	697b      	ldr	r3, [r7, #20]
 8009dfa:	b29b      	uxth	r3, r3
 8009dfc:	e001      	b.n	8009e02 <lwip_netconn_do_recv+0x42>
 8009dfe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009e02:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 8009e04:	693b      	ldr	r3, [r7, #16]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	685b      	ldr	r3, [r3, #4]
 8009e0a:	89fa      	ldrh	r2, [r7, #14]
 8009e0c:	4611      	mov	r1, r2
 8009e0e:	4618      	mov	r0, r3
 8009e10:	f003 ff6a 	bl	800dce8 <tcp_recved>
        remaining -= recved;
 8009e14:	89fb      	ldrh	r3, [r7, #14]
 8009e16:	697a      	ldr	r2, [r7, #20]
 8009e18:	1ad3      	subs	r3, r2, r3
 8009e1a:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 8009e1c:	697b      	ldr	r3, [r7, #20]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d1e6      	bne.n	8009df0 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 8009e22:	bf00      	nop
 8009e24:	3718      	adds	r7, #24
 8009e26:	46bd      	mov	sp, r7
 8009e28:	bd80      	pop	{r7, pc}
	...

08009e2c <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b088      	sub	sp, #32
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
 8009e34:	460b      	mov	r3, r1
 8009e36:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8009e38:	2300      	movs	r3, #0
 8009e3a:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d106      	bne.n	8009e50 <lwip_netconn_do_writemore+0x24>
 8009e42:	4b96      	ldr	r3, [pc, #600]	; (800a09c <lwip_netconn_do_writemore+0x270>)
 8009e44:	f240 6273 	movw	r2, #1651	; 0x673
 8009e48:	4995      	ldr	r1, [pc, #596]	; (800a0a0 <lwip_netconn_do_writemore+0x274>)
 8009e4a:	4896      	ldr	r0, [pc, #600]	; (800a0a4 <lwip_netconn_do_writemore+0x278>)
 8009e4c:	f00e fea4 	bl	8018b98 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	785b      	ldrb	r3, [r3, #1]
 8009e54:	2b01      	cmp	r3, #1
 8009e56:	d006      	beq.n	8009e66 <lwip_netconn_do_writemore+0x3a>
 8009e58:	4b90      	ldr	r3, [pc, #576]	; (800a09c <lwip_netconn_do_writemore+0x270>)
 8009e5a:	f240 6274 	movw	r2, #1652	; 0x674
 8009e5e:	4992      	ldr	r1, [pc, #584]	; (800a0a8 <lwip_netconn_do_writemore+0x27c>)
 8009e60:	4890      	ldr	r0, [pc, #576]	; (800a0a4 <lwip_netconn_do_writemore+0x278>)
 8009e62:	f00e fe99 	bl	8018b98 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	6a1b      	ldr	r3, [r3, #32]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d106      	bne.n	8009e7c <lwip_netconn_do_writemore+0x50>
 8009e6e:	4b8b      	ldr	r3, [pc, #556]	; (800a09c <lwip_netconn_do_writemore+0x270>)
 8009e70:	f240 6275 	movw	r2, #1653	; 0x675
 8009e74:	498d      	ldr	r1, [pc, #564]	; (800a0ac <lwip_netconn_do_writemore+0x280>)
 8009e76:	488b      	ldr	r0, [pc, #556]	; (800a0a4 <lwip_netconn_do_writemore+0x278>)
 8009e78:	f00e fe8e 	bl	8018b98 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	685b      	ldr	r3, [r3, #4]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d106      	bne.n	8009e92 <lwip_netconn_do_writemore+0x66>
 8009e84:	4b85      	ldr	r3, [pc, #532]	; (800a09c <lwip_netconn_do_writemore+0x270>)
 8009e86:	f240 6276 	movw	r2, #1654	; 0x676
 8009e8a:	4989      	ldr	r1, [pc, #548]	; (800a0b0 <lwip_netconn_do_writemore+0x284>)
 8009e8c:	4885      	ldr	r0, [pc, #532]	; (800a0a4 <lwip_netconn_do_writemore+0x278>)
 8009e8e:	f00e fe83 	bl	8018b98 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	6a1b      	ldr	r3, [r3, #32]
 8009e96:	699a      	ldr	r2, [r3, #24]
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	6a1b      	ldr	r3, [r3, #32]
 8009e9c:	695b      	ldr	r3, [r3, #20]
 8009e9e:	429a      	cmp	r2, r3
 8009ea0:	d306      	bcc.n	8009eb0 <lwip_netconn_do_writemore+0x84>
 8009ea2:	4b7e      	ldr	r3, [pc, #504]	; (800a09c <lwip_netconn_do_writemore+0x270>)
 8009ea4:	f240 6277 	movw	r2, #1655	; 0x677
 8009ea8:	4982      	ldr	r1, [pc, #520]	; (800a0b4 <lwip_netconn_do_writemore+0x288>)
 8009eaa:	487e      	ldr	r0, [pc, #504]	; (800a0a4 <lwip_netconn_do_writemore+0x278>)
 8009eac:	f00e fe74 	bl	8018b98 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	6a1b      	ldr	r3, [r3, #32]
 8009eb4:	899b      	ldrh	r3, [r3, #12]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d106      	bne.n	8009ec8 <lwip_netconn_do_writemore+0x9c>
 8009eba:	4b78      	ldr	r3, [pc, #480]	; (800a09c <lwip_netconn_do_writemore+0x270>)
 8009ebc:	f240 6279 	movw	r2, #1657	; 0x679
 8009ec0:	497d      	ldr	r1, [pc, #500]	; (800a0b8 <lwip_netconn_do_writemore+0x28c>)
 8009ec2:	4878      	ldr	r0, [pc, #480]	; (800a0a4 <lwip_netconn_do_writemore+0x278>)
 8009ec4:	f00e fe68 	bl	8018b98 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	6a1b      	ldr	r3, [r3, #32]
 8009ecc:	7f1b      	ldrb	r3, [r3, #28]
 8009ece:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	7f1b      	ldrb	r3, [r3, #28]
 8009ed4:	f003 0302 	and.w	r3, r3, #2
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d104      	bne.n	8009ee6 <lwip_netconn_do_writemore+0xba>
 8009edc:	7ebb      	ldrb	r3, [r7, #26]
 8009ede:	f003 0304 	and.w	r3, r3, #4
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d001      	beq.n	8009eea <lwip_netconn_do_writemore+0xbe>
 8009ee6:	2301      	movs	r3, #1
 8009ee8:	e000      	b.n	8009eec <lwip_netconn_do_writemore+0xc0>
 8009eea:	2300      	movs	r3, #0
 8009eec:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	6a1b      	ldr	r3, [r3, #32]
 8009ef2:	689b      	ldr	r3, [r3, #8]
 8009ef4:	681a      	ldr	r2, [r3, #0]
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	6a1b      	ldr	r3, [r3, #32]
 8009efa:	691b      	ldr	r3, [r3, #16]
 8009efc:	4413      	add	r3, r2
 8009efe:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	6a1b      	ldr	r3, [r3, #32]
 8009f04:	689b      	ldr	r3, [r3, #8]
 8009f06:	685a      	ldr	r2, [r3, #4]
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	6a1b      	ldr	r3, [r3, #32]
 8009f0c:	691b      	ldr	r3, [r3, #16]
 8009f0e:	1ad3      	subs	r3, r2, r3
 8009f10:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 8009f12:	693b      	ldr	r3, [r7, #16]
 8009f14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f18:	d307      	bcc.n	8009f2a <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 8009f1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009f1e:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8009f20:	7ebb      	ldrb	r3, [r7, #26]
 8009f22:	f043 0302 	orr.w	r3, r3, #2
 8009f26:	76bb      	strb	r3, [r7, #26]
 8009f28:	e001      	b.n	8009f2e <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 8009f2a:	693b      	ldr	r3, [r7, #16]
 8009f2c:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	685b      	ldr	r3, [r3, #4]
 8009f32:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009f36:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 8009f38:	89fa      	ldrh	r2, [r7, #14]
 8009f3a:	8bbb      	ldrh	r3, [r7, #28]
 8009f3c:	429a      	cmp	r2, r3
 8009f3e:	d216      	bcs.n	8009f6e <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 8009f40:	89fb      	ldrh	r3, [r7, #14]
 8009f42:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 8009f44:	7e3b      	ldrb	r3, [r7, #24]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d00d      	beq.n	8009f66 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 8009f4a:	8bbb      	ldrh	r3, [r7, #28]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d10e      	bne.n	8009f6e <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6a1b      	ldr	r3, [r3, #32]
 8009f54:	699b      	ldr	r3, [r3, #24]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d102      	bne.n	8009f60 <lwip_netconn_do_writemore+0x134>
 8009f5a:	f06f 0306 	mvn.w	r3, #6
 8009f5e:	e000      	b.n	8009f62 <lwip_netconn_do_writemore+0x136>
 8009f60:	2300      	movs	r3, #0
 8009f62:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 8009f64:	e07d      	b.n	800a062 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 8009f66:	7ebb      	ldrb	r3, [r7, #26]
 8009f68:	f043 0302 	orr.w	r3, r3, #2
 8009f6c:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	6a1b      	ldr	r3, [r3, #32]
 8009f72:	691a      	ldr	r2, [r3, #16]
 8009f74:	8bbb      	ldrh	r3, [r7, #28]
 8009f76:	441a      	add	r2, r3
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	6a1b      	ldr	r3, [r3, #32]
 8009f7c:	689b      	ldr	r3, [r3, #8]
 8009f7e:	685b      	ldr	r3, [r3, #4]
 8009f80:	429a      	cmp	r2, r3
 8009f82:	d906      	bls.n	8009f92 <lwip_netconn_do_writemore+0x166>
 8009f84:	4b45      	ldr	r3, [pc, #276]	; (800a09c <lwip_netconn_do_writemore+0x270>)
 8009f86:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8009f8a:	494c      	ldr	r1, [pc, #304]	; (800a0bc <lwip_netconn_do_writemore+0x290>)
 8009f8c:	4845      	ldr	r0, [pc, #276]	; (800a0a4 <lwip_netconn_do_writemore+0x278>)
 8009f8e:	f00e fe03 	bl	8018b98 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 8009f92:	8bbb      	ldrh	r3, [r7, #28]
 8009f94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009f98:	4293      	cmp	r3, r2
 8009f9a:	d103      	bne.n	8009fa4 <lwip_netconn_do_writemore+0x178>
 8009f9c:	693b      	ldr	r3, [r7, #16]
 8009f9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009fa2:	d209      	bcs.n	8009fb8 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8009fa4:	693b      	ldr	r3, [r7, #16]
 8009fa6:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 8009fa8:	8bba      	ldrh	r2, [r7, #28]
 8009faa:	429a      	cmp	r2, r3
 8009fac:	d10b      	bne.n	8009fc6 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6a1b      	ldr	r3, [r3, #32]
 8009fb2:	899b      	ldrh	r3, [r3, #12]
 8009fb4:	2b01      	cmp	r3, #1
 8009fb6:	d906      	bls.n	8009fc6 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 8009fb8:	2301      	movs	r3, #1
 8009fba:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8009fbc:	7ebb      	ldrb	r3, [r7, #26]
 8009fbe:	f043 0302 	orr.w	r3, r3, #2
 8009fc2:	76bb      	strb	r3, [r7, #26]
 8009fc4:	e001      	b.n	8009fca <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	6858      	ldr	r0, [r3, #4]
 8009fce:	7ebb      	ldrb	r3, [r7, #26]
 8009fd0:	8bba      	ldrh	r2, [r7, #28]
 8009fd2:	6979      	ldr	r1, [r7, #20]
 8009fd4:	f007 fdc6 	bl	8011b64 <tcp_write>
 8009fd8:	4603      	mov	r3, r0
 8009fda:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 8009fdc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d12c      	bne.n	800a03e <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	6a1b      	ldr	r3, [r3, #32]
 8009fe8:	6999      	ldr	r1, [r3, #24]
 8009fea:	8bba      	ldrh	r2, [r7, #28]
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	6a1b      	ldr	r3, [r3, #32]
 8009ff0:	440a      	add	r2, r1
 8009ff2:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	6a1b      	ldr	r3, [r3, #32]
 8009ff8:	6919      	ldr	r1, [r3, #16]
 8009ffa:	8bba      	ldrh	r2, [r7, #28]
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	6a1b      	ldr	r3, [r3, #32]
 800a000:	440a      	add	r2, r1
 800a002:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	6a1b      	ldr	r3, [r3, #32]
 800a008:	691a      	ldr	r2, [r3, #16]
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	6a1b      	ldr	r3, [r3, #32]
 800a00e:	689b      	ldr	r3, [r3, #8]
 800a010:	685b      	ldr	r3, [r3, #4]
 800a012:	429a      	cmp	r2, r3
 800a014:	d113      	bne.n	800a03e <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	6a1b      	ldr	r3, [r3, #32]
 800a01a:	899a      	ldrh	r2, [r3, #12]
 800a01c:	3a01      	subs	r2, #1
 800a01e:	b292      	uxth	r2, r2
 800a020:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	6a1b      	ldr	r3, [r3, #32]
 800a026:	899b      	ldrh	r3, [r3, #12]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d008      	beq.n	800a03e <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	6a1b      	ldr	r3, [r3, #32]
 800a030:	689a      	ldr	r2, [r3, #8]
 800a032:	3208      	adds	r2, #8
 800a034:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	6a1b      	ldr	r3, [r3, #32]
 800a03a:	2200      	movs	r2, #0
 800a03c:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800a03e:	7e7b      	ldrb	r3, [r7, #25]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d004      	beq.n	800a04e <lwip_netconn_do_writemore+0x222>
 800a044:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	f43f af50 	beq.w	8009eee <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800a04e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d004      	beq.n	800a060 <lwip_netconn_do_writemore+0x234>
 800a056:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a05a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a05e:	d146      	bne.n	800a0ee <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800a060:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800a062:	7e3b      	ldrb	r3, [r7, #24]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d02b      	beq.n	800a0c0 <lwip_netconn_do_writemore+0x294>
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	6a1b      	ldr	r3, [r3, #32]
 800a06c:	699a      	ldr	r2, [r3, #24]
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6a1b      	ldr	r3, [r3, #32]
 800a072:	695b      	ldr	r3, [r3, #20]
 800a074:	429a      	cmp	r2, r3
 800a076:	d223      	bcs.n	800a0c0 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d005      	beq.n	800a08c <lwip_netconn_do_writemore+0x260>
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a084:	2200      	movs	r2, #0
 800a086:	2103      	movs	r1, #3
 800a088:	6878      	ldr	r0, [r7, #4]
 800a08a:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	7f1b      	ldrb	r3, [r3, #28]
 800a090:	f043 0310 	orr.w	r3, r3, #16
 800a094:	b2da      	uxtb	r2, r3
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	771a      	strb	r2, [r3, #28]
 800a09a:	e028      	b.n	800a0ee <lwip_netconn_do_writemore+0x2c2>
 800a09c:	0801a41c 	.word	0x0801a41c
 800a0a0:	0801a574 	.word	0x0801a574
 800a0a4:	0801a460 	.word	0x0801a460
 800a0a8:	0801a87c 	.word	0x0801a87c
 800a0ac:	0801a584 	.word	0x0801a584
 800a0b0:	0801a89c 	.word	0x0801a89c
 800a0b4:	0801a8b4 	.word	0x0801a8b4
 800a0b8:	0801a8f4 	.word	0x0801a8f4
 800a0bc:	0801a91c 	.word	0x0801a91c
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	685b      	ldr	r3, [r3, #4]
 800a0c4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a0c8:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800a0cc:	d305      	bcc.n	800a0da <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	685b      	ldr	r3, [r3, #4]
 800a0d2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800a0d6:	2b04      	cmp	r3, #4
 800a0d8:	d909      	bls.n	800a0ee <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d005      	beq.n	800a0ee <lwip_netconn_do_writemore+0x2c2>
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	2103      	movs	r1, #3
 800a0ea:	6878      	ldr	r0, [r7, #4]
 800a0ec:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800a0ee:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d11d      	bne.n	800a132 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	6a1b      	ldr	r3, [r3, #32]
 800a0fa:	699a      	ldr	r2, [r3, #24]
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	6a1b      	ldr	r3, [r3, #32]
 800a100:	695b      	ldr	r3, [r3, #20]
 800a102:	429a      	cmp	r2, r3
 800a104:	d002      	beq.n	800a10c <lwip_netconn_do_writemore+0x2e0>
 800a106:	7e3b      	ldrb	r3, [r7, #24]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d001      	beq.n	800a110 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800a10c:	2301      	movs	r3, #1
 800a10e:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	685b      	ldr	r3, [r3, #4]
 800a114:	4618      	mov	r0, r3
 800a116:	f008 fb0f 	bl	8012738 <tcp_output>
 800a11a:	4603      	mov	r3, r0
 800a11c:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800a11e:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800a122:	f113 0f04 	cmn.w	r3, #4
 800a126:	d12c      	bne.n	800a182 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800a128:	7b3b      	ldrb	r3, [r7, #12]
 800a12a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800a12c:	2301      	movs	r3, #1
 800a12e:	76fb      	strb	r3, [r7, #27]
 800a130:	e027      	b.n	800a182 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800a132:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a13a:	d120      	bne.n	800a17e <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	685b      	ldr	r3, [r3, #4]
 800a140:	4618      	mov	r0, r3
 800a142:	f008 faf9 	bl	8012738 <tcp_output>
 800a146:	4603      	mov	r3, r0
 800a148:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800a14a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800a14e:	f113 0f04 	cmn.w	r3, #4
 800a152:	d104      	bne.n	800a15e <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800a154:	7b7b      	ldrb	r3, [r7, #13]
 800a156:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800a158:	2301      	movs	r3, #1
 800a15a:	76fb      	strb	r3, [r7, #27]
 800a15c:	e011      	b.n	800a182 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800a15e:	7e3b      	ldrb	r3, [r7, #24]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d00e      	beq.n	800a182 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	6a1b      	ldr	r3, [r3, #32]
 800a168:	699b      	ldr	r3, [r3, #24]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d102      	bne.n	800a174 <lwip_netconn_do_writemore+0x348>
 800a16e:	f06f 0306 	mvn.w	r3, #6
 800a172:	e000      	b.n	800a176 <lwip_netconn_do_writemore+0x34a>
 800a174:	2300      	movs	r3, #0
 800a176:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800a178:	2301      	movs	r3, #1
 800a17a:	76fb      	strb	r3, [r7, #27]
 800a17c:	e001      	b.n	800a182 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800a17e:	2301      	movs	r3, #1
 800a180:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800a182:	7efb      	ldrb	r3, [r7, #27]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d015      	beq.n	800a1b4 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	6a1b      	ldr	r3, [r3, #32]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	330c      	adds	r3, #12
 800a190:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	6a1b      	ldr	r3, [r3, #32]
 800a196:	7ffa      	ldrb	r2, [r7, #31]
 800a198:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2200      	movs	r2, #0
 800a19e:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800a1a6:	78fb      	ldrb	r3, [r7, #3]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d006      	beq.n	800a1ba <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800a1ac:	68b8      	ldr	r0, [r7, #8]
 800a1ae:	f00e fb15 	bl	80187dc <sys_sem_signal>
 800a1b2:	e002      	b.n	800a1ba <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800a1b4:	f04f 33ff 	mov.w	r3, #4294967295
 800a1b8:	e000      	b.n	800a1bc <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800a1ba:	2300      	movs	r3, #0
}
 800a1bc:	4618      	mov	r0, r3
 800a1be:	3720      	adds	r7, #32
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}

0800a1c4 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b084      	sub	sp, #16
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800a1d0:	68bb      	ldr	r3, [r7, #8]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	f7fe fbce 	bl	8008976 <netconn_err>
 800a1da:	4603      	mov	r3, r0
 800a1dc:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800a1de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d166      	bne.n	800a2b4 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	781b      	ldrb	r3, [r3, #0]
 800a1ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a1f0:	2b10      	cmp	r3, #16
 800a1f2:	d15d      	bne.n	800a2b0 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800a1f4:	68bb      	ldr	r3, [r7, #8]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	785b      	ldrb	r3, [r3, #1]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d002      	beq.n	800a204 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800a1fe:	23fb      	movs	r3, #251	; 0xfb
 800a200:	73fb      	strb	r3, [r7, #15]
 800a202:	e057      	b.n	800a2b4 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800a204:	68bb      	ldr	r3, [r7, #8]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	685b      	ldr	r3, [r3, #4]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d04d      	beq.n	800a2aa <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800a20e:	68bb      	ldr	r3, [r7, #8]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	2201      	movs	r2, #1
 800a214:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800a216:	68bb      	ldr	r3, [r7, #8]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	6a1b      	ldr	r3, [r3, #32]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d006      	beq.n	800a22e <lwip_netconn_do_write+0x6a>
 800a220:	4b28      	ldr	r3, [pc, #160]	; (800a2c4 <lwip_netconn_do_write+0x100>)
 800a222:	f240 7223 	movw	r2, #1827	; 0x723
 800a226:	4928      	ldr	r1, [pc, #160]	; (800a2c8 <lwip_netconn_do_write+0x104>)
 800a228:	4828      	ldr	r0, [pc, #160]	; (800a2cc <lwip_netconn_do_write+0x108>)
 800a22a:	f00e fcb5 	bl	8018b98 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800a22e:	68bb      	ldr	r3, [r7, #8]
 800a230:	695b      	ldr	r3, [r3, #20]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d106      	bne.n	800a244 <lwip_netconn_do_write+0x80>
 800a236:	4b23      	ldr	r3, [pc, #140]	; (800a2c4 <lwip_netconn_do_write+0x100>)
 800a238:	f240 7224 	movw	r2, #1828	; 0x724
 800a23c:	4924      	ldr	r1, [pc, #144]	; (800a2d0 <lwip_netconn_do_write+0x10c>)
 800a23e:	4823      	ldr	r0, [pc, #140]	; (800a2cc <lwip_netconn_do_write+0x108>)
 800a240:	f00e fcaa 	bl	8018b98 <iprintf>
        msg->conn->current_msg = msg;
 800a244:	68bb      	ldr	r3, [r7, #8]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	68ba      	ldr	r2, [r7, #8]
 800a24a:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800a24c:	68bb      	ldr	r3, [r7, #8]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	2100      	movs	r1, #0
 800a252:	4618      	mov	r0, r3
 800a254:	f7ff fdea 	bl	8009e2c <lwip_netconn_do_writemore>
 800a258:	4603      	mov	r3, r0
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d02e      	beq.n	800a2bc <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800a25e:	68bb      	ldr	r3, [r7, #8]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	785b      	ldrb	r3, [r3, #1]
 800a264:	2b01      	cmp	r3, #1
 800a266:	d006      	beq.n	800a276 <lwip_netconn_do_write+0xb2>
 800a268:	4b16      	ldr	r3, [pc, #88]	; (800a2c4 <lwip_netconn_do_write+0x100>)
 800a26a:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800a26e:	4919      	ldr	r1, [pc, #100]	; (800a2d4 <lwip_netconn_do_write+0x110>)
 800a270:	4816      	ldr	r0, [pc, #88]	; (800a2cc <lwip_netconn_do_write+0x108>)
 800a272:	f00e fc91 	bl	8018b98 <iprintf>
          UNLOCK_TCPIP_CORE();
 800a276:	4818      	ldr	r0, [pc, #96]	; (800a2d8 <lwip_netconn_do_write+0x114>)
 800a278:	f00e fb21 	bl	80188be <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	330c      	adds	r3, #12
 800a282:	2100      	movs	r1, #0
 800a284:	4618      	mov	r0, r3
 800a286:	f00e fa78 	bl	801877a <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800a28a:	4813      	ldr	r0, [pc, #76]	; (800a2d8 <lwip_netconn_do_write+0x114>)
 800a28c:	f00e fb08 	bl	80188a0 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800a290:	68bb      	ldr	r3, [r7, #8]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	785b      	ldrb	r3, [r3, #1]
 800a296:	2b01      	cmp	r3, #1
 800a298:	d110      	bne.n	800a2bc <lwip_netconn_do_write+0xf8>
 800a29a:	4b0a      	ldr	r3, [pc, #40]	; (800a2c4 <lwip_netconn_do_write+0x100>)
 800a29c:	f240 722c 	movw	r2, #1836	; 0x72c
 800a2a0:	490c      	ldr	r1, [pc, #48]	; (800a2d4 <lwip_netconn_do_write+0x110>)
 800a2a2:	480a      	ldr	r0, [pc, #40]	; (800a2cc <lwip_netconn_do_write+0x108>)
 800a2a4:	f00e fc78 	bl	8018b98 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800a2a8:	e008      	b.n	800a2bc <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800a2aa:	23f5      	movs	r3, #245	; 0xf5
 800a2ac:	73fb      	strb	r3, [r7, #15]
 800a2ae:	e001      	b.n	800a2b4 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800a2b0:	23fa      	movs	r3, #250	; 0xfa
 800a2b2:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800a2b4:	68bb      	ldr	r3, [r7, #8]
 800a2b6:	7bfa      	ldrb	r2, [r7, #15]
 800a2b8:	711a      	strb	r2, [r3, #4]
 800a2ba:	e000      	b.n	800a2be <lwip_netconn_do_write+0xfa>
        return;
 800a2bc:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800a2be:	3710      	adds	r7, #16
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	bd80      	pop	{r7, pc}
 800a2c4:	0801a41c 	.word	0x0801a41c
 800a2c8:	0801a7c0 	.word	0x0801a7c0
 800a2cc:	0801a460 	.word	0x0801a460
 800a2d0:	0801a948 	.word	0x0801a948
 800a2d4:	0801a7dc 	.word	0x0801a7dc
 800a2d8:	2000d2b8 	.word	0x2000d2b8

0800a2dc <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b084      	sub	sp, #16
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	785b      	ldrb	r3, [r3, #1]
 800a2ee:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	685b      	ldr	r3, [r3, #4]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d069      	beq.n	800a3ce <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	781b      	ldrb	r3, [r3, #0]
 800a300:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800a304:	2b10      	cmp	r3, #16
 800a306:	d162      	bne.n	800a3ce <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800a30c:	2b03      	cmp	r3, #3
 800a30e:	d002      	beq.n	800a316 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800a310:	7afb      	ldrb	r3, [r7, #11]
 800a312:	2b02      	cmp	r3, #2
 800a314:	d05b      	beq.n	800a3ce <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800a316:	7afb      	ldrb	r3, [r7, #11]
 800a318:	2b03      	cmp	r3, #3
 800a31a:	d103      	bne.n	800a324 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	22f5      	movs	r2, #245	; 0xf5
 800a320:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800a322:	e059      	b.n	800a3d8 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800a324:	7afb      	ldrb	r3, [r7, #11]
 800a326:	2b01      	cmp	r3, #1
 800a328:	d103      	bne.n	800a332 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	22fb      	movs	r2, #251	; 0xfb
 800a32e:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800a330:	e052      	b.n	800a3d8 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	7a1b      	ldrb	r3, [r3, #8]
 800a336:	f003 0301 	and.w	r3, r3, #1
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d004      	beq.n	800a348 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	4618      	mov	r0, r3
 800a344:	f7ff f850 	bl	80093e8 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	6a1b      	ldr	r3, [r3, #32]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d006      	beq.n	800a360 <lwip_netconn_do_close+0x84>
 800a352:	4b23      	ldr	r3, [pc, #140]	; (800a3e0 <lwip_netconn_do_close+0x104>)
 800a354:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800a358:	4922      	ldr	r1, [pc, #136]	; (800a3e4 <lwip_netconn_do_close+0x108>)
 800a35a:	4823      	ldr	r0, [pc, #140]	; (800a3e8 <lwip_netconn_do_close+0x10c>)
 800a35c:	f00e fc1c 	bl	8018b98 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	2204      	movs	r2, #4
 800a366:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	68fa      	ldr	r2, [r7, #12]
 800a36e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	2100      	movs	r1, #0
 800a376:	4618      	mov	r0, r3
 800a378:	f7ff f8b4 	bl	80094e4 <lwip_netconn_do_close_internal>
 800a37c:	4603      	mov	r3, r0
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d029      	beq.n	800a3d6 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	785b      	ldrb	r3, [r3, #1]
 800a388:	2b04      	cmp	r3, #4
 800a38a:	d006      	beq.n	800a39a <lwip_netconn_do_close+0xbe>
 800a38c:	4b14      	ldr	r3, [pc, #80]	; (800a3e0 <lwip_netconn_do_close+0x104>)
 800a38e:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800a392:	4916      	ldr	r1, [pc, #88]	; (800a3ec <lwip_netconn_do_close+0x110>)
 800a394:	4814      	ldr	r0, [pc, #80]	; (800a3e8 <lwip_netconn_do_close+0x10c>)
 800a396:	f00e fbff 	bl	8018b98 <iprintf>
        UNLOCK_TCPIP_CORE();
 800a39a:	4815      	ldr	r0, [pc, #84]	; (800a3f0 <lwip_netconn_do_close+0x114>)
 800a39c:	f00e fa8f 	bl	80188be <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	330c      	adds	r3, #12
 800a3a6:	2100      	movs	r1, #0
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	f00e f9e6 	bl	801877a <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800a3ae:	4810      	ldr	r0, [pc, #64]	; (800a3f0 <lwip_netconn_do_close+0x114>)
 800a3b0:	f00e fa76 	bl	80188a0 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	785b      	ldrb	r3, [r3, #1]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d00b      	beq.n	800a3d6 <lwip_netconn_do_close+0xfa>
 800a3be:	4b08      	ldr	r3, [pc, #32]	; (800a3e0 <lwip_netconn_do_close+0x104>)
 800a3c0:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800a3c4:	4909      	ldr	r1, [pc, #36]	; (800a3ec <lwip_netconn_do_close+0x110>)
 800a3c6:	4808      	ldr	r0, [pc, #32]	; (800a3e8 <lwip_netconn_do_close+0x10c>)
 800a3c8:	f00e fbe6 	bl	8018b98 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800a3cc:	e003      	b.n	800a3d6 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	22f5      	movs	r2, #245	; 0xf5
 800a3d2:	711a      	strb	r2, [r3, #4]
 800a3d4:	e000      	b.n	800a3d8 <lwip_netconn_do_close+0xfc>
      return;
 800a3d6:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800a3d8:	3710      	adds	r7, #16
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bd80      	pop	{r7, pc}
 800a3de:	bf00      	nop
 800a3e0:	0801a41c 	.word	0x0801a41c
 800a3e4:	0801a7c0 	.word	0x0801a7c0
 800a3e8:	0801a460 	.word	0x0801a460
 800a3ec:	0801a7dc 	.word	0x0801a7dc
 800a3f0:	2000d2b8 	.word	0x2000d2b8

0800a3f4 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b082      	sub	sp, #8
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d013      	beq.n	800a42a <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d00b      	beq.n	800a422 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	4618      	mov	r0, r3
 800a410:	f002 fc90 	bl	800cd34 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2200      	movs	r2, #0
 800a418:	605a      	str	r2, [r3, #4]
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	685a      	ldr	r2, [r3, #4]
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800a422:	6879      	ldr	r1, [r7, #4]
 800a424:	2006      	movs	r0, #6
 800a426:	f001 fdd5 	bl	800bfd4 <memp_free>
  }
}
 800a42a:	bf00      	nop
 800a42c:	3708      	adds	r7, #8
 800a42e:	46bd      	mov	sp, r7
 800a430:	bd80      	pop	{r7, pc}
	...

0800a434 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b084      	sub	sp, #16
 800a438:	af00      	add	r7, sp, #0
 800a43a:	60f8      	str	r0, [r7, #12]
 800a43c:	60b9      	str	r1, [r7, #8]
 800a43e:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d108      	bne.n	800a458 <netbuf_data+0x24>
 800a446:	4b1b      	ldr	r3, [pc, #108]	; (800a4b4 <netbuf_data+0x80>)
 800a448:	22c6      	movs	r2, #198	; 0xc6
 800a44a:	491b      	ldr	r1, [pc, #108]	; (800a4b8 <netbuf_data+0x84>)
 800a44c:	481b      	ldr	r0, [pc, #108]	; (800a4bc <netbuf_data+0x88>)
 800a44e:	f00e fba3 	bl	8018b98 <iprintf>
 800a452:	f06f 030f 	mvn.w	r3, #15
 800a456:	e029      	b.n	800a4ac <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d108      	bne.n	800a470 <netbuf_data+0x3c>
 800a45e:	4b15      	ldr	r3, [pc, #84]	; (800a4b4 <netbuf_data+0x80>)
 800a460:	22c7      	movs	r2, #199	; 0xc7
 800a462:	4917      	ldr	r1, [pc, #92]	; (800a4c0 <netbuf_data+0x8c>)
 800a464:	4815      	ldr	r0, [pc, #84]	; (800a4bc <netbuf_data+0x88>)
 800a466:	f00e fb97 	bl	8018b98 <iprintf>
 800a46a:	f06f 030f 	mvn.w	r3, #15
 800a46e:	e01d      	b.n	800a4ac <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d108      	bne.n	800a488 <netbuf_data+0x54>
 800a476:	4b0f      	ldr	r3, [pc, #60]	; (800a4b4 <netbuf_data+0x80>)
 800a478:	22c8      	movs	r2, #200	; 0xc8
 800a47a:	4912      	ldr	r1, [pc, #72]	; (800a4c4 <netbuf_data+0x90>)
 800a47c:	480f      	ldr	r0, [pc, #60]	; (800a4bc <netbuf_data+0x88>)
 800a47e:	f00e fb8b 	bl	8018b98 <iprintf>
 800a482:	f06f 030f 	mvn.w	r3, #15
 800a486:	e011      	b.n	800a4ac <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	685b      	ldr	r3, [r3, #4]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d102      	bne.n	800a496 <netbuf_data+0x62>
    return ERR_BUF;
 800a490:	f06f 0301 	mvn.w	r3, #1
 800a494:	e00a      	b.n	800a4ac <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	685b      	ldr	r3, [r3, #4]
 800a49a:	685a      	ldr	r2, [r3, #4]
 800a49c:	68bb      	ldr	r3, [r7, #8]
 800a49e:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	685b      	ldr	r3, [r3, #4]
 800a4a4:	895a      	ldrh	r2, [r3, #10]
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 800a4aa:	2300      	movs	r3, #0
}
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	3710      	adds	r7, #16
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd80      	pop	{r7, pc}
 800a4b4:	0801a974 	.word	0x0801a974
 800a4b8:	0801aa7c 	.word	0x0801aa7c
 800a4bc:	0801a9c4 	.word	0x0801a9c4
 800a4c0:	0801aa98 	.word	0x0801aa98
 800a4c4:	0801aab8 	.word	0x0801aab8

0800a4c8 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b082      	sub	sp, #8
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d108      	bne.n	800a4e8 <netbuf_next+0x20>
 800a4d6:	4b11      	ldr	r3, [pc, #68]	; (800a51c <netbuf_next+0x54>)
 800a4d8:	22e0      	movs	r2, #224	; 0xe0
 800a4da:	4911      	ldr	r1, [pc, #68]	; (800a520 <netbuf_next+0x58>)
 800a4dc:	4811      	ldr	r0, [pc, #68]	; (800a524 <netbuf_next+0x5c>)
 800a4de:	f00e fb5b 	bl	8018b98 <iprintf>
 800a4e2:	f04f 33ff 	mov.w	r3, #4294967295
 800a4e6:	e014      	b.n	800a512 <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	685b      	ldr	r3, [r3, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d102      	bne.n	800a4f8 <netbuf_next+0x30>
    return -1;
 800a4f2:	f04f 33ff 	mov.w	r3, #4294967295
 800a4f6:	e00c      	b.n	800a512 <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	685b      	ldr	r3, [r3, #4]
 800a4fc:	681a      	ldr	r2, [r3, #0]
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	685b      	ldr	r3, [r3, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d101      	bne.n	800a510 <netbuf_next+0x48>
    return 1;
 800a50c:	2301      	movs	r3, #1
 800a50e:	e000      	b.n	800a512 <netbuf_next+0x4a>
  }
  return 0;
 800a510:	2300      	movs	r3, #0
}
 800a512:	4618      	mov	r0, r3
 800a514:	3708      	adds	r7, #8
 800a516:	46bd      	mov	sp, r7
 800a518:	bd80      	pop	{r7, pc}
 800a51a:	bf00      	nop
 800a51c:	0801a974 	.word	0x0801a974
 800a520:	0801aad4 	.word	0x0801aad4
 800a524:	0801a9c4 	.word	0x0801a9c4

0800a528 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b084      	sub	sp, #16
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
 800a530:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800a532:	f009 f9b9 	bl	80138a8 <sys_timeouts_sleeptime>
 800a536:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a53e:	d10b      	bne.n	800a558 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800a540:	4813      	ldr	r0, [pc, #76]	; (800a590 <tcpip_timeouts_mbox_fetch+0x68>)
 800a542:	f00e f9bc 	bl	80188be <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800a546:	2200      	movs	r2, #0
 800a548:	6839      	ldr	r1, [r7, #0]
 800a54a:	6878      	ldr	r0, [r7, #4]
 800a54c:	f00e f874 	bl	8018638 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800a550:	480f      	ldr	r0, [pc, #60]	; (800a590 <tcpip_timeouts_mbox_fetch+0x68>)
 800a552:	f00e f9a5 	bl	80188a0 <sys_mutex_lock>
    return;
 800a556:	e018      	b.n	800a58a <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d102      	bne.n	800a564 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800a55e:	f009 f969 	bl	8013834 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800a562:	e7e6      	b.n	800a532 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800a564:	480a      	ldr	r0, [pc, #40]	; (800a590 <tcpip_timeouts_mbox_fetch+0x68>)
 800a566:	f00e f9aa 	bl	80188be <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800a56a:	68fa      	ldr	r2, [r7, #12]
 800a56c:	6839      	ldr	r1, [r7, #0]
 800a56e:	6878      	ldr	r0, [r7, #4]
 800a570:	f00e f862 	bl	8018638 <sys_arch_mbox_fetch>
 800a574:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800a576:	4806      	ldr	r0, [pc, #24]	; (800a590 <tcpip_timeouts_mbox_fetch+0x68>)
 800a578:	f00e f992 	bl	80188a0 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800a57c:	68bb      	ldr	r3, [r7, #8]
 800a57e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a582:	d102      	bne.n	800a58a <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800a584:	f009 f956 	bl	8013834 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800a588:	e7d3      	b.n	800a532 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800a58a:	3710      	adds	r7, #16
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bd80      	pop	{r7, pc}
 800a590:	2000d2b8 	.word	0x2000d2b8

0800a594 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b084      	sub	sp, #16
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800a59c:	4810      	ldr	r0, [pc, #64]	; (800a5e0 <tcpip_thread+0x4c>)
 800a59e:	f00e f97f 	bl	80188a0 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800a5a2:	4b10      	ldr	r3, [pc, #64]	; (800a5e4 <tcpip_thread+0x50>)
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d005      	beq.n	800a5b6 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800a5aa:	4b0e      	ldr	r3, [pc, #56]	; (800a5e4 <tcpip_thread+0x50>)
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	4a0e      	ldr	r2, [pc, #56]	; (800a5e8 <tcpip_thread+0x54>)
 800a5b0:	6812      	ldr	r2, [r2, #0]
 800a5b2:	4610      	mov	r0, r2
 800a5b4:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800a5b6:	f107 030c 	add.w	r3, r7, #12
 800a5ba:	4619      	mov	r1, r3
 800a5bc:	480b      	ldr	r0, [pc, #44]	; (800a5ec <tcpip_thread+0x58>)
 800a5be:	f7ff ffb3 	bl	800a528 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d106      	bne.n	800a5d6 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800a5c8:	4b09      	ldr	r3, [pc, #36]	; (800a5f0 <tcpip_thread+0x5c>)
 800a5ca:	2291      	movs	r2, #145	; 0x91
 800a5cc:	4909      	ldr	r1, [pc, #36]	; (800a5f4 <tcpip_thread+0x60>)
 800a5ce:	480a      	ldr	r0, [pc, #40]	; (800a5f8 <tcpip_thread+0x64>)
 800a5d0:	f00e fae2 	bl	8018b98 <iprintf>
      continue;
 800a5d4:	e003      	b.n	800a5de <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	4618      	mov	r0, r3
 800a5da:	f000 f80f 	bl	800a5fc <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800a5de:	e7ea      	b.n	800a5b6 <tcpip_thread+0x22>
 800a5e0:	2000d2b8 	.word	0x2000d2b8
 800a5e4:	2000d2ac 	.word	0x2000d2ac
 800a5e8:	2000d2b0 	.word	0x2000d2b0
 800a5ec:	2000d2b4 	.word	0x2000d2b4
 800a5f0:	0801ab0c 	.word	0x0801ab0c
 800a5f4:	0801ab3c 	.word	0x0801ab3c
 800a5f8:	0801ab5c 	.word	0x0801ab5c

0800a5fc <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b082      	sub	sp, #8
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	781b      	ldrb	r3, [r3, #0]
 800a608:	2b02      	cmp	r3, #2
 800a60a:	d026      	beq.n	800a65a <tcpip_thread_handle_msg+0x5e>
 800a60c:	2b02      	cmp	r3, #2
 800a60e:	dc2b      	bgt.n	800a668 <tcpip_thread_handle_msg+0x6c>
 800a610:	2b00      	cmp	r3, #0
 800a612:	d002      	beq.n	800a61a <tcpip_thread_handle_msg+0x1e>
 800a614:	2b01      	cmp	r3, #1
 800a616:	d015      	beq.n	800a644 <tcpip_thread_handle_msg+0x48>
 800a618:	e026      	b.n	800a668 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	68db      	ldr	r3, [r3, #12]
 800a61e:	687a      	ldr	r2, [r7, #4]
 800a620:	6850      	ldr	r0, [r2, #4]
 800a622:	687a      	ldr	r2, [r7, #4]
 800a624:	6892      	ldr	r2, [r2, #8]
 800a626:	4611      	mov	r1, r2
 800a628:	4798      	blx	r3
 800a62a:	4603      	mov	r3, r0
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d004      	beq.n	800a63a <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	685b      	ldr	r3, [r3, #4]
 800a634:	4618      	mov	r0, r3
 800a636:	f002 fb7d 	bl	800cd34 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800a63a:	6879      	ldr	r1, [r7, #4]
 800a63c:	2009      	movs	r0, #9
 800a63e:	f001 fcc9 	bl	800bfd4 <memp_free>
      break;
 800a642:	e018      	b.n	800a676 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	685b      	ldr	r3, [r3, #4]
 800a648:	687a      	ldr	r2, [r7, #4]
 800a64a:	6892      	ldr	r2, [r2, #8]
 800a64c:	4610      	mov	r0, r2
 800a64e:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800a650:	6879      	ldr	r1, [r7, #4]
 800a652:	2008      	movs	r0, #8
 800a654:	f001 fcbe 	bl	800bfd4 <memp_free>
      break;
 800a658:	e00d      	b.n	800a676 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	685b      	ldr	r3, [r3, #4]
 800a65e:	687a      	ldr	r2, [r7, #4]
 800a660:	6892      	ldr	r2, [r2, #8]
 800a662:	4610      	mov	r0, r2
 800a664:	4798      	blx	r3
      break;
 800a666:	e006      	b.n	800a676 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800a668:	4b05      	ldr	r3, [pc, #20]	; (800a680 <tcpip_thread_handle_msg+0x84>)
 800a66a:	22cf      	movs	r2, #207	; 0xcf
 800a66c:	4905      	ldr	r1, [pc, #20]	; (800a684 <tcpip_thread_handle_msg+0x88>)
 800a66e:	4806      	ldr	r0, [pc, #24]	; (800a688 <tcpip_thread_handle_msg+0x8c>)
 800a670:	f00e fa92 	bl	8018b98 <iprintf>
      break;
 800a674:	bf00      	nop
  }
}
 800a676:	bf00      	nop
 800a678:	3708      	adds	r7, #8
 800a67a:	46bd      	mov	sp, r7
 800a67c:	bd80      	pop	{r7, pc}
 800a67e:	bf00      	nop
 800a680:	0801ab0c 	.word	0x0801ab0c
 800a684:	0801ab3c 	.word	0x0801ab3c
 800a688:	0801ab5c 	.word	0x0801ab5c

0800a68c <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b086      	sub	sp, #24
 800a690:	af00      	add	r7, sp, #0
 800a692:	60f8      	str	r0, [r7, #12]
 800a694:	60b9      	str	r1, [r7, #8]
 800a696:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800a698:	481a      	ldr	r0, [pc, #104]	; (800a704 <tcpip_inpkt+0x78>)
 800a69a:	f00e f828 	bl	80186ee <sys_mbox_valid>
 800a69e:	4603      	mov	r3, r0
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d105      	bne.n	800a6b0 <tcpip_inpkt+0x24>
 800a6a4:	4b18      	ldr	r3, [pc, #96]	; (800a708 <tcpip_inpkt+0x7c>)
 800a6a6:	22fc      	movs	r2, #252	; 0xfc
 800a6a8:	4918      	ldr	r1, [pc, #96]	; (800a70c <tcpip_inpkt+0x80>)
 800a6aa:	4819      	ldr	r0, [pc, #100]	; (800a710 <tcpip_inpkt+0x84>)
 800a6ac:	f00e fa74 	bl	8018b98 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800a6b0:	2009      	movs	r0, #9
 800a6b2:	f001 fc19 	bl	800bee8 <memp_malloc>
 800a6b6:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800a6b8:	697b      	ldr	r3, [r7, #20]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d102      	bne.n	800a6c4 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800a6be:	f04f 33ff 	mov.w	r3, #4294967295
 800a6c2:	e01a      	b.n	800a6fa <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800a6c4:	697b      	ldr	r3, [r7, #20]
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800a6ca:	697b      	ldr	r3, [r7, #20]
 800a6cc:	68fa      	ldr	r2, [r7, #12]
 800a6ce:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800a6d0:	697b      	ldr	r3, [r7, #20]
 800a6d2:	68ba      	ldr	r2, [r7, #8]
 800a6d4:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800a6d6:	697b      	ldr	r3, [r7, #20]
 800a6d8:	687a      	ldr	r2, [r7, #4]
 800a6da:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800a6dc:	6979      	ldr	r1, [r7, #20]
 800a6de:	4809      	ldr	r0, [pc, #36]	; (800a704 <tcpip_inpkt+0x78>)
 800a6e0:	f00d ff90 	bl	8018604 <sys_mbox_trypost>
 800a6e4:	4603      	mov	r3, r0
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d006      	beq.n	800a6f8 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800a6ea:	6979      	ldr	r1, [r7, #20]
 800a6ec:	2009      	movs	r0, #9
 800a6ee:	f001 fc71 	bl	800bfd4 <memp_free>
    return ERR_MEM;
 800a6f2:	f04f 33ff 	mov.w	r3, #4294967295
 800a6f6:	e000      	b.n	800a6fa <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800a6f8:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	3718      	adds	r7, #24
 800a6fe:	46bd      	mov	sp, r7
 800a700:	bd80      	pop	{r7, pc}
 800a702:	bf00      	nop
 800a704:	2000d2b4 	.word	0x2000d2b4
 800a708:	0801ab0c 	.word	0x0801ab0c
 800a70c:	0801ab84 	.word	0x0801ab84
 800a710:	0801ab5c 	.word	0x0801ab5c

0800a714 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b082      	sub	sp, #8
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
 800a71c:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a724:	f003 0318 	and.w	r3, r3, #24
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d006      	beq.n	800a73a <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800a72c:	4a08      	ldr	r2, [pc, #32]	; (800a750 <tcpip_input+0x3c>)
 800a72e:	6839      	ldr	r1, [r7, #0]
 800a730:	6878      	ldr	r0, [r7, #4]
 800a732:	f7ff ffab 	bl	800a68c <tcpip_inpkt>
 800a736:	4603      	mov	r3, r0
 800a738:	e005      	b.n	800a746 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800a73a:	4a06      	ldr	r2, [pc, #24]	; (800a754 <tcpip_input+0x40>)
 800a73c:	6839      	ldr	r1, [r7, #0]
 800a73e:	6878      	ldr	r0, [r7, #4]
 800a740:	f7ff ffa4 	bl	800a68c <tcpip_inpkt>
 800a744:	4603      	mov	r3, r0
}
 800a746:	4618      	mov	r0, r3
 800a748:	3708      	adds	r7, #8
 800a74a:	46bd      	mov	sp, r7
 800a74c:	bd80      	pop	{r7, pc}
 800a74e:	bf00      	nop
 800a750:	080183f1 	.word	0x080183f1
 800a754:	080172bd 	.word	0x080172bd

0800a758 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b084      	sub	sp, #16
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
 800a760:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800a762:	4819      	ldr	r0, [pc, #100]	; (800a7c8 <tcpip_try_callback+0x70>)
 800a764:	f00d ffc3 	bl	80186ee <sys_mbox_valid>
 800a768:	4603      	mov	r3, r0
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d106      	bne.n	800a77c <tcpip_try_callback+0x24>
 800a76e:	4b17      	ldr	r3, [pc, #92]	; (800a7cc <tcpip_try_callback+0x74>)
 800a770:	f240 125d 	movw	r2, #349	; 0x15d
 800a774:	4916      	ldr	r1, [pc, #88]	; (800a7d0 <tcpip_try_callback+0x78>)
 800a776:	4817      	ldr	r0, [pc, #92]	; (800a7d4 <tcpip_try_callback+0x7c>)
 800a778:	f00e fa0e 	bl	8018b98 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800a77c:	2008      	movs	r0, #8
 800a77e:	f001 fbb3 	bl	800bee8 <memp_malloc>
 800a782:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d102      	bne.n	800a790 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800a78a:	f04f 33ff 	mov.w	r3, #4294967295
 800a78e:	e017      	b.n	800a7c0 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	2201      	movs	r2, #1
 800a794:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	687a      	ldr	r2, [r7, #4]
 800a79a:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	683a      	ldr	r2, [r7, #0]
 800a7a0:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800a7a2:	68f9      	ldr	r1, [r7, #12]
 800a7a4:	4808      	ldr	r0, [pc, #32]	; (800a7c8 <tcpip_try_callback+0x70>)
 800a7a6:	f00d ff2d 	bl	8018604 <sys_mbox_trypost>
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d006      	beq.n	800a7be <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800a7b0:	68f9      	ldr	r1, [r7, #12]
 800a7b2:	2008      	movs	r0, #8
 800a7b4:	f001 fc0e 	bl	800bfd4 <memp_free>
    return ERR_MEM;
 800a7b8:	f04f 33ff 	mov.w	r3, #4294967295
 800a7bc:	e000      	b.n	800a7c0 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800a7be:	2300      	movs	r3, #0
}
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	3710      	adds	r7, #16
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}
 800a7c8:	2000d2b4 	.word	0x2000d2b4
 800a7cc:	0801ab0c 	.word	0x0801ab0c
 800a7d0:	0801ab84 	.word	0x0801ab84
 800a7d4:	0801ab5c 	.word	0x0801ab5c

0800a7d8 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b084      	sub	sp, #16
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	60f8      	str	r0, [r7, #12]
 800a7e0:	60b9      	str	r1, [r7, #8]
 800a7e2:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800a7e4:	4806      	ldr	r0, [pc, #24]	; (800a800 <tcpip_send_msg_wait_sem+0x28>)
 800a7e6:	f00e f85b 	bl	80188a0 <sys_mutex_lock>
  fn(apimsg);
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	68b8      	ldr	r0, [r7, #8]
 800a7ee:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800a7f0:	4803      	ldr	r0, [pc, #12]	; (800a800 <tcpip_send_msg_wait_sem+0x28>)
 800a7f2:	f00e f864 	bl	80188be <sys_mutex_unlock>
  return ERR_OK;
 800a7f6:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	3710      	adds	r7, #16
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	bd80      	pop	{r7, pc}
 800a800:	2000d2b8 	.word	0x2000d2b8

0800a804 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b084      	sub	sp, #16
 800a808:	af02      	add	r7, sp, #8
 800a80a:	6078      	str	r0, [r7, #4]
 800a80c:	6039      	str	r1, [r7, #0]
  lwip_init();
 800a80e:	f000 fec1 	bl	800b594 <lwip_init>

  tcpip_init_done = initfunc;
 800a812:	4a17      	ldr	r2, [pc, #92]	; (800a870 <tcpip_init+0x6c>)
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800a818:	4a16      	ldr	r2, [pc, #88]	; (800a874 <tcpip_init+0x70>)
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800a81e:	2106      	movs	r1, #6
 800a820:	4815      	ldr	r0, [pc, #84]	; (800a878 <tcpip_init+0x74>)
 800a822:	f00d febb 	bl	801859c <sys_mbox_new>
 800a826:	4603      	mov	r3, r0
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d006      	beq.n	800a83a <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800a82c:	4b13      	ldr	r3, [pc, #76]	; (800a87c <tcpip_init+0x78>)
 800a82e:	f240 2261 	movw	r2, #609	; 0x261
 800a832:	4913      	ldr	r1, [pc, #76]	; (800a880 <tcpip_init+0x7c>)
 800a834:	4813      	ldr	r0, [pc, #76]	; (800a884 <tcpip_init+0x80>)
 800a836:	f00e f9af 	bl	8018b98 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800a83a:	4813      	ldr	r0, [pc, #76]	; (800a888 <tcpip_init+0x84>)
 800a83c:	f00e f814 	bl	8018868 <sys_mutex_new>
 800a840:	4603      	mov	r3, r0
 800a842:	2b00      	cmp	r3, #0
 800a844:	d006      	beq.n	800a854 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800a846:	4b0d      	ldr	r3, [pc, #52]	; (800a87c <tcpip_init+0x78>)
 800a848:	f240 2265 	movw	r2, #613	; 0x265
 800a84c:	490f      	ldr	r1, [pc, #60]	; (800a88c <tcpip_init+0x88>)
 800a84e:	480d      	ldr	r0, [pc, #52]	; (800a884 <tcpip_init+0x80>)
 800a850:	f00e f9a2 	bl	8018b98 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800a854:	2300      	movs	r3, #0
 800a856:	9300      	str	r3, [sp, #0]
 800a858:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a85c:	2200      	movs	r2, #0
 800a85e:	490c      	ldr	r1, [pc, #48]	; (800a890 <tcpip_init+0x8c>)
 800a860:	480c      	ldr	r0, [pc, #48]	; (800a894 <tcpip_init+0x90>)
 800a862:	f00e f839 	bl	80188d8 <sys_thread_new>
}
 800a866:	bf00      	nop
 800a868:	3708      	adds	r7, #8
 800a86a:	46bd      	mov	sp, r7
 800a86c:	bd80      	pop	{r7, pc}
 800a86e:	bf00      	nop
 800a870:	2000d2ac 	.word	0x2000d2ac
 800a874:	2000d2b0 	.word	0x2000d2b0
 800a878:	2000d2b4 	.word	0x2000d2b4
 800a87c:	0801ab0c 	.word	0x0801ab0c
 800a880:	0801ab94 	.word	0x0801ab94
 800a884:	0801ab5c 	.word	0x0801ab5c
 800a888:	2000d2b8 	.word	0x2000d2b8
 800a88c:	0801abb8 	.word	0x0801abb8
 800a890:	0800a595 	.word	0x0800a595
 800a894:	0801abdc 	.word	0x0801abdc

0800a898 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b084      	sub	sp, #16
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
 800a8a0:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d002      	beq.n	800a8ae <fs_open+0x16>
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d102      	bne.n	800a8b4 <fs_open+0x1c>
    return ERR_ARG;
 800a8ae:	f06f 030f 	mvn.w	r3, #15
 800a8b2:	e028      	b.n	800a906 <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 800a8b4:	4b16      	ldr	r3, [pc, #88]	; (800a910 <fs_open+0x78>)
 800a8b6:	60fb      	str	r3, [r7, #12]
 800a8b8:	e020      	b.n	800a8fc <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	685b      	ldr	r3, [r3, #4]
 800a8be:	4619      	mov	r1, r3
 800a8c0:	6838      	ldr	r0, [r7, #0]
 800a8c2:	f7f5 fc95 	bl	80001f0 <strcmp>
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d114      	bne.n	800a8f6 <fs_open+0x5e>
      file->data = (const char *)f->data;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	689a      	ldr	r2, [r3, #8]
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	68da      	ldr	r2, [r3, #12]
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	68da      	ldr	r2, [r3, #12]
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	7c1a      	ldrb	r2, [r3, #16]
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	e007      	b.n	800a906 <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	60fb      	str	r3, [r7, #12]
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d1db      	bne.n	800a8ba <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 800a902:	f06f 0305 	mvn.w	r3, #5
}
 800a906:	4618      	mov	r0, r3
 800a908:	3710      	adds	r7, #16
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bd80      	pop	{r7, pc}
 800a90e:	bf00      	nop
 800a910:	08027c78 	.word	0x08027c78

0800a914 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 800a914:	b480      	push	{r7}
 800a916:	b083      	sub	sp, #12
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 800a91c:	bf00      	nop
 800a91e:	370c      	adds	r7, #12
 800a920:	46bd      	mov	sp, r7
 800a922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a926:	4770      	bx	lr

0800a928 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 800a928:	b480      	push	{r7}
 800a92a:	b083      	sub	sp, #12
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	685a      	ldr	r2, [r3, #4]
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	689b      	ldr	r3, [r3, #8]
 800a938:	1ad3      	subs	r3, r2, r3
}
 800a93a:	4618      	mov	r0, r3
 800a93c:	370c      	adds	r7, #12
 800a93e:	46bd      	mov	sp, r7
 800a940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a944:	4770      	bx	lr

0800a946 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 800a946:	b580      	push	{r7, lr}
 800a948:	b082      	sub	sp, #8
 800a94a:	af00      	add	r7, sp, #0
 800a94c:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 800a94e:	222c      	movs	r2, #44	; 0x2c
 800a950:	2100      	movs	r1, #0
 800a952:	6878      	ldr	r0, [r7, #4]
 800a954:	f00e f9bf 	bl	8018cd6 <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 800a958:	bf00      	nop
 800a95a:	3708      	adds	r7, #8
 800a95c:	46bd      	mov	sp, r7
 800a95e:	bd80      	pop	{r7, pc}

0800a960 <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b082      	sub	sp, #8
 800a964:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 800a966:	202c      	movs	r0, #44	; 0x2c
 800a968:	f001 f91a 	bl	800bba0 <mem_malloc>
 800a96c:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d002      	beq.n	800a97a <http_state_alloc+0x1a>
    http_state_init(ret);
 800a974:	6878      	ldr	r0, [r7, #4]
 800a976:	f7ff ffe6 	bl	800a946 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 800a97a:	687b      	ldr	r3, [r7, #4]
}
 800a97c:	4618      	mov	r0, r3
 800a97e:	3708      	adds	r7, #8
 800a980:	46bd      	mov	sp, r7
 800a982:	bd80      	pop	{r7, pc}

0800a984 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b082      	sub	sp, #8
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	695b      	ldr	r3, [r3, #20]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d007      	beq.n	800a9a4 <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	695b      	ldr	r3, [r3, #20]
 800a998:	4618      	mov	r0, r3
 800a99a:	f7ff ffbb 	bl	800a914 <fs_close>
    hs->handle = NULL;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	615a      	str	r2, [r3, #20]
    http_ssi_state_free(hs->ssi);
    hs->ssi = NULL;
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6a1b      	ldr	r3, [r3, #32]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d007      	beq.n	800a9bc <http_state_eof+0x38>
    pbuf_free(hs->req);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	6a1b      	ldr	r3, [r3, #32]
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	f002 f9bf 	bl	800cd34 <pbuf_free>
    hs->req = NULL;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 800a9bc:	bf00      	nop
 800a9be:	3708      	adds	r7, #8
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	bd80      	pop	{r7, pc}

0800a9c4 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b082      	sub	sp, #8
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d005      	beq.n	800a9de <http_state_free+0x1a>
    http_state_eof(hs);
 800a9d2:	6878      	ldr	r0, [r7, #4]
 800a9d4:	f7ff ffd6 	bl	800a984 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 800a9d8:	6878      	ldr	r0, [r7, #4]
 800a9da:	f000 ff47 	bl	800b86c <mem_free>
  }
}
 800a9de:	bf00      	nop
 800a9e0:	3708      	adds	r7, #8
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bd80      	pop	{r7, pc}
	...

0800a9e8 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b086      	sub	sp, #24
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	60f8      	str	r0, [r7, #12]
 800a9f0:	60b9      	str	r1, [r7, #8]
 800a9f2:	607a      	str	r2, [r7, #4]
 800a9f4:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d106      	bne.n	800aa0a <http_write+0x22>
 800a9fc:	4b2c      	ldr	r3, [pc, #176]	; (800aab0 <http_write+0xc8>)
 800a9fe:	f240 2219 	movw	r2, #537	; 0x219
 800aa02:	492c      	ldr	r1, [pc, #176]	; (800aab4 <http_write+0xcc>)
 800aa04:	482c      	ldr	r0, [pc, #176]	; (800aab8 <http_write+0xd0>)
 800aa06:	f00e f8c7 	bl	8018b98 <iprintf>
  len = *length;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	881b      	ldrh	r3, [r3, #0]
 800aa0e:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 800aa10:	8afb      	ldrh	r3, [r7, #22]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d101      	bne.n	800aa1a <http_write+0x32>
    return ERR_OK;
 800aa16:	2300      	movs	r3, #0
 800aa18:	e045      	b.n	800aaa6 <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800aa20:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 800aa22:	8aba      	ldrh	r2, [r7, #20]
 800aa24:	8afb      	ldrh	r3, [r7, #22]
 800aa26:	429a      	cmp	r2, r3
 800aa28:	d201      	bcs.n	800aa2e <http_write+0x46>
    len = max_len;
 800aa2a:	8abb      	ldrh	r3, [r7, #20]
 800aa2c:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aa32:	005b      	lsls	r3, r3, #1
 800aa34:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 800aa36:	8afa      	ldrh	r2, [r7, #22]
 800aa38:	8abb      	ldrh	r3, [r7, #20]
 800aa3a:	429a      	cmp	r2, r3
 800aa3c:	d901      	bls.n	800aa42 <http_write+0x5a>
    len = max_len;
 800aa3e:	8abb      	ldrh	r3, [r7, #20]
 800aa40:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 800aa42:	78fb      	ldrb	r3, [r7, #3]
 800aa44:	8afa      	ldrh	r2, [r7, #22]
 800aa46:	68b9      	ldr	r1, [r7, #8]
 800aa48:	68f8      	ldr	r0, [r7, #12]
 800aa4a:	f007 f88b 	bl	8011b64 <tcp_write>
 800aa4e:	4603      	mov	r3, r0
 800aa50:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 800aa52:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800aa56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa5a:	d10f      	bne.n	800aa7c <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d004      	beq.n	800aa70 <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 800aa6c:	2b08      	cmp	r3, #8
 800aa6e:	d902      	bls.n	800aa76 <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 800aa70:	2301      	movs	r3, #1
 800aa72:	82fb      	strh	r3, [r7, #22]
 800aa74:	e002      	b.n	800aa7c <http_write+0x94>
      } else {
        len /= 2;
 800aa76:	8afb      	ldrh	r3, [r7, #22]
 800aa78:	085b      	lsrs	r3, r3, #1
 800aa7a:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 800aa7c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800aa80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa84:	d102      	bne.n	800aa8c <http_write+0xa4>
 800aa86:	8afb      	ldrh	r3, [r7, #22]
 800aa88:	2b01      	cmp	r3, #1
 800aa8a:	d8da      	bhi.n	800aa42 <http_write+0x5a>

  if (err == ERR_OK) {
 800aa8c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d103      	bne.n	800aa9c <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	8afa      	ldrh	r2, [r7, #22]
 800aa98:	801a      	strh	r2, [r3, #0]
 800aa9a:	e002      	b.n	800aaa2 <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 800aaa2:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	3718      	adds	r7, #24
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bd80      	pop	{r7, pc}
 800aaae:	bf00      	nop
 800aab0:	0801ac2c 	.word	0x0801ac2c
 800aab4:	0801ac64 	.word	0x0801ac64
 800aab8:	0801ac74 	.word	0x0801ac74

0800aabc <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b086      	sub	sp, #24
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	60f8      	str	r0, [r7, #12]
 800aac4:	60b9      	str	r1, [r7, #8]
 800aac6:	4613      	mov	r3, r2
 800aac8:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 800aaca:	2100      	movs	r1, #0
 800aacc:	68f8      	ldr	r0, [r7, #12]
 800aace:	f004 f907 	bl	800ece0 <tcp_arg>
  altcp_recv(pcb, NULL);
 800aad2:	2100      	movs	r1, #0
 800aad4:	68f8      	ldr	r0, [r7, #12]
 800aad6:	f004 f915 	bl	800ed04 <tcp_recv>
  altcp_err(pcb, NULL);
 800aada:	2100      	movs	r1, #0
 800aadc:	68f8      	ldr	r0, [r7, #12]
 800aade:	f004 f955 	bl	800ed8c <tcp_err>
  altcp_poll(pcb, NULL, 0);
 800aae2:	2200      	movs	r2, #0
 800aae4:	2100      	movs	r1, #0
 800aae6:	68f8      	ldr	r0, [r7, #12]
 800aae8:	f004 f98a 	bl	800ee00 <tcp_poll>
  altcp_sent(pcb, NULL);
 800aaec:	2100      	movs	r1, #0
 800aaee:	68f8      	ldr	r0, [r7, #12]
 800aaf0:	f004 f92a 	bl	800ed48 <tcp_sent>
  if (hs != NULL) {
 800aaf4:	68bb      	ldr	r3, [r7, #8]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d002      	beq.n	800ab00 <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 800aafa:	68b8      	ldr	r0, [r7, #8]
 800aafc:	f7ff ff62 	bl	800a9c4 <http_state_free>
  }

  if (abort_conn) {
 800ab00:	79fb      	ldrb	r3, [r7, #7]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d004      	beq.n	800ab10 <http_close_or_abort_conn+0x54>
    altcp_abort(pcb);
 800ab06:	68f8      	ldr	r0, [r7, #12]
 800ab08:	f002 ff14 	bl	800d934 <tcp_abort>
    return ERR_OK;
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	e00f      	b.n	800ab30 <http_close_or_abort_conn+0x74>
  }
  err = altcp_close(pcb);
 800ab10:	68f8      	ldr	r0, [r7, #12]
 800ab12:	f002 fdc9 	bl	800d6a8 <tcp_close>
 800ab16:	4603      	mov	r3, r0
 800ab18:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 800ab1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d004      	beq.n	800ab2c <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800ab22:	2204      	movs	r2, #4
 800ab24:	4904      	ldr	r1, [pc, #16]	; (800ab38 <http_close_or_abort_conn+0x7c>)
 800ab26:	68f8      	ldr	r0, [r7, #12]
 800ab28:	f004 f96a 	bl	800ee00 <tcp_poll>
  }
  return err;
 800ab2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ab30:	4618      	mov	r0, r3
 800ab32:	3718      	adds	r7, #24
 800ab34:	46bd      	mov	sp, r7
 800ab36:	bd80      	pop	{r7, pc}
 800ab38:	0800b1ff 	.word	0x0800b1ff

0800ab3c <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b082      	sub	sp, #8
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
 800ab44:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 800ab46:	2200      	movs	r2, #0
 800ab48:	6839      	ldr	r1, [r7, #0]
 800ab4a:	6878      	ldr	r0, [r7, #4]
 800ab4c:	f7ff ffb6 	bl	800aabc <http_close_or_abort_conn>
 800ab50:	4603      	mov	r3, r0
}
 800ab52:	4618      	mov	r0, r3
 800ab54:	3708      	adds	r7, #8
 800ab56:	46bd      	mov	sp, r7
 800ab58:	bd80      	pop	{r7, pc}

0800ab5a <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800ab5a:	b580      	push	{r7, lr}
 800ab5c:	b082      	sub	sp, #8
 800ab5e:	af00      	add	r7, sp, #0
 800ab60:	6078      	str	r0, [r7, #4]
 800ab62:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 800ab64:	6839      	ldr	r1, [r7, #0]
 800ab66:	6878      	ldr	r0, [r7, #4]
 800ab68:	f7ff ffe8 	bl	800ab3c <http_close_conn>
  }
}
 800ab6c:	bf00      	nop
 800ab6e:	3708      	adds	r7, #8
 800ab70:	46bd      	mov	sp, r7
 800ab72:	bd80      	pop	{r7, pc}

0800ab74 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b084      	sub	sp, #16
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
 800ab7c:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 800ab7e:	683b      	ldr	r3, [r7, #0]
 800ab80:	695b      	ldr	r3, [r3, #20]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d105      	bne.n	800ab92 <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 800ab86:	6839      	ldr	r1, [r7, #0]
 800ab88:	6878      	ldr	r0, [r7, #4]
 800ab8a:	f7ff ffe6 	bl	800ab5a <http_eof>
    return 0;
 800ab8e:	2300      	movs	r3, #0
 800ab90:	e016      	b.n	800abc0 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	695b      	ldr	r3, [r3, #20]
 800ab96:	4618      	mov	r0, r3
 800ab98:	f7ff fec6 	bl	800a928 <fs_bytes_left>
 800ab9c:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	dc05      	bgt.n	800abb0 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800aba4:	6839      	ldr	r1, [r7, #0]
 800aba6:	6878      	ldr	r0, [r7, #4]
 800aba8:	f7ff ffd7 	bl	800ab5a <http_eof>
    return 0;
 800abac:	2300      	movs	r3, #0
 800abae:	e007      	b.n	800abc0 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 800abb0:	4b05      	ldr	r3, [pc, #20]	; (800abc8 <http_check_eof+0x54>)
 800abb2:	f240 429d 	movw	r2, #1181	; 0x49d
 800abb6:	4905      	ldr	r1, [pc, #20]	; (800abcc <http_check_eof+0x58>)
 800abb8:	4805      	ldr	r0, [pc, #20]	; (800abd0 <http_check_eof+0x5c>)
 800abba:	f00d ffed 	bl	8018b98 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 800abbe:	2301      	movs	r3, #1
}
 800abc0:	4618      	mov	r0, r3
 800abc2:	3710      	adds	r7, #16
 800abc4:	46bd      	mov	sp, r7
 800abc6:	bd80      	pop	{r7, pc}
 800abc8:	0801ac2c 	.word	0x0801ac2c
 800abcc:	0801ac9c 	.word	0x0801ac9c
 800abd0:	0801ac74 	.word	0x0801ac74

0800abd4 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b084      	sub	sp, #16
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
 800abdc:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 800abde:	2300      	movs	r3, #0
 800abe0:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 800abe2:	683b      	ldr	r3, [r7, #0]
 800abe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abe6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800abea:	4293      	cmp	r3, r2
 800abec:	d803      	bhi.n	800abf6 <http_send_data_nonssi+0x22>
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abf2:	b29b      	uxth	r3, r3
 800abf4:	e001      	b.n	800abfa <http_send_data_nonssi+0x26>
 800abf6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800abfa:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	6999      	ldr	r1, [r3, #24]
 800ac00:	f107 020c 	add.w	r2, r7, #12
 800ac04:	2300      	movs	r3, #0
 800ac06:	6878      	ldr	r0, [r7, #4]
 800ac08:	f7ff feee 	bl	800a9e8 <http_write>
 800ac0c:	4603      	mov	r3, r0
 800ac0e:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 800ac10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d10d      	bne.n	800ac34 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 800ac18:	2301      	movs	r3, #1
 800ac1a:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	699b      	ldr	r3, [r3, #24]
 800ac20:	89ba      	ldrh	r2, [r7, #12]
 800ac22:	441a      	add	r2, r3
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac2c:	89ba      	ldrh	r2, [r7, #12]
 800ac2e:	1a9a      	subs	r2, r3, r2
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 800ac34:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac36:	4618      	mov	r0, r3
 800ac38:	3710      	adds	r7, #16
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	bd80      	pop	{r7, pc}

0800ac3e <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 800ac3e:	b580      	push	{r7, lr}
 800ac40:	b084      	sub	sp, #16
 800ac42:	af00      	add	r7, sp, #0
 800ac44:	6078      	str	r0, [r7, #4]
 800ac46:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 800ac48:	2300      	movs	r3, #0
 800ac4a:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 800ac4c:	683b      	ldr	r3, [r7, #0]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d101      	bne.n	800ac56 <http_send+0x18>
    return 0;
 800ac52:	2300      	movs	r3, #0
 800ac54:	e025      	b.n	800aca2 <http_send+0x64>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 800ac56:	683b      	ldr	r3, [r7, #0]
 800ac58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d108      	bne.n	800ac70 <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 800ac5e:	6839      	ldr	r1, [r7, #0]
 800ac60:	6878      	ldr	r0, [r7, #4]
 800ac62:	f7ff ff87 	bl	800ab74 <http_check_eof>
 800ac66:	4603      	mov	r3, r0
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d101      	bne.n	800ac70 <http_send+0x32>
      return 0;
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	e018      	b.n	800aca2 <http_send+0x64>
  if (hs->ssi) {
    data_to_send = http_send_data_ssi(pcb, hs);
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 800ac70:	6839      	ldr	r1, [r7, #0]
 800ac72:	6878      	ldr	r0, [r7, #4]
 800ac74:	f7ff ffae 	bl	800abd4 <http_send_data_nonssi>
 800ac78:	4603      	mov	r3, r0
 800ac7a:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d10d      	bne.n	800aca0 <http_send+0x62>
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	695b      	ldr	r3, [r3, #20]
 800ac88:	4618      	mov	r0, r3
 800ac8a:	f7ff fe4d 	bl	800a928 <fs_bytes_left>
 800ac8e:	4603      	mov	r3, r0
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	dc05      	bgt.n	800aca0 <http_send+0x62>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800ac94:	6839      	ldr	r1, [r7, #0]
 800ac96:	6878      	ldr	r0, [r7, #4]
 800ac98:	f7ff ff5f 	bl	800ab5a <http_eof>
    return 0;
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	e000      	b.n	800aca2 <http_send+0x64>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 800aca0:	7bfb      	ldrb	r3, [r7, #15]
}
 800aca2:	4618      	mov	r0, r3
 800aca4:	3710      	adds	r7, #16
 800aca6:	46bd      	mov	sp, r7
 800aca8:	bd80      	pop	{r7, pc}
	...

0800acac <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b084      	sub	sp, #16
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
 800acb4:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 800acb6:	683b      	ldr	r3, [r7, #0]
 800acb8:	4a1c      	ldr	r2, [pc, #112]	; (800ad2c <http_get_404_file+0x80>)
 800acba:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 800acbc:	687a      	ldr	r2, [r7, #4]
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	4619      	mov	r1, r3
 800acc4:	4610      	mov	r0, r2
 800acc6:	f7ff fde7 	bl	800a898 <fs_open>
 800acca:	4603      	mov	r3, r0
 800accc:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800acce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d024      	beq.n	800ad20 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	4a15      	ldr	r2, [pc, #84]	; (800ad30 <http_get_404_file+0x84>)
 800acda:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 800acdc:	687a      	ldr	r2, [r7, #4]
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	4619      	mov	r1, r3
 800ace4:	4610      	mov	r0, r2
 800ace6:	f7ff fdd7 	bl	800a898 <fs_open>
 800acea:	4603      	mov	r3, r0
 800acec:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800acee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d014      	beq.n	800ad20 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	4a0e      	ldr	r2, [pc, #56]	; (800ad34 <http_get_404_file+0x88>)
 800acfa:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 800acfc:	687a      	ldr	r2, [r7, #4]
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	4619      	mov	r1, r3
 800ad04:	4610      	mov	r0, r2
 800ad06:	f7ff fdc7 	bl	800a898 <fs_open>
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 800ad0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d004      	beq.n	800ad20 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	2200      	movs	r2, #0
 800ad1a:	601a      	str	r2, [r3, #0]
        return NULL;
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	e000      	b.n	800ad22 <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 800ad20:	687b      	ldr	r3, [r7, #4]
}
 800ad22:	4618      	mov	r0, r3
 800ad24:	3710      	adds	r7, #16
 800ad26:	46bd      	mov	sp, r7
 800ad28:	bd80      	pop	{r7, pc}
 800ad2a:	bf00      	nop
 800ad2c:	0801acd4 	.word	0x0801acd4
 800ad30:	0801ace0 	.word	0x0801ace0
 800ad34:	0801acec 	.word	0x0801acec

0800ad38 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b08e      	sub	sp, #56	; 0x38
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	60f8      	str	r0, [r7, #12]
 800ad40:	60b9      	str	r1, [r7, #8]
 800ad42:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 800ad48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d106      	bne.n	800ad5c <http_parse_request+0x24>
 800ad4e:	4b65      	ldr	r3, [pc, #404]	; (800aee4 <http_parse_request+0x1ac>)
 800ad50:	f240 72ae 	movw	r2, #1966	; 0x7ae
 800ad54:	4964      	ldr	r1, [pc, #400]	; (800aee8 <http_parse_request+0x1b0>)
 800ad56:	4865      	ldr	r0, [pc, #404]	; (800aeec <http_parse_request+0x1b4>)
 800ad58:	f00d ff1e 	bl	8018b98 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 800ad5c:	68bb      	ldr	r3, [r7, #8]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d106      	bne.n	800ad70 <http_parse_request+0x38>
 800ad62:	4b60      	ldr	r3, [pc, #384]	; (800aee4 <http_parse_request+0x1ac>)
 800ad64:	f240 72af 	movw	r2, #1967	; 0x7af
 800ad68:	4961      	ldr	r1, [pc, #388]	; (800aef0 <http_parse_request+0x1b8>)
 800ad6a:	4860      	ldr	r0, [pc, #384]	; (800aeec <http_parse_request+0x1b4>)
 800ad6c:	f00d ff14 	bl	8018b98 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 800ad70:	68bb      	ldr	r3, [r7, #8]
 800ad72:	695b      	ldr	r3, [r3, #20]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d103      	bne.n	800ad80 <http_parse_request+0x48>
 800ad78:	68bb      	ldr	r3, [r7, #8]
 800ad7a:	699b      	ldr	r3, [r3, #24]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d002      	beq.n	800ad86 <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 800ad80:	f06f 0307 	mvn.w	r3, #7
 800ad84:	e0a9      	b.n	800aeda <http_parse_request+0x1a2>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 800ad86:	68bb      	ldr	r3, [r7, #8]
 800ad88:	6a1b      	ldr	r3, [r3, #32]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d103      	bne.n	800ad96 <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 800ad8e:	68bb      	ldr	r3, [r7, #8]
 800ad90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad92:	621a      	str	r2, [r3, #32]
 800ad94:	e005      	b.n	800ada2 <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 800ad96:	68bb      	ldr	r3, [r7, #8]
 800ad98:	6a1b      	ldr	r3, [r3, #32]
 800ad9a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	f002 f897 	bl	800ced0 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 800ada2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ada4:	f002 f86c 	bl	800ce80 <pbuf_ref>

  if (hs->req->next != NULL) {
 800ada8:	68bb      	ldr	r3, [r7, #8]
 800adaa:	6a1b      	ldr	r3, [r3, #32]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d012      	beq.n	800add8 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 800adb2:	68bb      	ldr	r3, [r7, #8]
 800adb4:	6a1b      	ldr	r3, [r3, #32]
 800adb6:	891b      	ldrh	r3, [r3, #8]
 800adb8:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800adbc:	4293      	cmp	r3, r2
 800adbe:	bf28      	it	cs
 800adc0:	4613      	movcs	r3, r2
 800adc2:	867b      	strh	r3, [r7, #50]	; 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 800adc4:	68bb      	ldr	r3, [r7, #8]
 800adc6:	6a18      	ldr	r0, [r3, #32]
 800adc8:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800adca:	2300      	movs	r3, #0
 800adcc:	4949      	ldr	r1, [pc, #292]	; (800aef4 <http_parse_request+0x1bc>)
 800adce:	f002 f9b7 	bl	800d140 <pbuf_copy_partial>
    data = httpd_req_buf;
 800add2:	4b48      	ldr	r3, [pc, #288]	; (800aef4 <http_parse_request+0x1bc>)
 800add4:	637b      	str	r3, [r7, #52]	; 0x34
 800add6:	e005      	b.n	800ade4 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 800add8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adda:	685b      	ldr	r3, [r3, #4]
 800addc:	637b      	str	r3, [r7, #52]	; 0x34
    data_len = p->len;
 800adde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ade0:	895b      	ldrh	r3, [r3, #10]
 800ade2:	867b      	strh	r3, [r7, #50]	; 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 800ade4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800ade6:	2b06      	cmp	r3, #6
 800ade8:	d962      	bls.n	800aeb0 <http_parse_request+0x178>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 800adea:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800adec:	461a      	mov	r2, r3
 800adee:	4942      	ldr	r1, [pc, #264]	; (800aef8 <http_parse_request+0x1c0>)
 800adf0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800adf2:	f000 fb99 	bl	800b528 <lwip_strnstr>
 800adf6:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 800adf8:	6a3b      	ldr	r3, [r7, #32]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d058      	beq.n	800aeb0 <http_parse_request+0x178>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 800adfe:	2300      	movs	r3, #0
 800ae00:	62fb      	str	r3, [r7, #44]	; 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 800ae02:	2204      	movs	r2, #4
 800ae04:	493d      	ldr	r1, [pc, #244]	; (800aefc <http_parse_request+0x1c4>)
 800ae06:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ae08:	f00d ff95 	bl	8018d36 <strncmp>
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d116      	bne.n	800ae40 <http_parse_request+0x108>
        sp1 = data + 3;
 800ae12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae14:	3303      	adds	r3, #3
 800ae16:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 800ae18:	69fb      	ldr	r3, [r7, #28]
 800ae1a:	1c5a      	adds	r2, r3, #1
 800ae1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae1e:	1ad3      	subs	r3, r2, r3
 800ae20:	b29b      	uxth	r3, r3
 800ae22:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800ae24:	1ad3      	subs	r3, r2, r3
 800ae26:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 800ae28:	69fb      	ldr	r3, [r7, #28]
 800ae2a:	3301      	adds	r3, #1
 800ae2c:	8b7a      	ldrh	r2, [r7, #26]
 800ae2e:	4934      	ldr	r1, [pc, #208]	; (800af00 <http_parse_request+0x1c8>)
 800ae30:	4618      	mov	r0, r3
 800ae32:	f000 fb79 	bl	800b528 <lwip_strnstr>
 800ae36:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 800ae38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d111      	bne.n	800ae62 <http_parse_request+0x12a>
 800ae3e:	e006      	b.n	800ae4e <http_parse_request+0x116>
        data[4] = 0;
 800ae40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae42:	3304      	adds	r3, #4
 800ae44:	2200      	movs	r2, #0
 800ae46:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 800ae48:	f06f 030f 	mvn.w	r3, #15
 800ae4c:	e045      	b.n	800aeda <http_parse_request+0x1a2>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 800ae4e:	69fb      	ldr	r3, [r7, #28]
 800ae50:	3301      	adds	r3, #1
 800ae52:	8b7a      	ldrh	r2, [r7, #26]
 800ae54:	4928      	ldr	r1, [pc, #160]	; (800aef8 <http_parse_request+0x1c0>)
 800ae56:	4618      	mov	r0, r3
 800ae58:	f000 fb66 	bl	800b528 <lwip_strnstr>
 800ae5c:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 800ae5e:	2301      	movs	r3, #1
 800ae60:	62fb      	str	r3, [r7, #44]	; 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 800ae62:	69fb      	ldr	r3, [r7, #28]
 800ae64:	3301      	adds	r3, #1
 800ae66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae68:	1ad3      	subs	r3, r2, r3
 800ae6a:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 800ae6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d01e      	beq.n	800aeb0 <http_parse_request+0x178>
 800ae72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae74:	69fb      	ldr	r3, [r7, #28]
 800ae76:	429a      	cmp	r2, r3
 800ae78:	d91a      	bls.n	800aeb0 <http_parse_request+0x178>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 800ae7a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800ae7c:	461a      	mov	r2, r3
 800ae7e:	4921      	ldr	r1, [pc, #132]	; (800af04 <http_parse_request+0x1cc>)
 800ae80:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ae82:	f000 fb51 	bl	800b528 <lwip_strnstr>
 800ae86:	4603      	mov	r3, r0
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d011      	beq.n	800aeb0 <http_parse_request+0x178>
          char *uri = sp1 + 1;
 800ae8c:	69fb      	ldr	r3, [r7, #28]
 800ae8e:	3301      	adds	r3, #1
 800ae90:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 800ae92:	69fb      	ldr	r3, [r7, #28]
 800ae94:	2200      	movs	r2, #0
 800ae96:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 800ae98:	8b3b      	ldrh	r3, [r7, #24]
 800ae9a:	697a      	ldr	r2, [r7, #20]
 800ae9c:	4413      	add	r3, r2
 800ae9e:	2200      	movs	r2, #0
 800aea0:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 800aea2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aea4:	6979      	ldr	r1, [r7, #20]
 800aea6:	68b8      	ldr	r0, [r7, #8]
 800aea8:	f000 f82e 	bl	800af08 <http_find_file>
 800aeac:	4603      	mov	r3, r0
 800aeae:	e014      	b.n	800aeda <http_parse_request+0x1a2>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 800aeb0:	68bb      	ldr	r3, [r7, #8]
 800aeb2:	6a1b      	ldr	r3, [r3, #32]
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	f001 ffcb 	bl	800ce50 <pbuf_clen>
 800aeba:	4603      	mov	r3, r0
 800aebc:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 800aebe:	68bb      	ldr	r3, [r7, #8]
 800aec0:	6a1b      	ldr	r3, [r3, #32]
 800aec2:	891b      	ldrh	r3, [r3, #8]
 800aec4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aec8:	d205      	bcs.n	800aed6 <http_parse_request+0x19e>
 800aeca:	8a7b      	ldrh	r3, [r7, #18]
 800aecc:	2b05      	cmp	r3, #5
 800aece:	d802      	bhi.n	800aed6 <http_parse_request+0x19e>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 800aed0:	f06f 0304 	mvn.w	r3, #4
 800aed4:	e001      	b.n	800aeda <http_parse_request+0x1a2>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 800aed6:	f06f 030f 	mvn.w	r3, #15
  }
}
 800aeda:	4618      	mov	r0, r3
 800aedc:	3738      	adds	r7, #56	; 0x38
 800aede:	46bd      	mov	sp, r7
 800aee0:	bd80      	pop	{r7, pc}
 800aee2:	bf00      	nop
 800aee4:	0801ac2c 	.word	0x0801ac2c
 800aee8:	0801acf8 	.word	0x0801acf8
 800aeec:	0801ac74 	.word	0x0801ac74
 800aef0:	0801ad04 	.word	0x0801ad04
 800aef4:	2000d2bc 	.word	0x2000d2bc
 800aef8:	0801ad10 	.word	0x0801ad10
 800aefc:	0801ad14 	.word	0x0801ad14
 800af00:	0801ad1c 	.word	0x0801ad1c
 800af04:	0801ad20 	.word	0x0801ad20

0800af08 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b092      	sub	sp, #72	; 0x48
 800af0c:	af02      	add	r7, sp, #8
 800af0e:	60f8      	str	r0, [r7, #12]
 800af10:	60b9      	str	r1, [r7, #8]
 800af12:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 800af14:	2300      	movs	r3, #0
 800af16:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 800af18:	2300      	movs	r3, #0
 800af1a:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 800af1c:	2300      	movs	r3, #0
 800af1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 800af22:	68bb      	ldr	r3, [r7, #8]
 800af24:	4618      	mov	r0, r3
 800af26:	f7f5 f96d 	bl	8000204 <strlen>
 800af2a:	62b8      	str	r0, [r7, #40]	; 0x28
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800af2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d06b      	beq.n	800b00a <http_find_file+0x102>
 800af32:	68ba      	ldr	r2, [r7, #8]
 800af34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af36:	3b01      	subs	r3, #1
 800af38:	4413      	add	r3, r2
 800af3a:	781b      	ldrb	r3, [r3, #0]
 800af3c:	2b2f      	cmp	r3, #47	; 0x2f
 800af3e:	d164      	bne.n	800b00a <http_find_file+0x102>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800af40:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800af42:	4a53      	ldr	r2, [pc, #332]	; (800b090 <http_find_file+0x188>)
 800af44:	4293      	cmp	r3, r2
 800af46:	d102      	bne.n	800af4e <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800af48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af4a:	2b01      	cmp	r3, #1
 800af4c:	d15d      	bne.n	800b00a <http_find_file+0x102>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 800af4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af50:	3b01      	subs	r3, #1
 800af52:	2b3f      	cmp	r3, #63	; 0x3f
 800af54:	bf28      	it	cs
 800af56:	233f      	movcs	r3, #63	; 0x3f
 800af58:	627b      	str	r3, [r7, #36]	; 0x24
    if (copy_len > 0) {
 800af5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d00a      	beq.n	800af76 <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 800af60:	68bb      	ldr	r3, [r7, #8]
 800af62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af64:	4619      	mov	r1, r3
 800af66:	484a      	ldr	r0, [pc, #296]	; (800b090 <http_find_file+0x188>)
 800af68:	f00e f816 	bl	8018f98 <memcpy>
      http_uri_buf[copy_len] = 0;
 800af6c:	4a48      	ldr	r2, [pc, #288]	; (800b090 <http_find_file+0x188>)
 800af6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af70:	4413      	add	r3, r2
 800af72:	2200      	movs	r2, #0
 800af74:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800af76:	2300      	movs	r3, #0
 800af78:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af7a:	e043      	b.n	800b004 <http_find_file+0xfc>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 800af7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d028      	beq.n	800afd4 <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 800af82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af84:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800af88:	623b      	str	r3, [r7, #32]
        if (len_left > 0) {
 800af8a:	6a3b      	ldr	r3, [r7, #32]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d01e      	beq.n	800afce <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 800af90:	4a40      	ldr	r2, [pc, #256]	; (800b094 <http_find_file+0x18c>)
 800af92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af94:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800af98:	4618      	mov	r0, r3
 800af9a:	f7f5 f933 	bl	8000204 <strlen>
 800af9e:	61f8      	str	r0, [r7, #28]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 800afa0:	69fa      	ldr	r2, [r7, #28]
 800afa2:	6a3b      	ldr	r3, [r7, #32]
 800afa4:	4293      	cmp	r3, r2
 800afa6:	bf28      	it	cs
 800afa8:	4613      	movcs	r3, r2
 800afaa:	61bb      	str	r3, [r7, #24]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 800afac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afae:	4a38      	ldr	r2, [pc, #224]	; (800b090 <http_find_file+0x188>)
 800afb0:	1898      	adds	r0, r3, r2
 800afb2:	4a38      	ldr	r2, [pc, #224]	; (800b094 <http_find_file+0x18c>)
 800afb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afb6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800afba:	69ba      	ldr	r2, [r7, #24]
 800afbc:	4619      	mov	r1, r3
 800afbe:	f00d ffeb 	bl	8018f98 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 800afc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afc4:	69bb      	ldr	r3, [r7, #24]
 800afc6:	4413      	add	r3, r2
 800afc8:	4a31      	ldr	r2, [pc, #196]	; (800b090 <http_find_file+0x188>)
 800afca:	2100      	movs	r1, #0
 800afcc:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 800afce:	4b30      	ldr	r3, [pc, #192]	; (800b090 <http_find_file+0x188>)
 800afd0:	633b      	str	r3, [r7, #48]	; 0x30
 800afd2:	e004      	b.n	800afde <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 800afd4:	4a2f      	ldr	r2, [pc, #188]	; (800b094 <http_find_file+0x18c>)
 800afd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afd8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800afdc:	633b      	str	r3, [r7, #48]	; 0x30
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800afe2:	4618      	mov	r0, r3
 800afe4:	f7ff fc58 	bl	800a898 <fs_open>
 800afe8:	4603      	mov	r3, r0
 800afea:	75fb      	strb	r3, [r7, #23]
      if (err == ERR_OK) {
 800afec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d104      	bne.n	800affe <http_find_file+0xf6>
        uri = file_name;
 800aff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aff6:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
#endif /* LWIP_HTTPD_SSI */
        break;
 800affc:	e005      	b.n	800b00a <http_find_file+0x102>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800affe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b000:	3301      	adds	r3, #1
 800b002:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b004:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b006:	2b04      	cmp	r3, #4
 800b008:	d9b8      	bls.n	800af7c <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 800b00a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d124      	bne.n	800b05a <http_find_file+0x152>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 800b010:	68bb      	ldr	r3, [r7, #8]
 800b012:	213f      	movs	r1, #63	; 0x3f
 800b014:	4618      	mov	r0, r3
 800b016:	f00d fe81 	bl	8018d1c <strchr>
 800b01a:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 800b01c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d005      	beq.n	800b02e <http_find_file+0x126>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 800b022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b024:	2200      	movs	r2, #0
 800b026:	701a      	strb	r2, [r3, #0]
      params++;
 800b028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b02a:	3301      	adds	r3, #1
 800b02c:	637b      	str	r3, [r7, #52]	; 0x34
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	68ba      	ldr	r2, [r7, #8]
 800b032:	4611      	mov	r1, r2
 800b034:	4618      	mov	r0, r3
 800b036:	f7ff fc2f 	bl	800a898 <fs_open>
 800b03a:	4603      	mov	r3, r0
 800b03c:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800b03e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d102      	bne.n	800b04c <http_find_file+0x144>
      file = &hs->file_handle;
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	63bb      	str	r3, [r7, #56]	; 0x38
 800b04a:	e006      	b.n	800b05a <http_find_file+0x152>
    } else {
      file = http_get_404_file(hs, &uri);
 800b04c:	f107 0308 	add.w	r3, r7, #8
 800b050:	4619      	mov	r1, r3
 800b052:	68f8      	ldr	r0, [r7, #12]
 800b054:	f7ff fe2a 	bl	800acac <http_get_404_file>
 800b058:	63b8      	str	r0, [r7, #56]	; 0x38
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 800b05a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d106      	bne.n	800b06e <http_find_file+0x166>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 800b060:	f107 0308 	add.w	r3, r7, #8
 800b064:	4619      	mov	r1, r3
 800b066:	68f8      	ldr	r0, [r7, #12]
 800b068:	f7ff fe20 	bl	800acac <http_get_404_file>
 800b06c:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 800b06e:	68ba      	ldr	r2, [r7, #8]
 800b070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b072:	9301      	str	r3, [sp, #4]
 800b074:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b078:	9300      	str	r3, [sp, #0]
 800b07a:	4613      	mov	r3, r2
 800b07c:	687a      	ldr	r2, [r7, #4]
 800b07e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b080:	68f8      	ldr	r0, [r7, #12]
 800b082:	f000 f809 	bl	800b098 <http_init_file>
 800b086:	4603      	mov	r3, r0
}
 800b088:	4618      	mov	r0, r3
 800b08a:	3740      	adds	r7, #64	; 0x40
 800b08c:	46bd      	mov	sp, r7
 800b08e:	bd80      	pop	{r7, pc}
 800b090:	2000d6bc 	.word	0x2000d6bc
 800b094:	08027c8c 	.word	0x08027c8c

0800b098 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b086      	sub	sp, #24
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	60f8      	str	r0, [r7, #12]
 800b0a0:	60b9      	str	r1, [r7, #8]
 800b0a2:	607a      	str	r2, [r7, #4]
 800b0a4:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 800b0a6:	68bb      	ldr	r3, [r7, #8]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d05c      	beq.n	800b166 <http_init_file+0xce>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 800b0ac:	68bb      	ldr	r3, [r7, #8]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d106      	bne.n	800b0c2 <http_init_file+0x2a>
 800b0b4:	4b35      	ldr	r3, [pc, #212]	; (800b18c <http_init_file+0xf4>)
 800b0b6:	f640 120b 	movw	r2, #2315	; 0x90b
 800b0ba:	4935      	ldr	r1, [pc, #212]	; (800b190 <http_init_file+0xf8>)
 800b0bc:	4835      	ldr	r0, [pc, #212]	; (800b194 <http_init_file+0xfc>)
 800b0be:	f00d fd6b 	bl	8018b98 <iprintf>
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	68ba      	ldr	r2, [r7, #8]
 800b0c6:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 800b0c8:	68bb      	ldr	r3, [r7, #8]
 800b0ca:	681a      	ldr	r2, [r3, #0]
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 800b0d0:	68bb      	ldr	r3, [r7, #8]
 800b0d2:	685b      	ldr	r3, [r3, #4]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	da06      	bge.n	800b0e6 <http_init_file+0x4e>
 800b0d8:	4b2c      	ldr	r3, [pc, #176]	; (800b18c <http_init_file+0xf4>)
 800b0da:	f640 1234 	movw	r2, #2356	; 0x934
 800b0de:	492e      	ldr	r1, [pc, #184]	; (800b198 <http_init_file+0x100>)
 800b0e0:	482c      	ldr	r0, [pc, #176]	; (800b194 <http_init_file+0xfc>)
 800b0e2:	f00d fd59 	bl	8018b98 <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 800b0e6:	68bb      	ldr	r3, [r7, #8]
 800b0e8:	685b      	ldr	r3, [r3, #4]
 800b0ea:	461a      	mov	r2, r3
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	695b      	ldr	r3, [r3, #20]
 800b0fc:	7c1b      	ldrb	r3, [r3, #16]
 800b0fe:	f003 0301 	and.w	r3, r3, #1
 800b102:	2b00      	cmp	r3, #0
 800b104:	d106      	bne.n	800b114 <http_init_file+0x7c>
 800b106:	4b21      	ldr	r3, [pc, #132]	; (800b18c <http_init_file+0xf4>)
 800b108:	f640 1243 	movw	r2, #2371	; 0x943
 800b10c:	4923      	ldr	r1, [pc, #140]	; (800b19c <http_init_file+0x104>)
 800b10e:	4821      	ldr	r0, [pc, #132]	; (800b194 <http_init_file+0xfc>)
 800b110:	f00d fd42 	bl	8018b98 <iprintf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d032      	beq.n	800b180 <http_init_file+0xe8>
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	695b      	ldr	r3, [r3, #20]
 800b11e:	7c1b      	ldrb	r3, [r3, #16]
 800b120:	f003 0301 	and.w	r3, r3, #1
 800b124:	2b00      	cmp	r3, #0
 800b126:	d02b      	beq.n	800b180 <http_init_file+0xe8>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	6998      	ldr	r0, [r3, #24]
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b130:	461a      	mov	r2, r3
 800b132:	491b      	ldr	r1, [pc, #108]	; (800b1a0 <http_init_file+0x108>)
 800b134:	f000 f9f8 	bl	800b528 <lwip_strnstr>
 800b138:	6178      	str	r0, [r7, #20]
      if (file_start != NULL) {
 800b13a:	697b      	ldr	r3, [r7, #20]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d01f      	beq.n	800b180 <http_init_file+0xe8>
        int diff = file_start + 4 - hs->file;
 800b140:	697b      	ldr	r3, [r7, #20]
 800b142:	1d1a      	adds	r2, r3, #4
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	699b      	ldr	r3, [r3, #24]
 800b148:	1ad3      	subs	r3, r2, r3
 800b14a:	613b      	str	r3, [r7, #16]
        hs->file += diff;
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	699a      	ldr	r2, [r3, #24]
 800b150:	693b      	ldr	r3, [r7, #16]
 800b152:	441a      	add	r2, r3
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b15c:	693b      	ldr	r3, [r7, #16]
 800b15e:	1ad2      	subs	r2, r2, r3
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	625a      	str	r2, [r3, #36]	; 0x24
 800b164:	e00c      	b.n	800b180 <http_init_file+0xe8>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	2200      	movs	r2, #0
 800b16a:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	2200      	movs	r2, #0
 800b170:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	2200      	movs	r2, #0
 800b176:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	2200      	movs	r2, #0
 800b17c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 800b180:	2300      	movs	r3, #0
}
 800b182:	4618      	mov	r0, r3
 800b184:	3718      	adds	r7, #24
 800b186:	46bd      	mov	sp, r7
 800b188:	bd80      	pop	{r7, pc}
 800b18a:	bf00      	nop
 800b18c:	0801ac2c 	.word	0x0801ac2c
 800b190:	0801ad28 	.word	0x0801ad28
 800b194:	0801ac74 	.word	0x0801ac74
 800b198:	0801ad3c 	.word	0x0801ad3c
 800b19c:	0801ad5c 	.word	0x0801ad5c
 800b1a0:	0801ad20 	.word	0x0801ad20

0800b1a4 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b084      	sub	sp, #16
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
 800b1ac:	460b      	mov	r3, r1
 800b1ae:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d002      	beq.n	800b1c0 <http_err+0x1c>
    http_state_free(hs);
 800b1ba:	68f8      	ldr	r0, [r7, #12]
 800b1bc:	f7ff fc02 	bl	800a9c4 <http_state_free>
  }
}
 800b1c0:	bf00      	nop
 800b1c2:	3710      	adds	r7, #16
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	bd80      	pop	{r7, pc}

0800b1c8 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b086      	sub	sp, #24
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	60f8      	str	r0, [r7, #12]
 800b1d0:	60b9      	str	r1, [r7, #8]
 800b1d2:	4613      	mov	r3, r2
 800b1d4:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 800b1da:	697b      	ldr	r3, [r7, #20]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d101      	bne.n	800b1e4 <http_sent+0x1c>
    return ERR_OK;
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	e008      	b.n	800b1f6 <http_sent+0x2e>
  }

  hs->retries = 0;
 800b1e4:	697b      	ldr	r3, [r7, #20]
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 800b1ec:	6979      	ldr	r1, [r7, #20]
 800b1ee:	68b8      	ldr	r0, [r7, #8]
 800b1f0:	f7ff fd25 	bl	800ac3e <http_send>

  return ERR_OK;
 800b1f4:	2300      	movs	r3, #0
}
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	3718      	adds	r7, #24
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	bd80      	pop	{r7, pc}

0800b1fe <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 800b1fe:	b580      	push	{r7, lr}
 800b200:	b084      	sub	sp, #16
 800b202:	af00      	add	r7, sp, #0
 800b204:	6078      	str	r0, [r7, #4]
 800b206:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d107      	bne.n	800b222 <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 800b212:	2100      	movs	r1, #0
 800b214:	6838      	ldr	r0, [r7, #0]
 800b216:	f7ff fc91 	bl	800ab3c <http_close_conn>
 800b21a:	4603      	mov	r3, r0
 800b21c:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 800b21e:	2300      	movs	r3, #0
 800b220:	e021      	b.n	800b266 <http_poll+0x68>
  } else {
    hs->retries++;
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b228:	3301      	adds	r3, #1
 800b22a:	b2da      	uxtb	r2, r3
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b238:	2b04      	cmp	r3, #4
 800b23a:	d105      	bne.n	800b248 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 800b23c:	68f9      	ldr	r1, [r7, #12]
 800b23e:	6838      	ldr	r0, [r7, #0]
 800b240:	f7ff fc7c 	bl	800ab3c <http_close_conn>
      return ERR_OK;
 800b244:	2300      	movs	r3, #0
 800b246:	e00e      	b.n	800b266 <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	695b      	ldr	r3, [r3, #20]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d009      	beq.n	800b264 <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 800b250:	68f9      	ldr	r1, [r7, #12]
 800b252:	6838      	ldr	r0, [r7, #0]
 800b254:	f7ff fcf3 	bl	800ac3e <http_send>
 800b258:	4603      	mov	r3, r0
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d002      	beq.n	800b264 <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 800b25e:	6838      	ldr	r0, [r7, #0]
 800b260:	f007 fa6a 	bl	8012738 <tcp_output>
      }
    }
  }

  return ERR_OK;
 800b264:	2300      	movs	r3, #0
}
 800b266:	4618      	mov	r0, r3
 800b268:	3710      	adds	r7, #16
 800b26a:	46bd      	mov	sp, r7
 800b26c:	bd80      	pop	{r7, pc}
	...

0800b270 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b086      	sub	sp, #24
 800b274:	af00      	add	r7, sp, #0
 800b276:	60f8      	str	r0, [r7, #12]
 800b278:	60b9      	str	r1, [r7, #8]
 800b27a:	607a      	str	r2, [r7, #4]
 800b27c:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 800b282:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d105      	bne.n	800b296 <http_recv+0x26>
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d002      	beq.n	800b296 <http_recv+0x26>
 800b290:	697b      	ldr	r3, [r7, #20]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d111      	bne.n	800b2ba <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d008      	beq.n	800b2ae <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	891b      	ldrh	r3, [r3, #8]
 800b2a0:	4619      	mov	r1, r3
 800b2a2:	68b8      	ldr	r0, [r7, #8]
 800b2a4:	f002 fd20 	bl	800dce8 <tcp_recved>
      pbuf_free(p);
 800b2a8:	6878      	ldr	r0, [r7, #4]
 800b2aa:	f001 fd43 	bl	800cd34 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 800b2ae:	6979      	ldr	r1, [r7, #20]
 800b2b0:	68b8      	ldr	r0, [r7, #8]
 800b2b2:	f7ff fc43 	bl	800ab3c <http_close_conn>
    return ERR_OK;
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	e055      	b.n	800b366 <http_recv+0xf6>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	891b      	ldrh	r3, [r3, #8]
 800b2be:	4619      	mov	r1, r3
 800b2c0:	68b8      	ldr	r0, [r7, #8]
 800b2c2:	f002 fd11 	bl	800dce8 <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 800b2c6:	697b      	ldr	r3, [r7, #20]
 800b2c8:	695b      	ldr	r3, [r3, #20]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d147      	bne.n	800b35e <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 800b2ce:	68ba      	ldr	r2, [r7, #8]
 800b2d0:	6979      	ldr	r1, [r7, #20]
 800b2d2:	6878      	ldr	r0, [r7, #4]
 800b2d4:	f7ff fd30 	bl	800ad38 <http_parse_request>
 800b2d8:	4603      	mov	r3, r0
 800b2da:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 800b2dc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d015      	beq.n	800b310 <http_recv+0xa0>
 800b2e4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b2e8:	f113 0f05 	cmn.w	r3, #5
 800b2ec:	d010      	beq.n	800b310 <http_recv+0xa0>
 800b2ee:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b2f2:	f113 0f10 	cmn.w	r3, #16
 800b2f6:	d00b      	beq.n	800b310 <http_recv+0xa0>
 800b2f8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b2fc:	f113 0f08 	cmn.w	r3, #8
 800b300:	d006      	beq.n	800b310 <http_recv+0xa0>
 800b302:	4b1b      	ldr	r3, [pc, #108]	; (800b370 <http_recv+0x100>)
 800b304:	f640 2204 	movw	r2, #2564	; 0xa04
 800b308:	491a      	ldr	r1, [pc, #104]	; (800b374 <http_recv+0x104>)
 800b30a:	481b      	ldr	r0, [pc, #108]	; (800b378 <http_recv+0x108>)
 800b30c:	f00d fc44 	bl	8018b98 <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 800b310:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b314:	f113 0f05 	cmn.w	r3, #5
 800b318:	d00b      	beq.n	800b332 <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 800b31a:	697b      	ldr	r3, [r7, #20]
 800b31c:	6a1b      	ldr	r3, [r3, #32]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d007      	beq.n	800b332 <http_recv+0xc2>
          pbuf_free(hs->req);
 800b322:	697b      	ldr	r3, [r7, #20]
 800b324:	6a1b      	ldr	r3, [r3, #32]
 800b326:	4618      	mov	r0, r3
 800b328:	f001 fd04 	bl	800cd34 <pbuf_free>
          hs->req = NULL;
 800b32c:	697b      	ldr	r3, [r7, #20]
 800b32e:	2200      	movs	r2, #0
 800b330:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 800b332:	6878      	ldr	r0, [r7, #4]
 800b334:	f001 fcfe 	bl	800cd34 <pbuf_free>
      if (parsed == ERR_OK) {
 800b338:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d104      	bne.n	800b34a <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 800b340:	6979      	ldr	r1, [r7, #20]
 800b342:	68b8      	ldr	r0, [r7, #8]
 800b344:	f7ff fc7b 	bl	800ac3e <http_send>
 800b348:	e00c      	b.n	800b364 <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 800b34a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b34e:	f113 0f10 	cmn.w	r3, #16
 800b352:	d107      	bne.n	800b364 <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 800b354:	6979      	ldr	r1, [r7, #20]
 800b356:	68b8      	ldr	r0, [r7, #8]
 800b358:	f7ff fbf0 	bl	800ab3c <http_close_conn>
 800b35c:	e002      	b.n	800b364 <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 800b35e:	6878      	ldr	r0, [r7, #4]
 800b360:	f001 fce8 	bl	800cd34 <pbuf_free>
    }
  }
  return ERR_OK;
 800b364:	2300      	movs	r3, #0
}
 800b366:	4618      	mov	r0, r3
 800b368:	3718      	adds	r7, #24
 800b36a:	46bd      	mov	sp, r7
 800b36c:	bd80      	pop	{r7, pc}
 800b36e:	bf00      	nop
 800b370:	0801ac2c 	.word	0x0801ac2c
 800b374:	0801ad88 	.word	0x0801ad88
 800b378:	0801ac74 	.word	0x0801ac74

0800b37c <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b086      	sub	sp, #24
 800b380:	af00      	add	r7, sp, #0
 800b382:	60f8      	str	r0, [r7, #12]
 800b384:	60b9      	str	r1, [r7, #8]
 800b386:	4613      	mov	r3, r2
 800b388:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 800b38a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d102      	bne.n	800b398 <http_accept+0x1c>
 800b392:	68bb      	ldr	r3, [r7, #8]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d102      	bne.n	800b39e <http_accept+0x22>
    return ERR_VAL;
 800b398:	f06f 0305 	mvn.w	r3, #5
 800b39c:	e025      	b.n	800b3ea <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800b39e:	2101      	movs	r1, #1
 800b3a0:	68b8      	ldr	r0, [r7, #8]
 800b3a2:	f003 fa9d 	bl	800e8e0 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 800b3a6:	f7ff fadb 	bl	800a960 <http_state_alloc>
 800b3aa:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 800b3ac:	697b      	ldr	r3, [r7, #20]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d102      	bne.n	800b3b8 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 800b3b2:	f04f 33ff 	mov.w	r3, #4294967295
 800b3b6:	e018      	b.n	800b3ea <http_accept+0x6e>
  }
  hs->pcb = pcb;
 800b3b8:	697b      	ldr	r3, [r7, #20]
 800b3ba:	68ba      	ldr	r2, [r7, #8]
 800b3bc:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 800b3be:	6979      	ldr	r1, [r7, #20]
 800b3c0:	68b8      	ldr	r0, [r7, #8]
 800b3c2:	f003 fc8d 	bl	800ece0 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 800b3c6:	490b      	ldr	r1, [pc, #44]	; (800b3f4 <http_accept+0x78>)
 800b3c8:	68b8      	ldr	r0, [r7, #8]
 800b3ca:	f003 fc9b 	bl	800ed04 <tcp_recv>
  altcp_err(pcb, http_err);
 800b3ce:	490a      	ldr	r1, [pc, #40]	; (800b3f8 <http_accept+0x7c>)
 800b3d0:	68b8      	ldr	r0, [r7, #8]
 800b3d2:	f003 fcdb 	bl	800ed8c <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800b3d6:	2204      	movs	r2, #4
 800b3d8:	4908      	ldr	r1, [pc, #32]	; (800b3fc <http_accept+0x80>)
 800b3da:	68b8      	ldr	r0, [r7, #8]
 800b3dc:	f003 fd10 	bl	800ee00 <tcp_poll>
  altcp_sent(pcb, http_sent);
 800b3e0:	4907      	ldr	r1, [pc, #28]	; (800b400 <http_accept+0x84>)
 800b3e2:	68b8      	ldr	r0, [r7, #8]
 800b3e4:	f003 fcb0 	bl	800ed48 <tcp_sent>

  return ERR_OK;
 800b3e8:	2300      	movs	r3, #0
}
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	3718      	adds	r7, #24
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	bd80      	pop	{r7, pc}
 800b3f2:	bf00      	nop
 800b3f4:	0800b271 	.word	0x0800b271
 800b3f8:	0800b1a5 	.word	0x0800b1a5
 800b3fc:	0800b1ff 	.word	0x0800b1ff
 800b400:	0800b1c9 	.word	0x0800b1c9

0800b404 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 800b404:	b580      	push	{r7, lr}
 800b406:	b084      	sub	sp, #16
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
 800b40c:	460b      	mov	r3, r1
 800b40e:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d029      	beq.n	800b46a <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800b416:	2101      	movs	r1, #1
 800b418:	6878      	ldr	r0, [r7, #4]
 800b41a:	f003 fa61 	bl	800e8e0 <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 800b41e:	887b      	ldrh	r3, [r7, #2]
 800b420:	461a      	mov	r2, r3
 800b422:	4914      	ldr	r1, [pc, #80]	; (800b474 <httpd_init_pcb+0x70>)
 800b424:	6878      	ldr	r0, [r7, #4]
 800b426:	f002 fa91 	bl	800d94c <tcp_bind>
 800b42a:	4603      	mov	r3, r0
 800b42c:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 800b42e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b432:	2b00      	cmp	r3, #0
 800b434:	d006      	beq.n	800b444 <httpd_init_pcb+0x40>
 800b436:	4b10      	ldr	r3, [pc, #64]	; (800b478 <httpd_init_pcb+0x74>)
 800b438:	f640 2257 	movw	r2, #2647	; 0xa57
 800b43c:	490f      	ldr	r1, [pc, #60]	; (800b47c <httpd_init_pcb+0x78>)
 800b43e:	4810      	ldr	r0, [pc, #64]	; (800b480 <httpd_init_pcb+0x7c>)
 800b440:	f00d fbaa 	bl	8018b98 <iprintf>
    pcb = altcp_listen(pcb);
 800b444:	21ff      	movs	r1, #255	; 0xff
 800b446:	6878      	ldr	r0, [r7, #4]
 800b448:	f002 fb38 	bl	800dabc <tcp_listen_with_backlog>
 800b44c:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d106      	bne.n	800b462 <httpd_init_pcb+0x5e>
 800b454:	4b08      	ldr	r3, [pc, #32]	; (800b478 <httpd_init_pcb+0x74>)
 800b456:	f640 2259 	movw	r2, #2649	; 0xa59
 800b45a:	490a      	ldr	r1, [pc, #40]	; (800b484 <httpd_init_pcb+0x80>)
 800b45c:	4808      	ldr	r0, [pc, #32]	; (800b480 <httpd_init_pcb+0x7c>)
 800b45e:	f00d fb9b 	bl	8018b98 <iprintf>
    altcp_accept(pcb, http_accept);
 800b462:	4909      	ldr	r1, [pc, #36]	; (800b488 <httpd_init_pcb+0x84>)
 800b464:	6878      	ldr	r0, [r7, #4]
 800b466:	f003 fcb3 	bl	800edd0 <tcp_accept>
  }
}
 800b46a:	bf00      	nop
 800b46c:	3710      	adds	r7, #16
 800b46e:	46bd      	mov	sp, r7
 800b470:	bd80      	pop	{r7, pc}
 800b472:	bf00      	nop
 800b474:	08027dd4 	.word	0x08027dd4
 800b478:	0801ac2c 	.word	0x0801ac2c
 800b47c:	0801adb4 	.word	0x0801adb4
 800b480:	0801ac74 	.word	0x0801ac74
 800b484:	0801add0 	.word	0x0801add0
 800b488:	0800b37d 	.word	0x0800b37d

0800b48c <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 800b48c:	b580      	push	{r7, lr}
 800b48e:	b082      	sub	sp, #8
 800b490:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 800b492:	202e      	movs	r0, #46	; 0x2e
 800b494:	f003 fc16 	bl	800ecc4 <tcp_new_ip_type>
 800b498:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d106      	bne.n	800b4ae <httpd_init+0x22>
 800b4a0:	4b07      	ldr	r3, [pc, #28]	; (800b4c0 <httpd_init+0x34>)
 800b4a2:	f640 2272 	movw	r2, #2674	; 0xa72
 800b4a6:	4907      	ldr	r1, [pc, #28]	; (800b4c4 <httpd_init+0x38>)
 800b4a8:	4807      	ldr	r0, [pc, #28]	; (800b4c8 <httpd_init+0x3c>)
 800b4aa:	f00d fb75 	bl	8018b98 <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 800b4ae:	2150      	movs	r1, #80	; 0x50
 800b4b0:	6878      	ldr	r0, [r7, #4]
 800b4b2:	f7ff ffa7 	bl	800b404 <httpd_init_pcb>
}
 800b4b6:	bf00      	nop
 800b4b8:	3708      	adds	r7, #8
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	bd80      	pop	{r7, pc}
 800b4be:	bf00      	nop
 800b4c0:	0801ac2c 	.word	0x0801ac2c
 800b4c4:	0801adf0 	.word	0x0801adf0
 800b4c8:	0801ac74 	.word	0x0801ac74

0800b4cc <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800b4cc:	b480      	push	{r7}
 800b4ce:	b083      	sub	sp, #12
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	4603      	mov	r3, r0
 800b4d4:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800b4d6:	88fb      	ldrh	r3, [r7, #6]
 800b4d8:	021b      	lsls	r3, r3, #8
 800b4da:	b21a      	sxth	r2, r3
 800b4dc:	88fb      	ldrh	r3, [r7, #6]
 800b4de:	0a1b      	lsrs	r3, r3, #8
 800b4e0:	b29b      	uxth	r3, r3
 800b4e2:	b21b      	sxth	r3, r3
 800b4e4:	4313      	orrs	r3, r2
 800b4e6:	b21b      	sxth	r3, r3
 800b4e8:	b29b      	uxth	r3, r3
}
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	370c      	adds	r7, #12
 800b4ee:	46bd      	mov	sp, r7
 800b4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f4:	4770      	bx	lr

0800b4f6 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800b4f6:	b480      	push	{r7}
 800b4f8:	b083      	sub	sp, #12
 800b4fa:	af00      	add	r7, sp, #0
 800b4fc:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	061a      	lsls	r2, r3, #24
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	021b      	lsls	r3, r3, #8
 800b506:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b50a:	431a      	orrs	r2, r3
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	0a1b      	lsrs	r3, r3, #8
 800b510:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b514:	431a      	orrs	r2, r3
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	0e1b      	lsrs	r3, r3, #24
 800b51a:	4313      	orrs	r3, r2
}
 800b51c:	4618      	mov	r0, r3
 800b51e:	370c      	adds	r7, #12
 800b520:	46bd      	mov	sp, r7
 800b522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b526:	4770      	bx	lr

0800b528 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b086      	sub	sp, #24
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	60f8      	str	r0, [r7, #12]
 800b530:	60b9      	str	r1, [r7, #8]
 800b532:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 800b534:	68b8      	ldr	r0, [r7, #8]
 800b536:	f7f4 fe65 	bl	8000204 <strlen>
 800b53a:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 800b53c:	693b      	ldr	r3, [r7, #16]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d101      	bne.n	800b546 <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	e022      	b.n	800b58c <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	617b      	str	r3, [r7, #20]
 800b54a:	e012      	b.n	800b572 <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 800b54c:	697b      	ldr	r3, [r7, #20]
 800b54e:	781a      	ldrb	r2, [r3, #0]
 800b550:	68bb      	ldr	r3, [r7, #8]
 800b552:	781b      	ldrb	r3, [r3, #0]
 800b554:	429a      	cmp	r2, r3
 800b556:	d109      	bne.n	800b56c <lwip_strnstr+0x44>
 800b558:	693a      	ldr	r2, [r7, #16]
 800b55a:	68b9      	ldr	r1, [r7, #8]
 800b55c:	6978      	ldr	r0, [r7, #20]
 800b55e:	f00d fbea 	bl	8018d36 <strncmp>
 800b562:	4603      	mov	r3, r0
 800b564:	2b00      	cmp	r3, #0
 800b566:	d101      	bne.n	800b56c <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 800b568:	697b      	ldr	r3, [r7, #20]
 800b56a:	e00f      	b.n	800b58c <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800b56c:	697b      	ldr	r3, [r7, #20]
 800b56e:	3301      	adds	r3, #1
 800b570:	617b      	str	r3, [r7, #20]
 800b572:	697b      	ldr	r3, [r7, #20]
 800b574:	781b      	ldrb	r3, [r3, #0]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d007      	beq.n	800b58a <lwip_strnstr+0x62>
 800b57a:	697a      	ldr	r2, [r7, #20]
 800b57c:	693b      	ldr	r3, [r7, #16]
 800b57e:	441a      	add	r2, r3
 800b580:	68f9      	ldr	r1, [r7, #12]
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	440b      	add	r3, r1
 800b586:	429a      	cmp	r2, r3
 800b588:	d9e0      	bls.n	800b54c <lwip_strnstr+0x24>
    }
  }
  return NULL;
 800b58a:	2300      	movs	r3, #0
}
 800b58c:	4618      	mov	r0, r3
 800b58e:	3718      	adds	r7, #24
 800b590:	46bd      	mov	sp, r7
 800b592:	bd80      	pop	{r7, pc}

0800b594 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800b594:	b580      	push	{r7, lr}
 800b596:	b082      	sub	sp, #8
 800b598:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800b59a:	2300      	movs	r3, #0
 800b59c:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800b59e:	f00d f955 	bl	801884c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800b5a2:	f000 f8d5 	bl	800b750 <mem_init>
  memp_init();
 800b5a6:	f000 fc31 	bl	800be0c <memp_init>
  pbuf_init();
  netif_init();
 800b5aa:	f000 fd3d 	bl	800c028 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800b5ae:	f008 f9b3 	bl	8013918 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800b5b2:	f001 fe69 	bl	800d288 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800b5b6:	f008 f8f5 	bl	80137a4 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800b5ba:	bf00      	nop
 800b5bc:	3708      	adds	r7, #8
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	bd80      	pop	{r7, pc}
	...

0800b5c4 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800b5c4:	b480      	push	{r7}
 800b5c6:	b083      	sub	sp, #12
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	4603      	mov	r3, r0
 800b5cc:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800b5ce:	4b05      	ldr	r3, [pc, #20]	; (800b5e4 <ptr_to_mem+0x20>)
 800b5d0:	681a      	ldr	r2, [r3, #0]
 800b5d2:	88fb      	ldrh	r3, [r7, #6]
 800b5d4:	4413      	add	r3, r2
}
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	370c      	adds	r7, #12
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e0:	4770      	bx	lr
 800b5e2:	bf00      	nop
 800b5e4:	2000dd68 	.word	0x2000dd68

0800b5e8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800b5e8:	b480      	push	{r7}
 800b5ea:	b083      	sub	sp, #12
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800b5f0:	4b05      	ldr	r3, [pc, #20]	; (800b608 <mem_to_ptr+0x20>)
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	687a      	ldr	r2, [r7, #4]
 800b5f6:	1ad3      	subs	r3, r2, r3
 800b5f8:	b29b      	uxth	r3, r3
}
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	370c      	adds	r7, #12
 800b5fe:	46bd      	mov	sp, r7
 800b600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b604:	4770      	bx	lr
 800b606:	bf00      	nop
 800b608:	2000dd68 	.word	0x2000dd68

0800b60c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800b60c:	b590      	push	{r4, r7, lr}
 800b60e:	b085      	sub	sp, #20
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800b614:	4b45      	ldr	r3, [pc, #276]	; (800b72c <plug_holes+0x120>)
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	687a      	ldr	r2, [r7, #4]
 800b61a:	429a      	cmp	r2, r3
 800b61c:	d206      	bcs.n	800b62c <plug_holes+0x20>
 800b61e:	4b44      	ldr	r3, [pc, #272]	; (800b730 <plug_holes+0x124>)
 800b620:	f240 12df 	movw	r2, #479	; 0x1df
 800b624:	4943      	ldr	r1, [pc, #268]	; (800b734 <plug_holes+0x128>)
 800b626:	4844      	ldr	r0, [pc, #272]	; (800b738 <plug_holes+0x12c>)
 800b628:	f00d fab6 	bl	8018b98 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800b62c:	4b43      	ldr	r3, [pc, #268]	; (800b73c <plug_holes+0x130>)
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	687a      	ldr	r2, [r7, #4]
 800b632:	429a      	cmp	r2, r3
 800b634:	d306      	bcc.n	800b644 <plug_holes+0x38>
 800b636:	4b3e      	ldr	r3, [pc, #248]	; (800b730 <plug_holes+0x124>)
 800b638:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800b63c:	4940      	ldr	r1, [pc, #256]	; (800b740 <plug_holes+0x134>)
 800b63e:	483e      	ldr	r0, [pc, #248]	; (800b738 <plug_holes+0x12c>)
 800b640:	f00d faaa 	bl	8018b98 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	791b      	ldrb	r3, [r3, #4]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d006      	beq.n	800b65a <plug_holes+0x4e>
 800b64c:	4b38      	ldr	r3, [pc, #224]	; (800b730 <plug_holes+0x124>)
 800b64e:	f240 12e1 	movw	r2, #481	; 0x1e1
 800b652:	493c      	ldr	r1, [pc, #240]	; (800b744 <plug_holes+0x138>)
 800b654:	4838      	ldr	r0, [pc, #224]	; (800b738 <plug_holes+0x12c>)
 800b656:	f00d fa9f 	bl	8018b98 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	881b      	ldrh	r3, [r3, #0]
 800b65e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b662:	d906      	bls.n	800b672 <plug_holes+0x66>
 800b664:	4b32      	ldr	r3, [pc, #200]	; (800b730 <plug_holes+0x124>)
 800b666:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800b66a:	4937      	ldr	r1, [pc, #220]	; (800b748 <plug_holes+0x13c>)
 800b66c:	4832      	ldr	r0, [pc, #200]	; (800b738 <plug_holes+0x12c>)
 800b66e:	f00d fa93 	bl	8018b98 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	881b      	ldrh	r3, [r3, #0]
 800b676:	4618      	mov	r0, r3
 800b678:	f7ff ffa4 	bl	800b5c4 <ptr_to_mem>
 800b67c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800b67e:	687a      	ldr	r2, [r7, #4]
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	429a      	cmp	r2, r3
 800b684:	d024      	beq.n	800b6d0 <plug_holes+0xc4>
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	791b      	ldrb	r3, [r3, #4]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d120      	bne.n	800b6d0 <plug_holes+0xc4>
 800b68e:	4b2b      	ldr	r3, [pc, #172]	; (800b73c <plug_holes+0x130>)
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	68fa      	ldr	r2, [r7, #12]
 800b694:	429a      	cmp	r2, r3
 800b696:	d01b      	beq.n	800b6d0 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800b698:	4b2c      	ldr	r3, [pc, #176]	; (800b74c <plug_holes+0x140>)
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	68fa      	ldr	r2, [r7, #12]
 800b69e:	429a      	cmp	r2, r3
 800b6a0:	d102      	bne.n	800b6a8 <plug_holes+0x9c>
      lfree = mem;
 800b6a2:	4a2a      	ldr	r2, [pc, #168]	; (800b74c <plug_holes+0x140>)
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	881a      	ldrh	r2, [r3, #0]
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	881b      	ldrh	r3, [r3, #0]
 800b6b4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b6b8:	d00a      	beq.n	800b6d0 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	881b      	ldrh	r3, [r3, #0]
 800b6be:	4618      	mov	r0, r3
 800b6c0:	f7ff ff80 	bl	800b5c4 <ptr_to_mem>
 800b6c4:	4604      	mov	r4, r0
 800b6c6:	6878      	ldr	r0, [r7, #4]
 800b6c8:	f7ff ff8e 	bl	800b5e8 <mem_to_ptr>
 800b6cc:	4603      	mov	r3, r0
 800b6ce:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	885b      	ldrh	r3, [r3, #2]
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	f7ff ff75 	bl	800b5c4 <ptr_to_mem>
 800b6da:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800b6dc:	68ba      	ldr	r2, [r7, #8]
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	429a      	cmp	r2, r3
 800b6e2:	d01f      	beq.n	800b724 <plug_holes+0x118>
 800b6e4:	68bb      	ldr	r3, [r7, #8]
 800b6e6:	791b      	ldrb	r3, [r3, #4]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d11b      	bne.n	800b724 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800b6ec:	4b17      	ldr	r3, [pc, #92]	; (800b74c <plug_holes+0x140>)
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	687a      	ldr	r2, [r7, #4]
 800b6f2:	429a      	cmp	r2, r3
 800b6f4:	d102      	bne.n	800b6fc <plug_holes+0xf0>
      lfree = pmem;
 800b6f6:	4a15      	ldr	r2, [pc, #84]	; (800b74c <plug_holes+0x140>)
 800b6f8:	68bb      	ldr	r3, [r7, #8]
 800b6fa:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	881a      	ldrh	r2, [r3, #0]
 800b700:	68bb      	ldr	r3, [r7, #8]
 800b702:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	881b      	ldrh	r3, [r3, #0]
 800b708:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b70c:	d00a      	beq.n	800b724 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	881b      	ldrh	r3, [r3, #0]
 800b712:	4618      	mov	r0, r3
 800b714:	f7ff ff56 	bl	800b5c4 <ptr_to_mem>
 800b718:	4604      	mov	r4, r0
 800b71a:	68b8      	ldr	r0, [r7, #8]
 800b71c:	f7ff ff64 	bl	800b5e8 <mem_to_ptr>
 800b720:	4603      	mov	r3, r0
 800b722:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800b724:	bf00      	nop
 800b726:	3714      	adds	r7, #20
 800b728:	46bd      	mov	sp, r7
 800b72a:	bd90      	pop	{r4, r7, pc}
 800b72c:	2000dd68 	.word	0x2000dd68
 800b730:	0801ae0c 	.word	0x0801ae0c
 800b734:	0801ae3c 	.word	0x0801ae3c
 800b738:	0801ae54 	.word	0x0801ae54
 800b73c:	2000dd6c 	.word	0x2000dd6c
 800b740:	0801ae7c 	.word	0x0801ae7c
 800b744:	0801ae98 	.word	0x0801ae98
 800b748:	0801aeb4 	.word	0x0801aeb4
 800b74c:	2000dd74 	.word	0x2000dd74

0800b750 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800b750:	b580      	push	{r7, lr}
 800b752:	b082      	sub	sp, #8
 800b754:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800b756:	4b1f      	ldr	r3, [pc, #124]	; (800b7d4 <mem_init+0x84>)
 800b758:	3303      	adds	r3, #3
 800b75a:	f023 0303 	bic.w	r3, r3, #3
 800b75e:	461a      	mov	r2, r3
 800b760:	4b1d      	ldr	r3, [pc, #116]	; (800b7d8 <mem_init+0x88>)
 800b762:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800b764:	4b1c      	ldr	r3, [pc, #112]	; (800b7d8 <mem_init+0x88>)
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b770:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	2200      	movs	r2, #0
 800b776:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	2200      	movs	r2, #0
 800b77c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800b77e:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800b782:	f7ff ff1f 	bl	800b5c4 <ptr_to_mem>
 800b786:	4603      	mov	r3, r0
 800b788:	4a14      	ldr	r2, [pc, #80]	; (800b7dc <mem_init+0x8c>)
 800b78a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800b78c:	4b13      	ldr	r3, [pc, #76]	; (800b7dc <mem_init+0x8c>)
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	2201      	movs	r2, #1
 800b792:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800b794:	4b11      	ldr	r3, [pc, #68]	; (800b7dc <mem_init+0x8c>)
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b79c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800b79e:	4b0f      	ldr	r3, [pc, #60]	; (800b7dc <mem_init+0x8c>)
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b7a6:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800b7a8:	4b0b      	ldr	r3, [pc, #44]	; (800b7d8 <mem_init+0x88>)
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	4a0c      	ldr	r2, [pc, #48]	; (800b7e0 <mem_init+0x90>)
 800b7ae:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800b7b0:	480c      	ldr	r0, [pc, #48]	; (800b7e4 <mem_init+0x94>)
 800b7b2:	f00d f859 	bl	8018868 <sys_mutex_new>
 800b7b6:	4603      	mov	r3, r0
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d006      	beq.n	800b7ca <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800b7bc:	4b0a      	ldr	r3, [pc, #40]	; (800b7e8 <mem_init+0x98>)
 800b7be:	f240 221f 	movw	r2, #543	; 0x21f
 800b7c2:	490a      	ldr	r1, [pc, #40]	; (800b7ec <mem_init+0x9c>)
 800b7c4:	480a      	ldr	r0, [pc, #40]	; (800b7f0 <mem_init+0xa0>)
 800b7c6:	f00d f9e7 	bl	8018b98 <iprintf>
  }
}
 800b7ca:	bf00      	nop
 800b7cc:	3708      	adds	r7, #8
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	bd80      	pop	{r7, pc}
 800b7d2:	bf00      	nop
 800b7d4:	2000d714 	.word	0x2000d714
 800b7d8:	2000dd68 	.word	0x2000dd68
 800b7dc:	2000dd6c 	.word	0x2000dd6c
 800b7e0:	2000dd74 	.word	0x2000dd74
 800b7e4:	2000dd70 	.word	0x2000dd70
 800b7e8:	0801ae0c 	.word	0x0801ae0c
 800b7ec:	0801aee0 	.word	0x0801aee0
 800b7f0:	0801ae54 	.word	0x0801ae54

0800b7f4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b086      	sub	sp, #24
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800b7fc:	6878      	ldr	r0, [r7, #4]
 800b7fe:	f7ff fef3 	bl	800b5e8 <mem_to_ptr>
 800b802:	4603      	mov	r3, r0
 800b804:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	881b      	ldrh	r3, [r3, #0]
 800b80a:	4618      	mov	r0, r3
 800b80c:	f7ff feda 	bl	800b5c4 <ptr_to_mem>
 800b810:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	885b      	ldrh	r3, [r3, #2]
 800b816:	4618      	mov	r0, r3
 800b818:	f7ff fed4 	bl	800b5c4 <ptr_to_mem>
 800b81c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	881b      	ldrh	r3, [r3, #0]
 800b822:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b826:	d818      	bhi.n	800b85a <mem_link_valid+0x66>
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	885b      	ldrh	r3, [r3, #2]
 800b82c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b830:	d813      	bhi.n	800b85a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800b836:	8afa      	ldrh	r2, [r7, #22]
 800b838:	429a      	cmp	r2, r3
 800b83a:	d004      	beq.n	800b846 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	881b      	ldrh	r3, [r3, #0]
 800b840:	8afa      	ldrh	r2, [r7, #22]
 800b842:	429a      	cmp	r2, r3
 800b844:	d109      	bne.n	800b85a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800b846:	4b08      	ldr	r3, [pc, #32]	; (800b868 <mem_link_valid+0x74>)
 800b848:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b84a:	693a      	ldr	r2, [r7, #16]
 800b84c:	429a      	cmp	r2, r3
 800b84e:	d006      	beq.n	800b85e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800b850:	693b      	ldr	r3, [r7, #16]
 800b852:	885b      	ldrh	r3, [r3, #2]
 800b854:	8afa      	ldrh	r2, [r7, #22]
 800b856:	429a      	cmp	r2, r3
 800b858:	d001      	beq.n	800b85e <mem_link_valid+0x6a>
    return 0;
 800b85a:	2300      	movs	r3, #0
 800b85c:	e000      	b.n	800b860 <mem_link_valid+0x6c>
  }
  return 1;
 800b85e:	2301      	movs	r3, #1
}
 800b860:	4618      	mov	r0, r3
 800b862:	3718      	adds	r7, #24
 800b864:	46bd      	mov	sp, r7
 800b866:	bd80      	pop	{r7, pc}
 800b868:	2000dd6c 	.word	0x2000dd6c

0800b86c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b088      	sub	sp, #32
 800b870:	af00      	add	r7, sp, #0
 800b872:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d070      	beq.n	800b95c <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	f003 0303 	and.w	r3, r3, #3
 800b880:	2b00      	cmp	r3, #0
 800b882:	d00d      	beq.n	800b8a0 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800b884:	4b37      	ldr	r3, [pc, #220]	; (800b964 <mem_free+0xf8>)
 800b886:	f240 2273 	movw	r2, #627	; 0x273
 800b88a:	4937      	ldr	r1, [pc, #220]	; (800b968 <mem_free+0xfc>)
 800b88c:	4837      	ldr	r0, [pc, #220]	; (800b96c <mem_free+0x100>)
 800b88e:	f00d f983 	bl	8018b98 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b892:	f00d f847 	bl	8018924 <sys_arch_protect>
 800b896:	60f8      	str	r0, [r7, #12]
 800b898:	68f8      	ldr	r0, [r7, #12]
 800b89a:	f00d f851 	bl	8018940 <sys_arch_unprotect>
    return;
 800b89e:	e05e      	b.n	800b95e <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	3b08      	subs	r3, #8
 800b8a4:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800b8a6:	4b32      	ldr	r3, [pc, #200]	; (800b970 <mem_free+0x104>)
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	69fa      	ldr	r2, [r7, #28]
 800b8ac:	429a      	cmp	r2, r3
 800b8ae:	d306      	bcc.n	800b8be <mem_free+0x52>
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	f103 020c 	add.w	r2, r3, #12
 800b8b6:	4b2f      	ldr	r3, [pc, #188]	; (800b974 <mem_free+0x108>)
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	429a      	cmp	r2, r3
 800b8bc:	d90d      	bls.n	800b8da <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800b8be:	4b29      	ldr	r3, [pc, #164]	; (800b964 <mem_free+0xf8>)
 800b8c0:	f240 227f 	movw	r2, #639	; 0x27f
 800b8c4:	492c      	ldr	r1, [pc, #176]	; (800b978 <mem_free+0x10c>)
 800b8c6:	4829      	ldr	r0, [pc, #164]	; (800b96c <mem_free+0x100>)
 800b8c8:	f00d f966 	bl	8018b98 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b8cc:	f00d f82a 	bl	8018924 <sys_arch_protect>
 800b8d0:	6138      	str	r0, [r7, #16]
 800b8d2:	6938      	ldr	r0, [r7, #16]
 800b8d4:	f00d f834 	bl	8018940 <sys_arch_unprotect>
    return;
 800b8d8:	e041      	b.n	800b95e <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800b8da:	4828      	ldr	r0, [pc, #160]	; (800b97c <mem_free+0x110>)
 800b8dc:	f00c ffe0 	bl	80188a0 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800b8e0:	69fb      	ldr	r3, [r7, #28]
 800b8e2:	791b      	ldrb	r3, [r3, #4]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d110      	bne.n	800b90a <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800b8e8:	4b1e      	ldr	r3, [pc, #120]	; (800b964 <mem_free+0xf8>)
 800b8ea:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800b8ee:	4924      	ldr	r1, [pc, #144]	; (800b980 <mem_free+0x114>)
 800b8f0:	481e      	ldr	r0, [pc, #120]	; (800b96c <mem_free+0x100>)
 800b8f2:	f00d f951 	bl	8018b98 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800b8f6:	4821      	ldr	r0, [pc, #132]	; (800b97c <mem_free+0x110>)
 800b8f8:	f00c ffe1 	bl	80188be <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b8fc:	f00d f812 	bl	8018924 <sys_arch_protect>
 800b900:	6178      	str	r0, [r7, #20]
 800b902:	6978      	ldr	r0, [r7, #20]
 800b904:	f00d f81c 	bl	8018940 <sys_arch_unprotect>
    return;
 800b908:	e029      	b.n	800b95e <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800b90a:	69f8      	ldr	r0, [r7, #28]
 800b90c:	f7ff ff72 	bl	800b7f4 <mem_link_valid>
 800b910:	4603      	mov	r3, r0
 800b912:	2b00      	cmp	r3, #0
 800b914:	d110      	bne.n	800b938 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800b916:	4b13      	ldr	r3, [pc, #76]	; (800b964 <mem_free+0xf8>)
 800b918:	f240 2295 	movw	r2, #661	; 0x295
 800b91c:	4919      	ldr	r1, [pc, #100]	; (800b984 <mem_free+0x118>)
 800b91e:	4813      	ldr	r0, [pc, #76]	; (800b96c <mem_free+0x100>)
 800b920:	f00d f93a 	bl	8018b98 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800b924:	4815      	ldr	r0, [pc, #84]	; (800b97c <mem_free+0x110>)
 800b926:	f00c ffca 	bl	80188be <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b92a:	f00c fffb 	bl	8018924 <sys_arch_protect>
 800b92e:	61b8      	str	r0, [r7, #24]
 800b930:	69b8      	ldr	r0, [r7, #24]
 800b932:	f00d f805 	bl	8018940 <sys_arch_unprotect>
    return;
 800b936:	e012      	b.n	800b95e <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800b938:	69fb      	ldr	r3, [r7, #28]
 800b93a:	2200      	movs	r2, #0
 800b93c:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800b93e:	4b12      	ldr	r3, [pc, #72]	; (800b988 <mem_free+0x11c>)
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	69fa      	ldr	r2, [r7, #28]
 800b944:	429a      	cmp	r2, r3
 800b946:	d202      	bcs.n	800b94e <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800b948:	4a0f      	ldr	r2, [pc, #60]	; (800b988 <mem_free+0x11c>)
 800b94a:	69fb      	ldr	r3, [r7, #28]
 800b94c:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800b94e:	69f8      	ldr	r0, [r7, #28]
 800b950:	f7ff fe5c 	bl	800b60c <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800b954:	4809      	ldr	r0, [pc, #36]	; (800b97c <mem_free+0x110>)
 800b956:	f00c ffb2 	bl	80188be <sys_mutex_unlock>
 800b95a:	e000      	b.n	800b95e <mem_free+0xf2>
    return;
 800b95c:	bf00      	nop
}
 800b95e:	3720      	adds	r7, #32
 800b960:	46bd      	mov	sp, r7
 800b962:	bd80      	pop	{r7, pc}
 800b964:	0801ae0c 	.word	0x0801ae0c
 800b968:	0801aefc 	.word	0x0801aefc
 800b96c:	0801ae54 	.word	0x0801ae54
 800b970:	2000dd68 	.word	0x2000dd68
 800b974:	2000dd6c 	.word	0x2000dd6c
 800b978:	0801af20 	.word	0x0801af20
 800b97c:	2000dd70 	.word	0x2000dd70
 800b980:	0801af3c 	.word	0x0801af3c
 800b984:	0801af64 	.word	0x0801af64
 800b988:	2000dd74 	.word	0x2000dd74

0800b98c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b088      	sub	sp, #32
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
 800b994:	460b      	mov	r3, r1
 800b996:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800b998:	887b      	ldrh	r3, [r7, #2]
 800b99a:	3303      	adds	r3, #3
 800b99c:	b29b      	uxth	r3, r3
 800b99e:	f023 0303 	bic.w	r3, r3, #3
 800b9a2:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800b9a4:	8bfb      	ldrh	r3, [r7, #30]
 800b9a6:	2b0b      	cmp	r3, #11
 800b9a8:	d801      	bhi.n	800b9ae <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800b9aa:	230c      	movs	r3, #12
 800b9ac:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800b9ae:	8bfb      	ldrh	r3, [r7, #30]
 800b9b0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b9b4:	d803      	bhi.n	800b9be <mem_trim+0x32>
 800b9b6:	8bfa      	ldrh	r2, [r7, #30]
 800b9b8:	887b      	ldrh	r3, [r7, #2]
 800b9ba:	429a      	cmp	r2, r3
 800b9bc:	d201      	bcs.n	800b9c2 <mem_trim+0x36>
    return NULL;
 800b9be:	2300      	movs	r3, #0
 800b9c0:	e0d8      	b.n	800bb74 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800b9c2:	4b6e      	ldr	r3, [pc, #440]	; (800bb7c <mem_trim+0x1f0>)
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	687a      	ldr	r2, [r7, #4]
 800b9c8:	429a      	cmp	r2, r3
 800b9ca:	d304      	bcc.n	800b9d6 <mem_trim+0x4a>
 800b9cc:	4b6c      	ldr	r3, [pc, #432]	; (800bb80 <mem_trim+0x1f4>)
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	687a      	ldr	r2, [r7, #4]
 800b9d2:	429a      	cmp	r2, r3
 800b9d4:	d306      	bcc.n	800b9e4 <mem_trim+0x58>
 800b9d6:	4b6b      	ldr	r3, [pc, #428]	; (800bb84 <mem_trim+0x1f8>)
 800b9d8:	f240 22d1 	movw	r2, #721	; 0x2d1
 800b9dc:	496a      	ldr	r1, [pc, #424]	; (800bb88 <mem_trim+0x1fc>)
 800b9de:	486b      	ldr	r0, [pc, #428]	; (800bb8c <mem_trim+0x200>)
 800b9e0:	f00d f8da 	bl	8018b98 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800b9e4:	4b65      	ldr	r3, [pc, #404]	; (800bb7c <mem_trim+0x1f0>)
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	687a      	ldr	r2, [r7, #4]
 800b9ea:	429a      	cmp	r2, r3
 800b9ec:	d304      	bcc.n	800b9f8 <mem_trim+0x6c>
 800b9ee:	4b64      	ldr	r3, [pc, #400]	; (800bb80 <mem_trim+0x1f4>)
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	687a      	ldr	r2, [r7, #4]
 800b9f4:	429a      	cmp	r2, r3
 800b9f6:	d307      	bcc.n	800ba08 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b9f8:	f00c ff94 	bl	8018924 <sys_arch_protect>
 800b9fc:	60b8      	str	r0, [r7, #8]
 800b9fe:	68b8      	ldr	r0, [r7, #8]
 800ba00:	f00c ff9e 	bl	8018940 <sys_arch_unprotect>
    return rmem;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	e0b5      	b.n	800bb74 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	3b08      	subs	r3, #8
 800ba0c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800ba0e:	69b8      	ldr	r0, [r7, #24]
 800ba10:	f7ff fdea 	bl	800b5e8 <mem_to_ptr>
 800ba14:	4603      	mov	r3, r0
 800ba16:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800ba18:	69bb      	ldr	r3, [r7, #24]
 800ba1a:	881a      	ldrh	r2, [r3, #0]
 800ba1c:	8afb      	ldrh	r3, [r7, #22]
 800ba1e:	1ad3      	subs	r3, r2, r3
 800ba20:	b29b      	uxth	r3, r3
 800ba22:	3b08      	subs	r3, #8
 800ba24:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800ba26:	8bfa      	ldrh	r2, [r7, #30]
 800ba28:	8abb      	ldrh	r3, [r7, #20]
 800ba2a:	429a      	cmp	r2, r3
 800ba2c:	d906      	bls.n	800ba3c <mem_trim+0xb0>
 800ba2e:	4b55      	ldr	r3, [pc, #340]	; (800bb84 <mem_trim+0x1f8>)
 800ba30:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800ba34:	4956      	ldr	r1, [pc, #344]	; (800bb90 <mem_trim+0x204>)
 800ba36:	4855      	ldr	r0, [pc, #340]	; (800bb8c <mem_trim+0x200>)
 800ba38:	f00d f8ae 	bl	8018b98 <iprintf>
  if (newsize > size) {
 800ba3c:	8bfa      	ldrh	r2, [r7, #30]
 800ba3e:	8abb      	ldrh	r3, [r7, #20]
 800ba40:	429a      	cmp	r2, r3
 800ba42:	d901      	bls.n	800ba48 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800ba44:	2300      	movs	r3, #0
 800ba46:	e095      	b.n	800bb74 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800ba48:	8bfa      	ldrh	r2, [r7, #30]
 800ba4a:	8abb      	ldrh	r3, [r7, #20]
 800ba4c:	429a      	cmp	r2, r3
 800ba4e:	d101      	bne.n	800ba54 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	e08f      	b.n	800bb74 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800ba54:	484f      	ldr	r0, [pc, #316]	; (800bb94 <mem_trim+0x208>)
 800ba56:	f00c ff23 	bl	80188a0 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800ba5a:	69bb      	ldr	r3, [r7, #24]
 800ba5c:	881b      	ldrh	r3, [r3, #0]
 800ba5e:	4618      	mov	r0, r3
 800ba60:	f7ff fdb0 	bl	800b5c4 <ptr_to_mem>
 800ba64:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800ba66:	693b      	ldr	r3, [r7, #16]
 800ba68:	791b      	ldrb	r3, [r3, #4]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d13f      	bne.n	800baee <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800ba6e:	69bb      	ldr	r3, [r7, #24]
 800ba70:	881b      	ldrh	r3, [r3, #0]
 800ba72:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ba76:	d106      	bne.n	800ba86 <mem_trim+0xfa>
 800ba78:	4b42      	ldr	r3, [pc, #264]	; (800bb84 <mem_trim+0x1f8>)
 800ba7a:	f240 22f5 	movw	r2, #757	; 0x2f5
 800ba7e:	4946      	ldr	r1, [pc, #280]	; (800bb98 <mem_trim+0x20c>)
 800ba80:	4842      	ldr	r0, [pc, #264]	; (800bb8c <mem_trim+0x200>)
 800ba82:	f00d f889 	bl	8018b98 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800ba86:	693b      	ldr	r3, [r7, #16]
 800ba88:	881b      	ldrh	r3, [r3, #0]
 800ba8a:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800ba8c:	8afa      	ldrh	r2, [r7, #22]
 800ba8e:	8bfb      	ldrh	r3, [r7, #30]
 800ba90:	4413      	add	r3, r2
 800ba92:	b29b      	uxth	r3, r3
 800ba94:	3308      	adds	r3, #8
 800ba96:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800ba98:	4b40      	ldr	r3, [pc, #256]	; (800bb9c <mem_trim+0x210>)
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	693a      	ldr	r2, [r7, #16]
 800ba9e:	429a      	cmp	r2, r3
 800baa0:	d106      	bne.n	800bab0 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800baa2:	89fb      	ldrh	r3, [r7, #14]
 800baa4:	4618      	mov	r0, r3
 800baa6:	f7ff fd8d 	bl	800b5c4 <ptr_to_mem>
 800baaa:	4603      	mov	r3, r0
 800baac:	4a3b      	ldr	r2, [pc, #236]	; (800bb9c <mem_trim+0x210>)
 800baae:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800bab0:	89fb      	ldrh	r3, [r7, #14]
 800bab2:	4618      	mov	r0, r3
 800bab4:	f7ff fd86 	bl	800b5c4 <ptr_to_mem>
 800bab8:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800baba:	693b      	ldr	r3, [r7, #16]
 800babc:	2200      	movs	r2, #0
 800babe:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800bac0:	693b      	ldr	r3, [r7, #16]
 800bac2:	89ba      	ldrh	r2, [r7, #12]
 800bac4:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800bac6:	693b      	ldr	r3, [r7, #16]
 800bac8:	8afa      	ldrh	r2, [r7, #22]
 800baca:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800bacc:	69bb      	ldr	r3, [r7, #24]
 800bace:	89fa      	ldrh	r2, [r7, #14]
 800bad0:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800bad2:	693b      	ldr	r3, [r7, #16]
 800bad4:	881b      	ldrh	r3, [r3, #0]
 800bad6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bada:	d047      	beq.n	800bb6c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800badc:	693b      	ldr	r3, [r7, #16]
 800bade:	881b      	ldrh	r3, [r3, #0]
 800bae0:	4618      	mov	r0, r3
 800bae2:	f7ff fd6f 	bl	800b5c4 <ptr_to_mem>
 800bae6:	4602      	mov	r2, r0
 800bae8:	89fb      	ldrh	r3, [r7, #14]
 800baea:	8053      	strh	r3, [r2, #2]
 800baec:	e03e      	b.n	800bb6c <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800baee:	8bfb      	ldrh	r3, [r7, #30]
 800baf0:	f103 0214 	add.w	r2, r3, #20
 800baf4:	8abb      	ldrh	r3, [r7, #20]
 800baf6:	429a      	cmp	r2, r3
 800baf8:	d838      	bhi.n	800bb6c <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800bafa:	8afa      	ldrh	r2, [r7, #22]
 800bafc:	8bfb      	ldrh	r3, [r7, #30]
 800bafe:	4413      	add	r3, r2
 800bb00:	b29b      	uxth	r3, r3
 800bb02:	3308      	adds	r3, #8
 800bb04:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800bb06:	69bb      	ldr	r3, [r7, #24]
 800bb08:	881b      	ldrh	r3, [r3, #0]
 800bb0a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bb0e:	d106      	bne.n	800bb1e <mem_trim+0x192>
 800bb10:	4b1c      	ldr	r3, [pc, #112]	; (800bb84 <mem_trim+0x1f8>)
 800bb12:	f240 3216 	movw	r2, #790	; 0x316
 800bb16:	4920      	ldr	r1, [pc, #128]	; (800bb98 <mem_trim+0x20c>)
 800bb18:	481c      	ldr	r0, [pc, #112]	; (800bb8c <mem_trim+0x200>)
 800bb1a:	f00d f83d 	bl	8018b98 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800bb1e:	89fb      	ldrh	r3, [r7, #14]
 800bb20:	4618      	mov	r0, r3
 800bb22:	f7ff fd4f 	bl	800b5c4 <ptr_to_mem>
 800bb26:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800bb28:	4b1c      	ldr	r3, [pc, #112]	; (800bb9c <mem_trim+0x210>)
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	693a      	ldr	r2, [r7, #16]
 800bb2e:	429a      	cmp	r2, r3
 800bb30:	d202      	bcs.n	800bb38 <mem_trim+0x1ac>
      lfree = mem2;
 800bb32:	4a1a      	ldr	r2, [pc, #104]	; (800bb9c <mem_trim+0x210>)
 800bb34:	693b      	ldr	r3, [r7, #16]
 800bb36:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800bb38:	693b      	ldr	r3, [r7, #16]
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800bb3e:	69bb      	ldr	r3, [r7, #24]
 800bb40:	881a      	ldrh	r2, [r3, #0]
 800bb42:	693b      	ldr	r3, [r7, #16]
 800bb44:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800bb46:	693b      	ldr	r3, [r7, #16]
 800bb48:	8afa      	ldrh	r2, [r7, #22]
 800bb4a:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800bb4c:	69bb      	ldr	r3, [r7, #24]
 800bb4e:	89fa      	ldrh	r2, [r7, #14]
 800bb50:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800bb52:	693b      	ldr	r3, [r7, #16]
 800bb54:	881b      	ldrh	r3, [r3, #0]
 800bb56:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bb5a:	d007      	beq.n	800bb6c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800bb5c:	693b      	ldr	r3, [r7, #16]
 800bb5e:	881b      	ldrh	r3, [r3, #0]
 800bb60:	4618      	mov	r0, r3
 800bb62:	f7ff fd2f 	bl	800b5c4 <ptr_to_mem>
 800bb66:	4602      	mov	r2, r0
 800bb68:	89fb      	ldrh	r3, [r7, #14]
 800bb6a:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800bb6c:	4809      	ldr	r0, [pc, #36]	; (800bb94 <mem_trim+0x208>)
 800bb6e:	f00c fea6 	bl	80188be <sys_mutex_unlock>
  return rmem;
 800bb72:	687b      	ldr	r3, [r7, #4]
}
 800bb74:	4618      	mov	r0, r3
 800bb76:	3720      	adds	r7, #32
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	bd80      	pop	{r7, pc}
 800bb7c:	2000dd68 	.word	0x2000dd68
 800bb80:	2000dd6c 	.word	0x2000dd6c
 800bb84:	0801ae0c 	.word	0x0801ae0c
 800bb88:	0801af98 	.word	0x0801af98
 800bb8c:	0801ae54 	.word	0x0801ae54
 800bb90:	0801afb0 	.word	0x0801afb0
 800bb94:	2000dd70 	.word	0x2000dd70
 800bb98:	0801afd0 	.word	0x0801afd0
 800bb9c:	2000dd74 	.word	0x2000dd74

0800bba0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b088      	sub	sp, #32
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	4603      	mov	r3, r0
 800bba8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800bbaa:	88fb      	ldrh	r3, [r7, #6]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d101      	bne.n	800bbb4 <mem_malloc+0x14>
    return NULL;
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	e0e2      	b.n	800bd7a <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800bbb4:	88fb      	ldrh	r3, [r7, #6]
 800bbb6:	3303      	adds	r3, #3
 800bbb8:	b29b      	uxth	r3, r3
 800bbba:	f023 0303 	bic.w	r3, r3, #3
 800bbbe:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800bbc0:	8bbb      	ldrh	r3, [r7, #28]
 800bbc2:	2b0b      	cmp	r3, #11
 800bbc4:	d801      	bhi.n	800bbca <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800bbc6:	230c      	movs	r3, #12
 800bbc8:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800bbca:	8bbb      	ldrh	r3, [r7, #28]
 800bbcc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bbd0:	d803      	bhi.n	800bbda <mem_malloc+0x3a>
 800bbd2:	8bba      	ldrh	r2, [r7, #28]
 800bbd4:	88fb      	ldrh	r3, [r7, #6]
 800bbd6:	429a      	cmp	r2, r3
 800bbd8:	d201      	bcs.n	800bbde <mem_malloc+0x3e>
    return NULL;
 800bbda:	2300      	movs	r3, #0
 800bbdc:	e0cd      	b.n	800bd7a <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800bbde:	4869      	ldr	r0, [pc, #420]	; (800bd84 <mem_malloc+0x1e4>)
 800bbe0:	f00c fe5e 	bl	80188a0 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800bbe4:	4b68      	ldr	r3, [pc, #416]	; (800bd88 <mem_malloc+0x1e8>)
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	4618      	mov	r0, r3
 800bbea:	f7ff fcfd 	bl	800b5e8 <mem_to_ptr>
 800bbee:	4603      	mov	r3, r0
 800bbf0:	83fb      	strh	r3, [r7, #30]
 800bbf2:	e0b7      	b.n	800bd64 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800bbf4:	8bfb      	ldrh	r3, [r7, #30]
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	f7ff fce4 	bl	800b5c4 <ptr_to_mem>
 800bbfc:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800bbfe:	697b      	ldr	r3, [r7, #20]
 800bc00:	791b      	ldrb	r3, [r3, #4]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	f040 80a7 	bne.w	800bd56 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800bc08:	697b      	ldr	r3, [r7, #20]
 800bc0a:	881b      	ldrh	r3, [r3, #0]
 800bc0c:	461a      	mov	r2, r3
 800bc0e:	8bfb      	ldrh	r3, [r7, #30]
 800bc10:	1ad3      	subs	r3, r2, r3
 800bc12:	f1a3 0208 	sub.w	r2, r3, #8
 800bc16:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800bc18:	429a      	cmp	r2, r3
 800bc1a:	f0c0 809c 	bcc.w	800bd56 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800bc1e:	697b      	ldr	r3, [r7, #20]
 800bc20:	881b      	ldrh	r3, [r3, #0]
 800bc22:	461a      	mov	r2, r3
 800bc24:	8bfb      	ldrh	r3, [r7, #30]
 800bc26:	1ad3      	subs	r3, r2, r3
 800bc28:	f1a3 0208 	sub.w	r2, r3, #8
 800bc2c:	8bbb      	ldrh	r3, [r7, #28]
 800bc2e:	3314      	adds	r3, #20
 800bc30:	429a      	cmp	r2, r3
 800bc32:	d333      	bcc.n	800bc9c <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800bc34:	8bfa      	ldrh	r2, [r7, #30]
 800bc36:	8bbb      	ldrh	r3, [r7, #28]
 800bc38:	4413      	add	r3, r2
 800bc3a:	b29b      	uxth	r3, r3
 800bc3c:	3308      	adds	r3, #8
 800bc3e:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800bc40:	8a7b      	ldrh	r3, [r7, #18]
 800bc42:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bc46:	d106      	bne.n	800bc56 <mem_malloc+0xb6>
 800bc48:	4b50      	ldr	r3, [pc, #320]	; (800bd8c <mem_malloc+0x1ec>)
 800bc4a:	f240 3287 	movw	r2, #903	; 0x387
 800bc4e:	4950      	ldr	r1, [pc, #320]	; (800bd90 <mem_malloc+0x1f0>)
 800bc50:	4850      	ldr	r0, [pc, #320]	; (800bd94 <mem_malloc+0x1f4>)
 800bc52:	f00c ffa1 	bl	8018b98 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800bc56:	8a7b      	ldrh	r3, [r7, #18]
 800bc58:	4618      	mov	r0, r3
 800bc5a:	f7ff fcb3 	bl	800b5c4 <ptr_to_mem>
 800bc5e:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	2200      	movs	r2, #0
 800bc64:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800bc66:	697b      	ldr	r3, [r7, #20]
 800bc68:	881a      	ldrh	r2, [r3, #0]
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	8bfa      	ldrh	r2, [r7, #30]
 800bc72:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800bc74:	697b      	ldr	r3, [r7, #20]
 800bc76:	8a7a      	ldrh	r2, [r7, #18]
 800bc78:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800bc7a:	697b      	ldr	r3, [r7, #20]
 800bc7c:	2201      	movs	r2, #1
 800bc7e:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	881b      	ldrh	r3, [r3, #0]
 800bc84:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bc88:	d00b      	beq.n	800bca2 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	881b      	ldrh	r3, [r3, #0]
 800bc8e:	4618      	mov	r0, r3
 800bc90:	f7ff fc98 	bl	800b5c4 <ptr_to_mem>
 800bc94:	4602      	mov	r2, r0
 800bc96:	8a7b      	ldrh	r3, [r7, #18]
 800bc98:	8053      	strh	r3, [r2, #2]
 800bc9a:	e002      	b.n	800bca2 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800bc9c:	697b      	ldr	r3, [r7, #20]
 800bc9e:	2201      	movs	r2, #1
 800bca0:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800bca2:	4b39      	ldr	r3, [pc, #228]	; (800bd88 <mem_malloc+0x1e8>)
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	697a      	ldr	r2, [r7, #20]
 800bca8:	429a      	cmp	r2, r3
 800bcaa:	d127      	bne.n	800bcfc <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800bcac:	4b36      	ldr	r3, [pc, #216]	; (800bd88 <mem_malloc+0x1e8>)
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800bcb2:	e005      	b.n	800bcc0 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800bcb4:	69bb      	ldr	r3, [r7, #24]
 800bcb6:	881b      	ldrh	r3, [r3, #0]
 800bcb8:	4618      	mov	r0, r3
 800bcba:	f7ff fc83 	bl	800b5c4 <ptr_to_mem>
 800bcbe:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800bcc0:	69bb      	ldr	r3, [r7, #24]
 800bcc2:	791b      	ldrb	r3, [r3, #4]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d004      	beq.n	800bcd2 <mem_malloc+0x132>
 800bcc8:	4b33      	ldr	r3, [pc, #204]	; (800bd98 <mem_malloc+0x1f8>)
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	69ba      	ldr	r2, [r7, #24]
 800bcce:	429a      	cmp	r2, r3
 800bcd0:	d1f0      	bne.n	800bcb4 <mem_malloc+0x114>
          }
          lfree = cur;
 800bcd2:	4a2d      	ldr	r2, [pc, #180]	; (800bd88 <mem_malloc+0x1e8>)
 800bcd4:	69bb      	ldr	r3, [r7, #24]
 800bcd6:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800bcd8:	4b2b      	ldr	r3, [pc, #172]	; (800bd88 <mem_malloc+0x1e8>)
 800bcda:	681a      	ldr	r2, [r3, #0]
 800bcdc:	4b2e      	ldr	r3, [pc, #184]	; (800bd98 <mem_malloc+0x1f8>)
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	429a      	cmp	r2, r3
 800bce2:	d00b      	beq.n	800bcfc <mem_malloc+0x15c>
 800bce4:	4b28      	ldr	r3, [pc, #160]	; (800bd88 <mem_malloc+0x1e8>)
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	791b      	ldrb	r3, [r3, #4]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d006      	beq.n	800bcfc <mem_malloc+0x15c>
 800bcee:	4b27      	ldr	r3, [pc, #156]	; (800bd8c <mem_malloc+0x1ec>)
 800bcf0:	f240 32b5 	movw	r2, #949	; 0x3b5
 800bcf4:	4929      	ldr	r1, [pc, #164]	; (800bd9c <mem_malloc+0x1fc>)
 800bcf6:	4827      	ldr	r0, [pc, #156]	; (800bd94 <mem_malloc+0x1f4>)
 800bcf8:	f00c ff4e 	bl	8018b98 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800bcfc:	4821      	ldr	r0, [pc, #132]	; (800bd84 <mem_malloc+0x1e4>)
 800bcfe:	f00c fdde 	bl	80188be <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800bd02:	8bba      	ldrh	r2, [r7, #28]
 800bd04:	697b      	ldr	r3, [r7, #20]
 800bd06:	4413      	add	r3, r2
 800bd08:	3308      	adds	r3, #8
 800bd0a:	4a23      	ldr	r2, [pc, #140]	; (800bd98 <mem_malloc+0x1f8>)
 800bd0c:	6812      	ldr	r2, [r2, #0]
 800bd0e:	4293      	cmp	r3, r2
 800bd10:	d906      	bls.n	800bd20 <mem_malloc+0x180>
 800bd12:	4b1e      	ldr	r3, [pc, #120]	; (800bd8c <mem_malloc+0x1ec>)
 800bd14:	f240 32b9 	movw	r2, #953	; 0x3b9
 800bd18:	4921      	ldr	r1, [pc, #132]	; (800bda0 <mem_malloc+0x200>)
 800bd1a:	481e      	ldr	r0, [pc, #120]	; (800bd94 <mem_malloc+0x1f4>)
 800bd1c:	f00c ff3c 	bl	8018b98 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800bd20:	697b      	ldr	r3, [r7, #20]
 800bd22:	f003 0303 	and.w	r3, r3, #3
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d006      	beq.n	800bd38 <mem_malloc+0x198>
 800bd2a:	4b18      	ldr	r3, [pc, #96]	; (800bd8c <mem_malloc+0x1ec>)
 800bd2c:	f240 32bb 	movw	r2, #955	; 0x3bb
 800bd30:	491c      	ldr	r1, [pc, #112]	; (800bda4 <mem_malloc+0x204>)
 800bd32:	4818      	ldr	r0, [pc, #96]	; (800bd94 <mem_malloc+0x1f4>)
 800bd34:	f00c ff30 	bl	8018b98 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800bd38:	697b      	ldr	r3, [r7, #20]
 800bd3a:	f003 0303 	and.w	r3, r3, #3
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d006      	beq.n	800bd50 <mem_malloc+0x1b0>
 800bd42:	4b12      	ldr	r3, [pc, #72]	; (800bd8c <mem_malloc+0x1ec>)
 800bd44:	f240 32bd 	movw	r2, #957	; 0x3bd
 800bd48:	4917      	ldr	r1, [pc, #92]	; (800bda8 <mem_malloc+0x208>)
 800bd4a:	4812      	ldr	r0, [pc, #72]	; (800bd94 <mem_malloc+0x1f4>)
 800bd4c:	f00c ff24 	bl	8018b98 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800bd50:	697b      	ldr	r3, [r7, #20]
 800bd52:	3308      	adds	r3, #8
 800bd54:	e011      	b.n	800bd7a <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800bd56:	8bfb      	ldrh	r3, [r7, #30]
 800bd58:	4618      	mov	r0, r3
 800bd5a:	f7ff fc33 	bl	800b5c4 <ptr_to_mem>
 800bd5e:	4603      	mov	r3, r0
 800bd60:	881b      	ldrh	r3, [r3, #0]
 800bd62:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800bd64:	8bfa      	ldrh	r2, [r7, #30]
 800bd66:	8bbb      	ldrh	r3, [r7, #28]
 800bd68:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800bd6c:	429a      	cmp	r2, r3
 800bd6e:	f4ff af41 	bcc.w	800bbf4 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800bd72:	4804      	ldr	r0, [pc, #16]	; (800bd84 <mem_malloc+0x1e4>)
 800bd74:	f00c fda3 	bl	80188be <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800bd78:	2300      	movs	r3, #0
}
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	3720      	adds	r7, #32
 800bd7e:	46bd      	mov	sp, r7
 800bd80:	bd80      	pop	{r7, pc}
 800bd82:	bf00      	nop
 800bd84:	2000dd70 	.word	0x2000dd70
 800bd88:	2000dd74 	.word	0x2000dd74
 800bd8c:	0801ae0c 	.word	0x0801ae0c
 800bd90:	0801afd0 	.word	0x0801afd0
 800bd94:	0801ae54 	.word	0x0801ae54
 800bd98:	2000dd6c 	.word	0x2000dd6c
 800bd9c:	0801afe4 	.word	0x0801afe4
 800bda0:	0801b000 	.word	0x0801b000
 800bda4:	0801b030 	.word	0x0801b030
 800bda8:	0801b060 	.word	0x0801b060

0800bdac <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800bdac:	b480      	push	{r7}
 800bdae:	b085      	sub	sp, #20
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	689b      	ldr	r3, [r3, #8]
 800bdb8:	2200      	movs	r2, #0
 800bdba:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	685b      	ldr	r3, [r3, #4]
 800bdc0:	3303      	adds	r3, #3
 800bdc2:	f023 0303 	bic.w	r3, r3, #3
 800bdc6:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800bdc8:	2300      	movs	r3, #0
 800bdca:	60fb      	str	r3, [r7, #12]
 800bdcc:	e011      	b.n	800bdf2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	689b      	ldr	r3, [r3, #8]
 800bdd2:	681a      	ldr	r2, [r3, #0]
 800bdd4:	68bb      	ldr	r3, [r7, #8]
 800bdd6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	689b      	ldr	r3, [r3, #8]
 800bddc:	68ba      	ldr	r2, [r7, #8]
 800bdde:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	881b      	ldrh	r3, [r3, #0]
 800bde4:	461a      	mov	r2, r3
 800bde6:	68bb      	ldr	r3, [r7, #8]
 800bde8:	4413      	add	r3, r2
 800bdea:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	3301      	adds	r3, #1
 800bdf0:	60fb      	str	r3, [r7, #12]
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	885b      	ldrh	r3, [r3, #2]
 800bdf6:	461a      	mov	r2, r3
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	4293      	cmp	r3, r2
 800bdfc:	dbe7      	blt.n	800bdce <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800bdfe:	bf00      	nop
 800be00:	bf00      	nop
 800be02:	3714      	adds	r7, #20
 800be04:	46bd      	mov	sp, r7
 800be06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0a:	4770      	bx	lr

0800be0c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800be0c:	b580      	push	{r7, lr}
 800be0e:	b082      	sub	sp, #8
 800be10:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800be12:	2300      	movs	r3, #0
 800be14:	80fb      	strh	r3, [r7, #6]
 800be16:	e009      	b.n	800be2c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800be18:	88fb      	ldrh	r3, [r7, #6]
 800be1a:	4a08      	ldr	r2, [pc, #32]	; (800be3c <memp_init+0x30>)
 800be1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be20:	4618      	mov	r0, r3
 800be22:	f7ff ffc3 	bl	800bdac <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800be26:	88fb      	ldrh	r3, [r7, #6]
 800be28:	3301      	adds	r3, #1
 800be2a:	80fb      	strh	r3, [r7, #6]
 800be2c:	88fb      	ldrh	r3, [r7, #6]
 800be2e:	2b0c      	cmp	r3, #12
 800be30:	d9f2      	bls.n	800be18 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800be32:	bf00      	nop
 800be34:	bf00      	nop
 800be36:	3708      	adds	r7, #8
 800be38:	46bd      	mov	sp, r7
 800be3a:	bd80      	pop	{r7, pc}
 800be3c:	08027d50 	.word	0x08027d50

0800be40 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800be40:	b580      	push	{r7, lr}
 800be42:	b084      	sub	sp, #16
 800be44:	af00      	add	r7, sp, #0
 800be46:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800be48:	f00c fd6c 	bl	8018924 <sys_arch_protect>
 800be4c:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	689b      	ldr	r3, [r3, #8]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800be56:	68bb      	ldr	r3, [r7, #8]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d015      	beq.n	800be88 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	689b      	ldr	r3, [r3, #8]
 800be60:	68ba      	ldr	r2, [r7, #8]
 800be62:	6812      	ldr	r2, [r2, #0]
 800be64:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800be66:	68bb      	ldr	r3, [r7, #8]
 800be68:	f003 0303 	and.w	r3, r3, #3
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d006      	beq.n	800be7e <do_memp_malloc_pool+0x3e>
 800be70:	4b09      	ldr	r3, [pc, #36]	; (800be98 <do_memp_malloc_pool+0x58>)
 800be72:	f44f 728c 	mov.w	r2, #280	; 0x118
 800be76:	4909      	ldr	r1, [pc, #36]	; (800be9c <do_memp_malloc_pool+0x5c>)
 800be78:	4809      	ldr	r0, [pc, #36]	; (800bea0 <do_memp_malloc_pool+0x60>)
 800be7a:	f00c fe8d 	bl	8018b98 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800be7e:	68f8      	ldr	r0, [r7, #12]
 800be80:	f00c fd5e 	bl	8018940 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800be84:	68bb      	ldr	r3, [r7, #8]
 800be86:	e003      	b.n	800be90 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800be88:	68f8      	ldr	r0, [r7, #12]
 800be8a:	f00c fd59 	bl	8018940 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800be8e:	2300      	movs	r3, #0
}
 800be90:	4618      	mov	r0, r3
 800be92:	3710      	adds	r7, #16
 800be94:	46bd      	mov	sp, r7
 800be96:	bd80      	pop	{r7, pc}
 800be98:	0801b084 	.word	0x0801b084
 800be9c:	0801b0b4 	.word	0x0801b0b4
 800bea0:	0801b0d8 	.word	0x0801b0d8

0800bea4 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800bea4:	b580      	push	{r7, lr}
 800bea6:	b082      	sub	sp, #8
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d106      	bne.n	800bec0 <memp_malloc_pool+0x1c>
 800beb2:	4b0a      	ldr	r3, [pc, #40]	; (800bedc <memp_malloc_pool+0x38>)
 800beb4:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800beb8:	4909      	ldr	r1, [pc, #36]	; (800bee0 <memp_malloc_pool+0x3c>)
 800beba:	480a      	ldr	r0, [pc, #40]	; (800bee4 <memp_malloc_pool+0x40>)
 800bebc:	f00c fe6c 	bl	8018b98 <iprintf>
  if (desc == NULL) {
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d101      	bne.n	800beca <memp_malloc_pool+0x26>
    return NULL;
 800bec6:	2300      	movs	r3, #0
 800bec8:	e003      	b.n	800bed2 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800beca:	6878      	ldr	r0, [r7, #4]
 800becc:	f7ff ffb8 	bl	800be40 <do_memp_malloc_pool>
 800bed0:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800bed2:	4618      	mov	r0, r3
 800bed4:	3708      	adds	r7, #8
 800bed6:	46bd      	mov	sp, r7
 800bed8:	bd80      	pop	{r7, pc}
 800beda:	bf00      	nop
 800bedc:	0801b084 	.word	0x0801b084
 800bee0:	0801b100 	.word	0x0801b100
 800bee4:	0801b0d8 	.word	0x0801b0d8

0800bee8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800bee8:	b580      	push	{r7, lr}
 800beea:	b084      	sub	sp, #16
 800beec:	af00      	add	r7, sp, #0
 800beee:	4603      	mov	r3, r0
 800bef0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800bef2:	79fb      	ldrb	r3, [r7, #7]
 800bef4:	2b0c      	cmp	r3, #12
 800bef6:	d908      	bls.n	800bf0a <memp_malloc+0x22>
 800bef8:	4b0a      	ldr	r3, [pc, #40]	; (800bf24 <memp_malloc+0x3c>)
 800befa:	f240 1257 	movw	r2, #343	; 0x157
 800befe:	490a      	ldr	r1, [pc, #40]	; (800bf28 <memp_malloc+0x40>)
 800bf00:	480a      	ldr	r0, [pc, #40]	; (800bf2c <memp_malloc+0x44>)
 800bf02:	f00c fe49 	bl	8018b98 <iprintf>
 800bf06:	2300      	movs	r3, #0
 800bf08:	e008      	b.n	800bf1c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800bf0a:	79fb      	ldrb	r3, [r7, #7]
 800bf0c:	4a08      	ldr	r2, [pc, #32]	; (800bf30 <memp_malloc+0x48>)
 800bf0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf12:	4618      	mov	r0, r3
 800bf14:	f7ff ff94 	bl	800be40 <do_memp_malloc_pool>
 800bf18:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800bf1a:	68fb      	ldr	r3, [r7, #12]
}
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	3710      	adds	r7, #16
 800bf20:	46bd      	mov	sp, r7
 800bf22:	bd80      	pop	{r7, pc}
 800bf24:	0801b084 	.word	0x0801b084
 800bf28:	0801b114 	.word	0x0801b114
 800bf2c:	0801b0d8 	.word	0x0801b0d8
 800bf30:	08027d50 	.word	0x08027d50

0800bf34 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b084      	sub	sp, #16
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
 800bf3c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800bf3e:	683b      	ldr	r3, [r7, #0]
 800bf40:	f003 0303 	and.w	r3, r3, #3
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d006      	beq.n	800bf56 <do_memp_free_pool+0x22>
 800bf48:	4b0d      	ldr	r3, [pc, #52]	; (800bf80 <do_memp_free_pool+0x4c>)
 800bf4a:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800bf4e:	490d      	ldr	r1, [pc, #52]	; (800bf84 <do_memp_free_pool+0x50>)
 800bf50:	480d      	ldr	r0, [pc, #52]	; (800bf88 <do_memp_free_pool+0x54>)
 800bf52:	f00c fe21 	bl	8018b98 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800bf56:	683b      	ldr	r3, [r7, #0]
 800bf58:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800bf5a:	f00c fce3 	bl	8018924 <sys_arch_protect>
 800bf5e:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	689b      	ldr	r3, [r3, #8]
 800bf64:	681a      	ldr	r2, [r3, #0]
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	689b      	ldr	r3, [r3, #8]
 800bf6e:	68fa      	ldr	r2, [r7, #12]
 800bf70:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800bf72:	68b8      	ldr	r0, [r7, #8]
 800bf74:	f00c fce4 	bl	8018940 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800bf78:	bf00      	nop
 800bf7a:	3710      	adds	r7, #16
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	bd80      	pop	{r7, pc}
 800bf80:	0801b084 	.word	0x0801b084
 800bf84:	0801b134 	.word	0x0801b134
 800bf88:	0801b0d8 	.word	0x0801b0d8

0800bf8c <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800bf8c:	b580      	push	{r7, lr}
 800bf8e:	b082      	sub	sp, #8
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	6078      	str	r0, [r7, #4]
 800bf94:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d106      	bne.n	800bfaa <memp_free_pool+0x1e>
 800bf9c:	4b0a      	ldr	r3, [pc, #40]	; (800bfc8 <memp_free_pool+0x3c>)
 800bf9e:	f240 1295 	movw	r2, #405	; 0x195
 800bfa2:	490a      	ldr	r1, [pc, #40]	; (800bfcc <memp_free_pool+0x40>)
 800bfa4:	480a      	ldr	r0, [pc, #40]	; (800bfd0 <memp_free_pool+0x44>)
 800bfa6:	f00c fdf7 	bl	8018b98 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d007      	beq.n	800bfc0 <memp_free_pool+0x34>
 800bfb0:	683b      	ldr	r3, [r7, #0]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d004      	beq.n	800bfc0 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800bfb6:	6839      	ldr	r1, [r7, #0]
 800bfb8:	6878      	ldr	r0, [r7, #4]
 800bfba:	f7ff ffbb 	bl	800bf34 <do_memp_free_pool>
 800bfbe:	e000      	b.n	800bfc2 <memp_free_pool+0x36>
    return;
 800bfc0:	bf00      	nop
}
 800bfc2:	3708      	adds	r7, #8
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	bd80      	pop	{r7, pc}
 800bfc8:	0801b084 	.word	0x0801b084
 800bfcc:	0801b100 	.word	0x0801b100
 800bfd0:	0801b0d8 	.word	0x0801b0d8

0800bfd4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b082      	sub	sp, #8
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	4603      	mov	r3, r0
 800bfdc:	6039      	str	r1, [r7, #0]
 800bfde:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800bfe0:	79fb      	ldrb	r3, [r7, #7]
 800bfe2:	2b0c      	cmp	r3, #12
 800bfe4:	d907      	bls.n	800bff6 <memp_free+0x22>
 800bfe6:	4b0c      	ldr	r3, [pc, #48]	; (800c018 <memp_free+0x44>)
 800bfe8:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800bfec:	490b      	ldr	r1, [pc, #44]	; (800c01c <memp_free+0x48>)
 800bfee:	480c      	ldr	r0, [pc, #48]	; (800c020 <memp_free+0x4c>)
 800bff0:	f00c fdd2 	bl	8018b98 <iprintf>
 800bff4:	e00c      	b.n	800c010 <memp_free+0x3c>

  if (mem == NULL) {
 800bff6:	683b      	ldr	r3, [r7, #0]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d008      	beq.n	800c00e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800bffc:	79fb      	ldrb	r3, [r7, #7]
 800bffe:	4a09      	ldr	r2, [pc, #36]	; (800c024 <memp_free+0x50>)
 800c000:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c004:	6839      	ldr	r1, [r7, #0]
 800c006:	4618      	mov	r0, r3
 800c008:	f7ff ff94 	bl	800bf34 <do_memp_free_pool>
 800c00c:	e000      	b.n	800c010 <memp_free+0x3c>
    return;
 800c00e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800c010:	3708      	adds	r7, #8
 800c012:	46bd      	mov	sp, r7
 800c014:	bd80      	pop	{r7, pc}
 800c016:	bf00      	nop
 800c018:	0801b084 	.word	0x0801b084
 800c01c:	0801b154 	.word	0x0801b154
 800c020:	0801b0d8 	.word	0x0801b0d8
 800c024:	08027d50 	.word	0x08027d50

0800c028 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800c028:	b480      	push	{r7}
 800c02a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800c02c:	bf00      	nop
 800c02e:	46bd      	mov	sp, r7
 800c030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c034:	4770      	bx	lr
	...

0800c038 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800c038:	b580      	push	{r7, lr}
 800c03a:	b086      	sub	sp, #24
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	60f8      	str	r0, [r7, #12]
 800c040:	60b9      	str	r1, [r7, #8]
 800c042:	607a      	str	r2, [r7, #4]
 800c044:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d108      	bne.n	800c05e <netif_add+0x26>
 800c04c:	4b5b      	ldr	r3, [pc, #364]	; (800c1bc <netif_add+0x184>)
 800c04e:	f240 1227 	movw	r2, #295	; 0x127
 800c052:	495b      	ldr	r1, [pc, #364]	; (800c1c0 <netif_add+0x188>)
 800c054:	485b      	ldr	r0, [pc, #364]	; (800c1c4 <netif_add+0x18c>)
 800c056:	f00c fd9f 	bl	8018b98 <iprintf>
 800c05a:	2300      	movs	r3, #0
 800c05c:	e0a9      	b.n	800c1b2 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800c05e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c060:	2b00      	cmp	r3, #0
 800c062:	d108      	bne.n	800c076 <netif_add+0x3e>
 800c064:	4b55      	ldr	r3, [pc, #340]	; (800c1bc <netif_add+0x184>)
 800c066:	f44f 7294 	mov.w	r2, #296	; 0x128
 800c06a:	4957      	ldr	r1, [pc, #348]	; (800c1c8 <netif_add+0x190>)
 800c06c:	4855      	ldr	r0, [pc, #340]	; (800c1c4 <netif_add+0x18c>)
 800c06e:	f00c fd93 	bl	8018b98 <iprintf>
 800c072:	2300      	movs	r3, #0
 800c074:	e09d      	b.n	800c1b2 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800c076:	68bb      	ldr	r3, [r7, #8]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d101      	bne.n	800c080 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800c07c:	4b53      	ldr	r3, [pc, #332]	; (800c1cc <netif_add+0x194>)
 800c07e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d101      	bne.n	800c08a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800c086:	4b51      	ldr	r3, [pc, #324]	; (800c1cc <netif_add+0x194>)
 800c088:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c08a:	683b      	ldr	r3, [r7, #0]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d101      	bne.n	800c094 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800c090:	4b4e      	ldr	r3, [pc, #312]	; (800c1cc <netif_add+0x194>)
 800c092:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	2200      	movs	r2, #0
 800c098:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	2200      	movs	r2, #0
 800c09e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	4a49      	ldr	r2, [pc, #292]	; (800c1d0 <netif_add+0x198>)
 800c0aa:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	2200      	movs	r2, #0
 800c0b0:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	2200      	movs	r2, #0
 800c0b6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	3324      	adds	r3, #36	; 0x24
 800c0be:	2204      	movs	r2, #4
 800c0c0:	2100      	movs	r1, #0
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	f00c fe07 	bl	8018cd6 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	2200      	movs	r2, #0
 800c0cc:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	6a3a      	ldr	r2, [r7, #32]
 800c0d2:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800c0d4:	4b3f      	ldr	r3, [pc, #252]	; (800c1d4 <netif_add+0x19c>)
 800c0d6:	781a      	ldrb	r2, [r3, #0]
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c0e2:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800c0e4:	683b      	ldr	r3, [r7, #0]
 800c0e6:	687a      	ldr	r2, [r7, #4]
 800c0e8:	68b9      	ldr	r1, [r7, #8]
 800c0ea:	68f8      	ldr	r0, [r7, #12]
 800c0ec:	f000 f914 	bl	800c318 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800c0f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0f2:	68f8      	ldr	r0, [r7, #12]
 800c0f4:	4798      	blx	r3
 800c0f6:	4603      	mov	r3, r0
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d001      	beq.n	800c100 <netif_add+0xc8>
    return NULL;
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	e058      	b.n	800c1b2 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c106:	2bff      	cmp	r3, #255	; 0xff
 800c108:	d103      	bne.n	800c112 <netif_add+0xda>
        netif->num = 0;
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	2200      	movs	r2, #0
 800c10e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800c112:	2300      	movs	r3, #0
 800c114:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c116:	4b30      	ldr	r3, [pc, #192]	; (800c1d8 <netif_add+0x1a0>)
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	617b      	str	r3, [r7, #20]
 800c11c:	e02b      	b.n	800c176 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800c11e:	697a      	ldr	r2, [r7, #20]
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	429a      	cmp	r2, r3
 800c124:	d106      	bne.n	800c134 <netif_add+0xfc>
 800c126:	4b25      	ldr	r3, [pc, #148]	; (800c1bc <netif_add+0x184>)
 800c128:	f240 128b 	movw	r2, #395	; 0x18b
 800c12c:	492b      	ldr	r1, [pc, #172]	; (800c1dc <netif_add+0x1a4>)
 800c12e:	4825      	ldr	r0, [pc, #148]	; (800c1c4 <netif_add+0x18c>)
 800c130:	f00c fd32 	bl	8018b98 <iprintf>
        num_netifs++;
 800c134:	693b      	ldr	r3, [r7, #16]
 800c136:	3301      	adds	r3, #1
 800c138:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800c13a:	693b      	ldr	r3, [r7, #16]
 800c13c:	2bff      	cmp	r3, #255	; 0xff
 800c13e:	dd06      	ble.n	800c14e <netif_add+0x116>
 800c140:	4b1e      	ldr	r3, [pc, #120]	; (800c1bc <netif_add+0x184>)
 800c142:	f240 128d 	movw	r2, #397	; 0x18d
 800c146:	4926      	ldr	r1, [pc, #152]	; (800c1e0 <netif_add+0x1a8>)
 800c148:	481e      	ldr	r0, [pc, #120]	; (800c1c4 <netif_add+0x18c>)
 800c14a:	f00c fd25 	bl	8018b98 <iprintf>
        if (netif2->num == netif->num) {
 800c14e:	697b      	ldr	r3, [r7, #20]
 800c150:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c15a:	429a      	cmp	r2, r3
 800c15c:	d108      	bne.n	800c170 <netif_add+0x138>
          netif->num++;
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c164:	3301      	adds	r3, #1
 800c166:	b2da      	uxtb	r2, r3
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800c16e:	e005      	b.n	800c17c <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c170:	697b      	ldr	r3, [r7, #20]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	617b      	str	r3, [r7, #20]
 800c176:	697b      	ldr	r3, [r7, #20]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d1d0      	bne.n	800c11e <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800c17c:	697b      	ldr	r3, [r7, #20]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d1be      	bne.n	800c100 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c188:	2bfe      	cmp	r3, #254	; 0xfe
 800c18a:	d103      	bne.n	800c194 <netif_add+0x15c>
    netif_num = 0;
 800c18c:	4b11      	ldr	r3, [pc, #68]	; (800c1d4 <netif_add+0x19c>)
 800c18e:	2200      	movs	r2, #0
 800c190:	701a      	strb	r2, [r3, #0]
 800c192:	e006      	b.n	800c1a2 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c19a:	3301      	adds	r3, #1
 800c19c:	b2da      	uxtb	r2, r3
 800c19e:	4b0d      	ldr	r3, [pc, #52]	; (800c1d4 <netif_add+0x19c>)
 800c1a0:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800c1a2:	4b0d      	ldr	r3, [pc, #52]	; (800c1d8 <netif_add+0x1a0>)
 800c1a4:	681a      	ldr	r2, [r3, #0]
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800c1aa:	4a0b      	ldr	r2, [pc, #44]	; (800c1d8 <netif_add+0x1a0>)
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800c1b0:	68fb      	ldr	r3, [r7, #12]
}
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	3718      	adds	r7, #24
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	bd80      	pop	{r7, pc}
 800c1ba:	bf00      	nop
 800c1bc:	0801b170 	.word	0x0801b170
 800c1c0:	0801b204 	.word	0x0801b204
 800c1c4:	0801b1c0 	.word	0x0801b1c0
 800c1c8:	0801b220 	.word	0x0801b220
 800c1cc:	08027dd4 	.word	0x08027dd4
 800c1d0:	0800c5fb 	.word	0x0800c5fb
 800c1d4:	20010e6c 	.word	0x20010e6c
 800c1d8:	20010e64 	.word	0x20010e64
 800c1dc:	0801b244 	.word	0x0801b244
 800c1e0:	0801b258 	.word	0x0801b258

0800c1e4 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b082      	sub	sp, #8
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]
 800c1ec:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800c1ee:	6839      	ldr	r1, [r7, #0]
 800c1f0:	6878      	ldr	r0, [r7, #4]
 800c1f2:	f002 ffab 	bl	800f14c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800c1f6:	6839      	ldr	r1, [r7, #0]
 800c1f8:	6878      	ldr	r0, [r7, #4]
 800c1fa:	f008 f825 	bl	8014248 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800c1fe:	bf00      	nop
 800c200:	3708      	adds	r7, #8
 800c202:	46bd      	mov	sp, r7
 800c204:	bd80      	pop	{r7, pc}
	...

0800c208 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800c208:	b580      	push	{r7, lr}
 800c20a:	b086      	sub	sp, #24
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	60f8      	str	r0, [r7, #12]
 800c210:	60b9      	str	r1, [r7, #8]
 800c212:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800c214:	68bb      	ldr	r3, [r7, #8]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d106      	bne.n	800c228 <netif_do_set_ipaddr+0x20>
 800c21a:	4b1d      	ldr	r3, [pc, #116]	; (800c290 <netif_do_set_ipaddr+0x88>)
 800c21c:	f240 12cb 	movw	r2, #459	; 0x1cb
 800c220:	491c      	ldr	r1, [pc, #112]	; (800c294 <netif_do_set_ipaddr+0x8c>)
 800c222:	481d      	ldr	r0, [pc, #116]	; (800c298 <netif_do_set_ipaddr+0x90>)
 800c224:	f00c fcb8 	bl	8018b98 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d106      	bne.n	800c23c <netif_do_set_ipaddr+0x34>
 800c22e:	4b18      	ldr	r3, [pc, #96]	; (800c290 <netif_do_set_ipaddr+0x88>)
 800c230:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800c234:	4917      	ldr	r1, [pc, #92]	; (800c294 <netif_do_set_ipaddr+0x8c>)
 800c236:	4818      	ldr	r0, [pc, #96]	; (800c298 <netif_do_set_ipaddr+0x90>)
 800c238:	f00c fcae 	bl	8018b98 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800c23c:	68bb      	ldr	r3, [r7, #8]
 800c23e:	681a      	ldr	r2, [r3, #0]
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	3304      	adds	r3, #4
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	429a      	cmp	r2, r3
 800c248:	d01c      	beq.n	800c284 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800c24a:	68bb      	ldr	r3, [r7, #8]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	3304      	adds	r3, #4
 800c254:	681a      	ldr	r2, [r3, #0]
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800c25a:	f107 0314 	add.w	r3, r7, #20
 800c25e:	4619      	mov	r1, r3
 800c260:	6878      	ldr	r0, [r7, #4]
 800c262:	f7ff ffbf 	bl	800c1e4 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800c266:	68bb      	ldr	r3, [r7, #8]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d002      	beq.n	800c272 <netif_do_set_ipaddr+0x6a>
 800c26c:	68bb      	ldr	r3, [r7, #8]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	e000      	b.n	800c274 <netif_do_set_ipaddr+0x6c>
 800c272:	2300      	movs	r3, #0
 800c274:	68fa      	ldr	r2, [r7, #12]
 800c276:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800c278:	2101      	movs	r1, #1
 800c27a:	68f8      	ldr	r0, [r7, #12]
 800c27c:	f000 f8d2 	bl	800c424 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800c280:	2301      	movs	r3, #1
 800c282:	e000      	b.n	800c286 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800c284:	2300      	movs	r3, #0
}
 800c286:	4618      	mov	r0, r3
 800c288:	3718      	adds	r7, #24
 800c28a:	46bd      	mov	sp, r7
 800c28c:	bd80      	pop	{r7, pc}
 800c28e:	bf00      	nop
 800c290:	0801b170 	.word	0x0801b170
 800c294:	0801b288 	.word	0x0801b288
 800c298:	0801b1c0 	.word	0x0801b1c0

0800c29c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800c29c:	b480      	push	{r7}
 800c29e:	b085      	sub	sp, #20
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	60f8      	str	r0, [r7, #12]
 800c2a4:	60b9      	str	r1, [r7, #8]
 800c2a6:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800c2a8:	68bb      	ldr	r3, [r7, #8]
 800c2aa:	681a      	ldr	r2, [r3, #0]
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	3308      	adds	r3, #8
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	429a      	cmp	r2, r3
 800c2b4:	d00a      	beq.n	800c2cc <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800c2b6:	68bb      	ldr	r3, [r7, #8]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d002      	beq.n	800c2c2 <netif_do_set_netmask+0x26>
 800c2bc:	68bb      	ldr	r3, [r7, #8]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	e000      	b.n	800c2c4 <netif_do_set_netmask+0x28>
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	68fa      	ldr	r2, [r7, #12]
 800c2c6:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800c2c8:	2301      	movs	r3, #1
 800c2ca:	e000      	b.n	800c2ce <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800c2cc:	2300      	movs	r3, #0
}
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	3714      	adds	r7, #20
 800c2d2:	46bd      	mov	sp, r7
 800c2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d8:	4770      	bx	lr

0800c2da <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800c2da:	b480      	push	{r7}
 800c2dc:	b085      	sub	sp, #20
 800c2de:	af00      	add	r7, sp, #0
 800c2e0:	60f8      	str	r0, [r7, #12]
 800c2e2:	60b9      	str	r1, [r7, #8]
 800c2e4:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800c2e6:	68bb      	ldr	r3, [r7, #8]
 800c2e8:	681a      	ldr	r2, [r3, #0]
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	330c      	adds	r3, #12
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	429a      	cmp	r2, r3
 800c2f2:	d00a      	beq.n	800c30a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800c2f4:	68bb      	ldr	r3, [r7, #8]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d002      	beq.n	800c300 <netif_do_set_gw+0x26>
 800c2fa:	68bb      	ldr	r3, [r7, #8]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	e000      	b.n	800c302 <netif_do_set_gw+0x28>
 800c300:	2300      	movs	r3, #0
 800c302:	68fa      	ldr	r2, [r7, #12]
 800c304:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800c306:	2301      	movs	r3, #1
 800c308:	e000      	b.n	800c30c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800c30a:	2300      	movs	r3, #0
}
 800c30c:	4618      	mov	r0, r3
 800c30e:	3714      	adds	r7, #20
 800c310:	46bd      	mov	sp, r7
 800c312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c316:	4770      	bx	lr

0800c318 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b088      	sub	sp, #32
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	60f8      	str	r0, [r7, #12]
 800c320:	60b9      	str	r1, [r7, #8]
 800c322:	607a      	str	r2, [r7, #4]
 800c324:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800c326:	2300      	movs	r3, #0
 800c328:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800c32a:	2300      	movs	r3, #0
 800c32c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c32e:	68bb      	ldr	r3, [r7, #8]
 800c330:	2b00      	cmp	r3, #0
 800c332:	d101      	bne.n	800c338 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800c334:	4b1c      	ldr	r3, [pc, #112]	; (800c3a8 <netif_set_addr+0x90>)
 800c336:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d101      	bne.n	800c342 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800c33e:	4b1a      	ldr	r3, [pc, #104]	; (800c3a8 <netif_set_addr+0x90>)
 800c340:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c342:	683b      	ldr	r3, [r7, #0]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d101      	bne.n	800c34c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800c348:	4b17      	ldr	r3, [pc, #92]	; (800c3a8 <netif_set_addr+0x90>)
 800c34a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800c34c:	68bb      	ldr	r3, [r7, #8]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d003      	beq.n	800c35a <netif_set_addr+0x42>
 800c352:	68bb      	ldr	r3, [r7, #8]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	2b00      	cmp	r3, #0
 800c358:	d101      	bne.n	800c35e <netif_set_addr+0x46>
 800c35a:	2301      	movs	r3, #1
 800c35c:	e000      	b.n	800c360 <netif_set_addr+0x48>
 800c35e:	2300      	movs	r3, #0
 800c360:	617b      	str	r3, [r7, #20]
  if (remove) {
 800c362:	697b      	ldr	r3, [r7, #20]
 800c364:	2b00      	cmp	r3, #0
 800c366:	d006      	beq.n	800c376 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c368:	f107 0310 	add.w	r3, r7, #16
 800c36c:	461a      	mov	r2, r3
 800c36e:	68b9      	ldr	r1, [r7, #8]
 800c370:	68f8      	ldr	r0, [r7, #12]
 800c372:	f7ff ff49 	bl	800c208 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800c376:	69fa      	ldr	r2, [r7, #28]
 800c378:	6879      	ldr	r1, [r7, #4]
 800c37a:	68f8      	ldr	r0, [r7, #12]
 800c37c:	f7ff ff8e 	bl	800c29c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800c380:	69ba      	ldr	r2, [r7, #24]
 800c382:	6839      	ldr	r1, [r7, #0]
 800c384:	68f8      	ldr	r0, [r7, #12]
 800c386:	f7ff ffa8 	bl	800c2da <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800c38a:	697b      	ldr	r3, [r7, #20]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d106      	bne.n	800c39e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c390:	f107 0310 	add.w	r3, r7, #16
 800c394:	461a      	mov	r2, r3
 800c396:	68b9      	ldr	r1, [r7, #8]
 800c398:	68f8      	ldr	r0, [r7, #12]
 800c39a:	f7ff ff35 	bl	800c208 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800c39e:	bf00      	nop
 800c3a0:	3720      	adds	r7, #32
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	bd80      	pop	{r7, pc}
 800c3a6:	bf00      	nop
 800c3a8:	08027dd4 	.word	0x08027dd4

0800c3ac <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800c3ac:	b480      	push	{r7}
 800c3ae:	b083      	sub	sp, #12
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800c3b4:	4a04      	ldr	r2, [pc, #16]	; (800c3c8 <netif_set_default+0x1c>)
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800c3ba:	bf00      	nop
 800c3bc:	370c      	adds	r7, #12
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c4:	4770      	bx	lr
 800c3c6:	bf00      	nop
 800c3c8:	20010e68 	.word	0x20010e68

0800c3cc <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	b082      	sub	sp, #8
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d107      	bne.n	800c3ea <netif_set_up+0x1e>
 800c3da:	4b0f      	ldr	r3, [pc, #60]	; (800c418 <netif_set_up+0x4c>)
 800c3dc:	f44f 7254 	mov.w	r2, #848	; 0x350
 800c3e0:	490e      	ldr	r1, [pc, #56]	; (800c41c <netif_set_up+0x50>)
 800c3e2:	480f      	ldr	r0, [pc, #60]	; (800c420 <netif_set_up+0x54>)
 800c3e4:	f00c fbd8 	bl	8018b98 <iprintf>
 800c3e8:	e013      	b.n	800c412 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c3f0:	f003 0301 	and.w	r3, r3, #1
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d10c      	bne.n	800c412 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c3fe:	f043 0301 	orr.w	r3, r3, #1
 800c402:	b2da      	uxtb	r2, r3
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c40a:	2103      	movs	r1, #3
 800c40c:	6878      	ldr	r0, [r7, #4]
 800c40e:	f000 f809 	bl	800c424 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800c412:	3708      	adds	r7, #8
 800c414:	46bd      	mov	sp, r7
 800c416:	bd80      	pop	{r7, pc}
 800c418:	0801b170 	.word	0x0801b170
 800c41c:	0801b2f8 	.word	0x0801b2f8
 800c420:	0801b1c0 	.word	0x0801b1c0

0800c424 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800c424:	b580      	push	{r7, lr}
 800c426:	b082      	sub	sp, #8
 800c428:	af00      	add	r7, sp, #0
 800c42a:	6078      	str	r0, [r7, #4]
 800c42c:	460b      	mov	r3, r1
 800c42e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d106      	bne.n	800c444 <netif_issue_reports+0x20>
 800c436:	4b18      	ldr	r3, [pc, #96]	; (800c498 <netif_issue_reports+0x74>)
 800c438:	f240 326d 	movw	r2, #877	; 0x36d
 800c43c:	4917      	ldr	r1, [pc, #92]	; (800c49c <netif_issue_reports+0x78>)
 800c43e:	4818      	ldr	r0, [pc, #96]	; (800c4a0 <netif_issue_reports+0x7c>)
 800c440:	f00c fbaa 	bl	8018b98 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c44a:	f003 0304 	and.w	r3, r3, #4
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d01e      	beq.n	800c490 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c458:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d017      	beq.n	800c490 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c460:	78fb      	ldrb	r3, [r7, #3]
 800c462:	f003 0301 	and.w	r3, r3, #1
 800c466:	2b00      	cmp	r3, #0
 800c468:	d013      	beq.n	800c492 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	3304      	adds	r3, #4
 800c46e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c470:	2b00      	cmp	r3, #0
 800c472:	d00e      	beq.n	800c492 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c47a:	f003 0308 	and.w	r3, r3, #8
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d007      	beq.n	800c492 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	3304      	adds	r3, #4
 800c486:	4619      	mov	r1, r3
 800c488:	6878      	ldr	r0, [r7, #4]
 800c48a:	f00a fcdd 	bl	8016e48 <etharp_request>
 800c48e:	e000      	b.n	800c492 <netif_issue_reports+0x6e>
    return;
 800c490:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800c492:	3708      	adds	r7, #8
 800c494:	46bd      	mov	sp, r7
 800c496:	bd80      	pop	{r7, pc}
 800c498:	0801b170 	.word	0x0801b170
 800c49c:	0801b314 	.word	0x0801b314
 800c4a0:	0801b1c0 	.word	0x0801b1c0

0800c4a4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b082      	sub	sp, #8
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d107      	bne.n	800c4c2 <netif_set_down+0x1e>
 800c4b2:	4b12      	ldr	r3, [pc, #72]	; (800c4fc <netif_set_down+0x58>)
 800c4b4:	f240 329b 	movw	r2, #923	; 0x39b
 800c4b8:	4911      	ldr	r1, [pc, #68]	; (800c500 <netif_set_down+0x5c>)
 800c4ba:	4812      	ldr	r0, [pc, #72]	; (800c504 <netif_set_down+0x60>)
 800c4bc:	f00c fb6c 	bl	8018b98 <iprintf>
 800c4c0:	e019      	b.n	800c4f6 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c4c8:	f003 0301 	and.w	r3, r3, #1
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d012      	beq.n	800c4f6 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c4d6:	f023 0301 	bic.w	r3, r3, #1
 800c4da:	b2da      	uxtb	r2, r3
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c4e8:	f003 0308 	and.w	r3, r3, #8
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d002      	beq.n	800c4f6 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800c4f0:	6878      	ldr	r0, [r7, #4]
 800c4f2:	f00a f863 	bl	80165bc <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800c4f6:	3708      	adds	r7, #8
 800c4f8:	46bd      	mov	sp, r7
 800c4fa:	bd80      	pop	{r7, pc}
 800c4fc:	0801b170 	.word	0x0801b170
 800c500:	0801b338 	.word	0x0801b338
 800c504:	0801b1c0 	.word	0x0801b1c0

0800c508 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800c508:	b580      	push	{r7, lr}
 800c50a:	b082      	sub	sp, #8
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d107      	bne.n	800c526 <netif_set_link_up+0x1e>
 800c516:	4b15      	ldr	r3, [pc, #84]	; (800c56c <netif_set_link_up+0x64>)
 800c518:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800c51c:	4914      	ldr	r1, [pc, #80]	; (800c570 <netif_set_link_up+0x68>)
 800c51e:	4815      	ldr	r0, [pc, #84]	; (800c574 <netif_set_link_up+0x6c>)
 800c520:	f00c fb3a 	bl	8018b98 <iprintf>
 800c524:	e01e      	b.n	800c564 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c52c:	f003 0304 	and.w	r3, r3, #4
 800c530:	2b00      	cmp	r3, #0
 800c532:	d117      	bne.n	800c564 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c53a:	f043 0304 	orr.w	r3, r3, #4
 800c53e:	b2da      	uxtb	r2, r3
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800c546:	6878      	ldr	r0, [r7, #4]
 800c548:	f008 faa8 	bl	8014a9c <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c54c:	2103      	movs	r1, #3
 800c54e:	6878      	ldr	r0, [r7, #4]
 800c550:	f7ff ff68 	bl	800c424 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	69db      	ldr	r3, [r3, #28]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d003      	beq.n	800c564 <netif_set_link_up+0x5c>
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	69db      	ldr	r3, [r3, #28]
 800c560:	6878      	ldr	r0, [r7, #4]
 800c562:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800c564:	3708      	adds	r7, #8
 800c566:	46bd      	mov	sp, r7
 800c568:	bd80      	pop	{r7, pc}
 800c56a:	bf00      	nop
 800c56c:	0801b170 	.word	0x0801b170
 800c570:	0801b358 	.word	0x0801b358
 800c574:	0801b1c0 	.word	0x0801b1c0

0800c578 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b082      	sub	sp, #8
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d107      	bne.n	800c596 <netif_set_link_down+0x1e>
 800c586:	4b11      	ldr	r3, [pc, #68]	; (800c5cc <netif_set_link_down+0x54>)
 800c588:	f240 4206 	movw	r2, #1030	; 0x406
 800c58c:	4910      	ldr	r1, [pc, #64]	; (800c5d0 <netif_set_link_down+0x58>)
 800c58e:	4811      	ldr	r0, [pc, #68]	; (800c5d4 <netif_set_link_down+0x5c>)
 800c590:	f00c fb02 	bl	8018b98 <iprintf>
 800c594:	e017      	b.n	800c5c6 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c59c:	f003 0304 	and.w	r3, r3, #4
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d010      	beq.n	800c5c6 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c5aa:	f023 0304 	bic.w	r3, r3, #4
 800c5ae:	b2da      	uxtb	r2, r3
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	69db      	ldr	r3, [r3, #28]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d003      	beq.n	800c5c6 <netif_set_link_down+0x4e>
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	69db      	ldr	r3, [r3, #28]
 800c5c2:	6878      	ldr	r0, [r7, #4]
 800c5c4:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800c5c6:	3708      	adds	r7, #8
 800c5c8:	46bd      	mov	sp, r7
 800c5ca:	bd80      	pop	{r7, pc}
 800c5cc:	0801b170 	.word	0x0801b170
 800c5d0:	0801b37c 	.word	0x0801b37c
 800c5d4:	0801b1c0 	.word	0x0801b1c0

0800c5d8 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800c5d8:	b480      	push	{r7}
 800c5da:	b083      	sub	sp, #12
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	6078      	str	r0, [r7, #4]
 800c5e0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d002      	beq.n	800c5ee <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	683a      	ldr	r2, [r7, #0]
 800c5ec:	61da      	str	r2, [r3, #28]
  }
}
 800c5ee:	bf00      	nop
 800c5f0:	370c      	adds	r7, #12
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f8:	4770      	bx	lr

0800c5fa <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800c5fa:	b480      	push	{r7}
 800c5fc:	b085      	sub	sp, #20
 800c5fe:	af00      	add	r7, sp, #0
 800c600:	60f8      	str	r0, [r7, #12]
 800c602:	60b9      	str	r1, [r7, #8]
 800c604:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800c606:	f06f 030b 	mvn.w	r3, #11
}
 800c60a:	4618      	mov	r0, r3
 800c60c:	3714      	adds	r7, #20
 800c60e:	46bd      	mov	sp, r7
 800c610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c614:	4770      	bx	lr
	...

0800c618 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800c618:	b480      	push	{r7}
 800c61a:	b085      	sub	sp, #20
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	4603      	mov	r3, r0
 800c620:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800c622:	79fb      	ldrb	r3, [r7, #7]
 800c624:	2b00      	cmp	r3, #0
 800c626:	d013      	beq.n	800c650 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800c628:	4b0d      	ldr	r3, [pc, #52]	; (800c660 <netif_get_by_index+0x48>)
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	60fb      	str	r3, [r7, #12]
 800c62e:	e00c      	b.n	800c64a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c636:	3301      	adds	r3, #1
 800c638:	b2db      	uxtb	r3, r3
 800c63a:	79fa      	ldrb	r2, [r7, #7]
 800c63c:	429a      	cmp	r2, r3
 800c63e:	d101      	bne.n	800c644 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	e006      	b.n	800c652 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	60fb      	str	r3, [r7, #12]
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d1ef      	bne.n	800c630 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800c650:	2300      	movs	r3, #0
}
 800c652:	4618      	mov	r0, r3
 800c654:	3714      	adds	r7, #20
 800c656:	46bd      	mov	sp, r7
 800c658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c65c:	4770      	bx	lr
 800c65e:	bf00      	nop
 800c660:	20010e64 	.word	0x20010e64

0800c664 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800c664:	b580      	push	{r7, lr}
 800c666:	b082      	sub	sp, #8
 800c668:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800c66a:	f00c f95b 	bl	8018924 <sys_arch_protect>
 800c66e:	6038      	str	r0, [r7, #0]
 800c670:	4b0d      	ldr	r3, [pc, #52]	; (800c6a8 <pbuf_free_ooseq+0x44>)
 800c672:	2200      	movs	r2, #0
 800c674:	701a      	strb	r2, [r3, #0]
 800c676:	6838      	ldr	r0, [r7, #0]
 800c678:	f00c f962 	bl	8018940 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c67c:	4b0b      	ldr	r3, [pc, #44]	; (800c6ac <pbuf_free_ooseq+0x48>)
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	607b      	str	r3, [r7, #4]
 800c682:	e00a      	b.n	800c69a <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d003      	beq.n	800c694 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800c68c:	6878      	ldr	r0, [r7, #4]
 800c68e:	f002 fd9b 	bl	800f1c8 <tcp_free_ooseq>
      return;
 800c692:	e005      	b.n	800c6a0 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	68db      	ldr	r3, [r3, #12]
 800c698:	607b      	str	r3, [r7, #4]
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d1f1      	bne.n	800c684 <pbuf_free_ooseq+0x20>
    }
  }
}
 800c6a0:	3708      	adds	r7, #8
 800c6a2:	46bd      	mov	sp, r7
 800c6a4:	bd80      	pop	{r7, pc}
 800c6a6:	bf00      	nop
 800c6a8:	20010e6d 	.word	0x20010e6d
 800c6ac:	20010e7c 	.word	0x20010e7c

0800c6b0 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b082      	sub	sp, #8
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800c6b8:	f7ff ffd4 	bl	800c664 <pbuf_free_ooseq>
}
 800c6bc:	bf00      	nop
 800c6be:	3708      	adds	r7, #8
 800c6c0:	46bd      	mov	sp, r7
 800c6c2:	bd80      	pop	{r7, pc}

0800c6c4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800c6c4:	b580      	push	{r7, lr}
 800c6c6:	b082      	sub	sp, #8
 800c6c8:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800c6ca:	f00c f92b 	bl	8018924 <sys_arch_protect>
 800c6ce:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800c6d0:	4b0f      	ldr	r3, [pc, #60]	; (800c710 <pbuf_pool_is_empty+0x4c>)
 800c6d2:	781b      	ldrb	r3, [r3, #0]
 800c6d4:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800c6d6:	4b0e      	ldr	r3, [pc, #56]	; (800c710 <pbuf_pool_is_empty+0x4c>)
 800c6d8:	2201      	movs	r2, #1
 800c6da:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800c6dc:	6878      	ldr	r0, [r7, #4]
 800c6de:	f00c f92f 	bl	8018940 <sys_arch_unprotect>

  if (!queued) {
 800c6e2:	78fb      	ldrb	r3, [r7, #3]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d10f      	bne.n	800c708 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800c6e8:	2100      	movs	r1, #0
 800c6ea:	480a      	ldr	r0, [pc, #40]	; (800c714 <pbuf_pool_is_empty+0x50>)
 800c6ec:	f7fe f834 	bl	800a758 <tcpip_try_callback>
 800c6f0:	4603      	mov	r3, r0
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d008      	beq.n	800c708 <pbuf_pool_is_empty+0x44>
 800c6f6:	f00c f915 	bl	8018924 <sys_arch_protect>
 800c6fa:	6078      	str	r0, [r7, #4]
 800c6fc:	4b04      	ldr	r3, [pc, #16]	; (800c710 <pbuf_pool_is_empty+0x4c>)
 800c6fe:	2200      	movs	r2, #0
 800c700:	701a      	strb	r2, [r3, #0]
 800c702:	6878      	ldr	r0, [r7, #4]
 800c704:	f00c f91c 	bl	8018940 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800c708:	bf00      	nop
 800c70a:	3708      	adds	r7, #8
 800c70c:	46bd      	mov	sp, r7
 800c70e:	bd80      	pop	{r7, pc}
 800c710:	20010e6d 	.word	0x20010e6d
 800c714:	0800c6b1 	.word	0x0800c6b1

0800c718 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800c718:	b480      	push	{r7}
 800c71a:	b085      	sub	sp, #20
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	60f8      	str	r0, [r7, #12]
 800c720:	60b9      	str	r1, [r7, #8]
 800c722:	4611      	mov	r1, r2
 800c724:	461a      	mov	r2, r3
 800c726:	460b      	mov	r3, r1
 800c728:	80fb      	strh	r3, [r7, #6]
 800c72a:	4613      	mov	r3, r2
 800c72c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	2200      	movs	r2, #0
 800c732:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	68ba      	ldr	r2, [r7, #8]
 800c738:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	88fa      	ldrh	r2, [r7, #6]
 800c73e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	88ba      	ldrh	r2, [r7, #4]
 800c744:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800c746:	8b3b      	ldrh	r3, [r7, #24]
 800c748:	b2da      	uxtb	r2, r3
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	7f3a      	ldrb	r2, [r7, #28]
 800c752:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	2201      	movs	r2, #1
 800c758:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	2200      	movs	r2, #0
 800c75e:	73da      	strb	r2, [r3, #15]
}
 800c760:	bf00      	nop
 800c762:	3714      	adds	r7, #20
 800c764:	46bd      	mov	sp, r7
 800c766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76a:	4770      	bx	lr

0800c76c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800c76c:	b580      	push	{r7, lr}
 800c76e:	b08c      	sub	sp, #48	; 0x30
 800c770:	af02      	add	r7, sp, #8
 800c772:	4603      	mov	r3, r0
 800c774:	71fb      	strb	r3, [r7, #7]
 800c776:	460b      	mov	r3, r1
 800c778:	80bb      	strh	r3, [r7, #4]
 800c77a:	4613      	mov	r3, r2
 800c77c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800c77e:	79fb      	ldrb	r3, [r7, #7]
 800c780:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800c782:	887b      	ldrh	r3, [r7, #2]
 800c784:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800c788:	d07f      	beq.n	800c88a <pbuf_alloc+0x11e>
 800c78a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800c78e:	f300 80c8 	bgt.w	800c922 <pbuf_alloc+0x1b6>
 800c792:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800c796:	d010      	beq.n	800c7ba <pbuf_alloc+0x4e>
 800c798:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800c79c:	f300 80c1 	bgt.w	800c922 <pbuf_alloc+0x1b6>
 800c7a0:	2b01      	cmp	r3, #1
 800c7a2:	d002      	beq.n	800c7aa <pbuf_alloc+0x3e>
 800c7a4:	2b41      	cmp	r3, #65	; 0x41
 800c7a6:	f040 80bc 	bne.w	800c922 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800c7aa:	887a      	ldrh	r2, [r7, #2]
 800c7ac:	88bb      	ldrh	r3, [r7, #4]
 800c7ae:	4619      	mov	r1, r3
 800c7b0:	2000      	movs	r0, #0
 800c7b2:	f000 f8d1 	bl	800c958 <pbuf_alloc_reference>
 800c7b6:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800c7b8:	e0bd      	b.n	800c936 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800c7be:	2300      	movs	r3, #0
 800c7c0:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800c7c2:	88bb      	ldrh	r3, [r7, #4]
 800c7c4:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800c7c6:	200c      	movs	r0, #12
 800c7c8:	f7ff fb8e 	bl	800bee8 <memp_malloc>
 800c7cc:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800c7ce:	693b      	ldr	r3, [r7, #16]
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d109      	bne.n	800c7e8 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800c7d4:	f7ff ff76 	bl	800c6c4 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800c7d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d002      	beq.n	800c7e4 <pbuf_alloc+0x78>
            pbuf_free(p);
 800c7de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c7e0:	f000 faa8 	bl	800cd34 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	e0a7      	b.n	800c938 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800c7e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c7ea:	3303      	adds	r3, #3
 800c7ec:	b29b      	uxth	r3, r3
 800c7ee:	f023 0303 	bic.w	r3, r3, #3
 800c7f2:	b29b      	uxth	r3, r3
 800c7f4:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800c7f8:	b29b      	uxth	r3, r3
 800c7fa:	8b7a      	ldrh	r2, [r7, #26]
 800c7fc:	4293      	cmp	r3, r2
 800c7fe:	bf28      	it	cs
 800c800:	4613      	movcs	r3, r2
 800c802:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800c804:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c806:	3310      	adds	r3, #16
 800c808:	693a      	ldr	r2, [r7, #16]
 800c80a:	4413      	add	r3, r2
 800c80c:	3303      	adds	r3, #3
 800c80e:	f023 0303 	bic.w	r3, r3, #3
 800c812:	4618      	mov	r0, r3
 800c814:	89f9      	ldrh	r1, [r7, #14]
 800c816:	8b7a      	ldrh	r2, [r7, #26]
 800c818:	2300      	movs	r3, #0
 800c81a:	9301      	str	r3, [sp, #4]
 800c81c:	887b      	ldrh	r3, [r7, #2]
 800c81e:	9300      	str	r3, [sp, #0]
 800c820:	460b      	mov	r3, r1
 800c822:	4601      	mov	r1, r0
 800c824:	6938      	ldr	r0, [r7, #16]
 800c826:	f7ff ff77 	bl	800c718 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800c82a:	693b      	ldr	r3, [r7, #16]
 800c82c:	685b      	ldr	r3, [r3, #4]
 800c82e:	f003 0303 	and.w	r3, r3, #3
 800c832:	2b00      	cmp	r3, #0
 800c834:	d006      	beq.n	800c844 <pbuf_alloc+0xd8>
 800c836:	4b42      	ldr	r3, [pc, #264]	; (800c940 <pbuf_alloc+0x1d4>)
 800c838:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c83c:	4941      	ldr	r1, [pc, #260]	; (800c944 <pbuf_alloc+0x1d8>)
 800c83e:	4842      	ldr	r0, [pc, #264]	; (800c948 <pbuf_alloc+0x1dc>)
 800c840:	f00c f9aa 	bl	8018b98 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800c844:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c846:	3303      	adds	r3, #3
 800c848:	f023 0303 	bic.w	r3, r3, #3
 800c84c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800c850:	d106      	bne.n	800c860 <pbuf_alloc+0xf4>
 800c852:	4b3b      	ldr	r3, [pc, #236]	; (800c940 <pbuf_alloc+0x1d4>)
 800c854:	f44f 7281 	mov.w	r2, #258	; 0x102
 800c858:	493c      	ldr	r1, [pc, #240]	; (800c94c <pbuf_alloc+0x1e0>)
 800c85a:	483b      	ldr	r0, [pc, #236]	; (800c948 <pbuf_alloc+0x1dc>)
 800c85c:	f00c f99c 	bl	8018b98 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800c860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c862:	2b00      	cmp	r3, #0
 800c864:	d102      	bne.n	800c86c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800c866:	693b      	ldr	r3, [r7, #16]
 800c868:	627b      	str	r3, [r7, #36]	; 0x24
 800c86a:	e002      	b.n	800c872 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800c86c:	69fb      	ldr	r3, [r7, #28]
 800c86e:	693a      	ldr	r2, [r7, #16]
 800c870:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800c872:	693b      	ldr	r3, [r7, #16]
 800c874:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800c876:	8b7a      	ldrh	r2, [r7, #26]
 800c878:	89fb      	ldrh	r3, [r7, #14]
 800c87a:	1ad3      	subs	r3, r2, r3
 800c87c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800c87e:	2300      	movs	r3, #0
 800c880:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800c882:	8b7b      	ldrh	r3, [r7, #26]
 800c884:	2b00      	cmp	r3, #0
 800c886:	d19e      	bne.n	800c7c6 <pbuf_alloc+0x5a>
      break;
 800c888:	e055      	b.n	800c936 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800c88a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c88c:	3303      	adds	r3, #3
 800c88e:	b29b      	uxth	r3, r3
 800c890:	f023 0303 	bic.w	r3, r3, #3
 800c894:	b29a      	uxth	r2, r3
 800c896:	88bb      	ldrh	r3, [r7, #4]
 800c898:	3303      	adds	r3, #3
 800c89a:	b29b      	uxth	r3, r3
 800c89c:	f023 0303 	bic.w	r3, r3, #3
 800c8a0:	b29b      	uxth	r3, r3
 800c8a2:	4413      	add	r3, r2
 800c8a4:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800c8a6:	8b3b      	ldrh	r3, [r7, #24]
 800c8a8:	3310      	adds	r3, #16
 800c8aa:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800c8ac:	8b3a      	ldrh	r2, [r7, #24]
 800c8ae:	88bb      	ldrh	r3, [r7, #4]
 800c8b0:	3303      	adds	r3, #3
 800c8b2:	f023 0303 	bic.w	r3, r3, #3
 800c8b6:	429a      	cmp	r2, r3
 800c8b8:	d306      	bcc.n	800c8c8 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800c8ba:	8afa      	ldrh	r2, [r7, #22]
 800c8bc:	88bb      	ldrh	r3, [r7, #4]
 800c8be:	3303      	adds	r3, #3
 800c8c0:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800c8c4:	429a      	cmp	r2, r3
 800c8c6:	d201      	bcs.n	800c8cc <pbuf_alloc+0x160>
        return NULL;
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	e035      	b.n	800c938 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800c8cc:	8afb      	ldrh	r3, [r7, #22]
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	f7ff f966 	bl	800bba0 <mem_malloc>
 800c8d4:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800c8d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d101      	bne.n	800c8e0 <pbuf_alloc+0x174>
        return NULL;
 800c8dc:	2300      	movs	r3, #0
 800c8de:	e02b      	b.n	800c938 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800c8e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c8e2:	3310      	adds	r3, #16
 800c8e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c8e6:	4413      	add	r3, r2
 800c8e8:	3303      	adds	r3, #3
 800c8ea:	f023 0303 	bic.w	r3, r3, #3
 800c8ee:	4618      	mov	r0, r3
 800c8f0:	88b9      	ldrh	r1, [r7, #4]
 800c8f2:	88ba      	ldrh	r2, [r7, #4]
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	9301      	str	r3, [sp, #4]
 800c8f8:	887b      	ldrh	r3, [r7, #2]
 800c8fa:	9300      	str	r3, [sp, #0]
 800c8fc:	460b      	mov	r3, r1
 800c8fe:	4601      	mov	r1, r0
 800c900:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c902:	f7ff ff09 	bl	800c718 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800c906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c908:	685b      	ldr	r3, [r3, #4]
 800c90a:	f003 0303 	and.w	r3, r3, #3
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d010      	beq.n	800c934 <pbuf_alloc+0x1c8>
 800c912:	4b0b      	ldr	r3, [pc, #44]	; (800c940 <pbuf_alloc+0x1d4>)
 800c914:	f44f 7291 	mov.w	r2, #290	; 0x122
 800c918:	490d      	ldr	r1, [pc, #52]	; (800c950 <pbuf_alloc+0x1e4>)
 800c91a:	480b      	ldr	r0, [pc, #44]	; (800c948 <pbuf_alloc+0x1dc>)
 800c91c:	f00c f93c 	bl	8018b98 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800c920:	e008      	b.n	800c934 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800c922:	4b07      	ldr	r3, [pc, #28]	; (800c940 <pbuf_alloc+0x1d4>)
 800c924:	f240 1227 	movw	r2, #295	; 0x127
 800c928:	490a      	ldr	r1, [pc, #40]	; (800c954 <pbuf_alloc+0x1e8>)
 800c92a:	4807      	ldr	r0, [pc, #28]	; (800c948 <pbuf_alloc+0x1dc>)
 800c92c:	f00c f934 	bl	8018b98 <iprintf>
      return NULL;
 800c930:	2300      	movs	r3, #0
 800c932:	e001      	b.n	800c938 <pbuf_alloc+0x1cc>
      break;
 800c934:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800c936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c938:	4618      	mov	r0, r3
 800c93a:	3728      	adds	r7, #40	; 0x28
 800c93c:	46bd      	mov	sp, r7
 800c93e:	bd80      	pop	{r7, pc}
 800c940:	0801b3a0 	.word	0x0801b3a0
 800c944:	0801b3d0 	.word	0x0801b3d0
 800c948:	0801b400 	.word	0x0801b400
 800c94c:	0801b428 	.word	0x0801b428
 800c950:	0801b45c 	.word	0x0801b45c
 800c954:	0801b488 	.word	0x0801b488

0800c958 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800c958:	b580      	push	{r7, lr}
 800c95a:	b086      	sub	sp, #24
 800c95c:	af02      	add	r7, sp, #8
 800c95e:	6078      	str	r0, [r7, #4]
 800c960:	460b      	mov	r3, r1
 800c962:	807b      	strh	r3, [r7, #2]
 800c964:	4613      	mov	r3, r2
 800c966:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800c968:	883b      	ldrh	r3, [r7, #0]
 800c96a:	2b41      	cmp	r3, #65	; 0x41
 800c96c:	d009      	beq.n	800c982 <pbuf_alloc_reference+0x2a>
 800c96e:	883b      	ldrh	r3, [r7, #0]
 800c970:	2b01      	cmp	r3, #1
 800c972:	d006      	beq.n	800c982 <pbuf_alloc_reference+0x2a>
 800c974:	4b0f      	ldr	r3, [pc, #60]	; (800c9b4 <pbuf_alloc_reference+0x5c>)
 800c976:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800c97a:	490f      	ldr	r1, [pc, #60]	; (800c9b8 <pbuf_alloc_reference+0x60>)
 800c97c:	480f      	ldr	r0, [pc, #60]	; (800c9bc <pbuf_alloc_reference+0x64>)
 800c97e:	f00c f90b 	bl	8018b98 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800c982:	200b      	movs	r0, #11
 800c984:	f7ff fab0 	bl	800bee8 <memp_malloc>
 800c988:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d101      	bne.n	800c994 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800c990:	2300      	movs	r3, #0
 800c992:	e00b      	b.n	800c9ac <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800c994:	8879      	ldrh	r1, [r7, #2]
 800c996:	887a      	ldrh	r2, [r7, #2]
 800c998:	2300      	movs	r3, #0
 800c99a:	9301      	str	r3, [sp, #4]
 800c99c:	883b      	ldrh	r3, [r7, #0]
 800c99e:	9300      	str	r3, [sp, #0]
 800c9a0:	460b      	mov	r3, r1
 800c9a2:	6879      	ldr	r1, [r7, #4]
 800c9a4:	68f8      	ldr	r0, [r7, #12]
 800c9a6:	f7ff feb7 	bl	800c718 <pbuf_init_alloced_pbuf>
  return p;
 800c9aa:	68fb      	ldr	r3, [r7, #12]
}
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	3710      	adds	r7, #16
 800c9b0:	46bd      	mov	sp, r7
 800c9b2:	bd80      	pop	{r7, pc}
 800c9b4:	0801b3a0 	.word	0x0801b3a0
 800c9b8:	0801b4a4 	.word	0x0801b4a4
 800c9bc:	0801b400 	.word	0x0801b400

0800c9c0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800c9c0:	b580      	push	{r7, lr}
 800c9c2:	b088      	sub	sp, #32
 800c9c4:	af02      	add	r7, sp, #8
 800c9c6:	607b      	str	r3, [r7, #4]
 800c9c8:	4603      	mov	r3, r0
 800c9ca:	73fb      	strb	r3, [r7, #15]
 800c9cc:	460b      	mov	r3, r1
 800c9ce:	81bb      	strh	r3, [r7, #12]
 800c9d0:	4613      	mov	r3, r2
 800c9d2:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800c9d4:	7bfb      	ldrb	r3, [r7, #15]
 800c9d6:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800c9d8:	8a7b      	ldrh	r3, [r7, #18]
 800c9da:	3303      	adds	r3, #3
 800c9dc:	f023 0203 	bic.w	r2, r3, #3
 800c9e0:	89bb      	ldrh	r3, [r7, #12]
 800c9e2:	441a      	add	r2, r3
 800c9e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c9e6:	429a      	cmp	r2, r3
 800c9e8:	d901      	bls.n	800c9ee <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	e018      	b.n	800ca20 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800c9ee:	6a3b      	ldr	r3, [r7, #32]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d007      	beq.n	800ca04 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800c9f4:	8a7b      	ldrh	r3, [r7, #18]
 800c9f6:	3303      	adds	r3, #3
 800c9f8:	f023 0303 	bic.w	r3, r3, #3
 800c9fc:	6a3a      	ldr	r2, [r7, #32]
 800c9fe:	4413      	add	r3, r2
 800ca00:	617b      	str	r3, [r7, #20]
 800ca02:	e001      	b.n	800ca08 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800ca04:	2300      	movs	r3, #0
 800ca06:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800ca08:	6878      	ldr	r0, [r7, #4]
 800ca0a:	89b9      	ldrh	r1, [r7, #12]
 800ca0c:	89ba      	ldrh	r2, [r7, #12]
 800ca0e:	2302      	movs	r3, #2
 800ca10:	9301      	str	r3, [sp, #4]
 800ca12:	897b      	ldrh	r3, [r7, #10]
 800ca14:	9300      	str	r3, [sp, #0]
 800ca16:	460b      	mov	r3, r1
 800ca18:	6979      	ldr	r1, [r7, #20]
 800ca1a:	f7ff fe7d 	bl	800c718 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800ca1e:	687b      	ldr	r3, [r7, #4]
}
 800ca20:	4618      	mov	r0, r3
 800ca22:	3718      	adds	r7, #24
 800ca24:	46bd      	mov	sp, r7
 800ca26:	bd80      	pop	{r7, pc}

0800ca28 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b084      	sub	sp, #16
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	6078      	str	r0, [r7, #4]
 800ca30:	460b      	mov	r3, r1
 800ca32:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d106      	bne.n	800ca48 <pbuf_realloc+0x20>
 800ca3a:	4b3a      	ldr	r3, [pc, #232]	; (800cb24 <pbuf_realloc+0xfc>)
 800ca3c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800ca40:	4939      	ldr	r1, [pc, #228]	; (800cb28 <pbuf_realloc+0x100>)
 800ca42:	483a      	ldr	r0, [pc, #232]	; (800cb2c <pbuf_realloc+0x104>)
 800ca44:	f00c f8a8 	bl	8018b98 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	891b      	ldrh	r3, [r3, #8]
 800ca4c:	887a      	ldrh	r2, [r7, #2]
 800ca4e:	429a      	cmp	r2, r3
 800ca50:	d263      	bcs.n	800cb1a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	891a      	ldrh	r2, [r3, #8]
 800ca56:	887b      	ldrh	r3, [r7, #2]
 800ca58:	1ad3      	subs	r3, r2, r3
 800ca5a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800ca5c:	887b      	ldrh	r3, [r7, #2]
 800ca5e:	817b      	strh	r3, [r7, #10]
  q = p;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800ca64:	e018      	b.n	800ca98 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	895b      	ldrh	r3, [r3, #10]
 800ca6a:	897a      	ldrh	r2, [r7, #10]
 800ca6c:	1ad3      	subs	r3, r2, r3
 800ca6e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	891a      	ldrh	r2, [r3, #8]
 800ca74:	893b      	ldrh	r3, [r7, #8]
 800ca76:	1ad3      	subs	r3, r2, r3
 800ca78:	b29a      	uxth	r2, r3
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d106      	bne.n	800ca98 <pbuf_realloc+0x70>
 800ca8a:	4b26      	ldr	r3, [pc, #152]	; (800cb24 <pbuf_realloc+0xfc>)
 800ca8c:	f240 12af 	movw	r2, #431	; 0x1af
 800ca90:	4927      	ldr	r1, [pc, #156]	; (800cb30 <pbuf_realloc+0x108>)
 800ca92:	4826      	ldr	r0, [pc, #152]	; (800cb2c <pbuf_realloc+0x104>)
 800ca94:	f00c f880 	bl	8018b98 <iprintf>
  while (rem_len > q->len) {
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	895b      	ldrh	r3, [r3, #10]
 800ca9c:	897a      	ldrh	r2, [r7, #10]
 800ca9e:	429a      	cmp	r2, r3
 800caa0:	d8e1      	bhi.n	800ca66 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	7b1b      	ldrb	r3, [r3, #12]
 800caa6:	f003 030f 	and.w	r3, r3, #15
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d121      	bne.n	800caf2 <pbuf_realloc+0xca>
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	895b      	ldrh	r3, [r3, #10]
 800cab2:	897a      	ldrh	r2, [r7, #10]
 800cab4:	429a      	cmp	r2, r3
 800cab6:	d01c      	beq.n	800caf2 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	7b5b      	ldrb	r3, [r3, #13]
 800cabc:	f003 0302 	and.w	r3, r3, #2
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d116      	bne.n	800caf2 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	685a      	ldr	r2, [r3, #4]
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	1ad3      	subs	r3, r2, r3
 800cacc:	b29a      	uxth	r2, r3
 800cace:	897b      	ldrh	r3, [r7, #10]
 800cad0:	4413      	add	r3, r2
 800cad2:	b29b      	uxth	r3, r3
 800cad4:	4619      	mov	r1, r3
 800cad6:	68f8      	ldr	r0, [r7, #12]
 800cad8:	f7fe ff58 	bl	800b98c <mem_trim>
 800cadc:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d106      	bne.n	800caf2 <pbuf_realloc+0xca>
 800cae4:	4b0f      	ldr	r3, [pc, #60]	; (800cb24 <pbuf_realloc+0xfc>)
 800cae6:	f240 12bd 	movw	r2, #445	; 0x1bd
 800caea:	4912      	ldr	r1, [pc, #72]	; (800cb34 <pbuf_realloc+0x10c>)
 800caec:	480f      	ldr	r0, [pc, #60]	; (800cb2c <pbuf_realloc+0x104>)
 800caee:	f00c f853 	bl	8018b98 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	897a      	ldrh	r2, [r7, #10]
 800caf6:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	895a      	ldrh	r2, [r3, #10]
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d004      	beq.n	800cb12 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	f000 f911 	bl	800cd34 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	2200      	movs	r2, #0
 800cb16:	601a      	str	r2, [r3, #0]
 800cb18:	e000      	b.n	800cb1c <pbuf_realloc+0xf4>
    return;
 800cb1a:	bf00      	nop

}
 800cb1c:	3710      	adds	r7, #16
 800cb1e:	46bd      	mov	sp, r7
 800cb20:	bd80      	pop	{r7, pc}
 800cb22:	bf00      	nop
 800cb24:	0801b3a0 	.word	0x0801b3a0
 800cb28:	0801b4b8 	.word	0x0801b4b8
 800cb2c:	0801b400 	.word	0x0801b400
 800cb30:	0801b4d0 	.word	0x0801b4d0
 800cb34:	0801b4e8 	.word	0x0801b4e8

0800cb38 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b086      	sub	sp, #24
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	60f8      	str	r0, [r7, #12]
 800cb40:	60b9      	str	r1, [r7, #8]
 800cb42:	4613      	mov	r3, r2
 800cb44:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d106      	bne.n	800cb5a <pbuf_add_header_impl+0x22>
 800cb4c:	4b2b      	ldr	r3, [pc, #172]	; (800cbfc <pbuf_add_header_impl+0xc4>)
 800cb4e:	f240 12df 	movw	r2, #479	; 0x1df
 800cb52:	492b      	ldr	r1, [pc, #172]	; (800cc00 <pbuf_add_header_impl+0xc8>)
 800cb54:	482b      	ldr	r0, [pc, #172]	; (800cc04 <pbuf_add_header_impl+0xcc>)
 800cb56:	f00c f81f 	bl	8018b98 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d003      	beq.n	800cb68 <pbuf_add_header_impl+0x30>
 800cb60:	68bb      	ldr	r3, [r7, #8]
 800cb62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cb66:	d301      	bcc.n	800cb6c <pbuf_add_header_impl+0x34>
    return 1;
 800cb68:	2301      	movs	r3, #1
 800cb6a:	e043      	b.n	800cbf4 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800cb6c:	68bb      	ldr	r3, [r7, #8]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d101      	bne.n	800cb76 <pbuf_add_header_impl+0x3e>
    return 0;
 800cb72:	2300      	movs	r3, #0
 800cb74:	e03e      	b.n	800cbf4 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800cb76:	68bb      	ldr	r3, [r7, #8]
 800cb78:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	891a      	ldrh	r2, [r3, #8]
 800cb7e:	8a7b      	ldrh	r3, [r7, #18]
 800cb80:	4413      	add	r3, r2
 800cb82:	b29b      	uxth	r3, r3
 800cb84:	8a7a      	ldrh	r2, [r7, #18]
 800cb86:	429a      	cmp	r2, r3
 800cb88:	d901      	bls.n	800cb8e <pbuf_add_header_impl+0x56>
    return 1;
 800cb8a:	2301      	movs	r3, #1
 800cb8c:	e032      	b.n	800cbf4 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	7b1b      	ldrb	r3, [r3, #12]
 800cb92:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800cb94:	8a3b      	ldrh	r3, [r7, #16]
 800cb96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d00c      	beq.n	800cbb8 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	685a      	ldr	r2, [r3, #4]
 800cba2:	68bb      	ldr	r3, [r7, #8]
 800cba4:	425b      	negs	r3, r3
 800cba6:	4413      	add	r3, r2
 800cba8:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	3310      	adds	r3, #16
 800cbae:	697a      	ldr	r2, [r7, #20]
 800cbb0:	429a      	cmp	r2, r3
 800cbb2:	d20d      	bcs.n	800cbd0 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800cbb4:	2301      	movs	r3, #1
 800cbb6:	e01d      	b.n	800cbf4 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800cbb8:	79fb      	ldrb	r3, [r7, #7]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d006      	beq.n	800cbcc <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	685a      	ldr	r2, [r3, #4]
 800cbc2:	68bb      	ldr	r3, [r7, #8]
 800cbc4:	425b      	negs	r3, r3
 800cbc6:	4413      	add	r3, r2
 800cbc8:	617b      	str	r3, [r7, #20]
 800cbca:	e001      	b.n	800cbd0 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800cbcc:	2301      	movs	r3, #1
 800cbce:	e011      	b.n	800cbf4 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	697a      	ldr	r2, [r7, #20]
 800cbd4:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	895a      	ldrh	r2, [r3, #10]
 800cbda:	8a7b      	ldrh	r3, [r7, #18]
 800cbdc:	4413      	add	r3, r2
 800cbde:	b29a      	uxth	r2, r3
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	891a      	ldrh	r2, [r3, #8]
 800cbe8:	8a7b      	ldrh	r3, [r7, #18]
 800cbea:	4413      	add	r3, r2
 800cbec:	b29a      	uxth	r2, r3
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	811a      	strh	r2, [r3, #8]


  return 0;
 800cbf2:	2300      	movs	r3, #0
}
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	3718      	adds	r7, #24
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	bd80      	pop	{r7, pc}
 800cbfc:	0801b3a0 	.word	0x0801b3a0
 800cc00:	0801b504 	.word	0x0801b504
 800cc04:	0801b400 	.word	0x0801b400

0800cc08 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800cc08:	b580      	push	{r7, lr}
 800cc0a:	b082      	sub	sp, #8
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	6078      	str	r0, [r7, #4]
 800cc10:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800cc12:	2200      	movs	r2, #0
 800cc14:	6839      	ldr	r1, [r7, #0]
 800cc16:	6878      	ldr	r0, [r7, #4]
 800cc18:	f7ff ff8e 	bl	800cb38 <pbuf_add_header_impl>
 800cc1c:	4603      	mov	r3, r0
}
 800cc1e:	4618      	mov	r0, r3
 800cc20:	3708      	adds	r7, #8
 800cc22:	46bd      	mov	sp, r7
 800cc24:	bd80      	pop	{r7, pc}
	...

0800cc28 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b084      	sub	sp, #16
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	6078      	str	r0, [r7, #4]
 800cc30:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d106      	bne.n	800cc46 <pbuf_remove_header+0x1e>
 800cc38:	4b20      	ldr	r3, [pc, #128]	; (800ccbc <pbuf_remove_header+0x94>)
 800cc3a:	f240 224b 	movw	r2, #587	; 0x24b
 800cc3e:	4920      	ldr	r1, [pc, #128]	; (800ccc0 <pbuf_remove_header+0x98>)
 800cc40:	4820      	ldr	r0, [pc, #128]	; (800ccc4 <pbuf_remove_header+0x9c>)
 800cc42:	f00b ffa9 	bl	8018b98 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d003      	beq.n	800cc54 <pbuf_remove_header+0x2c>
 800cc4c:	683b      	ldr	r3, [r7, #0]
 800cc4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc52:	d301      	bcc.n	800cc58 <pbuf_remove_header+0x30>
    return 1;
 800cc54:	2301      	movs	r3, #1
 800cc56:	e02c      	b.n	800ccb2 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800cc58:	683b      	ldr	r3, [r7, #0]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d101      	bne.n	800cc62 <pbuf_remove_header+0x3a>
    return 0;
 800cc5e:	2300      	movs	r3, #0
 800cc60:	e027      	b.n	800ccb2 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800cc62:	683b      	ldr	r3, [r7, #0]
 800cc64:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	895b      	ldrh	r3, [r3, #10]
 800cc6a:	89fa      	ldrh	r2, [r7, #14]
 800cc6c:	429a      	cmp	r2, r3
 800cc6e:	d908      	bls.n	800cc82 <pbuf_remove_header+0x5a>
 800cc70:	4b12      	ldr	r3, [pc, #72]	; (800ccbc <pbuf_remove_header+0x94>)
 800cc72:	f240 2255 	movw	r2, #597	; 0x255
 800cc76:	4914      	ldr	r1, [pc, #80]	; (800ccc8 <pbuf_remove_header+0xa0>)
 800cc78:	4812      	ldr	r0, [pc, #72]	; (800ccc4 <pbuf_remove_header+0x9c>)
 800cc7a:	f00b ff8d 	bl	8018b98 <iprintf>
 800cc7e:	2301      	movs	r3, #1
 800cc80:	e017      	b.n	800ccb2 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	685b      	ldr	r3, [r3, #4]
 800cc86:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	685a      	ldr	r2, [r3, #4]
 800cc8c:	683b      	ldr	r3, [r7, #0]
 800cc8e:	441a      	add	r2, r3
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	895a      	ldrh	r2, [r3, #10]
 800cc98:	89fb      	ldrh	r3, [r7, #14]
 800cc9a:	1ad3      	subs	r3, r2, r3
 800cc9c:	b29a      	uxth	r2, r3
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	891a      	ldrh	r2, [r3, #8]
 800cca6:	89fb      	ldrh	r3, [r7, #14]
 800cca8:	1ad3      	subs	r3, r2, r3
 800ccaa:	b29a      	uxth	r2, r3
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800ccb0:	2300      	movs	r3, #0
}
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	3710      	adds	r7, #16
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	bd80      	pop	{r7, pc}
 800ccba:	bf00      	nop
 800ccbc:	0801b3a0 	.word	0x0801b3a0
 800ccc0:	0801b504 	.word	0x0801b504
 800ccc4:	0801b400 	.word	0x0801b400
 800ccc8:	0801b510 	.word	0x0801b510

0800cccc <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800cccc:	b580      	push	{r7, lr}
 800ccce:	b082      	sub	sp, #8
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	6078      	str	r0, [r7, #4]
 800ccd4:	460b      	mov	r3, r1
 800ccd6:	807b      	strh	r3, [r7, #2]
 800ccd8:	4613      	mov	r3, r2
 800ccda:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800ccdc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	da08      	bge.n	800ccf6 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800cce4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cce8:	425b      	negs	r3, r3
 800ccea:	4619      	mov	r1, r3
 800ccec:	6878      	ldr	r0, [r7, #4]
 800ccee:	f7ff ff9b 	bl	800cc28 <pbuf_remove_header>
 800ccf2:	4603      	mov	r3, r0
 800ccf4:	e007      	b.n	800cd06 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800ccf6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ccfa:	787a      	ldrb	r2, [r7, #1]
 800ccfc:	4619      	mov	r1, r3
 800ccfe:	6878      	ldr	r0, [r7, #4]
 800cd00:	f7ff ff1a 	bl	800cb38 <pbuf_add_header_impl>
 800cd04:	4603      	mov	r3, r0
  }
}
 800cd06:	4618      	mov	r0, r3
 800cd08:	3708      	adds	r7, #8
 800cd0a:	46bd      	mov	sp, r7
 800cd0c:	bd80      	pop	{r7, pc}

0800cd0e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800cd0e:	b580      	push	{r7, lr}
 800cd10:	b082      	sub	sp, #8
 800cd12:	af00      	add	r7, sp, #0
 800cd14:	6078      	str	r0, [r7, #4]
 800cd16:	460b      	mov	r3, r1
 800cd18:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800cd1a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cd1e:	2201      	movs	r2, #1
 800cd20:	4619      	mov	r1, r3
 800cd22:	6878      	ldr	r0, [r7, #4]
 800cd24:	f7ff ffd2 	bl	800cccc <pbuf_header_impl>
 800cd28:	4603      	mov	r3, r0
}
 800cd2a:	4618      	mov	r0, r3
 800cd2c:	3708      	adds	r7, #8
 800cd2e:	46bd      	mov	sp, r7
 800cd30:	bd80      	pop	{r7, pc}
	...

0800cd34 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b088      	sub	sp, #32
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d10b      	bne.n	800cd5a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d106      	bne.n	800cd56 <pbuf_free+0x22>
 800cd48:	4b3b      	ldr	r3, [pc, #236]	; (800ce38 <pbuf_free+0x104>)
 800cd4a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800cd4e:	493b      	ldr	r1, [pc, #236]	; (800ce3c <pbuf_free+0x108>)
 800cd50:	483b      	ldr	r0, [pc, #236]	; (800ce40 <pbuf_free+0x10c>)
 800cd52:	f00b ff21 	bl	8018b98 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800cd56:	2300      	movs	r3, #0
 800cd58:	e069      	b.n	800ce2e <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800cd5e:	e062      	b.n	800ce26 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800cd60:	f00b fde0 	bl	8018924 <sys_arch_protect>
 800cd64:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	7b9b      	ldrb	r3, [r3, #14]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d106      	bne.n	800cd7c <pbuf_free+0x48>
 800cd6e:	4b32      	ldr	r3, [pc, #200]	; (800ce38 <pbuf_free+0x104>)
 800cd70:	f240 22f1 	movw	r2, #753	; 0x2f1
 800cd74:	4933      	ldr	r1, [pc, #204]	; (800ce44 <pbuf_free+0x110>)
 800cd76:	4832      	ldr	r0, [pc, #200]	; (800ce40 <pbuf_free+0x10c>)
 800cd78:	f00b ff0e 	bl	8018b98 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	7b9b      	ldrb	r3, [r3, #14]
 800cd80:	3b01      	subs	r3, #1
 800cd82:	b2da      	uxtb	r2, r3
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	739a      	strb	r2, [r3, #14]
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	7b9b      	ldrb	r3, [r3, #14]
 800cd8c:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800cd8e:	69b8      	ldr	r0, [r7, #24]
 800cd90:	f00b fdd6 	bl	8018940 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800cd94:	7dfb      	ldrb	r3, [r7, #23]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d143      	bne.n	800ce22 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	7b1b      	ldrb	r3, [r3, #12]
 800cda4:	f003 030f 	and.w	r3, r3, #15
 800cda8:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	7b5b      	ldrb	r3, [r3, #13]
 800cdae:	f003 0302 	and.w	r3, r3, #2
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d011      	beq.n	800cdda <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800cdba:	68bb      	ldr	r3, [r7, #8]
 800cdbc:	691b      	ldr	r3, [r3, #16]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d106      	bne.n	800cdd0 <pbuf_free+0x9c>
 800cdc2:	4b1d      	ldr	r3, [pc, #116]	; (800ce38 <pbuf_free+0x104>)
 800cdc4:	f240 22ff 	movw	r2, #767	; 0x2ff
 800cdc8:	491f      	ldr	r1, [pc, #124]	; (800ce48 <pbuf_free+0x114>)
 800cdca:	481d      	ldr	r0, [pc, #116]	; (800ce40 <pbuf_free+0x10c>)
 800cdcc:	f00b fee4 	bl	8018b98 <iprintf>
        pc->custom_free_function(p);
 800cdd0:	68bb      	ldr	r3, [r7, #8]
 800cdd2:	691b      	ldr	r3, [r3, #16]
 800cdd4:	6878      	ldr	r0, [r7, #4]
 800cdd6:	4798      	blx	r3
 800cdd8:	e01d      	b.n	800ce16 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800cdda:	7bfb      	ldrb	r3, [r7, #15]
 800cddc:	2b02      	cmp	r3, #2
 800cdde:	d104      	bne.n	800cdea <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800cde0:	6879      	ldr	r1, [r7, #4]
 800cde2:	200c      	movs	r0, #12
 800cde4:	f7ff f8f6 	bl	800bfd4 <memp_free>
 800cde8:	e015      	b.n	800ce16 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800cdea:	7bfb      	ldrb	r3, [r7, #15]
 800cdec:	2b01      	cmp	r3, #1
 800cdee:	d104      	bne.n	800cdfa <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800cdf0:	6879      	ldr	r1, [r7, #4]
 800cdf2:	200b      	movs	r0, #11
 800cdf4:	f7ff f8ee 	bl	800bfd4 <memp_free>
 800cdf8:	e00d      	b.n	800ce16 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800cdfa:	7bfb      	ldrb	r3, [r7, #15]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d103      	bne.n	800ce08 <pbuf_free+0xd4>
          mem_free(p);
 800ce00:	6878      	ldr	r0, [r7, #4]
 800ce02:	f7fe fd33 	bl	800b86c <mem_free>
 800ce06:	e006      	b.n	800ce16 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800ce08:	4b0b      	ldr	r3, [pc, #44]	; (800ce38 <pbuf_free+0x104>)
 800ce0a:	f240 320f 	movw	r2, #783	; 0x30f
 800ce0e:	490f      	ldr	r1, [pc, #60]	; (800ce4c <pbuf_free+0x118>)
 800ce10:	480b      	ldr	r0, [pc, #44]	; (800ce40 <pbuf_free+0x10c>)
 800ce12:	f00b fec1 	bl	8018b98 <iprintf>
        }
      }
      count++;
 800ce16:	7ffb      	ldrb	r3, [r7, #31]
 800ce18:	3301      	adds	r3, #1
 800ce1a:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800ce1c:	693b      	ldr	r3, [r7, #16]
 800ce1e:	607b      	str	r3, [r7, #4]
 800ce20:	e001      	b.n	800ce26 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800ce22:	2300      	movs	r3, #0
 800ce24:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d199      	bne.n	800cd60 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800ce2c:	7ffb      	ldrb	r3, [r7, #31]
}
 800ce2e:	4618      	mov	r0, r3
 800ce30:	3720      	adds	r7, #32
 800ce32:	46bd      	mov	sp, r7
 800ce34:	bd80      	pop	{r7, pc}
 800ce36:	bf00      	nop
 800ce38:	0801b3a0 	.word	0x0801b3a0
 800ce3c:	0801b504 	.word	0x0801b504
 800ce40:	0801b400 	.word	0x0801b400
 800ce44:	0801b530 	.word	0x0801b530
 800ce48:	0801b548 	.word	0x0801b548
 800ce4c:	0801b56c 	.word	0x0801b56c

0800ce50 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800ce50:	b480      	push	{r7}
 800ce52:	b085      	sub	sp, #20
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800ce58:	2300      	movs	r3, #0
 800ce5a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800ce5c:	e005      	b.n	800ce6a <pbuf_clen+0x1a>
    ++len;
 800ce5e:	89fb      	ldrh	r3, [r7, #14]
 800ce60:	3301      	adds	r3, #1
 800ce62:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d1f6      	bne.n	800ce5e <pbuf_clen+0xe>
  }
  return len;
 800ce70:	89fb      	ldrh	r3, [r7, #14]
}
 800ce72:	4618      	mov	r0, r3
 800ce74:	3714      	adds	r7, #20
 800ce76:	46bd      	mov	sp, r7
 800ce78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce7c:	4770      	bx	lr
	...

0800ce80 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b084      	sub	sp, #16
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d016      	beq.n	800cebc <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800ce8e:	f00b fd49 	bl	8018924 <sys_arch_protect>
 800ce92:	60f8      	str	r0, [r7, #12]
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	7b9b      	ldrb	r3, [r3, #14]
 800ce98:	3301      	adds	r3, #1
 800ce9a:	b2da      	uxtb	r2, r3
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	739a      	strb	r2, [r3, #14]
 800cea0:	68f8      	ldr	r0, [r7, #12]
 800cea2:	f00b fd4d 	bl	8018940 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	7b9b      	ldrb	r3, [r3, #14]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d106      	bne.n	800cebc <pbuf_ref+0x3c>
 800ceae:	4b05      	ldr	r3, [pc, #20]	; (800cec4 <pbuf_ref+0x44>)
 800ceb0:	f240 3242 	movw	r2, #834	; 0x342
 800ceb4:	4904      	ldr	r1, [pc, #16]	; (800cec8 <pbuf_ref+0x48>)
 800ceb6:	4805      	ldr	r0, [pc, #20]	; (800cecc <pbuf_ref+0x4c>)
 800ceb8:	f00b fe6e 	bl	8018b98 <iprintf>
  }
}
 800cebc:	bf00      	nop
 800cebe:	3710      	adds	r7, #16
 800cec0:	46bd      	mov	sp, r7
 800cec2:	bd80      	pop	{r7, pc}
 800cec4:	0801b3a0 	.word	0x0801b3a0
 800cec8:	0801b580 	.word	0x0801b580
 800cecc:	0801b400 	.word	0x0801b400

0800ced0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800ced0:	b580      	push	{r7, lr}
 800ced2:	b084      	sub	sp, #16
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	6078      	str	r0, [r7, #4]
 800ced8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d002      	beq.n	800cee6 <pbuf_cat+0x16>
 800cee0:	683b      	ldr	r3, [r7, #0]
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d107      	bne.n	800cef6 <pbuf_cat+0x26>
 800cee6:	4b20      	ldr	r3, [pc, #128]	; (800cf68 <pbuf_cat+0x98>)
 800cee8:	f240 3259 	movw	r2, #857	; 0x359
 800ceec:	491f      	ldr	r1, [pc, #124]	; (800cf6c <pbuf_cat+0x9c>)
 800ceee:	4820      	ldr	r0, [pc, #128]	; (800cf70 <pbuf_cat+0xa0>)
 800cef0:	f00b fe52 	bl	8018b98 <iprintf>
 800cef4:	e034      	b.n	800cf60 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	60fb      	str	r3, [r7, #12]
 800cefa:	e00a      	b.n	800cf12 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	891a      	ldrh	r2, [r3, #8]
 800cf00:	683b      	ldr	r3, [r7, #0]
 800cf02:	891b      	ldrh	r3, [r3, #8]
 800cf04:	4413      	add	r3, r2
 800cf06:	b29a      	uxth	r2, r3
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	60fb      	str	r3, [r7, #12]
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d1f0      	bne.n	800cefc <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	891a      	ldrh	r2, [r3, #8]
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	895b      	ldrh	r3, [r3, #10]
 800cf22:	429a      	cmp	r2, r3
 800cf24:	d006      	beq.n	800cf34 <pbuf_cat+0x64>
 800cf26:	4b10      	ldr	r3, [pc, #64]	; (800cf68 <pbuf_cat+0x98>)
 800cf28:	f240 3262 	movw	r2, #866	; 0x362
 800cf2c:	4911      	ldr	r1, [pc, #68]	; (800cf74 <pbuf_cat+0xa4>)
 800cf2e:	4810      	ldr	r0, [pc, #64]	; (800cf70 <pbuf_cat+0xa0>)
 800cf30:	f00b fe32 	bl	8018b98 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d006      	beq.n	800cf4a <pbuf_cat+0x7a>
 800cf3c:	4b0a      	ldr	r3, [pc, #40]	; (800cf68 <pbuf_cat+0x98>)
 800cf3e:	f240 3263 	movw	r2, #867	; 0x363
 800cf42:	490d      	ldr	r1, [pc, #52]	; (800cf78 <pbuf_cat+0xa8>)
 800cf44:	480a      	ldr	r0, [pc, #40]	; (800cf70 <pbuf_cat+0xa0>)
 800cf46:	f00b fe27 	bl	8018b98 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	891a      	ldrh	r2, [r3, #8]
 800cf4e:	683b      	ldr	r3, [r7, #0]
 800cf50:	891b      	ldrh	r3, [r3, #8]
 800cf52:	4413      	add	r3, r2
 800cf54:	b29a      	uxth	r2, r3
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	683a      	ldr	r2, [r7, #0]
 800cf5e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800cf60:	3710      	adds	r7, #16
 800cf62:	46bd      	mov	sp, r7
 800cf64:	bd80      	pop	{r7, pc}
 800cf66:	bf00      	nop
 800cf68:	0801b3a0 	.word	0x0801b3a0
 800cf6c:	0801b594 	.word	0x0801b594
 800cf70:	0801b400 	.word	0x0801b400
 800cf74:	0801b5cc 	.word	0x0801b5cc
 800cf78:	0801b5fc 	.word	0x0801b5fc

0800cf7c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800cf7c:	b580      	push	{r7, lr}
 800cf7e:	b082      	sub	sp, #8
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]
 800cf84:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800cf86:	6839      	ldr	r1, [r7, #0]
 800cf88:	6878      	ldr	r0, [r7, #4]
 800cf8a:	f7ff ffa1 	bl	800ced0 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800cf8e:	6838      	ldr	r0, [r7, #0]
 800cf90:	f7ff ff76 	bl	800ce80 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800cf94:	bf00      	nop
 800cf96:	3708      	adds	r7, #8
 800cf98:	46bd      	mov	sp, r7
 800cf9a:	bd80      	pop	{r7, pc}

0800cf9c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800cf9c:	b580      	push	{r7, lr}
 800cf9e:	b086      	sub	sp, #24
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	6078      	str	r0, [r7, #4]
 800cfa4:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	617b      	str	r3, [r7, #20]
 800cfaa:	2300      	movs	r3, #0
 800cfac:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d008      	beq.n	800cfc6 <pbuf_copy+0x2a>
 800cfb4:	683b      	ldr	r3, [r7, #0]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d005      	beq.n	800cfc6 <pbuf_copy+0x2a>
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	891a      	ldrh	r2, [r3, #8]
 800cfbe:	683b      	ldr	r3, [r7, #0]
 800cfc0:	891b      	ldrh	r3, [r3, #8]
 800cfc2:	429a      	cmp	r2, r3
 800cfc4:	d209      	bcs.n	800cfda <pbuf_copy+0x3e>
 800cfc6:	4b57      	ldr	r3, [pc, #348]	; (800d124 <pbuf_copy+0x188>)
 800cfc8:	f240 32c9 	movw	r2, #969	; 0x3c9
 800cfcc:	4956      	ldr	r1, [pc, #344]	; (800d128 <pbuf_copy+0x18c>)
 800cfce:	4857      	ldr	r0, [pc, #348]	; (800d12c <pbuf_copy+0x190>)
 800cfd0:	f00b fde2 	bl	8018b98 <iprintf>
 800cfd4:	f06f 030f 	mvn.w	r3, #15
 800cfd8:	e09f      	b.n	800d11a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	895b      	ldrh	r3, [r3, #10]
 800cfde:	461a      	mov	r2, r3
 800cfe0:	697b      	ldr	r3, [r7, #20]
 800cfe2:	1ad2      	subs	r2, r2, r3
 800cfe4:	683b      	ldr	r3, [r7, #0]
 800cfe6:	895b      	ldrh	r3, [r3, #10]
 800cfe8:	4619      	mov	r1, r3
 800cfea:	693b      	ldr	r3, [r7, #16]
 800cfec:	1acb      	subs	r3, r1, r3
 800cfee:	429a      	cmp	r2, r3
 800cff0:	d306      	bcc.n	800d000 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800cff2:	683b      	ldr	r3, [r7, #0]
 800cff4:	895b      	ldrh	r3, [r3, #10]
 800cff6:	461a      	mov	r2, r3
 800cff8:	693b      	ldr	r3, [r7, #16]
 800cffa:	1ad3      	subs	r3, r2, r3
 800cffc:	60fb      	str	r3, [r7, #12]
 800cffe:	e005      	b.n	800d00c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	895b      	ldrh	r3, [r3, #10]
 800d004:	461a      	mov	r2, r3
 800d006:	697b      	ldr	r3, [r7, #20]
 800d008:	1ad3      	subs	r3, r2, r3
 800d00a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	685a      	ldr	r2, [r3, #4]
 800d010:	697b      	ldr	r3, [r7, #20]
 800d012:	18d0      	adds	r0, r2, r3
 800d014:	683b      	ldr	r3, [r7, #0]
 800d016:	685a      	ldr	r2, [r3, #4]
 800d018:	693b      	ldr	r3, [r7, #16]
 800d01a:	4413      	add	r3, r2
 800d01c:	68fa      	ldr	r2, [r7, #12]
 800d01e:	4619      	mov	r1, r3
 800d020:	f00b ffba 	bl	8018f98 <memcpy>
    offset_to += len;
 800d024:	697a      	ldr	r2, [r7, #20]
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	4413      	add	r3, r2
 800d02a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800d02c:	693a      	ldr	r2, [r7, #16]
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	4413      	add	r3, r2
 800d032:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	895b      	ldrh	r3, [r3, #10]
 800d038:	461a      	mov	r2, r3
 800d03a:	697b      	ldr	r3, [r7, #20]
 800d03c:	4293      	cmp	r3, r2
 800d03e:	d906      	bls.n	800d04e <pbuf_copy+0xb2>
 800d040:	4b38      	ldr	r3, [pc, #224]	; (800d124 <pbuf_copy+0x188>)
 800d042:	f240 32d9 	movw	r2, #985	; 0x3d9
 800d046:	493a      	ldr	r1, [pc, #232]	; (800d130 <pbuf_copy+0x194>)
 800d048:	4838      	ldr	r0, [pc, #224]	; (800d12c <pbuf_copy+0x190>)
 800d04a:	f00b fda5 	bl	8018b98 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800d04e:	683b      	ldr	r3, [r7, #0]
 800d050:	895b      	ldrh	r3, [r3, #10]
 800d052:	461a      	mov	r2, r3
 800d054:	693b      	ldr	r3, [r7, #16]
 800d056:	4293      	cmp	r3, r2
 800d058:	d906      	bls.n	800d068 <pbuf_copy+0xcc>
 800d05a:	4b32      	ldr	r3, [pc, #200]	; (800d124 <pbuf_copy+0x188>)
 800d05c:	f240 32da 	movw	r2, #986	; 0x3da
 800d060:	4934      	ldr	r1, [pc, #208]	; (800d134 <pbuf_copy+0x198>)
 800d062:	4832      	ldr	r0, [pc, #200]	; (800d12c <pbuf_copy+0x190>)
 800d064:	f00b fd98 	bl	8018b98 <iprintf>
    if (offset_from >= p_from->len) {
 800d068:	683b      	ldr	r3, [r7, #0]
 800d06a:	895b      	ldrh	r3, [r3, #10]
 800d06c:	461a      	mov	r2, r3
 800d06e:	693b      	ldr	r3, [r7, #16]
 800d070:	4293      	cmp	r3, r2
 800d072:	d304      	bcc.n	800d07e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800d074:	2300      	movs	r3, #0
 800d076:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800d078:	683b      	ldr	r3, [r7, #0]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	895b      	ldrh	r3, [r3, #10]
 800d082:	461a      	mov	r2, r3
 800d084:	697b      	ldr	r3, [r7, #20]
 800d086:	4293      	cmp	r3, r2
 800d088:	d114      	bne.n	800d0b4 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800d08a:	2300      	movs	r3, #0
 800d08c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	2b00      	cmp	r3, #0
 800d098:	d10c      	bne.n	800d0b4 <pbuf_copy+0x118>
 800d09a:	683b      	ldr	r3, [r7, #0]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d009      	beq.n	800d0b4 <pbuf_copy+0x118>
 800d0a0:	4b20      	ldr	r3, [pc, #128]	; (800d124 <pbuf_copy+0x188>)
 800d0a2:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800d0a6:	4924      	ldr	r1, [pc, #144]	; (800d138 <pbuf_copy+0x19c>)
 800d0a8:	4820      	ldr	r0, [pc, #128]	; (800d12c <pbuf_copy+0x190>)
 800d0aa:	f00b fd75 	bl	8018b98 <iprintf>
 800d0ae:	f06f 030f 	mvn.w	r3, #15
 800d0b2:	e032      	b.n	800d11a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800d0b4:	683b      	ldr	r3, [r7, #0]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d013      	beq.n	800d0e2 <pbuf_copy+0x146>
 800d0ba:	683b      	ldr	r3, [r7, #0]
 800d0bc:	895a      	ldrh	r2, [r3, #10]
 800d0be:	683b      	ldr	r3, [r7, #0]
 800d0c0:	891b      	ldrh	r3, [r3, #8]
 800d0c2:	429a      	cmp	r2, r3
 800d0c4:	d10d      	bne.n	800d0e2 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d0c6:	683b      	ldr	r3, [r7, #0]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d009      	beq.n	800d0e2 <pbuf_copy+0x146>
 800d0ce:	4b15      	ldr	r3, [pc, #84]	; (800d124 <pbuf_copy+0x188>)
 800d0d0:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800d0d4:	4919      	ldr	r1, [pc, #100]	; (800d13c <pbuf_copy+0x1a0>)
 800d0d6:	4815      	ldr	r0, [pc, #84]	; (800d12c <pbuf_copy+0x190>)
 800d0d8:	f00b fd5e 	bl	8018b98 <iprintf>
 800d0dc:	f06f 0305 	mvn.w	r3, #5
 800d0e0:	e01b      	b.n	800d11a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d013      	beq.n	800d110 <pbuf_copy+0x174>
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	895a      	ldrh	r2, [r3, #10]
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	891b      	ldrh	r3, [r3, #8]
 800d0f0:	429a      	cmp	r2, r3
 800d0f2:	d10d      	bne.n	800d110 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d009      	beq.n	800d110 <pbuf_copy+0x174>
 800d0fc:	4b09      	ldr	r3, [pc, #36]	; (800d124 <pbuf_copy+0x188>)
 800d0fe:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800d102:	490e      	ldr	r1, [pc, #56]	; (800d13c <pbuf_copy+0x1a0>)
 800d104:	4809      	ldr	r0, [pc, #36]	; (800d12c <pbuf_copy+0x190>)
 800d106:	f00b fd47 	bl	8018b98 <iprintf>
 800d10a:	f06f 0305 	mvn.w	r3, #5
 800d10e:	e004      	b.n	800d11a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800d110:	683b      	ldr	r3, [r7, #0]
 800d112:	2b00      	cmp	r3, #0
 800d114:	f47f af61 	bne.w	800cfda <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800d118:	2300      	movs	r3, #0
}
 800d11a:	4618      	mov	r0, r3
 800d11c:	3718      	adds	r7, #24
 800d11e:	46bd      	mov	sp, r7
 800d120:	bd80      	pop	{r7, pc}
 800d122:	bf00      	nop
 800d124:	0801b3a0 	.word	0x0801b3a0
 800d128:	0801b648 	.word	0x0801b648
 800d12c:	0801b400 	.word	0x0801b400
 800d130:	0801b678 	.word	0x0801b678
 800d134:	0801b690 	.word	0x0801b690
 800d138:	0801b6ac 	.word	0x0801b6ac
 800d13c:	0801b6bc 	.word	0x0801b6bc

0800d140 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800d140:	b580      	push	{r7, lr}
 800d142:	b088      	sub	sp, #32
 800d144:	af00      	add	r7, sp, #0
 800d146:	60f8      	str	r0, [r7, #12]
 800d148:	60b9      	str	r1, [r7, #8]
 800d14a:	4611      	mov	r1, r2
 800d14c:	461a      	mov	r2, r3
 800d14e:	460b      	mov	r3, r1
 800d150:	80fb      	strh	r3, [r7, #6]
 800d152:	4613      	mov	r3, r2
 800d154:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800d156:	2300      	movs	r3, #0
 800d158:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800d15a:	2300      	movs	r3, #0
 800d15c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d108      	bne.n	800d176 <pbuf_copy_partial+0x36>
 800d164:	4b2b      	ldr	r3, [pc, #172]	; (800d214 <pbuf_copy_partial+0xd4>)
 800d166:	f240 420a 	movw	r2, #1034	; 0x40a
 800d16a:	492b      	ldr	r1, [pc, #172]	; (800d218 <pbuf_copy_partial+0xd8>)
 800d16c:	482b      	ldr	r0, [pc, #172]	; (800d21c <pbuf_copy_partial+0xdc>)
 800d16e:	f00b fd13 	bl	8018b98 <iprintf>
 800d172:	2300      	movs	r3, #0
 800d174:	e04a      	b.n	800d20c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800d176:	68bb      	ldr	r3, [r7, #8]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d108      	bne.n	800d18e <pbuf_copy_partial+0x4e>
 800d17c:	4b25      	ldr	r3, [pc, #148]	; (800d214 <pbuf_copy_partial+0xd4>)
 800d17e:	f240 420b 	movw	r2, #1035	; 0x40b
 800d182:	4927      	ldr	r1, [pc, #156]	; (800d220 <pbuf_copy_partial+0xe0>)
 800d184:	4825      	ldr	r0, [pc, #148]	; (800d21c <pbuf_copy_partial+0xdc>)
 800d186:	f00b fd07 	bl	8018b98 <iprintf>
 800d18a:	2300      	movs	r3, #0
 800d18c:	e03e      	b.n	800d20c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	61fb      	str	r3, [r7, #28]
 800d192:	e034      	b.n	800d1fe <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800d194:	88bb      	ldrh	r3, [r7, #4]
 800d196:	2b00      	cmp	r3, #0
 800d198:	d00a      	beq.n	800d1b0 <pbuf_copy_partial+0x70>
 800d19a:	69fb      	ldr	r3, [r7, #28]
 800d19c:	895b      	ldrh	r3, [r3, #10]
 800d19e:	88ba      	ldrh	r2, [r7, #4]
 800d1a0:	429a      	cmp	r2, r3
 800d1a2:	d305      	bcc.n	800d1b0 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800d1a4:	69fb      	ldr	r3, [r7, #28]
 800d1a6:	895b      	ldrh	r3, [r3, #10]
 800d1a8:	88ba      	ldrh	r2, [r7, #4]
 800d1aa:	1ad3      	subs	r3, r2, r3
 800d1ac:	80bb      	strh	r3, [r7, #4]
 800d1ae:	e023      	b.n	800d1f8 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800d1b0:	69fb      	ldr	r3, [r7, #28]
 800d1b2:	895a      	ldrh	r2, [r3, #10]
 800d1b4:	88bb      	ldrh	r3, [r7, #4]
 800d1b6:	1ad3      	subs	r3, r2, r3
 800d1b8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800d1ba:	8b3a      	ldrh	r2, [r7, #24]
 800d1bc:	88fb      	ldrh	r3, [r7, #6]
 800d1be:	429a      	cmp	r2, r3
 800d1c0:	d901      	bls.n	800d1c6 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800d1c2:	88fb      	ldrh	r3, [r7, #6]
 800d1c4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800d1c6:	8b7b      	ldrh	r3, [r7, #26]
 800d1c8:	68ba      	ldr	r2, [r7, #8]
 800d1ca:	18d0      	adds	r0, r2, r3
 800d1cc:	69fb      	ldr	r3, [r7, #28]
 800d1ce:	685a      	ldr	r2, [r3, #4]
 800d1d0:	88bb      	ldrh	r3, [r7, #4]
 800d1d2:	4413      	add	r3, r2
 800d1d4:	8b3a      	ldrh	r2, [r7, #24]
 800d1d6:	4619      	mov	r1, r3
 800d1d8:	f00b fede 	bl	8018f98 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800d1dc:	8afa      	ldrh	r2, [r7, #22]
 800d1de:	8b3b      	ldrh	r3, [r7, #24]
 800d1e0:	4413      	add	r3, r2
 800d1e2:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800d1e4:	8b7a      	ldrh	r2, [r7, #26]
 800d1e6:	8b3b      	ldrh	r3, [r7, #24]
 800d1e8:	4413      	add	r3, r2
 800d1ea:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800d1ec:	88fa      	ldrh	r2, [r7, #6]
 800d1ee:	8b3b      	ldrh	r3, [r7, #24]
 800d1f0:	1ad3      	subs	r3, r2, r3
 800d1f2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800d1f4:	2300      	movs	r3, #0
 800d1f6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d1f8:	69fb      	ldr	r3, [r7, #28]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	61fb      	str	r3, [r7, #28]
 800d1fe:	88fb      	ldrh	r3, [r7, #6]
 800d200:	2b00      	cmp	r3, #0
 800d202:	d002      	beq.n	800d20a <pbuf_copy_partial+0xca>
 800d204:	69fb      	ldr	r3, [r7, #28]
 800d206:	2b00      	cmp	r3, #0
 800d208:	d1c4      	bne.n	800d194 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800d20a:	8afb      	ldrh	r3, [r7, #22]
}
 800d20c:	4618      	mov	r0, r3
 800d20e:	3720      	adds	r7, #32
 800d210:	46bd      	mov	sp, r7
 800d212:	bd80      	pop	{r7, pc}
 800d214:	0801b3a0 	.word	0x0801b3a0
 800d218:	0801b6e8 	.word	0x0801b6e8
 800d21c:	0801b400 	.word	0x0801b400
 800d220:	0801b708 	.word	0x0801b708

0800d224 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800d224:	b580      	push	{r7, lr}
 800d226:	b084      	sub	sp, #16
 800d228:	af00      	add	r7, sp, #0
 800d22a:	4603      	mov	r3, r0
 800d22c:	603a      	str	r2, [r7, #0]
 800d22e:	71fb      	strb	r3, [r7, #7]
 800d230:	460b      	mov	r3, r1
 800d232:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800d234:	683b      	ldr	r3, [r7, #0]
 800d236:	8919      	ldrh	r1, [r3, #8]
 800d238:	88ba      	ldrh	r2, [r7, #4]
 800d23a:	79fb      	ldrb	r3, [r7, #7]
 800d23c:	4618      	mov	r0, r3
 800d23e:	f7ff fa95 	bl	800c76c <pbuf_alloc>
 800d242:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d101      	bne.n	800d24e <pbuf_clone+0x2a>
    return NULL;
 800d24a:	2300      	movs	r3, #0
 800d24c:	e011      	b.n	800d272 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800d24e:	6839      	ldr	r1, [r7, #0]
 800d250:	68f8      	ldr	r0, [r7, #12]
 800d252:	f7ff fea3 	bl	800cf9c <pbuf_copy>
 800d256:	4603      	mov	r3, r0
 800d258:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800d25a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d006      	beq.n	800d270 <pbuf_clone+0x4c>
 800d262:	4b06      	ldr	r3, [pc, #24]	; (800d27c <pbuf_clone+0x58>)
 800d264:	f240 5224 	movw	r2, #1316	; 0x524
 800d268:	4905      	ldr	r1, [pc, #20]	; (800d280 <pbuf_clone+0x5c>)
 800d26a:	4806      	ldr	r0, [pc, #24]	; (800d284 <pbuf_clone+0x60>)
 800d26c:	f00b fc94 	bl	8018b98 <iprintf>
  return q;
 800d270:	68fb      	ldr	r3, [r7, #12]
}
 800d272:	4618      	mov	r0, r3
 800d274:	3710      	adds	r7, #16
 800d276:	46bd      	mov	sp, r7
 800d278:	bd80      	pop	{r7, pc}
 800d27a:	bf00      	nop
 800d27c:	0801b3a0 	.word	0x0801b3a0
 800d280:	0801b814 	.word	0x0801b814
 800d284:	0801b400 	.word	0x0801b400

0800d288 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800d288:	b580      	push	{r7, lr}
 800d28a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d28c:	f00b fb96 	bl	80189bc <rand>
 800d290:	4603      	mov	r3, r0
 800d292:	b29b      	uxth	r3, r3
 800d294:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d298:	b29b      	uxth	r3, r3
 800d29a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800d29e:	b29a      	uxth	r2, r3
 800d2a0:	4b01      	ldr	r3, [pc, #4]	; (800d2a8 <tcp_init+0x20>)
 800d2a2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800d2a4:	bf00      	nop
 800d2a6:	bd80      	pop	{r7, pc}
 800d2a8:	20000024 	.word	0x20000024

0800d2ac <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800d2ac:	b580      	push	{r7, lr}
 800d2ae:	b082      	sub	sp, #8
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	7d1b      	ldrb	r3, [r3, #20]
 800d2b8:	2b01      	cmp	r3, #1
 800d2ba:	d105      	bne.n	800d2c8 <tcp_free+0x1c>
 800d2bc:	4b06      	ldr	r3, [pc, #24]	; (800d2d8 <tcp_free+0x2c>)
 800d2be:	22d4      	movs	r2, #212	; 0xd4
 800d2c0:	4906      	ldr	r1, [pc, #24]	; (800d2dc <tcp_free+0x30>)
 800d2c2:	4807      	ldr	r0, [pc, #28]	; (800d2e0 <tcp_free+0x34>)
 800d2c4:	f00b fc68 	bl	8018b98 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800d2c8:	6879      	ldr	r1, [r7, #4]
 800d2ca:	2001      	movs	r0, #1
 800d2cc:	f7fe fe82 	bl	800bfd4 <memp_free>
}
 800d2d0:	bf00      	nop
 800d2d2:	3708      	adds	r7, #8
 800d2d4:	46bd      	mov	sp, r7
 800d2d6:	bd80      	pop	{r7, pc}
 800d2d8:	0801b8a0 	.word	0x0801b8a0
 800d2dc:	0801b8d0 	.word	0x0801b8d0
 800d2e0:	0801b8e4 	.word	0x0801b8e4

0800d2e4 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800d2e4:	b580      	push	{r7, lr}
 800d2e6:	b082      	sub	sp, #8
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	7d1b      	ldrb	r3, [r3, #20]
 800d2f0:	2b01      	cmp	r3, #1
 800d2f2:	d105      	bne.n	800d300 <tcp_free_listen+0x1c>
 800d2f4:	4b06      	ldr	r3, [pc, #24]	; (800d310 <tcp_free_listen+0x2c>)
 800d2f6:	22df      	movs	r2, #223	; 0xdf
 800d2f8:	4906      	ldr	r1, [pc, #24]	; (800d314 <tcp_free_listen+0x30>)
 800d2fa:	4807      	ldr	r0, [pc, #28]	; (800d318 <tcp_free_listen+0x34>)
 800d2fc:	f00b fc4c 	bl	8018b98 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800d300:	6879      	ldr	r1, [r7, #4]
 800d302:	2002      	movs	r0, #2
 800d304:	f7fe fe66 	bl	800bfd4 <memp_free>
}
 800d308:	bf00      	nop
 800d30a:	3708      	adds	r7, #8
 800d30c:	46bd      	mov	sp, r7
 800d30e:	bd80      	pop	{r7, pc}
 800d310:	0801b8a0 	.word	0x0801b8a0
 800d314:	0801b90c 	.word	0x0801b90c
 800d318:	0801b8e4 	.word	0x0801b8e4

0800d31c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800d31c:	b580      	push	{r7, lr}
 800d31e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800d320:	f001 f9d0 	bl	800e6c4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800d324:	4b07      	ldr	r3, [pc, #28]	; (800d344 <tcp_tmr+0x28>)
 800d326:	781b      	ldrb	r3, [r3, #0]
 800d328:	3301      	adds	r3, #1
 800d32a:	b2da      	uxtb	r2, r3
 800d32c:	4b05      	ldr	r3, [pc, #20]	; (800d344 <tcp_tmr+0x28>)
 800d32e:	701a      	strb	r2, [r3, #0]
 800d330:	4b04      	ldr	r3, [pc, #16]	; (800d344 <tcp_tmr+0x28>)
 800d332:	781b      	ldrb	r3, [r3, #0]
 800d334:	f003 0301 	and.w	r3, r3, #1
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d001      	beq.n	800d340 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800d33c:	f000 fe82 	bl	800e044 <tcp_slowtmr>
  }
}
 800d340:	bf00      	nop
 800d342:	bd80      	pop	{r7, pc}
 800d344:	20010e85 	.word	0x20010e85

0800d348 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800d348:	b580      	push	{r7, lr}
 800d34a:	b084      	sub	sp, #16
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	6078      	str	r0, [r7, #4]
 800d350:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800d352:	683b      	ldr	r3, [r7, #0]
 800d354:	2b00      	cmp	r3, #0
 800d356:	d105      	bne.n	800d364 <tcp_remove_listener+0x1c>
 800d358:	4b0d      	ldr	r3, [pc, #52]	; (800d390 <tcp_remove_listener+0x48>)
 800d35a:	22ff      	movs	r2, #255	; 0xff
 800d35c:	490d      	ldr	r1, [pc, #52]	; (800d394 <tcp_remove_listener+0x4c>)
 800d35e:	480e      	ldr	r0, [pc, #56]	; (800d398 <tcp_remove_listener+0x50>)
 800d360:	f00b fc1a 	bl	8018b98 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	60fb      	str	r3, [r7, #12]
 800d368:	e00a      	b.n	800d380 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d36e:	683a      	ldr	r2, [r7, #0]
 800d370:	429a      	cmp	r2, r3
 800d372:	d102      	bne.n	800d37a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	2200      	movs	r2, #0
 800d378:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	68db      	ldr	r3, [r3, #12]
 800d37e:	60fb      	str	r3, [r7, #12]
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	2b00      	cmp	r3, #0
 800d384:	d1f1      	bne.n	800d36a <tcp_remove_listener+0x22>
    }
  }
}
 800d386:	bf00      	nop
 800d388:	bf00      	nop
 800d38a:	3710      	adds	r7, #16
 800d38c:	46bd      	mov	sp, r7
 800d38e:	bd80      	pop	{r7, pc}
 800d390:	0801b8a0 	.word	0x0801b8a0
 800d394:	0801b928 	.word	0x0801b928
 800d398:	0801b8e4 	.word	0x0801b8e4

0800d39c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800d39c:	b580      	push	{r7, lr}
 800d39e:	b084      	sub	sp, #16
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d106      	bne.n	800d3b8 <tcp_listen_closed+0x1c>
 800d3aa:	4b14      	ldr	r3, [pc, #80]	; (800d3fc <tcp_listen_closed+0x60>)
 800d3ac:	f240 1211 	movw	r2, #273	; 0x111
 800d3b0:	4913      	ldr	r1, [pc, #76]	; (800d400 <tcp_listen_closed+0x64>)
 800d3b2:	4814      	ldr	r0, [pc, #80]	; (800d404 <tcp_listen_closed+0x68>)
 800d3b4:	f00b fbf0 	bl	8018b98 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	7d1b      	ldrb	r3, [r3, #20]
 800d3bc:	2b01      	cmp	r3, #1
 800d3be:	d006      	beq.n	800d3ce <tcp_listen_closed+0x32>
 800d3c0:	4b0e      	ldr	r3, [pc, #56]	; (800d3fc <tcp_listen_closed+0x60>)
 800d3c2:	f44f 7289 	mov.w	r2, #274	; 0x112
 800d3c6:	4910      	ldr	r1, [pc, #64]	; (800d408 <tcp_listen_closed+0x6c>)
 800d3c8:	480e      	ldr	r0, [pc, #56]	; (800d404 <tcp_listen_closed+0x68>)
 800d3ca:	f00b fbe5 	bl	8018b98 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d3ce:	2301      	movs	r3, #1
 800d3d0:	60fb      	str	r3, [r7, #12]
 800d3d2:	e00b      	b.n	800d3ec <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800d3d4:	4a0d      	ldr	r2, [pc, #52]	; (800d40c <tcp_listen_closed+0x70>)
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	6879      	ldr	r1, [r7, #4]
 800d3e0:	4618      	mov	r0, r3
 800d3e2:	f7ff ffb1 	bl	800d348 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	3301      	adds	r3, #1
 800d3ea:	60fb      	str	r3, [r7, #12]
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	2b03      	cmp	r3, #3
 800d3f0:	d9f0      	bls.n	800d3d4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800d3f2:	bf00      	nop
 800d3f4:	bf00      	nop
 800d3f6:	3710      	adds	r7, #16
 800d3f8:	46bd      	mov	sp, r7
 800d3fa:	bd80      	pop	{r7, pc}
 800d3fc:	0801b8a0 	.word	0x0801b8a0
 800d400:	0801b950 	.word	0x0801b950
 800d404:	0801b8e4 	.word	0x0801b8e4
 800d408:	0801b95c 	.word	0x0801b95c
 800d40c:	08027d9c 	.word	0x08027d9c

0800d410 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800d410:	b5b0      	push	{r4, r5, r7, lr}
 800d412:	b088      	sub	sp, #32
 800d414:	af04      	add	r7, sp, #16
 800d416:	6078      	str	r0, [r7, #4]
 800d418:	460b      	mov	r3, r1
 800d41a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d106      	bne.n	800d430 <tcp_close_shutdown+0x20>
 800d422:	4b63      	ldr	r3, [pc, #396]	; (800d5b0 <tcp_close_shutdown+0x1a0>)
 800d424:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800d428:	4962      	ldr	r1, [pc, #392]	; (800d5b4 <tcp_close_shutdown+0x1a4>)
 800d42a:	4863      	ldr	r0, [pc, #396]	; (800d5b8 <tcp_close_shutdown+0x1a8>)
 800d42c:	f00b fbb4 	bl	8018b98 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800d430:	78fb      	ldrb	r3, [r7, #3]
 800d432:	2b00      	cmp	r3, #0
 800d434:	d066      	beq.n	800d504 <tcp_close_shutdown+0xf4>
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	7d1b      	ldrb	r3, [r3, #20]
 800d43a:	2b04      	cmp	r3, #4
 800d43c:	d003      	beq.n	800d446 <tcp_close_shutdown+0x36>
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	7d1b      	ldrb	r3, [r3, #20]
 800d442:	2b07      	cmp	r3, #7
 800d444:	d15e      	bne.n	800d504 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d104      	bne.n	800d458 <tcp_close_shutdown+0x48>
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d452:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d456:	d055      	beq.n	800d504 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	8b5b      	ldrh	r3, [r3, #26]
 800d45c:	f003 0310 	and.w	r3, r3, #16
 800d460:	2b00      	cmp	r3, #0
 800d462:	d106      	bne.n	800d472 <tcp_close_shutdown+0x62>
 800d464:	4b52      	ldr	r3, [pc, #328]	; (800d5b0 <tcp_close_shutdown+0x1a0>)
 800d466:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800d46a:	4954      	ldr	r1, [pc, #336]	; (800d5bc <tcp_close_shutdown+0x1ac>)
 800d46c:	4852      	ldr	r0, [pc, #328]	; (800d5b8 <tcp_close_shutdown+0x1a8>)
 800d46e:	f00b fb93 	bl	8018b98 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800d47a:	687d      	ldr	r5, [r7, #4]
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	3304      	adds	r3, #4
 800d480:	687a      	ldr	r2, [r7, #4]
 800d482:	8ad2      	ldrh	r2, [r2, #22]
 800d484:	6879      	ldr	r1, [r7, #4]
 800d486:	8b09      	ldrh	r1, [r1, #24]
 800d488:	9102      	str	r1, [sp, #8]
 800d48a:	9201      	str	r2, [sp, #4]
 800d48c:	9300      	str	r3, [sp, #0]
 800d48e:	462b      	mov	r3, r5
 800d490:	4622      	mov	r2, r4
 800d492:	4601      	mov	r1, r0
 800d494:	6878      	ldr	r0, [r7, #4]
 800d496:	f005 ff03 	bl	80132a0 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800d49a:	6878      	ldr	r0, [r7, #4]
 800d49c:	f001 fce0 	bl	800ee60 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800d4a0:	4b47      	ldr	r3, [pc, #284]	; (800d5c0 <tcp_close_shutdown+0x1b0>)
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	687a      	ldr	r2, [r7, #4]
 800d4a6:	429a      	cmp	r2, r3
 800d4a8:	d105      	bne.n	800d4b6 <tcp_close_shutdown+0xa6>
 800d4aa:	4b45      	ldr	r3, [pc, #276]	; (800d5c0 <tcp_close_shutdown+0x1b0>)
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	68db      	ldr	r3, [r3, #12]
 800d4b0:	4a43      	ldr	r2, [pc, #268]	; (800d5c0 <tcp_close_shutdown+0x1b0>)
 800d4b2:	6013      	str	r3, [r2, #0]
 800d4b4:	e013      	b.n	800d4de <tcp_close_shutdown+0xce>
 800d4b6:	4b42      	ldr	r3, [pc, #264]	; (800d5c0 <tcp_close_shutdown+0x1b0>)
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	60fb      	str	r3, [r7, #12]
 800d4bc:	e00c      	b.n	800d4d8 <tcp_close_shutdown+0xc8>
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	68db      	ldr	r3, [r3, #12]
 800d4c2:	687a      	ldr	r2, [r7, #4]
 800d4c4:	429a      	cmp	r2, r3
 800d4c6:	d104      	bne.n	800d4d2 <tcp_close_shutdown+0xc2>
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	68da      	ldr	r2, [r3, #12]
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	60da      	str	r2, [r3, #12]
 800d4d0:	e005      	b.n	800d4de <tcp_close_shutdown+0xce>
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	68db      	ldr	r3, [r3, #12]
 800d4d6:	60fb      	str	r3, [r7, #12]
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d1ef      	bne.n	800d4be <tcp_close_shutdown+0xae>
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	2200      	movs	r2, #0
 800d4e2:	60da      	str	r2, [r3, #12]
 800d4e4:	4b37      	ldr	r3, [pc, #220]	; (800d5c4 <tcp_close_shutdown+0x1b4>)
 800d4e6:	2201      	movs	r2, #1
 800d4e8:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800d4ea:	4b37      	ldr	r3, [pc, #220]	; (800d5c8 <tcp_close_shutdown+0x1b8>)
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	687a      	ldr	r2, [r7, #4]
 800d4f0:	429a      	cmp	r2, r3
 800d4f2:	d102      	bne.n	800d4fa <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800d4f4:	f004 f978 	bl	80117e8 <tcp_trigger_input_pcb_close>
 800d4f8:	e002      	b.n	800d500 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800d4fa:	6878      	ldr	r0, [r7, #4]
 800d4fc:	f7ff fed6 	bl	800d2ac <tcp_free>
      }
      return ERR_OK;
 800d500:	2300      	movs	r3, #0
 800d502:	e050      	b.n	800d5a6 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	7d1b      	ldrb	r3, [r3, #20]
 800d508:	2b02      	cmp	r3, #2
 800d50a:	d03b      	beq.n	800d584 <tcp_close_shutdown+0x174>
 800d50c:	2b02      	cmp	r3, #2
 800d50e:	dc44      	bgt.n	800d59a <tcp_close_shutdown+0x18a>
 800d510:	2b00      	cmp	r3, #0
 800d512:	d002      	beq.n	800d51a <tcp_close_shutdown+0x10a>
 800d514:	2b01      	cmp	r3, #1
 800d516:	d02a      	beq.n	800d56e <tcp_close_shutdown+0x15e>
 800d518:	e03f      	b.n	800d59a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	8adb      	ldrh	r3, [r3, #22]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d021      	beq.n	800d566 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d522:	4b2a      	ldr	r3, [pc, #168]	; (800d5cc <tcp_close_shutdown+0x1bc>)
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	687a      	ldr	r2, [r7, #4]
 800d528:	429a      	cmp	r2, r3
 800d52a:	d105      	bne.n	800d538 <tcp_close_shutdown+0x128>
 800d52c:	4b27      	ldr	r3, [pc, #156]	; (800d5cc <tcp_close_shutdown+0x1bc>)
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	68db      	ldr	r3, [r3, #12]
 800d532:	4a26      	ldr	r2, [pc, #152]	; (800d5cc <tcp_close_shutdown+0x1bc>)
 800d534:	6013      	str	r3, [r2, #0]
 800d536:	e013      	b.n	800d560 <tcp_close_shutdown+0x150>
 800d538:	4b24      	ldr	r3, [pc, #144]	; (800d5cc <tcp_close_shutdown+0x1bc>)
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	60bb      	str	r3, [r7, #8]
 800d53e:	e00c      	b.n	800d55a <tcp_close_shutdown+0x14a>
 800d540:	68bb      	ldr	r3, [r7, #8]
 800d542:	68db      	ldr	r3, [r3, #12]
 800d544:	687a      	ldr	r2, [r7, #4]
 800d546:	429a      	cmp	r2, r3
 800d548:	d104      	bne.n	800d554 <tcp_close_shutdown+0x144>
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	68da      	ldr	r2, [r3, #12]
 800d54e:	68bb      	ldr	r3, [r7, #8]
 800d550:	60da      	str	r2, [r3, #12]
 800d552:	e005      	b.n	800d560 <tcp_close_shutdown+0x150>
 800d554:	68bb      	ldr	r3, [r7, #8]
 800d556:	68db      	ldr	r3, [r3, #12]
 800d558:	60bb      	str	r3, [r7, #8]
 800d55a:	68bb      	ldr	r3, [r7, #8]
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d1ef      	bne.n	800d540 <tcp_close_shutdown+0x130>
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	2200      	movs	r2, #0
 800d564:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800d566:	6878      	ldr	r0, [r7, #4]
 800d568:	f7ff fea0 	bl	800d2ac <tcp_free>
      break;
 800d56c:	e01a      	b.n	800d5a4 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800d56e:	6878      	ldr	r0, [r7, #4]
 800d570:	f7ff ff14 	bl	800d39c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800d574:	6879      	ldr	r1, [r7, #4]
 800d576:	4816      	ldr	r0, [pc, #88]	; (800d5d0 <tcp_close_shutdown+0x1c0>)
 800d578:	f001 fcc2 	bl	800ef00 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800d57c:	6878      	ldr	r0, [r7, #4]
 800d57e:	f7ff feb1 	bl	800d2e4 <tcp_free_listen>
      break;
 800d582:	e00f      	b.n	800d5a4 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d584:	6879      	ldr	r1, [r7, #4]
 800d586:	480e      	ldr	r0, [pc, #56]	; (800d5c0 <tcp_close_shutdown+0x1b0>)
 800d588:	f001 fcba 	bl	800ef00 <tcp_pcb_remove>
 800d58c:	4b0d      	ldr	r3, [pc, #52]	; (800d5c4 <tcp_close_shutdown+0x1b4>)
 800d58e:	2201      	movs	r2, #1
 800d590:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800d592:	6878      	ldr	r0, [r7, #4]
 800d594:	f7ff fe8a 	bl	800d2ac <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800d598:	e004      	b.n	800d5a4 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800d59a:	6878      	ldr	r0, [r7, #4]
 800d59c:	f000 f81a 	bl	800d5d4 <tcp_close_shutdown_fin>
 800d5a0:	4603      	mov	r3, r0
 800d5a2:	e000      	b.n	800d5a6 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800d5a4:	2300      	movs	r3, #0
}
 800d5a6:	4618      	mov	r0, r3
 800d5a8:	3710      	adds	r7, #16
 800d5aa:	46bd      	mov	sp, r7
 800d5ac:	bdb0      	pop	{r4, r5, r7, pc}
 800d5ae:	bf00      	nop
 800d5b0:	0801b8a0 	.word	0x0801b8a0
 800d5b4:	0801b974 	.word	0x0801b974
 800d5b8:	0801b8e4 	.word	0x0801b8e4
 800d5bc:	0801b994 	.word	0x0801b994
 800d5c0:	20010e7c 	.word	0x20010e7c
 800d5c4:	20010e84 	.word	0x20010e84
 800d5c8:	20010ebc 	.word	0x20010ebc
 800d5cc:	20010e74 	.word	0x20010e74
 800d5d0:	20010e78 	.word	0x20010e78

0800d5d4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800d5d4:	b580      	push	{r7, lr}
 800d5d6:	b084      	sub	sp, #16
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d106      	bne.n	800d5f0 <tcp_close_shutdown_fin+0x1c>
 800d5e2:	4b2e      	ldr	r3, [pc, #184]	; (800d69c <tcp_close_shutdown_fin+0xc8>)
 800d5e4:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800d5e8:	492d      	ldr	r1, [pc, #180]	; (800d6a0 <tcp_close_shutdown_fin+0xcc>)
 800d5ea:	482e      	ldr	r0, [pc, #184]	; (800d6a4 <tcp_close_shutdown_fin+0xd0>)
 800d5ec:	f00b fad4 	bl	8018b98 <iprintf>

  switch (pcb->state) {
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	7d1b      	ldrb	r3, [r3, #20]
 800d5f4:	2b07      	cmp	r3, #7
 800d5f6:	d020      	beq.n	800d63a <tcp_close_shutdown_fin+0x66>
 800d5f8:	2b07      	cmp	r3, #7
 800d5fa:	dc2b      	bgt.n	800d654 <tcp_close_shutdown_fin+0x80>
 800d5fc:	2b03      	cmp	r3, #3
 800d5fe:	d002      	beq.n	800d606 <tcp_close_shutdown_fin+0x32>
 800d600:	2b04      	cmp	r3, #4
 800d602:	d00d      	beq.n	800d620 <tcp_close_shutdown_fin+0x4c>
 800d604:	e026      	b.n	800d654 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800d606:	6878      	ldr	r0, [r7, #4]
 800d608:	f004 ff58 	bl	80124bc <tcp_send_fin>
 800d60c:	4603      	mov	r3, r0
 800d60e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d610:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d614:	2b00      	cmp	r3, #0
 800d616:	d11f      	bne.n	800d658 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	2205      	movs	r2, #5
 800d61c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d61e:	e01b      	b.n	800d658 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800d620:	6878      	ldr	r0, [r7, #4]
 800d622:	f004 ff4b 	bl	80124bc <tcp_send_fin>
 800d626:	4603      	mov	r3, r0
 800d628:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d62a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d114      	bne.n	800d65c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	2205      	movs	r2, #5
 800d636:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d638:	e010      	b.n	800d65c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800d63a:	6878      	ldr	r0, [r7, #4]
 800d63c:	f004 ff3e 	bl	80124bc <tcp_send_fin>
 800d640:	4603      	mov	r3, r0
 800d642:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d644:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d109      	bne.n	800d660 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	2209      	movs	r2, #9
 800d650:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d652:	e005      	b.n	800d660 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800d654:	2300      	movs	r3, #0
 800d656:	e01c      	b.n	800d692 <tcp_close_shutdown_fin+0xbe>
      break;
 800d658:	bf00      	nop
 800d65a:	e002      	b.n	800d662 <tcp_close_shutdown_fin+0x8e>
      break;
 800d65c:	bf00      	nop
 800d65e:	e000      	b.n	800d662 <tcp_close_shutdown_fin+0x8e>
      break;
 800d660:	bf00      	nop
  }

  if (err == ERR_OK) {
 800d662:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d666:	2b00      	cmp	r3, #0
 800d668:	d103      	bne.n	800d672 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800d66a:	6878      	ldr	r0, [r7, #4]
 800d66c:	f005 f864 	bl	8012738 <tcp_output>
 800d670:	e00d      	b.n	800d68e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800d672:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d67a:	d108      	bne.n	800d68e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	8b5b      	ldrh	r3, [r3, #26]
 800d680:	f043 0308 	orr.w	r3, r3, #8
 800d684:	b29a      	uxth	r2, r3
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800d68a:	2300      	movs	r3, #0
 800d68c:	e001      	b.n	800d692 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800d68e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d692:	4618      	mov	r0, r3
 800d694:	3710      	adds	r7, #16
 800d696:	46bd      	mov	sp, r7
 800d698:	bd80      	pop	{r7, pc}
 800d69a:	bf00      	nop
 800d69c:	0801b8a0 	.word	0x0801b8a0
 800d6a0:	0801b950 	.word	0x0801b950
 800d6a4:	0801b8e4 	.word	0x0801b8e4

0800d6a8 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800d6a8:	b580      	push	{r7, lr}
 800d6aa:	b082      	sub	sp, #8
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d109      	bne.n	800d6ca <tcp_close+0x22>
 800d6b6:	4b0f      	ldr	r3, [pc, #60]	; (800d6f4 <tcp_close+0x4c>)
 800d6b8:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800d6bc:	490e      	ldr	r1, [pc, #56]	; (800d6f8 <tcp_close+0x50>)
 800d6be:	480f      	ldr	r0, [pc, #60]	; (800d6fc <tcp_close+0x54>)
 800d6c0:	f00b fa6a 	bl	8018b98 <iprintf>
 800d6c4:	f06f 030f 	mvn.w	r3, #15
 800d6c8:	e00f      	b.n	800d6ea <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	7d1b      	ldrb	r3, [r3, #20]
 800d6ce:	2b01      	cmp	r3, #1
 800d6d0:	d006      	beq.n	800d6e0 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	8b5b      	ldrh	r3, [r3, #26]
 800d6d6:	f043 0310 	orr.w	r3, r3, #16
 800d6da:	b29a      	uxth	r2, r3
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800d6e0:	2101      	movs	r1, #1
 800d6e2:	6878      	ldr	r0, [r7, #4]
 800d6e4:	f7ff fe94 	bl	800d410 <tcp_close_shutdown>
 800d6e8:	4603      	mov	r3, r0
}
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	3708      	adds	r7, #8
 800d6ee:	46bd      	mov	sp, r7
 800d6f0:	bd80      	pop	{r7, pc}
 800d6f2:	bf00      	nop
 800d6f4:	0801b8a0 	.word	0x0801b8a0
 800d6f8:	0801b9b0 	.word	0x0801b9b0
 800d6fc:	0801b8e4 	.word	0x0801b8e4

0800d700 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800d700:	b580      	push	{r7, lr}
 800d702:	b084      	sub	sp, #16
 800d704:	af00      	add	r7, sp, #0
 800d706:	60f8      	str	r0, [r7, #12]
 800d708:	60b9      	str	r1, [r7, #8]
 800d70a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d109      	bne.n	800d726 <tcp_shutdown+0x26>
 800d712:	4b26      	ldr	r3, [pc, #152]	; (800d7ac <tcp_shutdown+0xac>)
 800d714:	f240 2207 	movw	r2, #519	; 0x207
 800d718:	4925      	ldr	r1, [pc, #148]	; (800d7b0 <tcp_shutdown+0xb0>)
 800d71a:	4826      	ldr	r0, [pc, #152]	; (800d7b4 <tcp_shutdown+0xb4>)
 800d71c:	f00b fa3c 	bl	8018b98 <iprintf>
 800d720:	f06f 030f 	mvn.w	r3, #15
 800d724:	e03d      	b.n	800d7a2 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	7d1b      	ldrb	r3, [r3, #20]
 800d72a:	2b01      	cmp	r3, #1
 800d72c:	d102      	bne.n	800d734 <tcp_shutdown+0x34>
    return ERR_CONN;
 800d72e:	f06f 030a 	mvn.w	r3, #10
 800d732:	e036      	b.n	800d7a2 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800d734:	68bb      	ldr	r3, [r7, #8]
 800d736:	2b00      	cmp	r3, #0
 800d738:	d01b      	beq.n	800d772 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	8b5b      	ldrh	r3, [r3, #26]
 800d73e:	f043 0310 	orr.w	r3, r3, #16
 800d742:	b29a      	uxth	r2, r3
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d005      	beq.n	800d75a <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800d74e:	2101      	movs	r1, #1
 800d750:	68f8      	ldr	r0, [r7, #12]
 800d752:	f7ff fe5d 	bl	800d410 <tcp_close_shutdown>
 800d756:	4603      	mov	r3, r0
 800d758:	e023      	b.n	800d7a2 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d007      	beq.n	800d772 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d766:	4618      	mov	r0, r3
 800d768:	f7ff fae4 	bl	800cd34 <pbuf_free>
      pcb->refused_data = NULL;
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	2200      	movs	r2, #0
 800d770:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	2b00      	cmp	r3, #0
 800d776:	d013      	beq.n	800d7a0 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	7d1b      	ldrb	r3, [r3, #20]
 800d77c:	2b04      	cmp	r3, #4
 800d77e:	dc02      	bgt.n	800d786 <tcp_shutdown+0x86>
 800d780:	2b03      	cmp	r3, #3
 800d782:	da02      	bge.n	800d78a <tcp_shutdown+0x8a>
 800d784:	e009      	b.n	800d79a <tcp_shutdown+0x9a>
 800d786:	2b07      	cmp	r3, #7
 800d788:	d107      	bne.n	800d79a <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800d78a:	68bb      	ldr	r3, [r7, #8]
 800d78c:	b2db      	uxtb	r3, r3
 800d78e:	4619      	mov	r1, r3
 800d790:	68f8      	ldr	r0, [r7, #12]
 800d792:	f7ff fe3d 	bl	800d410 <tcp_close_shutdown>
 800d796:	4603      	mov	r3, r0
 800d798:	e003      	b.n	800d7a2 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800d79a:	f06f 030a 	mvn.w	r3, #10
 800d79e:	e000      	b.n	800d7a2 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800d7a0:	2300      	movs	r3, #0
}
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	3710      	adds	r7, #16
 800d7a6:	46bd      	mov	sp, r7
 800d7a8:	bd80      	pop	{r7, pc}
 800d7aa:	bf00      	nop
 800d7ac:	0801b8a0 	.word	0x0801b8a0
 800d7b0:	0801b9c8 	.word	0x0801b9c8
 800d7b4:	0801b8e4 	.word	0x0801b8e4

0800d7b8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800d7b8:	b580      	push	{r7, lr}
 800d7ba:	b08e      	sub	sp, #56	; 0x38
 800d7bc:	af04      	add	r7, sp, #16
 800d7be:	6078      	str	r0, [r7, #4]
 800d7c0:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d107      	bne.n	800d7d8 <tcp_abandon+0x20>
 800d7c8:	4b52      	ldr	r3, [pc, #328]	; (800d914 <tcp_abandon+0x15c>)
 800d7ca:	f240 223d 	movw	r2, #573	; 0x23d
 800d7ce:	4952      	ldr	r1, [pc, #328]	; (800d918 <tcp_abandon+0x160>)
 800d7d0:	4852      	ldr	r0, [pc, #328]	; (800d91c <tcp_abandon+0x164>)
 800d7d2:	f00b f9e1 	bl	8018b98 <iprintf>
 800d7d6:	e099      	b.n	800d90c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	7d1b      	ldrb	r3, [r3, #20]
 800d7dc:	2b01      	cmp	r3, #1
 800d7de:	d106      	bne.n	800d7ee <tcp_abandon+0x36>
 800d7e0:	4b4c      	ldr	r3, [pc, #304]	; (800d914 <tcp_abandon+0x15c>)
 800d7e2:	f44f 7210 	mov.w	r2, #576	; 0x240
 800d7e6:	494e      	ldr	r1, [pc, #312]	; (800d920 <tcp_abandon+0x168>)
 800d7e8:	484c      	ldr	r0, [pc, #304]	; (800d91c <tcp_abandon+0x164>)
 800d7ea:	f00b f9d5 	bl	8018b98 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	7d1b      	ldrb	r3, [r3, #20]
 800d7f2:	2b0a      	cmp	r3, #10
 800d7f4:	d107      	bne.n	800d806 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800d7f6:	6879      	ldr	r1, [r7, #4]
 800d7f8:	484a      	ldr	r0, [pc, #296]	; (800d924 <tcp_abandon+0x16c>)
 800d7fa:	f001 fb81 	bl	800ef00 <tcp_pcb_remove>
    tcp_free(pcb);
 800d7fe:	6878      	ldr	r0, [r7, #4]
 800d800:	f7ff fd54 	bl	800d2ac <tcp_free>
 800d804:	e082      	b.n	800d90c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800d806:	2300      	movs	r3, #0
 800d808:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800d80a:	2300      	movs	r3, #0
 800d80c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d812:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d818:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d820:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	691b      	ldr	r3, [r3, #16]
 800d826:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	7d1b      	ldrb	r3, [r3, #20]
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d126      	bne.n	800d87e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	8adb      	ldrh	r3, [r3, #22]
 800d834:	2b00      	cmp	r3, #0
 800d836:	d02e      	beq.n	800d896 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d838:	4b3b      	ldr	r3, [pc, #236]	; (800d928 <tcp_abandon+0x170>)
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	687a      	ldr	r2, [r7, #4]
 800d83e:	429a      	cmp	r2, r3
 800d840:	d105      	bne.n	800d84e <tcp_abandon+0x96>
 800d842:	4b39      	ldr	r3, [pc, #228]	; (800d928 <tcp_abandon+0x170>)
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	68db      	ldr	r3, [r3, #12]
 800d848:	4a37      	ldr	r2, [pc, #220]	; (800d928 <tcp_abandon+0x170>)
 800d84a:	6013      	str	r3, [r2, #0]
 800d84c:	e013      	b.n	800d876 <tcp_abandon+0xbe>
 800d84e:	4b36      	ldr	r3, [pc, #216]	; (800d928 <tcp_abandon+0x170>)
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	61fb      	str	r3, [r7, #28]
 800d854:	e00c      	b.n	800d870 <tcp_abandon+0xb8>
 800d856:	69fb      	ldr	r3, [r7, #28]
 800d858:	68db      	ldr	r3, [r3, #12]
 800d85a:	687a      	ldr	r2, [r7, #4]
 800d85c:	429a      	cmp	r2, r3
 800d85e:	d104      	bne.n	800d86a <tcp_abandon+0xb2>
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	68da      	ldr	r2, [r3, #12]
 800d864:	69fb      	ldr	r3, [r7, #28]
 800d866:	60da      	str	r2, [r3, #12]
 800d868:	e005      	b.n	800d876 <tcp_abandon+0xbe>
 800d86a:	69fb      	ldr	r3, [r7, #28]
 800d86c:	68db      	ldr	r3, [r3, #12]
 800d86e:	61fb      	str	r3, [r7, #28]
 800d870:	69fb      	ldr	r3, [r7, #28]
 800d872:	2b00      	cmp	r3, #0
 800d874:	d1ef      	bne.n	800d856 <tcp_abandon+0x9e>
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	2200      	movs	r2, #0
 800d87a:	60da      	str	r2, [r3, #12]
 800d87c:	e00b      	b.n	800d896 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800d87e:	683b      	ldr	r3, [r7, #0]
 800d880:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	8adb      	ldrh	r3, [r3, #22]
 800d886:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d888:	6879      	ldr	r1, [r7, #4]
 800d88a:	4828      	ldr	r0, [pc, #160]	; (800d92c <tcp_abandon+0x174>)
 800d88c:	f001 fb38 	bl	800ef00 <tcp_pcb_remove>
 800d890:	4b27      	ldr	r3, [pc, #156]	; (800d930 <tcp_abandon+0x178>)
 800d892:	2201      	movs	r2, #1
 800d894:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d004      	beq.n	800d8a8 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	f000 ffee 	bl	800e884 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d004      	beq.n	800d8ba <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	f000 ffe5 	bl	800e884 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d004      	beq.n	800d8cc <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	f000 ffdc 	bl	800e884 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800d8cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d00e      	beq.n	800d8f0 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800d8d2:	6879      	ldr	r1, [r7, #4]
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	3304      	adds	r3, #4
 800d8d8:	687a      	ldr	r2, [r7, #4]
 800d8da:	8b12      	ldrh	r2, [r2, #24]
 800d8dc:	9202      	str	r2, [sp, #8]
 800d8de:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d8e0:	9201      	str	r2, [sp, #4]
 800d8e2:	9300      	str	r3, [sp, #0]
 800d8e4:	460b      	mov	r3, r1
 800d8e6:	697a      	ldr	r2, [r7, #20]
 800d8e8:	69b9      	ldr	r1, [r7, #24]
 800d8ea:	6878      	ldr	r0, [r7, #4]
 800d8ec:	f005 fcd8 	bl	80132a0 <tcp_rst>
    }
    last_state = pcb->state;
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	7d1b      	ldrb	r3, [r3, #20]
 800d8f4:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800d8f6:	6878      	ldr	r0, [r7, #4]
 800d8f8:	f7ff fcd8 	bl	800d2ac <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800d8fc:	693b      	ldr	r3, [r7, #16]
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d004      	beq.n	800d90c <tcp_abandon+0x154>
 800d902:	693b      	ldr	r3, [r7, #16]
 800d904:	f06f 010c 	mvn.w	r1, #12
 800d908:	68f8      	ldr	r0, [r7, #12]
 800d90a:	4798      	blx	r3
  }
}
 800d90c:	3728      	adds	r7, #40	; 0x28
 800d90e:	46bd      	mov	sp, r7
 800d910:	bd80      	pop	{r7, pc}
 800d912:	bf00      	nop
 800d914:	0801b8a0 	.word	0x0801b8a0
 800d918:	0801b9e4 	.word	0x0801b9e4
 800d91c:	0801b8e4 	.word	0x0801b8e4
 800d920:	0801ba00 	.word	0x0801ba00
 800d924:	20010e80 	.word	0x20010e80
 800d928:	20010e74 	.word	0x20010e74
 800d92c:	20010e7c 	.word	0x20010e7c
 800d930:	20010e84 	.word	0x20010e84

0800d934 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800d934:	b580      	push	{r7, lr}
 800d936:	b082      	sub	sp, #8
 800d938:	af00      	add	r7, sp, #0
 800d93a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800d93c:	2101      	movs	r1, #1
 800d93e:	6878      	ldr	r0, [r7, #4]
 800d940:	f7ff ff3a 	bl	800d7b8 <tcp_abandon>
}
 800d944:	bf00      	nop
 800d946:	3708      	adds	r7, #8
 800d948:	46bd      	mov	sp, r7
 800d94a:	bd80      	pop	{r7, pc}

0800d94c <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800d94c:	b580      	push	{r7, lr}
 800d94e:	b088      	sub	sp, #32
 800d950:	af00      	add	r7, sp, #0
 800d952:	60f8      	str	r0, [r7, #12]
 800d954:	60b9      	str	r1, [r7, #8]
 800d956:	4613      	mov	r3, r2
 800d958:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800d95a:	2304      	movs	r3, #4
 800d95c:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800d95e:	68bb      	ldr	r3, [r7, #8]
 800d960:	2b00      	cmp	r3, #0
 800d962:	d101      	bne.n	800d968 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800d964:	4b3e      	ldr	r3, [pc, #248]	; (800da60 <tcp_bind+0x114>)
 800d966:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d109      	bne.n	800d982 <tcp_bind+0x36>
 800d96e:	4b3d      	ldr	r3, [pc, #244]	; (800da64 <tcp_bind+0x118>)
 800d970:	f240 22a9 	movw	r2, #681	; 0x2a9
 800d974:	493c      	ldr	r1, [pc, #240]	; (800da68 <tcp_bind+0x11c>)
 800d976:	483d      	ldr	r0, [pc, #244]	; (800da6c <tcp_bind+0x120>)
 800d978:	f00b f90e 	bl	8018b98 <iprintf>
 800d97c:	f06f 030f 	mvn.w	r3, #15
 800d980:	e06a      	b.n	800da58 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	7d1b      	ldrb	r3, [r3, #20]
 800d986:	2b00      	cmp	r3, #0
 800d988:	d009      	beq.n	800d99e <tcp_bind+0x52>
 800d98a:	4b36      	ldr	r3, [pc, #216]	; (800da64 <tcp_bind+0x118>)
 800d98c:	f240 22ab 	movw	r2, #683	; 0x2ab
 800d990:	4937      	ldr	r1, [pc, #220]	; (800da70 <tcp_bind+0x124>)
 800d992:	4836      	ldr	r0, [pc, #216]	; (800da6c <tcp_bind+0x120>)
 800d994:	f00b f900 	bl	8018b98 <iprintf>
 800d998:	f06f 0305 	mvn.w	r3, #5
 800d99c:	e05c      	b.n	800da58 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800d99e:	88fb      	ldrh	r3, [r7, #6]
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d109      	bne.n	800d9b8 <tcp_bind+0x6c>
    port = tcp_new_port();
 800d9a4:	f000 f9f0 	bl	800dd88 <tcp_new_port>
 800d9a8:	4603      	mov	r3, r0
 800d9aa:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800d9ac:	88fb      	ldrh	r3, [r7, #6]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d135      	bne.n	800da1e <tcp_bind+0xd2>
      return ERR_BUF;
 800d9b2:	f06f 0301 	mvn.w	r3, #1
 800d9b6:	e04f      	b.n	800da58 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800d9b8:	2300      	movs	r3, #0
 800d9ba:	61fb      	str	r3, [r7, #28]
 800d9bc:	e02b      	b.n	800da16 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800d9be:	4a2d      	ldr	r2, [pc, #180]	; (800da74 <tcp_bind+0x128>)
 800d9c0:	69fb      	ldr	r3, [r7, #28]
 800d9c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	61bb      	str	r3, [r7, #24]
 800d9ca:	e01e      	b.n	800da0a <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800d9cc:	69bb      	ldr	r3, [r7, #24]
 800d9ce:	8adb      	ldrh	r3, [r3, #22]
 800d9d0:	88fa      	ldrh	r2, [r7, #6]
 800d9d2:	429a      	cmp	r2, r3
 800d9d4:	d116      	bne.n	800da04 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800d9d6:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d010      	beq.n	800d9fe <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800d9dc:	69bb      	ldr	r3, [r7, #24]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d00c      	beq.n	800d9fe <tcp_bind+0xb2>
 800d9e4:	68bb      	ldr	r3, [r7, #8]
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d009      	beq.n	800d9fe <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800d9ea:	68bb      	ldr	r3, [r7, #8]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d005      	beq.n	800d9fe <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800d9f2:	69bb      	ldr	r3, [r7, #24]
 800d9f4:	681a      	ldr	r2, [r3, #0]
 800d9f6:	68bb      	ldr	r3, [r7, #8]
 800d9f8:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800d9fa:	429a      	cmp	r2, r3
 800d9fc:	d102      	bne.n	800da04 <tcp_bind+0xb8>
              return ERR_USE;
 800d9fe:	f06f 0307 	mvn.w	r3, #7
 800da02:	e029      	b.n	800da58 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800da04:	69bb      	ldr	r3, [r7, #24]
 800da06:	68db      	ldr	r3, [r3, #12]
 800da08:	61bb      	str	r3, [r7, #24]
 800da0a:	69bb      	ldr	r3, [r7, #24]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d1dd      	bne.n	800d9cc <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800da10:	69fb      	ldr	r3, [r7, #28]
 800da12:	3301      	adds	r3, #1
 800da14:	61fb      	str	r3, [r7, #28]
 800da16:	69fa      	ldr	r2, [r7, #28]
 800da18:	697b      	ldr	r3, [r7, #20]
 800da1a:	429a      	cmp	r2, r3
 800da1c:	dbcf      	blt.n	800d9be <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800da1e:	68bb      	ldr	r3, [r7, #8]
 800da20:	2b00      	cmp	r3, #0
 800da22:	d00c      	beq.n	800da3e <tcp_bind+0xf2>
 800da24:	68bb      	ldr	r3, [r7, #8]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d008      	beq.n	800da3e <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800da2c:	68bb      	ldr	r3, [r7, #8]
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d002      	beq.n	800da38 <tcp_bind+0xec>
 800da32:	68bb      	ldr	r3, [r7, #8]
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	e000      	b.n	800da3a <tcp_bind+0xee>
 800da38:	2300      	movs	r3, #0
 800da3a:	68fa      	ldr	r2, [r7, #12]
 800da3c:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	88fa      	ldrh	r2, [r7, #6]
 800da42:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800da44:	4b0c      	ldr	r3, [pc, #48]	; (800da78 <tcp_bind+0x12c>)
 800da46:	681a      	ldr	r2, [r3, #0]
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	60da      	str	r2, [r3, #12]
 800da4c:	4a0a      	ldr	r2, [pc, #40]	; (800da78 <tcp_bind+0x12c>)
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	6013      	str	r3, [r2, #0]
 800da52:	f005 fde7 	bl	8013624 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800da56:	2300      	movs	r3, #0
}
 800da58:	4618      	mov	r0, r3
 800da5a:	3720      	adds	r7, #32
 800da5c:	46bd      	mov	sp, r7
 800da5e:	bd80      	pop	{r7, pc}
 800da60:	08027dd4 	.word	0x08027dd4
 800da64:	0801b8a0 	.word	0x0801b8a0
 800da68:	0801ba34 	.word	0x0801ba34
 800da6c:	0801b8e4 	.word	0x0801b8e4
 800da70:	0801ba4c 	.word	0x0801ba4c
 800da74:	08027d9c 	.word	0x08027d9c
 800da78:	20010e74 	.word	0x20010e74

0800da7c <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800da7c:	b580      	push	{r7, lr}
 800da7e:	b084      	sub	sp, #16
 800da80:	af00      	add	r7, sp, #0
 800da82:	60f8      	str	r0, [r7, #12]
 800da84:	60b9      	str	r1, [r7, #8]
 800da86:	4613      	mov	r3, r2
 800da88:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800da8a:	68bb      	ldr	r3, [r7, #8]
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d106      	bne.n	800da9e <tcp_accept_null+0x22>
 800da90:	4b07      	ldr	r3, [pc, #28]	; (800dab0 <tcp_accept_null+0x34>)
 800da92:	f240 320f 	movw	r2, #783	; 0x30f
 800da96:	4907      	ldr	r1, [pc, #28]	; (800dab4 <tcp_accept_null+0x38>)
 800da98:	4807      	ldr	r0, [pc, #28]	; (800dab8 <tcp_accept_null+0x3c>)
 800da9a:	f00b f87d 	bl	8018b98 <iprintf>

  tcp_abort(pcb);
 800da9e:	68b8      	ldr	r0, [r7, #8]
 800daa0:	f7ff ff48 	bl	800d934 <tcp_abort>

  return ERR_ABRT;
 800daa4:	f06f 030c 	mvn.w	r3, #12
}
 800daa8:	4618      	mov	r0, r3
 800daaa:	3710      	adds	r7, #16
 800daac:	46bd      	mov	sp, r7
 800daae:	bd80      	pop	{r7, pc}
 800dab0:	0801b8a0 	.word	0x0801b8a0
 800dab4:	0801ba74 	.word	0x0801ba74
 800dab8:	0801b8e4 	.word	0x0801b8e4

0800dabc <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800dabc:	b580      	push	{r7, lr}
 800dabe:	b082      	sub	sp, #8
 800dac0:	af00      	add	r7, sp, #0
 800dac2:	6078      	str	r0, [r7, #4]
 800dac4:	460b      	mov	r3, r1
 800dac6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800dac8:	78fb      	ldrb	r3, [r7, #3]
 800daca:	2200      	movs	r2, #0
 800dacc:	4619      	mov	r1, r3
 800dace:	6878      	ldr	r0, [r7, #4]
 800dad0:	f000 f806 	bl	800dae0 <tcp_listen_with_backlog_and_err>
 800dad4:	4603      	mov	r3, r0
}
 800dad6:	4618      	mov	r0, r3
 800dad8:	3708      	adds	r7, #8
 800dada:	46bd      	mov	sp, r7
 800dadc:	bd80      	pop	{r7, pc}
	...

0800dae0 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800dae0:	b580      	push	{r7, lr}
 800dae2:	b088      	sub	sp, #32
 800dae4:	af00      	add	r7, sp, #0
 800dae6:	60f8      	str	r0, [r7, #12]
 800dae8:	460b      	mov	r3, r1
 800daea:	607a      	str	r2, [r7, #4]
 800daec:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800daee:	2300      	movs	r3, #0
 800daf0:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d109      	bne.n	800db0c <tcp_listen_with_backlog_and_err+0x2c>
 800daf8:	4b47      	ldr	r3, [pc, #284]	; (800dc18 <tcp_listen_with_backlog_and_err+0x138>)
 800dafa:	f240 3259 	movw	r2, #857	; 0x359
 800dafe:	4947      	ldr	r1, [pc, #284]	; (800dc1c <tcp_listen_with_backlog_and_err+0x13c>)
 800db00:	4847      	ldr	r0, [pc, #284]	; (800dc20 <tcp_listen_with_backlog_and_err+0x140>)
 800db02:	f00b f849 	bl	8018b98 <iprintf>
 800db06:	23f0      	movs	r3, #240	; 0xf0
 800db08:	76fb      	strb	r3, [r7, #27]
 800db0a:	e079      	b.n	800dc00 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	7d1b      	ldrb	r3, [r3, #20]
 800db10:	2b00      	cmp	r3, #0
 800db12:	d009      	beq.n	800db28 <tcp_listen_with_backlog_and_err+0x48>
 800db14:	4b40      	ldr	r3, [pc, #256]	; (800dc18 <tcp_listen_with_backlog_and_err+0x138>)
 800db16:	f240 325a 	movw	r2, #858	; 0x35a
 800db1a:	4942      	ldr	r1, [pc, #264]	; (800dc24 <tcp_listen_with_backlog_and_err+0x144>)
 800db1c:	4840      	ldr	r0, [pc, #256]	; (800dc20 <tcp_listen_with_backlog_and_err+0x140>)
 800db1e:	f00b f83b 	bl	8018b98 <iprintf>
 800db22:	23f1      	movs	r3, #241	; 0xf1
 800db24:	76fb      	strb	r3, [r7, #27]
 800db26:	e06b      	b.n	800dc00 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	7d1b      	ldrb	r3, [r3, #20]
 800db2c:	2b01      	cmp	r3, #1
 800db2e:	d104      	bne.n	800db3a <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800db34:	23f7      	movs	r3, #247	; 0xf7
 800db36:	76fb      	strb	r3, [r7, #27]
    goto done;
 800db38:	e062      	b.n	800dc00 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800db3a:	2002      	movs	r0, #2
 800db3c:	f7fe f9d4 	bl	800bee8 <memp_malloc>
 800db40:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800db42:	69fb      	ldr	r3, [r7, #28]
 800db44:	2b00      	cmp	r3, #0
 800db46:	d102      	bne.n	800db4e <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800db48:	23ff      	movs	r3, #255	; 0xff
 800db4a:	76fb      	strb	r3, [r7, #27]
    goto done;
 800db4c:	e058      	b.n	800dc00 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	691a      	ldr	r2, [r3, #16]
 800db52:	69fb      	ldr	r3, [r7, #28]
 800db54:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	8ada      	ldrh	r2, [r3, #22]
 800db5a:	69fb      	ldr	r3, [r7, #28]
 800db5c:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800db5e:	69fb      	ldr	r3, [r7, #28]
 800db60:	2201      	movs	r2, #1
 800db62:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	7d5a      	ldrb	r2, [r3, #21]
 800db68:	69fb      	ldr	r3, [r7, #28]
 800db6a:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	7a5a      	ldrb	r2, [r3, #9]
 800db70:	69fb      	ldr	r3, [r7, #28]
 800db72:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800db74:	69fb      	ldr	r3, [r7, #28]
 800db76:	2200      	movs	r2, #0
 800db78:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	7ada      	ldrb	r2, [r3, #11]
 800db7e:	69fb      	ldr	r3, [r7, #28]
 800db80:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	7a9a      	ldrb	r2, [r3, #10]
 800db86:	69fb      	ldr	r3, [r7, #28]
 800db88:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	681a      	ldr	r2, [r3, #0]
 800db8e:	69fb      	ldr	r3, [r7, #28]
 800db90:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	8adb      	ldrh	r3, [r3, #22]
 800db96:	2b00      	cmp	r3, #0
 800db98:	d021      	beq.n	800dbde <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800db9a:	4b23      	ldr	r3, [pc, #140]	; (800dc28 <tcp_listen_with_backlog_and_err+0x148>)
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	68fa      	ldr	r2, [r7, #12]
 800dba0:	429a      	cmp	r2, r3
 800dba2:	d105      	bne.n	800dbb0 <tcp_listen_with_backlog_and_err+0xd0>
 800dba4:	4b20      	ldr	r3, [pc, #128]	; (800dc28 <tcp_listen_with_backlog_and_err+0x148>)
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	68db      	ldr	r3, [r3, #12]
 800dbaa:	4a1f      	ldr	r2, [pc, #124]	; (800dc28 <tcp_listen_with_backlog_and_err+0x148>)
 800dbac:	6013      	str	r3, [r2, #0]
 800dbae:	e013      	b.n	800dbd8 <tcp_listen_with_backlog_and_err+0xf8>
 800dbb0:	4b1d      	ldr	r3, [pc, #116]	; (800dc28 <tcp_listen_with_backlog_and_err+0x148>)
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	617b      	str	r3, [r7, #20]
 800dbb6:	e00c      	b.n	800dbd2 <tcp_listen_with_backlog_and_err+0xf2>
 800dbb8:	697b      	ldr	r3, [r7, #20]
 800dbba:	68db      	ldr	r3, [r3, #12]
 800dbbc:	68fa      	ldr	r2, [r7, #12]
 800dbbe:	429a      	cmp	r2, r3
 800dbc0:	d104      	bne.n	800dbcc <tcp_listen_with_backlog_and_err+0xec>
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	68da      	ldr	r2, [r3, #12]
 800dbc6:	697b      	ldr	r3, [r7, #20]
 800dbc8:	60da      	str	r2, [r3, #12]
 800dbca:	e005      	b.n	800dbd8 <tcp_listen_with_backlog_and_err+0xf8>
 800dbcc:	697b      	ldr	r3, [r7, #20]
 800dbce:	68db      	ldr	r3, [r3, #12]
 800dbd0:	617b      	str	r3, [r7, #20]
 800dbd2:	697b      	ldr	r3, [r7, #20]
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d1ef      	bne.n	800dbb8 <tcp_listen_with_backlog_and_err+0xd8>
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	2200      	movs	r2, #0
 800dbdc:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800dbde:	68f8      	ldr	r0, [r7, #12]
 800dbe0:	f7ff fb64 	bl	800d2ac <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800dbe4:	69fb      	ldr	r3, [r7, #28]
 800dbe6:	4a11      	ldr	r2, [pc, #68]	; (800dc2c <tcp_listen_with_backlog_and_err+0x14c>)
 800dbe8:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800dbea:	4b11      	ldr	r3, [pc, #68]	; (800dc30 <tcp_listen_with_backlog_and_err+0x150>)
 800dbec:	681a      	ldr	r2, [r3, #0]
 800dbee:	69fb      	ldr	r3, [r7, #28]
 800dbf0:	60da      	str	r2, [r3, #12]
 800dbf2:	4a0f      	ldr	r2, [pc, #60]	; (800dc30 <tcp_listen_with_backlog_and_err+0x150>)
 800dbf4:	69fb      	ldr	r3, [r7, #28]
 800dbf6:	6013      	str	r3, [r2, #0]
 800dbf8:	f005 fd14 	bl	8013624 <tcp_timer_needed>
  res = ERR_OK;
 800dbfc:	2300      	movs	r3, #0
 800dbfe:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d002      	beq.n	800dc0c <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	7efa      	ldrb	r2, [r7, #27]
 800dc0a:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800dc0c:	69fb      	ldr	r3, [r7, #28]
}
 800dc0e:	4618      	mov	r0, r3
 800dc10:	3720      	adds	r7, #32
 800dc12:	46bd      	mov	sp, r7
 800dc14:	bd80      	pop	{r7, pc}
 800dc16:	bf00      	nop
 800dc18:	0801b8a0 	.word	0x0801b8a0
 800dc1c:	0801ba94 	.word	0x0801ba94
 800dc20:	0801b8e4 	.word	0x0801b8e4
 800dc24:	0801bac4 	.word	0x0801bac4
 800dc28:	20010e74 	.word	0x20010e74
 800dc2c:	0800da7d 	.word	0x0800da7d
 800dc30:	20010e78 	.word	0x20010e78

0800dc34 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800dc34:	b580      	push	{r7, lr}
 800dc36:	b084      	sub	sp, #16
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d106      	bne.n	800dc50 <tcp_update_rcv_ann_wnd+0x1c>
 800dc42:	4b25      	ldr	r3, [pc, #148]	; (800dcd8 <tcp_update_rcv_ann_wnd+0xa4>)
 800dc44:	f240 32a6 	movw	r2, #934	; 0x3a6
 800dc48:	4924      	ldr	r1, [pc, #144]	; (800dcdc <tcp_update_rcv_ann_wnd+0xa8>)
 800dc4a:	4825      	ldr	r0, [pc, #148]	; (800dce0 <tcp_update_rcv_ann_wnd+0xac>)
 800dc4c:	f00a ffa4 	bl	8018b98 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc54:	687a      	ldr	r2, [r7, #4]
 800dc56:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800dc58:	4413      	add	r3, r2
 800dc5a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc60:	687a      	ldr	r2, [r7, #4]
 800dc62:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800dc64:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800dc68:	bf28      	it	cs
 800dc6a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800dc6e:	b292      	uxth	r2, r2
 800dc70:	4413      	add	r3, r2
 800dc72:	68fa      	ldr	r2, [r7, #12]
 800dc74:	1ad3      	subs	r3, r2, r3
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	db08      	blt.n	800dc8c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc86:	68fa      	ldr	r2, [r7, #12]
 800dc88:	1ad3      	subs	r3, r2, r3
 800dc8a:	e020      	b.n	800dcce <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc94:	1ad3      	subs	r3, r2, r3
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	dd03      	ble.n	800dca2 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	2200      	movs	r2, #0
 800dc9e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800dca0:	e014      	b.n	800dccc <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcaa:	1ad3      	subs	r3, r2, r3
 800dcac:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800dcae:	68bb      	ldr	r3, [r7, #8]
 800dcb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dcb4:	d306      	bcc.n	800dcc4 <tcp_update_rcv_ann_wnd+0x90>
 800dcb6:	4b08      	ldr	r3, [pc, #32]	; (800dcd8 <tcp_update_rcv_ann_wnd+0xa4>)
 800dcb8:	f240 32b6 	movw	r2, #950	; 0x3b6
 800dcbc:	4909      	ldr	r1, [pc, #36]	; (800dce4 <tcp_update_rcv_ann_wnd+0xb0>)
 800dcbe:	4808      	ldr	r0, [pc, #32]	; (800dce0 <tcp_update_rcv_ann_wnd+0xac>)
 800dcc0:	f00a ff6a 	bl	8018b98 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800dcc4:	68bb      	ldr	r3, [r7, #8]
 800dcc6:	b29a      	uxth	r2, r3
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800dccc:	2300      	movs	r3, #0
  }
}
 800dcce:	4618      	mov	r0, r3
 800dcd0:	3710      	adds	r7, #16
 800dcd2:	46bd      	mov	sp, r7
 800dcd4:	bd80      	pop	{r7, pc}
 800dcd6:	bf00      	nop
 800dcd8:	0801b8a0 	.word	0x0801b8a0
 800dcdc:	0801bafc 	.word	0x0801bafc
 800dce0:	0801b8e4 	.word	0x0801b8e4
 800dce4:	0801bb20 	.word	0x0801bb20

0800dce8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800dce8:	b580      	push	{r7, lr}
 800dcea:	b084      	sub	sp, #16
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	6078      	str	r0, [r7, #4]
 800dcf0:	460b      	mov	r3, r1
 800dcf2:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d107      	bne.n	800dd0a <tcp_recved+0x22>
 800dcfa:	4b1f      	ldr	r3, [pc, #124]	; (800dd78 <tcp_recved+0x90>)
 800dcfc:	f240 32cf 	movw	r2, #975	; 0x3cf
 800dd00:	491e      	ldr	r1, [pc, #120]	; (800dd7c <tcp_recved+0x94>)
 800dd02:	481f      	ldr	r0, [pc, #124]	; (800dd80 <tcp_recved+0x98>)
 800dd04:	f00a ff48 	bl	8018b98 <iprintf>
 800dd08:	e032      	b.n	800dd70 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	7d1b      	ldrb	r3, [r3, #20]
 800dd0e:	2b01      	cmp	r3, #1
 800dd10:	d106      	bne.n	800dd20 <tcp_recved+0x38>
 800dd12:	4b19      	ldr	r3, [pc, #100]	; (800dd78 <tcp_recved+0x90>)
 800dd14:	f240 32d2 	movw	r2, #978	; 0x3d2
 800dd18:	491a      	ldr	r1, [pc, #104]	; (800dd84 <tcp_recved+0x9c>)
 800dd1a:	4819      	ldr	r0, [pc, #100]	; (800dd80 <tcp_recved+0x98>)
 800dd1c:	f00a ff3c 	bl	8018b98 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800dd24:	887b      	ldrh	r3, [r7, #2]
 800dd26:	4413      	add	r3, r2
 800dd28:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800dd2a:	89fb      	ldrh	r3, [r7, #14]
 800dd2c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800dd30:	d804      	bhi.n	800dd3c <tcp_recved+0x54>
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dd36:	89fa      	ldrh	r2, [r7, #14]
 800dd38:	429a      	cmp	r2, r3
 800dd3a:	d204      	bcs.n	800dd46 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800dd42:	851a      	strh	r2, [r3, #40]	; 0x28
 800dd44:	e002      	b.n	800dd4c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	89fa      	ldrh	r2, [r7, #14]
 800dd4a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800dd4c:	6878      	ldr	r0, [r7, #4]
 800dd4e:	f7ff ff71 	bl	800dc34 <tcp_update_rcv_ann_wnd>
 800dd52:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800dd54:	68bb      	ldr	r3, [r7, #8]
 800dd56:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800dd5a:	d309      	bcc.n	800dd70 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	8b5b      	ldrh	r3, [r3, #26]
 800dd60:	f043 0302 	orr.w	r3, r3, #2
 800dd64:	b29a      	uxth	r2, r3
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800dd6a:	6878      	ldr	r0, [r7, #4]
 800dd6c:	f004 fce4 	bl	8012738 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800dd70:	3710      	adds	r7, #16
 800dd72:	46bd      	mov	sp, r7
 800dd74:	bd80      	pop	{r7, pc}
 800dd76:	bf00      	nop
 800dd78:	0801b8a0 	.word	0x0801b8a0
 800dd7c:	0801bb3c 	.word	0x0801bb3c
 800dd80:	0801b8e4 	.word	0x0801b8e4
 800dd84:	0801bb54 	.word	0x0801bb54

0800dd88 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800dd88:	b480      	push	{r7}
 800dd8a:	b083      	sub	sp, #12
 800dd8c:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800dd8e:	2300      	movs	r3, #0
 800dd90:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800dd92:	4b1e      	ldr	r3, [pc, #120]	; (800de0c <tcp_new_port+0x84>)
 800dd94:	881b      	ldrh	r3, [r3, #0]
 800dd96:	3301      	adds	r3, #1
 800dd98:	b29a      	uxth	r2, r3
 800dd9a:	4b1c      	ldr	r3, [pc, #112]	; (800de0c <tcp_new_port+0x84>)
 800dd9c:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800dd9e:	4b1b      	ldr	r3, [pc, #108]	; (800de0c <tcp_new_port+0x84>)
 800dda0:	881b      	ldrh	r3, [r3, #0]
 800dda2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dda6:	4293      	cmp	r3, r2
 800dda8:	d103      	bne.n	800ddb2 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800ddaa:	4b18      	ldr	r3, [pc, #96]	; (800de0c <tcp_new_port+0x84>)
 800ddac:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800ddb0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800ddb2:	2300      	movs	r3, #0
 800ddb4:	71fb      	strb	r3, [r7, #7]
 800ddb6:	e01e      	b.n	800ddf6 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800ddb8:	79fb      	ldrb	r3, [r7, #7]
 800ddba:	4a15      	ldr	r2, [pc, #84]	; (800de10 <tcp_new_port+0x88>)
 800ddbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	603b      	str	r3, [r7, #0]
 800ddc4:	e011      	b.n	800ddea <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800ddc6:	683b      	ldr	r3, [r7, #0]
 800ddc8:	8ada      	ldrh	r2, [r3, #22]
 800ddca:	4b10      	ldr	r3, [pc, #64]	; (800de0c <tcp_new_port+0x84>)
 800ddcc:	881b      	ldrh	r3, [r3, #0]
 800ddce:	429a      	cmp	r2, r3
 800ddd0:	d108      	bne.n	800dde4 <tcp_new_port+0x5c>
        n++;
 800ddd2:	88bb      	ldrh	r3, [r7, #4]
 800ddd4:	3301      	adds	r3, #1
 800ddd6:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800ddd8:	88bb      	ldrh	r3, [r7, #4]
 800ddda:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ddde:	d3d8      	bcc.n	800dd92 <tcp_new_port+0xa>
          return 0;
 800dde0:	2300      	movs	r3, #0
 800dde2:	e00d      	b.n	800de00 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800dde4:	683b      	ldr	r3, [r7, #0]
 800dde6:	68db      	ldr	r3, [r3, #12]
 800dde8:	603b      	str	r3, [r7, #0]
 800ddea:	683b      	ldr	r3, [r7, #0]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d1ea      	bne.n	800ddc6 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800ddf0:	79fb      	ldrb	r3, [r7, #7]
 800ddf2:	3301      	adds	r3, #1
 800ddf4:	71fb      	strb	r3, [r7, #7]
 800ddf6:	79fb      	ldrb	r3, [r7, #7]
 800ddf8:	2b03      	cmp	r3, #3
 800ddfa:	d9dd      	bls.n	800ddb8 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800ddfc:	4b03      	ldr	r3, [pc, #12]	; (800de0c <tcp_new_port+0x84>)
 800ddfe:	881b      	ldrh	r3, [r3, #0]
}
 800de00:	4618      	mov	r0, r3
 800de02:	370c      	adds	r7, #12
 800de04:	46bd      	mov	sp, r7
 800de06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de0a:	4770      	bx	lr
 800de0c:	20000024 	.word	0x20000024
 800de10:	08027d9c 	.word	0x08027d9c

0800de14 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 800de14:	b580      	push	{r7, lr}
 800de16:	b08a      	sub	sp, #40	; 0x28
 800de18:	af00      	add	r7, sp, #0
 800de1a:	60f8      	str	r0, [r7, #12]
 800de1c:	60b9      	str	r1, [r7, #8]
 800de1e:	603b      	str	r3, [r7, #0]
 800de20:	4613      	mov	r3, r2
 800de22:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 800de24:	2300      	movs	r3, #0
 800de26:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d109      	bne.n	800de42 <tcp_connect+0x2e>
 800de2e:	4b7d      	ldr	r3, [pc, #500]	; (800e024 <tcp_connect+0x210>)
 800de30:	f240 4235 	movw	r2, #1077	; 0x435
 800de34:	497c      	ldr	r1, [pc, #496]	; (800e028 <tcp_connect+0x214>)
 800de36:	487d      	ldr	r0, [pc, #500]	; (800e02c <tcp_connect+0x218>)
 800de38:	f00a feae 	bl	8018b98 <iprintf>
 800de3c:	f06f 030f 	mvn.w	r3, #15
 800de40:	e0ec      	b.n	800e01c <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800de42:	68bb      	ldr	r3, [r7, #8]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d109      	bne.n	800de5c <tcp_connect+0x48>
 800de48:	4b76      	ldr	r3, [pc, #472]	; (800e024 <tcp_connect+0x210>)
 800de4a:	f240 4236 	movw	r2, #1078	; 0x436
 800de4e:	4978      	ldr	r1, [pc, #480]	; (800e030 <tcp_connect+0x21c>)
 800de50:	4876      	ldr	r0, [pc, #472]	; (800e02c <tcp_connect+0x218>)
 800de52:	f00a fea1 	bl	8018b98 <iprintf>
 800de56:	f06f 030f 	mvn.w	r3, #15
 800de5a:	e0df      	b.n	800e01c <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	7d1b      	ldrb	r3, [r3, #20]
 800de60:	2b00      	cmp	r3, #0
 800de62:	d009      	beq.n	800de78 <tcp_connect+0x64>
 800de64:	4b6f      	ldr	r3, [pc, #444]	; (800e024 <tcp_connect+0x210>)
 800de66:	f44f 6287 	mov.w	r2, #1080	; 0x438
 800de6a:	4972      	ldr	r1, [pc, #456]	; (800e034 <tcp_connect+0x220>)
 800de6c:	486f      	ldr	r0, [pc, #444]	; (800e02c <tcp_connect+0x218>)
 800de6e:	f00a fe93 	bl	8018b98 <iprintf>
 800de72:	f06f 0309 	mvn.w	r3, #9
 800de76:	e0d1      	b.n	800e01c <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800de78:	68bb      	ldr	r3, [r7, #8]
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d002      	beq.n	800de84 <tcp_connect+0x70>
 800de7e:	68bb      	ldr	r3, [r7, #8]
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	e000      	b.n	800de86 <tcp_connect+0x72>
 800de84:	2300      	movs	r3, #0
 800de86:	68fa      	ldr	r2, [r7, #12]
 800de88:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	88fa      	ldrh	r2, [r7, #6]
 800de8e:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	7a1b      	ldrb	r3, [r3, #8]
 800de94:	2b00      	cmp	r3, #0
 800de96:	d006      	beq.n	800dea6 <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	7a1b      	ldrb	r3, [r3, #8]
 800de9c:	4618      	mov	r0, r3
 800de9e:	f7fe fbbb 	bl	800c618 <netif_get_by_index>
 800dea2:	6278      	str	r0, [r7, #36]	; 0x24
 800dea4:	e005      	b.n	800deb2 <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	3304      	adds	r3, #4
 800deaa:	4618      	mov	r0, r3
 800deac:	f009 f96c 	bl	8017188 <ip4_route>
 800deb0:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 800deb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d102      	bne.n	800debe <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 800deb8:	f06f 0303 	mvn.w	r3, #3
 800debc:	e0ae      	b.n	800e01c <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d003      	beq.n	800decc <tcp_connect+0xb8>
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d111      	bne.n	800def0 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 800decc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d002      	beq.n	800ded8 <tcp_connect+0xc4>
 800ded2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ded4:	3304      	adds	r3, #4
 800ded6:	e000      	b.n	800deda <tcp_connect+0xc6>
 800ded8:	2300      	movs	r3, #0
 800deda:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 800dedc:	69fb      	ldr	r3, [r7, #28]
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d102      	bne.n	800dee8 <tcp_connect+0xd4>
      return ERR_RTE;
 800dee2:	f06f 0303 	mvn.w	r3, #3
 800dee6:	e099      	b.n	800e01c <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800dee8:	69fb      	ldr	r3, [r7, #28]
 800deea:	681a      	ldr	r2, [r3, #0]
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	8adb      	ldrh	r3, [r3, #22]
 800def4:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	8adb      	ldrh	r3, [r3, #22]
 800defa:	2b00      	cmp	r3, #0
 800defc:	d10c      	bne.n	800df18 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 800defe:	f7ff ff43 	bl	800dd88 <tcp_new_port>
 800df02:	4603      	mov	r3, r0
 800df04:	461a      	mov	r2, r3
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	8adb      	ldrh	r3, [r3, #22]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d102      	bne.n	800df18 <tcp_connect+0x104>
      return ERR_BUF;
 800df12:	f06f 0301 	mvn.w	r3, #1
 800df16:	e081      	b.n	800e01c <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 800df18:	68f8      	ldr	r0, [r7, #12]
 800df1a:	f001 f885 	bl	800f028 <tcp_next_iss>
 800df1e:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	2200      	movs	r2, #0
 800df24:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	697a      	ldr	r2, [r7, #20]
 800df2a:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 800df2c:	697b      	ldr	r3, [r7, #20]
 800df2e:	1e5a      	subs	r2, r3, #1
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 800df34:	697b      	ldr	r3, [r7, #20]
 800df36:	1e5a      	subs	r2, r3, #1
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 800df3c:	697b      	ldr	r3, [r7, #20]
 800df3e:	1e5a      	subs	r2, r3, #1
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800df4a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800df62:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	f44f 7206 	mov.w	r2, #536	; 0x218
 800df6c:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	3304      	adds	r3, #4
 800df76:	461a      	mov	r2, r3
 800df78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800df7a:	f001 f87b 	bl	800f074 <tcp_eff_send_mss_netif>
 800df7e:	4603      	mov	r3, r0
 800df80:	461a      	mov	r2, r3
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	2201      	movs	r2, #1
 800df8a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	683a      	ldr	r2, [r7, #0]
 800df92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800df96:	2102      	movs	r1, #2
 800df98:	68f8      	ldr	r0, [r7, #12]
 800df9a:	f004 fadf 	bl	801255c <tcp_enqueue_flags>
 800df9e:	4603      	mov	r3, r0
 800dfa0:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 800dfa2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d136      	bne.n	800e018 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	2202      	movs	r2, #2
 800dfae:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 800dfb0:	8b7b      	ldrh	r3, [r7, #26]
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d021      	beq.n	800dffa <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800dfb6:	4b20      	ldr	r3, [pc, #128]	; (800e038 <tcp_connect+0x224>)
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	68fa      	ldr	r2, [r7, #12]
 800dfbc:	429a      	cmp	r2, r3
 800dfbe:	d105      	bne.n	800dfcc <tcp_connect+0x1b8>
 800dfc0:	4b1d      	ldr	r3, [pc, #116]	; (800e038 <tcp_connect+0x224>)
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	68db      	ldr	r3, [r3, #12]
 800dfc6:	4a1c      	ldr	r2, [pc, #112]	; (800e038 <tcp_connect+0x224>)
 800dfc8:	6013      	str	r3, [r2, #0]
 800dfca:	e013      	b.n	800dff4 <tcp_connect+0x1e0>
 800dfcc:	4b1a      	ldr	r3, [pc, #104]	; (800e038 <tcp_connect+0x224>)
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	623b      	str	r3, [r7, #32]
 800dfd2:	e00c      	b.n	800dfee <tcp_connect+0x1da>
 800dfd4:	6a3b      	ldr	r3, [r7, #32]
 800dfd6:	68db      	ldr	r3, [r3, #12]
 800dfd8:	68fa      	ldr	r2, [r7, #12]
 800dfda:	429a      	cmp	r2, r3
 800dfdc:	d104      	bne.n	800dfe8 <tcp_connect+0x1d4>
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	68da      	ldr	r2, [r3, #12]
 800dfe2:	6a3b      	ldr	r3, [r7, #32]
 800dfe4:	60da      	str	r2, [r3, #12]
 800dfe6:	e005      	b.n	800dff4 <tcp_connect+0x1e0>
 800dfe8:	6a3b      	ldr	r3, [r7, #32]
 800dfea:	68db      	ldr	r3, [r3, #12]
 800dfec:	623b      	str	r3, [r7, #32]
 800dfee:	6a3b      	ldr	r3, [r7, #32]
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d1ef      	bne.n	800dfd4 <tcp_connect+0x1c0>
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	2200      	movs	r2, #0
 800dff8:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800dffa:	4b10      	ldr	r3, [pc, #64]	; (800e03c <tcp_connect+0x228>)
 800dffc:	681a      	ldr	r2, [r3, #0]
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	60da      	str	r2, [r3, #12]
 800e002:	4a0e      	ldr	r2, [pc, #56]	; (800e03c <tcp_connect+0x228>)
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	6013      	str	r3, [r2, #0]
 800e008:	f005 fb0c 	bl	8013624 <tcp_timer_needed>
 800e00c:	4b0c      	ldr	r3, [pc, #48]	; (800e040 <tcp_connect+0x22c>)
 800e00e:	2201      	movs	r2, #1
 800e010:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 800e012:	68f8      	ldr	r0, [r7, #12]
 800e014:	f004 fb90 	bl	8012738 <tcp_output>
  }
  return ret;
 800e018:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800e01c:	4618      	mov	r0, r3
 800e01e:	3728      	adds	r7, #40	; 0x28
 800e020:	46bd      	mov	sp, r7
 800e022:	bd80      	pop	{r7, pc}
 800e024:	0801b8a0 	.word	0x0801b8a0
 800e028:	0801bb7c 	.word	0x0801bb7c
 800e02c:	0801b8e4 	.word	0x0801b8e4
 800e030:	0801bb98 	.word	0x0801bb98
 800e034:	0801bbb4 	.word	0x0801bbb4
 800e038:	20010e74 	.word	0x20010e74
 800e03c:	20010e7c 	.word	0x20010e7c
 800e040:	20010e84 	.word	0x20010e84

0800e044 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800e044:	b5b0      	push	{r4, r5, r7, lr}
 800e046:	b090      	sub	sp, #64	; 0x40
 800e048:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800e04a:	2300      	movs	r3, #0
 800e04c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800e050:	4b94      	ldr	r3, [pc, #592]	; (800e2a4 <tcp_slowtmr+0x260>)
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	3301      	adds	r3, #1
 800e056:	4a93      	ldr	r2, [pc, #588]	; (800e2a4 <tcp_slowtmr+0x260>)
 800e058:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800e05a:	4b93      	ldr	r3, [pc, #588]	; (800e2a8 <tcp_slowtmr+0x264>)
 800e05c:	781b      	ldrb	r3, [r3, #0]
 800e05e:	3301      	adds	r3, #1
 800e060:	b2da      	uxtb	r2, r3
 800e062:	4b91      	ldr	r3, [pc, #580]	; (800e2a8 <tcp_slowtmr+0x264>)
 800e064:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800e066:	2300      	movs	r3, #0
 800e068:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800e06a:	4b90      	ldr	r3, [pc, #576]	; (800e2ac <tcp_slowtmr+0x268>)
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800e070:	e29f      	b.n	800e5b2 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800e072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e074:	7d1b      	ldrb	r3, [r3, #20]
 800e076:	2b00      	cmp	r3, #0
 800e078:	d106      	bne.n	800e088 <tcp_slowtmr+0x44>
 800e07a:	4b8d      	ldr	r3, [pc, #564]	; (800e2b0 <tcp_slowtmr+0x26c>)
 800e07c:	f240 42be 	movw	r2, #1214	; 0x4be
 800e080:	498c      	ldr	r1, [pc, #560]	; (800e2b4 <tcp_slowtmr+0x270>)
 800e082:	488d      	ldr	r0, [pc, #564]	; (800e2b8 <tcp_slowtmr+0x274>)
 800e084:	f00a fd88 	bl	8018b98 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800e088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e08a:	7d1b      	ldrb	r3, [r3, #20]
 800e08c:	2b01      	cmp	r3, #1
 800e08e:	d106      	bne.n	800e09e <tcp_slowtmr+0x5a>
 800e090:	4b87      	ldr	r3, [pc, #540]	; (800e2b0 <tcp_slowtmr+0x26c>)
 800e092:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800e096:	4989      	ldr	r1, [pc, #548]	; (800e2bc <tcp_slowtmr+0x278>)
 800e098:	4887      	ldr	r0, [pc, #540]	; (800e2b8 <tcp_slowtmr+0x274>)
 800e09a:	f00a fd7d 	bl	8018b98 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800e09e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0a0:	7d1b      	ldrb	r3, [r3, #20]
 800e0a2:	2b0a      	cmp	r3, #10
 800e0a4:	d106      	bne.n	800e0b4 <tcp_slowtmr+0x70>
 800e0a6:	4b82      	ldr	r3, [pc, #520]	; (800e2b0 <tcp_slowtmr+0x26c>)
 800e0a8:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800e0ac:	4984      	ldr	r1, [pc, #528]	; (800e2c0 <tcp_slowtmr+0x27c>)
 800e0ae:	4882      	ldr	r0, [pc, #520]	; (800e2b8 <tcp_slowtmr+0x274>)
 800e0b0:	f00a fd72 	bl	8018b98 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800e0b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0b6:	7f9a      	ldrb	r2, [r3, #30]
 800e0b8:	4b7b      	ldr	r3, [pc, #492]	; (800e2a8 <tcp_slowtmr+0x264>)
 800e0ba:	781b      	ldrb	r3, [r3, #0]
 800e0bc:	429a      	cmp	r2, r3
 800e0be:	d105      	bne.n	800e0cc <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800e0c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0c2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e0c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0c6:	68db      	ldr	r3, [r3, #12]
 800e0c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800e0ca:	e272      	b.n	800e5b2 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800e0cc:	4b76      	ldr	r3, [pc, #472]	; (800e2a8 <tcp_slowtmr+0x264>)
 800e0ce:	781a      	ldrb	r2, [r3, #0]
 800e0d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0d2:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800e0da:	2300      	movs	r3, #0
 800e0dc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800e0e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0e2:	7d1b      	ldrb	r3, [r3, #20]
 800e0e4:	2b02      	cmp	r3, #2
 800e0e6:	d10a      	bne.n	800e0fe <tcp_slowtmr+0xba>
 800e0e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e0ee:	2b05      	cmp	r3, #5
 800e0f0:	d905      	bls.n	800e0fe <tcp_slowtmr+0xba>
      ++pcb_remove;
 800e0f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e0f6:	3301      	adds	r3, #1
 800e0f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e0fc:	e11e      	b.n	800e33c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800e0fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e100:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e104:	2b0b      	cmp	r3, #11
 800e106:	d905      	bls.n	800e114 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800e108:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e10c:	3301      	adds	r3, #1
 800e10e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e112:	e113      	b.n	800e33c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800e114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e116:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d075      	beq.n	800e20a <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800e11e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e122:	2b00      	cmp	r3, #0
 800e124:	d006      	beq.n	800e134 <tcp_slowtmr+0xf0>
 800e126:	4b62      	ldr	r3, [pc, #392]	; (800e2b0 <tcp_slowtmr+0x26c>)
 800e128:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800e12c:	4965      	ldr	r1, [pc, #404]	; (800e2c4 <tcp_slowtmr+0x280>)
 800e12e:	4862      	ldr	r0, [pc, #392]	; (800e2b8 <tcp_slowtmr+0x274>)
 800e130:	f00a fd32 	bl	8018b98 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800e134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e136:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d106      	bne.n	800e14a <tcp_slowtmr+0x106>
 800e13c:	4b5c      	ldr	r3, [pc, #368]	; (800e2b0 <tcp_slowtmr+0x26c>)
 800e13e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800e142:	4961      	ldr	r1, [pc, #388]	; (800e2c8 <tcp_slowtmr+0x284>)
 800e144:	485c      	ldr	r0, [pc, #368]	; (800e2b8 <tcp_slowtmr+0x274>)
 800e146:	f00a fd27 	bl	8018b98 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800e14a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e14c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800e150:	2b0b      	cmp	r3, #11
 800e152:	d905      	bls.n	800e160 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800e154:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e158:	3301      	adds	r3, #1
 800e15a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e15e:	e0ed      	b.n	800e33c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800e160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e162:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e166:	3b01      	subs	r3, #1
 800e168:	4a58      	ldr	r2, [pc, #352]	; (800e2cc <tcp_slowtmr+0x288>)
 800e16a:	5cd3      	ldrb	r3, [r2, r3]
 800e16c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800e16e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e170:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e174:	7c7a      	ldrb	r2, [r7, #17]
 800e176:	429a      	cmp	r2, r3
 800e178:	d907      	bls.n	800e18a <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800e17a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e17c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e180:	3301      	adds	r3, #1
 800e182:	b2da      	uxtb	r2, r3
 800e184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e186:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800e18a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e18c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e190:	7c7a      	ldrb	r2, [r7, #17]
 800e192:	429a      	cmp	r2, r3
 800e194:	f200 80d2 	bhi.w	800e33c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800e198:	2301      	movs	r3, #1
 800e19a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800e19c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e19e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d108      	bne.n	800e1b8 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800e1a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e1a8:	f005 f96e 	bl	8013488 <tcp_zero_window_probe>
 800e1ac:	4603      	mov	r3, r0
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d014      	beq.n	800e1dc <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800e1b2:	2300      	movs	r3, #0
 800e1b4:	623b      	str	r3, [r7, #32]
 800e1b6:	e011      	b.n	800e1dc <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800e1b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e1be:	4619      	mov	r1, r3
 800e1c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e1c2:	f004 f833 	bl	801222c <tcp_split_unsent_seg>
 800e1c6:	4603      	mov	r3, r0
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d107      	bne.n	800e1dc <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800e1cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e1ce:	f004 fab3 	bl	8012738 <tcp_output>
 800e1d2:	4603      	mov	r3, r0
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d101      	bne.n	800e1dc <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800e1d8:	2300      	movs	r3, #0
 800e1da:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800e1dc:	6a3b      	ldr	r3, [r7, #32]
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	f000 80ac 	beq.w	800e33c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800e1e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1e6:	2200      	movs	r2, #0
 800e1e8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800e1ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1ee:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e1f2:	2b06      	cmp	r3, #6
 800e1f4:	f200 80a2 	bhi.w	800e33c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800e1f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1fa:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e1fe:	3301      	adds	r3, #1
 800e200:	b2da      	uxtb	r2, r3
 800e202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e204:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800e208:	e098      	b.n	800e33c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800e20a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e20c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e210:	2b00      	cmp	r3, #0
 800e212:	db0f      	blt.n	800e234 <tcp_slowtmr+0x1f0>
 800e214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e216:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e21a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e21e:	4293      	cmp	r3, r2
 800e220:	d008      	beq.n	800e234 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800e222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e224:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e228:	b29b      	uxth	r3, r3
 800e22a:	3301      	adds	r3, #1
 800e22c:	b29b      	uxth	r3, r3
 800e22e:	b21a      	sxth	r2, r3
 800e230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e232:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800e234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e236:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800e23a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e23c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e240:	429a      	cmp	r2, r3
 800e242:	db7b      	blt.n	800e33c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800e244:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e246:	f004 fd6b 	bl	8012d20 <tcp_rexmit_rto_prepare>
 800e24a:	4603      	mov	r3, r0
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d007      	beq.n	800e260 <tcp_slowtmr+0x21c>
 800e250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e254:	2b00      	cmp	r3, #0
 800e256:	d171      	bne.n	800e33c <tcp_slowtmr+0x2f8>
 800e258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e25a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d06d      	beq.n	800e33c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800e260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e262:	7d1b      	ldrb	r3, [r3, #20]
 800e264:	2b02      	cmp	r3, #2
 800e266:	d03a      	beq.n	800e2de <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800e268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e26a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e26e:	2b0c      	cmp	r3, #12
 800e270:	bf28      	it	cs
 800e272:	230c      	movcs	r3, #12
 800e274:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800e276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e278:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e27c:	10db      	asrs	r3, r3, #3
 800e27e:	b21b      	sxth	r3, r3
 800e280:	461a      	mov	r2, r3
 800e282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e284:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e288:	4413      	add	r3, r2
 800e28a:	7efa      	ldrb	r2, [r7, #27]
 800e28c:	4910      	ldr	r1, [pc, #64]	; (800e2d0 <tcp_slowtmr+0x28c>)
 800e28e:	5c8a      	ldrb	r2, [r1, r2]
 800e290:	4093      	lsls	r3, r2
 800e292:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800e294:	697b      	ldr	r3, [r7, #20]
 800e296:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800e29a:	4293      	cmp	r3, r2
 800e29c:	dc1a      	bgt.n	800e2d4 <tcp_slowtmr+0x290>
 800e29e:	697b      	ldr	r3, [r7, #20]
 800e2a0:	b21a      	sxth	r2, r3
 800e2a2:	e019      	b.n	800e2d8 <tcp_slowtmr+0x294>
 800e2a4:	20010e70 	.word	0x20010e70
 800e2a8:	20010e86 	.word	0x20010e86
 800e2ac:	20010e7c 	.word	0x20010e7c
 800e2b0:	0801b8a0 	.word	0x0801b8a0
 800e2b4:	0801bbe4 	.word	0x0801bbe4
 800e2b8:	0801b8e4 	.word	0x0801b8e4
 800e2bc:	0801bc10 	.word	0x0801bc10
 800e2c0:	0801bc3c 	.word	0x0801bc3c
 800e2c4:	0801bc6c 	.word	0x0801bc6c
 800e2c8:	0801bca0 	.word	0x0801bca0
 800e2cc:	08027d94 	.word	0x08027d94
 800e2d0:	08027d84 	.word	0x08027d84
 800e2d4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e2d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2da:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800e2de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2e0:	2200      	movs	r2, #0
 800e2e2:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800e2e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2e6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e2ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2ec:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e2f0:	4293      	cmp	r3, r2
 800e2f2:	bf28      	it	cs
 800e2f4:	4613      	movcs	r3, r2
 800e2f6:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800e2f8:	8a7b      	ldrh	r3, [r7, #18]
 800e2fa:	085b      	lsrs	r3, r3, #1
 800e2fc:	b29a      	uxth	r2, r3
 800e2fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e300:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800e304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e306:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e30a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e30c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e30e:	005b      	lsls	r3, r3, #1
 800e310:	b29b      	uxth	r3, r3
 800e312:	429a      	cmp	r2, r3
 800e314:	d206      	bcs.n	800e324 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800e316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e318:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e31a:	005b      	lsls	r3, r3, #1
 800e31c:	b29a      	uxth	r2, r3
 800e31e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e320:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800e324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e326:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800e328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e32a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800e32e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e330:	2200      	movs	r2, #0
 800e332:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800e336:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e338:	f004 fd62 	bl	8012e00 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800e33c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e33e:	7d1b      	ldrb	r3, [r3, #20]
 800e340:	2b06      	cmp	r3, #6
 800e342:	d111      	bne.n	800e368 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800e344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e346:	8b5b      	ldrh	r3, [r3, #26]
 800e348:	f003 0310 	and.w	r3, r3, #16
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d00b      	beq.n	800e368 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e350:	4b9d      	ldr	r3, [pc, #628]	; (800e5c8 <tcp_slowtmr+0x584>)
 800e352:	681a      	ldr	r2, [r3, #0]
 800e354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e356:	6a1b      	ldr	r3, [r3, #32]
 800e358:	1ad3      	subs	r3, r2, r3
 800e35a:	2b28      	cmp	r3, #40	; 0x28
 800e35c:	d904      	bls.n	800e368 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800e35e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e362:	3301      	adds	r3, #1
 800e364:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e36a:	7a5b      	ldrb	r3, [r3, #9]
 800e36c:	f003 0308 	and.w	r3, r3, #8
 800e370:	2b00      	cmp	r3, #0
 800e372:	d04c      	beq.n	800e40e <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800e374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e376:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e378:	2b04      	cmp	r3, #4
 800e37a:	d003      	beq.n	800e384 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800e37c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e37e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800e380:	2b07      	cmp	r3, #7
 800e382:	d144      	bne.n	800e40e <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e384:	4b90      	ldr	r3, [pc, #576]	; (800e5c8 <tcp_slowtmr+0x584>)
 800e386:	681a      	ldr	r2, [r3, #0]
 800e388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e38a:	6a1b      	ldr	r3, [r3, #32]
 800e38c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800e38e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e390:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e394:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800e398:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800e39c:	498b      	ldr	r1, [pc, #556]	; (800e5cc <tcp_slowtmr+0x588>)
 800e39e:	fba1 1303 	umull	r1, r3, r1, r3
 800e3a2:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e3a4:	429a      	cmp	r2, r3
 800e3a6:	d90a      	bls.n	800e3be <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800e3a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e3ac:	3301      	adds	r3, #1
 800e3ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800e3b2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e3b6:	3301      	adds	r3, #1
 800e3b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e3bc:	e027      	b.n	800e40e <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e3be:	4b82      	ldr	r3, [pc, #520]	; (800e5c8 <tcp_slowtmr+0x584>)
 800e3c0:	681a      	ldr	r2, [r3, #0]
 800e3c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3c4:	6a1b      	ldr	r3, [r3, #32]
 800e3c6:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800e3c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3ca:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800e3ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3d0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800e3d4:	4618      	mov	r0, r3
 800e3d6:	4b7e      	ldr	r3, [pc, #504]	; (800e5d0 <tcp_slowtmr+0x58c>)
 800e3d8:	fb00 f303 	mul.w	r3, r0, r3
 800e3dc:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800e3de:	497b      	ldr	r1, [pc, #492]	; (800e5cc <tcp_slowtmr+0x588>)
 800e3e0:	fba1 1303 	umull	r1, r3, r1, r3
 800e3e4:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e3e6:	429a      	cmp	r2, r3
 800e3e8:	d911      	bls.n	800e40e <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800e3ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e3ec:	f005 f80c 	bl	8013408 <tcp_keepalive>
 800e3f0:	4603      	mov	r3, r0
 800e3f2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800e3f6:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d107      	bne.n	800e40e <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800e3fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e400:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800e404:	3301      	adds	r3, #1
 800e406:	b2da      	uxtb	r2, r3
 800e408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e40a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800e40e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e410:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e412:	2b00      	cmp	r3, #0
 800e414:	d011      	beq.n	800e43a <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800e416:	4b6c      	ldr	r3, [pc, #432]	; (800e5c8 <tcp_slowtmr+0x584>)
 800e418:	681a      	ldr	r2, [r3, #0]
 800e41a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e41c:	6a1b      	ldr	r3, [r3, #32]
 800e41e:	1ad2      	subs	r2, r2, r3
 800e420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e422:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e426:	4619      	mov	r1, r3
 800e428:	460b      	mov	r3, r1
 800e42a:	005b      	lsls	r3, r3, #1
 800e42c:	440b      	add	r3, r1
 800e42e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800e430:	429a      	cmp	r2, r3
 800e432:	d302      	bcc.n	800e43a <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800e434:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e436:	f000 fec7 	bl	800f1c8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800e43a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e43c:	7d1b      	ldrb	r3, [r3, #20]
 800e43e:	2b03      	cmp	r3, #3
 800e440:	d10b      	bne.n	800e45a <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e442:	4b61      	ldr	r3, [pc, #388]	; (800e5c8 <tcp_slowtmr+0x584>)
 800e444:	681a      	ldr	r2, [r3, #0]
 800e446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e448:	6a1b      	ldr	r3, [r3, #32]
 800e44a:	1ad3      	subs	r3, r2, r3
 800e44c:	2b28      	cmp	r3, #40	; 0x28
 800e44e:	d904      	bls.n	800e45a <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800e450:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e454:	3301      	adds	r3, #1
 800e456:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800e45a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e45c:	7d1b      	ldrb	r3, [r3, #20]
 800e45e:	2b09      	cmp	r3, #9
 800e460:	d10b      	bne.n	800e47a <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e462:	4b59      	ldr	r3, [pc, #356]	; (800e5c8 <tcp_slowtmr+0x584>)
 800e464:	681a      	ldr	r2, [r3, #0]
 800e466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e468:	6a1b      	ldr	r3, [r3, #32]
 800e46a:	1ad3      	subs	r3, r2, r3
 800e46c:	2bf0      	cmp	r3, #240	; 0xf0
 800e46e:	d904      	bls.n	800e47a <tcp_slowtmr+0x436>
        ++pcb_remove;
 800e470:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e474:	3301      	adds	r3, #1
 800e476:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e47a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d060      	beq.n	800e544 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800e482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e488:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800e48a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e48c:	f000 fce8 	bl	800ee60 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800e490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e492:	2b00      	cmp	r3, #0
 800e494:	d010      	beq.n	800e4b8 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800e496:	4b4f      	ldr	r3, [pc, #316]	; (800e5d4 <tcp_slowtmr+0x590>)
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e49c:	429a      	cmp	r2, r3
 800e49e:	d106      	bne.n	800e4ae <tcp_slowtmr+0x46a>
 800e4a0:	4b4d      	ldr	r3, [pc, #308]	; (800e5d8 <tcp_slowtmr+0x594>)
 800e4a2:	f240 526d 	movw	r2, #1389	; 0x56d
 800e4a6:	494d      	ldr	r1, [pc, #308]	; (800e5dc <tcp_slowtmr+0x598>)
 800e4a8:	484d      	ldr	r0, [pc, #308]	; (800e5e0 <tcp_slowtmr+0x59c>)
 800e4aa:	f00a fb75 	bl	8018b98 <iprintf>
        prev->next = pcb->next;
 800e4ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4b0:	68da      	ldr	r2, [r3, #12]
 800e4b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4b4:	60da      	str	r2, [r3, #12]
 800e4b6:	e00f      	b.n	800e4d8 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800e4b8:	4b46      	ldr	r3, [pc, #280]	; (800e5d4 <tcp_slowtmr+0x590>)
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e4be:	429a      	cmp	r2, r3
 800e4c0:	d006      	beq.n	800e4d0 <tcp_slowtmr+0x48c>
 800e4c2:	4b45      	ldr	r3, [pc, #276]	; (800e5d8 <tcp_slowtmr+0x594>)
 800e4c4:	f240 5271 	movw	r2, #1393	; 0x571
 800e4c8:	4946      	ldr	r1, [pc, #280]	; (800e5e4 <tcp_slowtmr+0x5a0>)
 800e4ca:	4845      	ldr	r0, [pc, #276]	; (800e5e0 <tcp_slowtmr+0x59c>)
 800e4cc:	f00a fb64 	bl	8018b98 <iprintf>
        tcp_active_pcbs = pcb->next;
 800e4d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4d2:	68db      	ldr	r3, [r3, #12]
 800e4d4:	4a3f      	ldr	r2, [pc, #252]	; (800e5d4 <tcp_slowtmr+0x590>)
 800e4d6:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800e4d8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d013      	beq.n	800e508 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e4e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4e2:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800e4e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4e6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e4e8:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800e4ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4ec:	3304      	adds	r3, #4
 800e4ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e4f0:	8ad2      	ldrh	r2, [r2, #22]
 800e4f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e4f4:	8b09      	ldrh	r1, [r1, #24]
 800e4f6:	9102      	str	r1, [sp, #8]
 800e4f8:	9201      	str	r2, [sp, #4]
 800e4fa:	9300      	str	r3, [sp, #0]
 800e4fc:	462b      	mov	r3, r5
 800e4fe:	4622      	mov	r2, r4
 800e500:	4601      	mov	r1, r0
 800e502:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e504:	f004 fecc 	bl	80132a0 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800e508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e50a:	691b      	ldr	r3, [r3, #16]
 800e50c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800e50e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e510:	7d1b      	ldrb	r3, [r3, #20]
 800e512:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800e514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e516:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800e518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e51a:	68db      	ldr	r3, [r3, #12]
 800e51c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800e51e:	6838      	ldr	r0, [r7, #0]
 800e520:	f7fe fec4 	bl	800d2ac <tcp_free>

      tcp_active_pcbs_changed = 0;
 800e524:	4b30      	ldr	r3, [pc, #192]	; (800e5e8 <tcp_slowtmr+0x5a4>)
 800e526:	2200      	movs	r2, #0
 800e528:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d004      	beq.n	800e53a <tcp_slowtmr+0x4f6>
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	f06f 010c 	mvn.w	r1, #12
 800e536:	68b8      	ldr	r0, [r7, #8]
 800e538:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800e53a:	4b2b      	ldr	r3, [pc, #172]	; (800e5e8 <tcp_slowtmr+0x5a4>)
 800e53c:	781b      	ldrb	r3, [r3, #0]
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d037      	beq.n	800e5b2 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800e542:	e590      	b.n	800e066 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800e544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e546:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e54a:	68db      	ldr	r3, [r3, #12]
 800e54c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800e54e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e550:	7f1b      	ldrb	r3, [r3, #28]
 800e552:	3301      	adds	r3, #1
 800e554:	b2da      	uxtb	r2, r3
 800e556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e558:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800e55a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e55c:	7f1a      	ldrb	r2, [r3, #28]
 800e55e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e560:	7f5b      	ldrb	r3, [r3, #29]
 800e562:	429a      	cmp	r2, r3
 800e564:	d325      	bcc.n	800e5b2 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800e566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e568:	2200      	movs	r2, #0
 800e56a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800e56c:	4b1e      	ldr	r3, [pc, #120]	; (800e5e8 <tcp_slowtmr+0x5a4>)
 800e56e:	2200      	movs	r2, #0
 800e570:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800e572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e574:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d00b      	beq.n	800e594 <tcp_slowtmr+0x550>
 800e57c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e57e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e582:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e584:	6912      	ldr	r2, [r2, #16]
 800e586:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e588:	4610      	mov	r0, r2
 800e58a:	4798      	blx	r3
 800e58c:	4603      	mov	r3, r0
 800e58e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800e592:	e002      	b.n	800e59a <tcp_slowtmr+0x556>
 800e594:	2300      	movs	r3, #0
 800e596:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800e59a:	4b13      	ldr	r3, [pc, #76]	; (800e5e8 <tcp_slowtmr+0x5a4>)
 800e59c:	781b      	ldrb	r3, [r3, #0]
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d000      	beq.n	800e5a4 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800e5a2:	e560      	b.n	800e066 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800e5a4:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d102      	bne.n	800e5b2 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800e5ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e5ae:	f004 f8c3 	bl	8012738 <tcp_output>
  while (pcb != NULL) {
 800e5b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	f47f ad5c 	bne.w	800e072 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800e5ba:	2300      	movs	r3, #0
 800e5bc:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800e5be:	4b0b      	ldr	r3, [pc, #44]	; (800e5ec <tcp_slowtmr+0x5a8>)
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800e5c4:	e067      	b.n	800e696 <tcp_slowtmr+0x652>
 800e5c6:	bf00      	nop
 800e5c8:	20010e70 	.word	0x20010e70
 800e5cc:	10624dd3 	.word	0x10624dd3
 800e5d0:	000124f8 	.word	0x000124f8
 800e5d4:	20010e7c 	.word	0x20010e7c
 800e5d8:	0801b8a0 	.word	0x0801b8a0
 800e5dc:	0801bcd8 	.word	0x0801bcd8
 800e5e0:	0801b8e4 	.word	0x0801b8e4
 800e5e4:	0801bd04 	.word	0x0801bd04
 800e5e8:	20010e84 	.word	0x20010e84
 800e5ec:	20010e80 	.word	0x20010e80
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e5f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5f2:	7d1b      	ldrb	r3, [r3, #20]
 800e5f4:	2b0a      	cmp	r3, #10
 800e5f6:	d006      	beq.n	800e606 <tcp_slowtmr+0x5c2>
 800e5f8:	4b2b      	ldr	r3, [pc, #172]	; (800e6a8 <tcp_slowtmr+0x664>)
 800e5fa:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800e5fe:	492b      	ldr	r1, [pc, #172]	; (800e6ac <tcp_slowtmr+0x668>)
 800e600:	482b      	ldr	r0, [pc, #172]	; (800e6b0 <tcp_slowtmr+0x66c>)
 800e602:	f00a fac9 	bl	8018b98 <iprintf>
    pcb_remove = 0;
 800e606:	2300      	movs	r3, #0
 800e608:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e60c:	4b29      	ldr	r3, [pc, #164]	; (800e6b4 <tcp_slowtmr+0x670>)
 800e60e:	681a      	ldr	r2, [r3, #0]
 800e610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e612:	6a1b      	ldr	r3, [r3, #32]
 800e614:	1ad3      	subs	r3, r2, r3
 800e616:	2bf0      	cmp	r3, #240	; 0xf0
 800e618:	d904      	bls.n	800e624 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800e61a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e61e:	3301      	adds	r3, #1
 800e620:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e624:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d02f      	beq.n	800e68c <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800e62c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e62e:	f000 fc17 	bl	800ee60 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800e632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e634:	2b00      	cmp	r3, #0
 800e636:	d010      	beq.n	800e65a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800e638:	4b1f      	ldr	r3, [pc, #124]	; (800e6b8 <tcp_slowtmr+0x674>)
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e63e:	429a      	cmp	r2, r3
 800e640:	d106      	bne.n	800e650 <tcp_slowtmr+0x60c>
 800e642:	4b19      	ldr	r3, [pc, #100]	; (800e6a8 <tcp_slowtmr+0x664>)
 800e644:	f240 52af 	movw	r2, #1455	; 0x5af
 800e648:	491c      	ldr	r1, [pc, #112]	; (800e6bc <tcp_slowtmr+0x678>)
 800e64a:	4819      	ldr	r0, [pc, #100]	; (800e6b0 <tcp_slowtmr+0x66c>)
 800e64c:	f00a faa4 	bl	8018b98 <iprintf>
        prev->next = pcb->next;
 800e650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e652:	68da      	ldr	r2, [r3, #12]
 800e654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e656:	60da      	str	r2, [r3, #12]
 800e658:	e00f      	b.n	800e67a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800e65a:	4b17      	ldr	r3, [pc, #92]	; (800e6b8 <tcp_slowtmr+0x674>)
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e660:	429a      	cmp	r2, r3
 800e662:	d006      	beq.n	800e672 <tcp_slowtmr+0x62e>
 800e664:	4b10      	ldr	r3, [pc, #64]	; (800e6a8 <tcp_slowtmr+0x664>)
 800e666:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800e66a:	4915      	ldr	r1, [pc, #84]	; (800e6c0 <tcp_slowtmr+0x67c>)
 800e66c:	4810      	ldr	r0, [pc, #64]	; (800e6b0 <tcp_slowtmr+0x66c>)
 800e66e:	f00a fa93 	bl	8018b98 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800e672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e674:	68db      	ldr	r3, [r3, #12]
 800e676:	4a10      	ldr	r2, [pc, #64]	; (800e6b8 <tcp_slowtmr+0x674>)
 800e678:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800e67a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e67c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800e67e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e680:	68db      	ldr	r3, [r3, #12]
 800e682:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800e684:	69f8      	ldr	r0, [r7, #28]
 800e686:	f7fe fe11 	bl	800d2ac <tcp_free>
 800e68a:	e004      	b.n	800e696 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800e68c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e68e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e692:	68db      	ldr	r3, [r3, #12]
 800e694:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800e696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d1a9      	bne.n	800e5f0 <tcp_slowtmr+0x5ac>
    }
  }
}
 800e69c:	bf00      	nop
 800e69e:	bf00      	nop
 800e6a0:	3730      	adds	r7, #48	; 0x30
 800e6a2:	46bd      	mov	sp, r7
 800e6a4:	bdb0      	pop	{r4, r5, r7, pc}
 800e6a6:	bf00      	nop
 800e6a8:	0801b8a0 	.word	0x0801b8a0
 800e6ac:	0801bd30 	.word	0x0801bd30
 800e6b0:	0801b8e4 	.word	0x0801b8e4
 800e6b4:	20010e70 	.word	0x20010e70
 800e6b8:	20010e80 	.word	0x20010e80
 800e6bc:	0801bd60 	.word	0x0801bd60
 800e6c0:	0801bd88 	.word	0x0801bd88

0800e6c4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800e6c4:	b580      	push	{r7, lr}
 800e6c6:	b082      	sub	sp, #8
 800e6c8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800e6ca:	4b2d      	ldr	r3, [pc, #180]	; (800e780 <tcp_fasttmr+0xbc>)
 800e6cc:	781b      	ldrb	r3, [r3, #0]
 800e6ce:	3301      	adds	r3, #1
 800e6d0:	b2da      	uxtb	r2, r3
 800e6d2:	4b2b      	ldr	r3, [pc, #172]	; (800e780 <tcp_fasttmr+0xbc>)
 800e6d4:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800e6d6:	4b2b      	ldr	r3, [pc, #172]	; (800e784 <tcp_fasttmr+0xc0>)
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e6dc:	e048      	b.n	800e770 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	7f9a      	ldrb	r2, [r3, #30]
 800e6e2:	4b27      	ldr	r3, [pc, #156]	; (800e780 <tcp_fasttmr+0xbc>)
 800e6e4:	781b      	ldrb	r3, [r3, #0]
 800e6e6:	429a      	cmp	r2, r3
 800e6e8:	d03f      	beq.n	800e76a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800e6ea:	4b25      	ldr	r3, [pc, #148]	; (800e780 <tcp_fasttmr+0xbc>)
 800e6ec:	781a      	ldrb	r2, [r3, #0]
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	8b5b      	ldrh	r3, [r3, #26]
 800e6f6:	f003 0301 	and.w	r3, r3, #1
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d010      	beq.n	800e720 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	8b5b      	ldrh	r3, [r3, #26]
 800e702:	f043 0302 	orr.w	r3, r3, #2
 800e706:	b29a      	uxth	r2, r3
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800e70c:	6878      	ldr	r0, [r7, #4]
 800e70e:	f004 f813 	bl	8012738 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	8b5b      	ldrh	r3, [r3, #26]
 800e716:	f023 0303 	bic.w	r3, r3, #3
 800e71a:	b29a      	uxth	r2, r3
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	8b5b      	ldrh	r3, [r3, #26]
 800e724:	f003 0308 	and.w	r3, r3, #8
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d009      	beq.n	800e740 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	8b5b      	ldrh	r3, [r3, #26]
 800e730:	f023 0308 	bic.w	r3, r3, #8
 800e734:	b29a      	uxth	r2, r3
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800e73a:	6878      	ldr	r0, [r7, #4]
 800e73c:	f7fe ff4a 	bl	800d5d4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	68db      	ldr	r3, [r3, #12]
 800e744:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d00a      	beq.n	800e764 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800e74e:	4b0e      	ldr	r3, [pc, #56]	; (800e788 <tcp_fasttmr+0xc4>)
 800e750:	2200      	movs	r2, #0
 800e752:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800e754:	6878      	ldr	r0, [r7, #4]
 800e756:	f000 f819 	bl	800e78c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800e75a:	4b0b      	ldr	r3, [pc, #44]	; (800e788 <tcp_fasttmr+0xc4>)
 800e75c:	781b      	ldrb	r3, [r3, #0]
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d000      	beq.n	800e764 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800e762:	e7b8      	b.n	800e6d6 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800e764:	683b      	ldr	r3, [r7, #0]
 800e766:	607b      	str	r3, [r7, #4]
 800e768:	e002      	b.n	800e770 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	68db      	ldr	r3, [r3, #12]
 800e76e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	2b00      	cmp	r3, #0
 800e774:	d1b3      	bne.n	800e6de <tcp_fasttmr+0x1a>
    }
  }
}
 800e776:	bf00      	nop
 800e778:	bf00      	nop
 800e77a:	3708      	adds	r7, #8
 800e77c:	46bd      	mov	sp, r7
 800e77e:	bd80      	pop	{r7, pc}
 800e780:	20010e86 	.word	0x20010e86
 800e784:	20010e7c 	.word	0x20010e7c
 800e788:	20010e84 	.word	0x20010e84

0800e78c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800e78c:	b590      	push	{r4, r7, lr}
 800e78e:	b085      	sub	sp, #20
 800e790:	af00      	add	r7, sp, #0
 800e792:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	2b00      	cmp	r3, #0
 800e798:	d109      	bne.n	800e7ae <tcp_process_refused_data+0x22>
 800e79a:	4b37      	ldr	r3, [pc, #220]	; (800e878 <tcp_process_refused_data+0xec>)
 800e79c:	f240 6209 	movw	r2, #1545	; 0x609
 800e7a0:	4936      	ldr	r1, [pc, #216]	; (800e87c <tcp_process_refused_data+0xf0>)
 800e7a2:	4837      	ldr	r0, [pc, #220]	; (800e880 <tcp_process_refused_data+0xf4>)
 800e7a4:	f00a f9f8 	bl	8018b98 <iprintf>
 800e7a8:	f06f 030f 	mvn.w	r3, #15
 800e7ac:	e060      	b.n	800e870 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e7b2:	7b5b      	ldrb	r3, [r3, #13]
 800e7b4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e7ba:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	2200      	movs	r2, #0
 800e7c0:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d00b      	beq.n	800e7e4 <tcp_process_refused_data+0x58>
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	6918      	ldr	r0, [r3, #16]
 800e7d6:	2300      	movs	r3, #0
 800e7d8:	68ba      	ldr	r2, [r7, #8]
 800e7da:	6879      	ldr	r1, [r7, #4]
 800e7dc:	47a0      	blx	r4
 800e7de:	4603      	mov	r3, r0
 800e7e0:	73fb      	strb	r3, [r7, #15]
 800e7e2:	e007      	b.n	800e7f4 <tcp_process_refused_data+0x68>
 800e7e4:	2300      	movs	r3, #0
 800e7e6:	68ba      	ldr	r2, [r7, #8]
 800e7e8:	6879      	ldr	r1, [r7, #4]
 800e7ea:	2000      	movs	r0, #0
 800e7ec:	f000 f8c2 	bl	800e974 <tcp_recv_null>
 800e7f0:	4603      	mov	r3, r0
 800e7f2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800e7f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d12a      	bne.n	800e852 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800e7fc:	7bbb      	ldrb	r3, [r7, #14]
 800e7fe:	f003 0320 	and.w	r3, r3, #32
 800e802:	2b00      	cmp	r3, #0
 800e804:	d033      	beq.n	800e86e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e80a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e80e:	d005      	beq.n	800e81c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e814:	3301      	adds	r3, #1
 800e816:	b29a      	uxth	r2, r3
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e822:	2b00      	cmp	r3, #0
 800e824:	d00b      	beq.n	800e83e <tcp_process_refused_data+0xb2>
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	6918      	ldr	r0, [r3, #16]
 800e830:	2300      	movs	r3, #0
 800e832:	2200      	movs	r2, #0
 800e834:	6879      	ldr	r1, [r7, #4]
 800e836:	47a0      	blx	r4
 800e838:	4603      	mov	r3, r0
 800e83a:	73fb      	strb	r3, [r7, #15]
 800e83c:	e001      	b.n	800e842 <tcp_process_refused_data+0xb6>
 800e83e:	2300      	movs	r3, #0
 800e840:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800e842:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e846:	f113 0f0d 	cmn.w	r3, #13
 800e84a:	d110      	bne.n	800e86e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800e84c:	f06f 030c 	mvn.w	r3, #12
 800e850:	e00e      	b.n	800e870 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800e852:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e856:	f113 0f0d 	cmn.w	r3, #13
 800e85a:	d102      	bne.n	800e862 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800e85c:	f06f 030c 	mvn.w	r3, #12
 800e860:	e006      	b.n	800e870 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	68ba      	ldr	r2, [r7, #8]
 800e866:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800e868:	f06f 0304 	mvn.w	r3, #4
 800e86c:	e000      	b.n	800e870 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800e86e:	2300      	movs	r3, #0
}
 800e870:	4618      	mov	r0, r3
 800e872:	3714      	adds	r7, #20
 800e874:	46bd      	mov	sp, r7
 800e876:	bd90      	pop	{r4, r7, pc}
 800e878:	0801b8a0 	.word	0x0801b8a0
 800e87c:	0801bdb0 	.word	0x0801bdb0
 800e880:	0801b8e4 	.word	0x0801b8e4

0800e884 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800e884:	b580      	push	{r7, lr}
 800e886:	b084      	sub	sp, #16
 800e888:	af00      	add	r7, sp, #0
 800e88a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800e88c:	e007      	b.n	800e89e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800e894:	6878      	ldr	r0, [r7, #4]
 800e896:	f000 f80a 	bl	800e8ae <tcp_seg_free>
    seg = next;
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d1f4      	bne.n	800e88e <tcp_segs_free+0xa>
  }
}
 800e8a4:	bf00      	nop
 800e8a6:	bf00      	nop
 800e8a8:	3710      	adds	r7, #16
 800e8aa:	46bd      	mov	sp, r7
 800e8ac:	bd80      	pop	{r7, pc}

0800e8ae <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800e8ae:	b580      	push	{r7, lr}
 800e8b0:	b082      	sub	sp, #8
 800e8b2:	af00      	add	r7, sp, #0
 800e8b4:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d00c      	beq.n	800e8d6 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	685b      	ldr	r3, [r3, #4]
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d004      	beq.n	800e8ce <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	685b      	ldr	r3, [r3, #4]
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	f7fe fa33 	bl	800cd34 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800e8ce:	6879      	ldr	r1, [r7, #4]
 800e8d0:	2003      	movs	r0, #3
 800e8d2:	f7fd fb7f 	bl	800bfd4 <memp_free>
  }
}
 800e8d6:	bf00      	nop
 800e8d8:	3708      	adds	r7, #8
 800e8da:	46bd      	mov	sp, r7
 800e8dc:	bd80      	pop	{r7, pc}
	...

0800e8e0 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800e8e0:	b580      	push	{r7, lr}
 800e8e2:	b082      	sub	sp, #8
 800e8e4:	af00      	add	r7, sp, #0
 800e8e6:	6078      	str	r0, [r7, #4]
 800e8e8:	460b      	mov	r3, r1
 800e8ea:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d107      	bne.n	800e902 <tcp_setprio+0x22>
 800e8f2:	4b07      	ldr	r3, [pc, #28]	; (800e910 <tcp_setprio+0x30>)
 800e8f4:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 800e8f8:	4906      	ldr	r1, [pc, #24]	; (800e914 <tcp_setprio+0x34>)
 800e8fa:	4807      	ldr	r0, [pc, #28]	; (800e918 <tcp_setprio+0x38>)
 800e8fc:	f00a f94c 	bl	8018b98 <iprintf>
 800e900:	e002      	b.n	800e908 <tcp_setprio+0x28>

  pcb->prio = prio;
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	78fa      	ldrb	r2, [r7, #3]
 800e906:	755a      	strb	r2, [r3, #21]
}
 800e908:	3708      	adds	r7, #8
 800e90a:	46bd      	mov	sp, r7
 800e90c:	bd80      	pop	{r7, pc}
 800e90e:	bf00      	nop
 800e910:	0801b8a0 	.word	0x0801b8a0
 800e914:	0801bdd8 	.word	0x0801bdd8
 800e918:	0801b8e4 	.word	0x0801b8e4

0800e91c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800e91c:	b580      	push	{r7, lr}
 800e91e:	b084      	sub	sp, #16
 800e920:	af00      	add	r7, sp, #0
 800e922:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	2b00      	cmp	r3, #0
 800e928:	d106      	bne.n	800e938 <tcp_seg_copy+0x1c>
 800e92a:	4b0f      	ldr	r3, [pc, #60]	; (800e968 <tcp_seg_copy+0x4c>)
 800e92c:	f240 6282 	movw	r2, #1666	; 0x682
 800e930:	490e      	ldr	r1, [pc, #56]	; (800e96c <tcp_seg_copy+0x50>)
 800e932:	480f      	ldr	r0, [pc, #60]	; (800e970 <tcp_seg_copy+0x54>)
 800e934:	f00a f930 	bl	8018b98 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800e938:	2003      	movs	r0, #3
 800e93a:	f7fd fad5 	bl	800bee8 <memp_malloc>
 800e93e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	2b00      	cmp	r3, #0
 800e944:	d101      	bne.n	800e94a <tcp_seg_copy+0x2e>
    return NULL;
 800e946:	2300      	movs	r3, #0
 800e948:	e00a      	b.n	800e960 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800e94a:	2210      	movs	r2, #16
 800e94c:	6879      	ldr	r1, [r7, #4]
 800e94e:	68f8      	ldr	r0, [r7, #12]
 800e950:	f00a fb22 	bl	8018f98 <memcpy>
  pbuf_ref(cseg->p);
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	685b      	ldr	r3, [r3, #4]
 800e958:	4618      	mov	r0, r3
 800e95a:	f7fe fa91 	bl	800ce80 <pbuf_ref>
  return cseg;
 800e95e:	68fb      	ldr	r3, [r7, #12]
}
 800e960:	4618      	mov	r0, r3
 800e962:	3710      	adds	r7, #16
 800e964:	46bd      	mov	sp, r7
 800e966:	bd80      	pop	{r7, pc}
 800e968:	0801b8a0 	.word	0x0801b8a0
 800e96c:	0801bdf4 	.word	0x0801bdf4
 800e970:	0801b8e4 	.word	0x0801b8e4

0800e974 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800e974:	b580      	push	{r7, lr}
 800e976:	b084      	sub	sp, #16
 800e978:	af00      	add	r7, sp, #0
 800e97a:	60f8      	str	r0, [r7, #12]
 800e97c:	60b9      	str	r1, [r7, #8]
 800e97e:	607a      	str	r2, [r7, #4]
 800e980:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800e982:	68bb      	ldr	r3, [r7, #8]
 800e984:	2b00      	cmp	r3, #0
 800e986:	d109      	bne.n	800e99c <tcp_recv_null+0x28>
 800e988:	4b12      	ldr	r3, [pc, #72]	; (800e9d4 <tcp_recv_null+0x60>)
 800e98a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800e98e:	4912      	ldr	r1, [pc, #72]	; (800e9d8 <tcp_recv_null+0x64>)
 800e990:	4812      	ldr	r0, [pc, #72]	; (800e9dc <tcp_recv_null+0x68>)
 800e992:	f00a f901 	bl	8018b98 <iprintf>
 800e996:	f06f 030f 	mvn.w	r3, #15
 800e99a:	e016      	b.n	800e9ca <tcp_recv_null+0x56>

  if (p != NULL) {
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d009      	beq.n	800e9b6 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	891b      	ldrh	r3, [r3, #8]
 800e9a6:	4619      	mov	r1, r3
 800e9a8:	68b8      	ldr	r0, [r7, #8]
 800e9aa:	f7ff f99d 	bl	800dce8 <tcp_recved>
    pbuf_free(p);
 800e9ae:	6878      	ldr	r0, [r7, #4]
 800e9b0:	f7fe f9c0 	bl	800cd34 <pbuf_free>
 800e9b4:	e008      	b.n	800e9c8 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800e9b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d104      	bne.n	800e9c8 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800e9be:	68b8      	ldr	r0, [r7, #8]
 800e9c0:	f7fe fe72 	bl	800d6a8 <tcp_close>
 800e9c4:	4603      	mov	r3, r0
 800e9c6:	e000      	b.n	800e9ca <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800e9c8:	2300      	movs	r3, #0
}
 800e9ca:	4618      	mov	r0, r3
 800e9cc:	3710      	adds	r7, #16
 800e9ce:	46bd      	mov	sp, r7
 800e9d0:	bd80      	pop	{r7, pc}
 800e9d2:	bf00      	nop
 800e9d4:	0801b8a0 	.word	0x0801b8a0
 800e9d8:	0801be10 	.word	0x0801be10
 800e9dc:	0801b8e4 	.word	0x0801b8e4

0800e9e0 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800e9e0:	b580      	push	{r7, lr}
 800e9e2:	b086      	sub	sp, #24
 800e9e4:	af00      	add	r7, sp, #0
 800e9e6:	4603      	mov	r3, r0
 800e9e8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800e9ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	db01      	blt.n	800e9f6 <tcp_kill_prio+0x16>
 800e9f2:	79fb      	ldrb	r3, [r7, #7]
 800e9f4:	e000      	b.n	800e9f8 <tcp_kill_prio+0x18>
 800e9f6:	237f      	movs	r3, #127	; 0x7f
 800e9f8:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800e9fa:	7afb      	ldrb	r3, [r7, #11]
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d034      	beq.n	800ea6a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800ea00:	7afb      	ldrb	r3, [r7, #11]
 800ea02:	3b01      	subs	r3, #1
 800ea04:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800ea06:	2300      	movs	r3, #0
 800ea08:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ea0a:	2300      	movs	r3, #0
 800ea0c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ea0e:	4b19      	ldr	r3, [pc, #100]	; (800ea74 <tcp_kill_prio+0x94>)
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	617b      	str	r3, [r7, #20]
 800ea14:	e01f      	b.n	800ea56 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800ea16:	697b      	ldr	r3, [r7, #20]
 800ea18:	7d5b      	ldrb	r3, [r3, #21]
 800ea1a:	7afa      	ldrb	r2, [r7, #11]
 800ea1c:	429a      	cmp	r2, r3
 800ea1e:	d80c      	bhi.n	800ea3a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ea20:	697b      	ldr	r3, [r7, #20]
 800ea22:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800ea24:	7afa      	ldrb	r2, [r7, #11]
 800ea26:	429a      	cmp	r2, r3
 800ea28:	d112      	bne.n	800ea50 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ea2a:	4b13      	ldr	r3, [pc, #76]	; (800ea78 <tcp_kill_prio+0x98>)
 800ea2c:	681a      	ldr	r2, [r3, #0]
 800ea2e:	697b      	ldr	r3, [r7, #20]
 800ea30:	6a1b      	ldr	r3, [r3, #32]
 800ea32:	1ad3      	subs	r3, r2, r3
 800ea34:	68fa      	ldr	r2, [r7, #12]
 800ea36:	429a      	cmp	r2, r3
 800ea38:	d80a      	bhi.n	800ea50 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800ea3a:	4b0f      	ldr	r3, [pc, #60]	; (800ea78 <tcp_kill_prio+0x98>)
 800ea3c:	681a      	ldr	r2, [r3, #0]
 800ea3e:	697b      	ldr	r3, [r7, #20]
 800ea40:	6a1b      	ldr	r3, [r3, #32]
 800ea42:	1ad3      	subs	r3, r2, r3
 800ea44:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800ea46:	697b      	ldr	r3, [r7, #20]
 800ea48:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800ea4a:	697b      	ldr	r3, [r7, #20]
 800ea4c:	7d5b      	ldrb	r3, [r3, #21]
 800ea4e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ea50:	697b      	ldr	r3, [r7, #20]
 800ea52:	68db      	ldr	r3, [r3, #12]
 800ea54:	617b      	str	r3, [r7, #20]
 800ea56:	697b      	ldr	r3, [r7, #20]
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d1dc      	bne.n	800ea16 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800ea5c:	693b      	ldr	r3, [r7, #16]
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d004      	beq.n	800ea6c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ea62:	6938      	ldr	r0, [r7, #16]
 800ea64:	f7fe ff66 	bl	800d934 <tcp_abort>
 800ea68:	e000      	b.n	800ea6c <tcp_kill_prio+0x8c>
    return;
 800ea6a:	bf00      	nop
  }
}
 800ea6c:	3718      	adds	r7, #24
 800ea6e:	46bd      	mov	sp, r7
 800ea70:	bd80      	pop	{r7, pc}
 800ea72:	bf00      	nop
 800ea74:	20010e7c 	.word	0x20010e7c
 800ea78:	20010e70 	.word	0x20010e70

0800ea7c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800ea7c:	b580      	push	{r7, lr}
 800ea7e:	b086      	sub	sp, #24
 800ea80:	af00      	add	r7, sp, #0
 800ea82:	4603      	mov	r3, r0
 800ea84:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800ea86:	79fb      	ldrb	r3, [r7, #7]
 800ea88:	2b08      	cmp	r3, #8
 800ea8a:	d009      	beq.n	800eaa0 <tcp_kill_state+0x24>
 800ea8c:	79fb      	ldrb	r3, [r7, #7]
 800ea8e:	2b09      	cmp	r3, #9
 800ea90:	d006      	beq.n	800eaa0 <tcp_kill_state+0x24>
 800ea92:	4b1a      	ldr	r3, [pc, #104]	; (800eafc <tcp_kill_state+0x80>)
 800ea94:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800ea98:	4919      	ldr	r1, [pc, #100]	; (800eb00 <tcp_kill_state+0x84>)
 800ea9a:	481a      	ldr	r0, [pc, #104]	; (800eb04 <tcp_kill_state+0x88>)
 800ea9c:	f00a f87c 	bl	8018b98 <iprintf>

  inactivity = 0;
 800eaa0:	2300      	movs	r3, #0
 800eaa2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800eaa4:	2300      	movs	r3, #0
 800eaa6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800eaa8:	4b17      	ldr	r3, [pc, #92]	; (800eb08 <tcp_kill_state+0x8c>)
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	617b      	str	r3, [r7, #20]
 800eaae:	e017      	b.n	800eae0 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800eab0:	697b      	ldr	r3, [r7, #20]
 800eab2:	7d1b      	ldrb	r3, [r3, #20]
 800eab4:	79fa      	ldrb	r2, [r7, #7]
 800eab6:	429a      	cmp	r2, r3
 800eab8:	d10f      	bne.n	800eada <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800eaba:	4b14      	ldr	r3, [pc, #80]	; (800eb0c <tcp_kill_state+0x90>)
 800eabc:	681a      	ldr	r2, [r3, #0]
 800eabe:	697b      	ldr	r3, [r7, #20]
 800eac0:	6a1b      	ldr	r3, [r3, #32]
 800eac2:	1ad3      	subs	r3, r2, r3
 800eac4:	68fa      	ldr	r2, [r7, #12]
 800eac6:	429a      	cmp	r2, r3
 800eac8:	d807      	bhi.n	800eada <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800eaca:	4b10      	ldr	r3, [pc, #64]	; (800eb0c <tcp_kill_state+0x90>)
 800eacc:	681a      	ldr	r2, [r3, #0]
 800eace:	697b      	ldr	r3, [r7, #20]
 800ead0:	6a1b      	ldr	r3, [r3, #32]
 800ead2:	1ad3      	subs	r3, r2, r3
 800ead4:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800ead6:	697b      	ldr	r3, [r7, #20]
 800ead8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800eada:	697b      	ldr	r3, [r7, #20]
 800eadc:	68db      	ldr	r3, [r3, #12]
 800eade:	617b      	str	r3, [r7, #20]
 800eae0:	697b      	ldr	r3, [r7, #20]
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d1e4      	bne.n	800eab0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800eae6:	693b      	ldr	r3, [r7, #16]
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d003      	beq.n	800eaf4 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800eaec:	2100      	movs	r1, #0
 800eaee:	6938      	ldr	r0, [r7, #16]
 800eaf0:	f7fe fe62 	bl	800d7b8 <tcp_abandon>
  }
}
 800eaf4:	bf00      	nop
 800eaf6:	3718      	adds	r7, #24
 800eaf8:	46bd      	mov	sp, r7
 800eafa:	bd80      	pop	{r7, pc}
 800eafc:	0801b8a0 	.word	0x0801b8a0
 800eb00:	0801be2c 	.word	0x0801be2c
 800eb04:	0801b8e4 	.word	0x0801b8e4
 800eb08:	20010e7c 	.word	0x20010e7c
 800eb0c:	20010e70 	.word	0x20010e70

0800eb10 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800eb10:	b580      	push	{r7, lr}
 800eb12:	b084      	sub	sp, #16
 800eb14:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800eb16:	2300      	movs	r3, #0
 800eb18:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800eb1a:	2300      	movs	r3, #0
 800eb1c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800eb1e:	4b12      	ldr	r3, [pc, #72]	; (800eb68 <tcp_kill_timewait+0x58>)
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	60fb      	str	r3, [r7, #12]
 800eb24:	e012      	b.n	800eb4c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800eb26:	4b11      	ldr	r3, [pc, #68]	; (800eb6c <tcp_kill_timewait+0x5c>)
 800eb28:	681a      	ldr	r2, [r3, #0]
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	6a1b      	ldr	r3, [r3, #32]
 800eb2e:	1ad3      	subs	r3, r2, r3
 800eb30:	687a      	ldr	r2, [r7, #4]
 800eb32:	429a      	cmp	r2, r3
 800eb34:	d807      	bhi.n	800eb46 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800eb36:	4b0d      	ldr	r3, [pc, #52]	; (800eb6c <tcp_kill_timewait+0x5c>)
 800eb38:	681a      	ldr	r2, [r3, #0]
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	6a1b      	ldr	r3, [r3, #32]
 800eb3e:	1ad3      	subs	r3, r2, r3
 800eb40:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	68db      	ldr	r3, [r3, #12]
 800eb4a:	60fb      	str	r3, [r7, #12]
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d1e9      	bne.n	800eb26 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800eb52:	68bb      	ldr	r3, [r7, #8]
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d002      	beq.n	800eb5e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800eb58:	68b8      	ldr	r0, [r7, #8]
 800eb5a:	f7fe feeb 	bl	800d934 <tcp_abort>
  }
}
 800eb5e:	bf00      	nop
 800eb60:	3710      	adds	r7, #16
 800eb62:	46bd      	mov	sp, r7
 800eb64:	bd80      	pop	{r7, pc}
 800eb66:	bf00      	nop
 800eb68:	20010e80 	.word	0x20010e80
 800eb6c:	20010e70 	.word	0x20010e70

0800eb70 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800eb70:	b580      	push	{r7, lr}
 800eb72:	b082      	sub	sp, #8
 800eb74:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800eb76:	4b10      	ldr	r3, [pc, #64]	; (800ebb8 <tcp_handle_closepend+0x48>)
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800eb7c:	e014      	b.n	800eba8 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	68db      	ldr	r3, [r3, #12]
 800eb82:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	8b5b      	ldrh	r3, [r3, #26]
 800eb88:	f003 0308 	and.w	r3, r3, #8
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d009      	beq.n	800eba4 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	8b5b      	ldrh	r3, [r3, #26]
 800eb94:	f023 0308 	bic.w	r3, r3, #8
 800eb98:	b29a      	uxth	r2, r3
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800eb9e:	6878      	ldr	r0, [r7, #4]
 800eba0:	f7fe fd18 	bl	800d5d4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800eba4:	683b      	ldr	r3, [r7, #0]
 800eba6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d1e7      	bne.n	800eb7e <tcp_handle_closepend+0xe>
  }
}
 800ebae:	bf00      	nop
 800ebb0:	bf00      	nop
 800ebb2:	3708      	adds	r7, #8
 800ebb4:	46bd      	mov	sp, r7
 800ebb6:	bd80      	pop	{r7, pc}
 800ebb8:	20010e7c 	.word	0x20010e7c

0800ebbc <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800ebbc:	b580      	push	{r7, lr}
 800ebbe:	b084      	sub	sp, #16
 800ebc0:	af00      	add	r7, sp, #0
 800ebc2:	4603      	mov	r3, r0
 800ebc4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ebc6:	2001      	movs	r0, #1
 800ebc8:	f7fd f98e 	bl	800bee8 <memp_malloc>
 800ebcc:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d126      	bne.n	800ec22 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800ebd4:	f7ff ffcc 	bl	800eb70 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800ebd8:	f7ff ff9a 	bl	800eb10 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ebdc:	2001      	movs	r0, #1
 800ebde:	f7fd f983 	bl	800bee8 <memp_malloc>
 800ebe2:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d11b      	bne.n	800ec22 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800ebea:	2009      	movs	r0, #9
 800ebec:	f7ff ff46 	bl	800ea7c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ebf0:	2001      	movs	r0, #1
 800ebf2:	f7fd f979 	bl	800bee8 <memp_malloc>
 800ebf6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d111      	bne.n	800ec22 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800ebfe:	2008      	movs	r0, #8
 800ec00:	f7ff ff3c 	bl	800ea7c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ec04:	2001      	movs	r0, #1
 800ec06:	f7fd f96f 	bl	800bee8 <memp_malloc>
 800ec0a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d107      	bne.n	800ec22 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800ec12:	79fb      	ldrb	r3, [r7, #7]
 800ec14:	4618      	mov	r0, r3
 800ec16:	f7ff fee3 	bl	800e9e0 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ec1a:	2001      	movs	r0, #1
 800ec1c:	f7fd f964 	bl	800bee8 <memp_malloc>
 800ec20:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d03f      	beq.n	800eca8 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800ec28:	229c      	movs	r2, #156	; 0x9c
 800ec2a:	2100      	movs	r1, #0
 800ec2c:	68f8      	ldr	r0, [r7, #12]
 800ec2e:	f00a f852 	bl	8018cd6 <memset>
    pcb->prio = prio;
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	79fa      	ldrb	r2, [r7, #7]
 800ec36:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800ec3e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ec48:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	22ff      	movs	r2, #255	; 0xff
 800ec56:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	f44f 7206 	mov.w	r2, #536	; 0x218
 800ec5e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	2206      	movs	r2, #6
 800ec64:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	2206      	movs	r2, #6
 800ec6c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ec74:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	2201      	movs	r2, #1
 800ec7a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800ec7e:	4b0d      	ldr	r3, [pc, #52]	; (800ecb4 <tcp_alloc+0xf8>)
 800ec80:	681a      	ldr	r2, [r3, #0]
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800ec86:	4b0c      	ldr	r3, [pc, #48]	; (800ecb8 <tcp_alloc+0xfc>)
 800ec88:	781a      	ldrb	r2, [r3, #0]
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800ec94:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	4a08      	ldr	r2, [pc, #32]	; (800ecbc <tcp_alloc+0x100>)
 800ec9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	4a07      	ldr	r2, [pc, #28]	; (800ecc0 <tcp_alloc+0x104>)
 800eca4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800eca8:	68fb      	ldr	r3, [r7, #12]
}
 800ecaa:	4618      	mov	r0, r3
 800ecac:	3710      	adds	r7, #16
 800ecae:	46bd      	mov	sp, r7
 800ecb0:	bd80      	pop	{r7, pc}
 800ecb2:	bf00      	nop
 800ecb4:	20010e70 	.word	0x20010e70
 800ecb8:	20010e86 	.word	0x20010e86
 800ecbc:	0800e975 	.word	0x0800e975
 800ecc0:	006ddd00 	.word	0x006ddd00

0800ecc4 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800ecc4:	b580      	push	{r7, lr}
 800ecc6:	b084      	sub	sp, #16
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	4603      	mov	r3, r0
 800eccc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800ecce:	2040      	movs	r0, #64	; 0x40
 800ecd0:	f7ff ff74 	bl	800ebbc <tcp_alloc>
 800ecd4:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800ecd6:	68fb      	ldr	r3, [r7, #12]
}
 800ecd8:	4618      	mov	r0, r3
 800ecda:	3710      	adds	r7, #16
 800ecdc:	46bd      	mov	sp, r7
 800ecde:	bd80      	pop	{r7, pc}

0800ece0 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800ece0:	b480      	push	{r7}
 800ece2:	b083      	sub	sp, #12
 800ece4:	af00      	add	r7, sp, #0
 800ece6:	6078      	str	r0, [r7, #4]
 800ece8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d002      	beq.n	800ecf6 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	683a      	ldr	r2, [r7, #0]
 800ecf4:	611a      	str	r2, [r3, #16]
  }
}
 800ecf6:	bf00      	nop
 800ecf8:	370c      	adds	r7, #12
 800ecfa:	46bd      	mov	sp, r7
 800ecfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed00:	4770      	bx	lr
	...

0800ed04 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800ed04:	b580      	push	{r7, lr}
 800ed06:	b082      	sub	sp, #8
 800ed08:	af00      	add	r7, sp, #0
 800ed0a:	6078      	str	r0, [r7, #4]
 800ed0c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d00e      	beq.n	800ed32 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	7d1b      	ldrb	r3, [r3, #20]
 800ed18:	2b01      	cmp	r3, #1
 800ed1a:	d106      	bne.n	800ed2a <tcp_recv+0x26>
 800ed1c:	4b07      	ldr	r3, [pc, #28]	; (800ed3c <tcp_recv+0x38>)
 800ed1e:	f240 72df 	movw	r2, #2015	; 0x7df
 800ed22:	4907      	ldr	r1, [pc, #28]	; (800ed40 <tcp_recv+0x3c>)
 800ed24:	4807      	ldr	r0, [pc, #28]	; (800ed44 <tcp_recv+0x40>)
 800ed26:	f009 ff37 	bl	8018b98 <iprintf>
    pcb->recv = recv;
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	683a      	ldr	r2, [r7, #0]
 800ed2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800ed32:	bf00      	nop
 800ed34:	3708      	adds	r7, #8
 800ed36:	46bd      	mov	sp, r7
 800ed38:	bd80      	pop	{r7, pc}
 800ed3a:	bf00      	nop
 800ed3c:	0801b8a0 	.word	0x0801b8a0
 800ed40:	0801be3c 	.word	0x0801be3c
 800ed44:	0801b8e4 	.word	0x0801b8e4

0800ed48 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800ed48:	b580      	push	{r7, lr}
 800ed4a:	b082      	sub	sp, #8
 800ed4c:	af00      	add	r7, sp, #0
 800ed4e:	6078      	str	r0, [r7, #4]
 800ed50:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d00e      	beq.n	800ed76 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	7d1b      	ldrb	r3, [r3, #20]
 800ed5c:	2b01      	cmp	r3, #1
 800ed5e:	d106      	bne.n	800ed6e <tcp_sent+0x26>
 800ed60:	4b07      	ldr	r3, [pc, #28]	; (800ed80 <tcp_sent+0x38>)
 800ed62:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800ed66:	4907      	ldr	r1, [pc, #28]	; (800ed84 <tcp_sent+0x3c>)
 800ed68:	4807      	ldr	r0, [pc, #28]	; (800ed88 <tcp_sent+0x40>)
 800ed6a:	f009 ff15 	bl	8018b98 <iprintf>
    pcb->sent = sent;
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	683a      	ldr	r2, [r7, #0]
 800ed72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800ed76:	bf00      	nop
 800ed78:	3708      	adds	r7, #8
 800ed7a:	46bd      	mov	sp, r7
 800ed7c:	bd80      	pop	{r7, pc}
 800ed7e:	bf00      	nop
 800ed80:	0801b8a0 	.word	0x0801b8a0
 800ed84:	0801be64 	.word	0x0801be64
 800ed88:	0801b8e4 	.word	0x0801b8e4

0800ed8c <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800ed8c:	b580      	push	{r7, lr}
 800ed8e:	b082      	sub	sp, #8
 800ed90:	af00      	add	r7, sp, #0
 800ed92:	6078      	str	r0, [r7, #4]
 800ed94:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d00e      	beq.n	800edba <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	7d1b      	ldrb	r3, [r3, #20]
 800eda0:	2b01      	cmp	r3, #1
 800eda2:	d106      	bne.n	800edb2 <tcp_err+0x26>
 800eda4:	4b07      	ldr	r3, [pc, #28]	; (800edc4 <tcp_err+0x38>)
 800eda6:	f640 020d 	movw	r2, #2061	; 0x80d
 800edaa:	4907      	ldr	r1, [pc, #28]	; (800edc8 <tcp_err+0x3c>)
 800edac:	4807      	ldr	r0, [pc, #28]	; (800edcc <tcp_err+0x40>)
 800edae:	f009 fef3 	bl	8018b98 <iprintf>
    pcb->errf = err;
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	683a      	ldr	r2, [r7, #0]
 800edb6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800edba:	bf00      	nop
 800edbc:	3708      	adds	r7, #8
 800edbe:	46bd      	mov	sp, r7
 800edc0:	bd80      	pop	{r7, pc}
 800edc2:	bf00      	nop
 800edc4:	0801b8a0 	.word	0x0801b8a0
 800edc8:	0801be8c 	.word	0x0801be8c
 800edcc:	0801b8e4 	.word	0x0801b8e4

0800edd0 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800edd0:	b480      	push	{r7}
 800edd2:	b085      	sub	sp, #20
 800edd4:	af00      	add	r7, sp, #0
 800edd6:	6078      	str	r0, [r7, #4]
 800edd8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d008      	beq.n	800edf2 <tcp_accept+0x22>
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	7d1b      	ldrb	r3, [r3, #20]
 800ede4:	2b01      	cmp	r3, #1
 800ede6:	d104      	bne.n	800edf2 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	683a      	ldr	r2, [r7, #0]
 800edf0:	619a      	str	r2, [r3, #24]
  }
}
 800edf2:	bf00      	nop
 800edf4:	3714      	adds	r7, #20
 800edf6:	46bd      	mov	sp, r7
 800edf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edfc:	4770      	bx	lr
	...

0800ee00 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800ee00:	b580      	push	{r7, lr}
 800ee02:	b084      	sub	sp, #16
 800ee04:	af00      	add	r7, sp, #0
 800ee06:	60f8      	str	r0, [r7, #12]
 800ee08:	60b9      	str	r1, [r7, #8]
 800ee0a:	4613      	mov	r3, r2
 800ee0c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d107      	bne.n	800ee24 <tcp_poll+0x24>
 800ee14:	4b0e      	ldr	r3, [pc, #56]	; (800ee50 <tcp_poll+0x50>)
 800ee16:	f640 023d 	movw	r2, #2109	; 0x83d
 800ee1a:	490e      	ldr	r1, [pc, #56]	; (800ee54 <tcp_poll+0x54>)
 800ee1c:	480e      	ldr	r0, [pc, #56]	; (800ee58 <tcp_poll+0x58>)
 800ee1e:	f009 febb 	bl	8018b98 <iprintf>
 800ee22:	e011      	b.n	800ee48 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	7d1b      	ldrb	r3, [r3, #20]
 800ee28:	2b01      	cmp	r3, #1
 800ee2a:	d106      	bne.n	800ee3a <tcp_poll+0x3a>
 800ee2c:	4b08      	ldr	r3, [pc, #32]	; (800ee50 <tcp_poll+0x50>)
 800ee2e:	f640 023e 	movw	r2, #2110	; 0x83e
 800ee32:	490a      	ldr	r1, [pc, #40]	; (800ee5c <tcp_poll+0x5c>)
 800ee34:	4808      	ldr	r0, [pc, #32]	; (800ee58 <tcp_poll+0x58>)
 800ee36:	f009 feaf 	bl	8018b98 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	68ba      	ldr	r2, [r7, #8]
 800ee3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	79fa      	ldrb	r2, [r7, #7]
 800ee46:	775a      	strb	r2, [r3, #29]
}
 800ee48:	3710      	adds	r7, #16
 800ee4a:	46bd      	mov	sp, r7
 800ee4c:	bd80      	pop	{r7, pc}
 800ee4e:	bf00      	nop
 800ee50:	0801b8a0 	.word	0x0801b8a0
 800ee54:	0801beb4 	.word	0x0801beb4
 800ee58:	0801b8e4 	.word	0x0801b8e4
 800ee5c:	0801becc 	.word	0x0801becc

0800ee60 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800ee60:	b580      	push	{r7, lr}
 800ee62:	b082      	sub	sp, #8
 800ee64:	af00      	add	r7, sp, #0
 800ee66:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d107      	bne.n	800ee7e <tcp_pcb_purge+0x1e>
 800ee6e:	4b21      	ldr	r3, [pc, #132]	; (800eef4 <tcp_pcb_purge+0x94>)
 800ee70:	f640 0251 	movw	r2, #2129	; 0x851
 800ee74:	4920      	ldr	r1, [pc, #128]	; (800eef8 <tcp_pcb_purge+0x98>)
 800ee76:	4821      	ldr	r0, [pc, #132]	; (800eefc <tcp_pcb_purge+0x9c>)
 800ee78:	f009 fe8e 	bl	8018b98 <iprintf>
 800ee7c:	e037      	b.n	800eeee <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	7d1b      	ldrb	r3, [r3, #20]
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d033      	beq.n	800eeee <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800ee8a:	2b0a      	cmp	r3, #10
 800ee8c:	d02f      	beq.n	800eeee <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800ee92:	2b01      	cmp	r3, #1
 800ee94:	d02b      	beq.n	800eeee <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d007      	beq.n	800eeae <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eea2:	4618      	mov	r0, r3
 800eea4:	f7fd ff46 	bl	800cd34 <pbuf_free>
      pcb->refused_data = NULL;
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	2200      	movs	r2, #0
 800eeac:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d002      	beq.n	800eebc <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800eeb6:	6878      	ldr	r0, [r7, #4]
 800eeb8:	f000 f986 	bl	800f1c8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eec2:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eec8:	4618      	mov	r0, r3
 800eeca:	f7ff fcdb 	bl	800e884 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eed2:	4618      	mov	r0, r3
 800eed4:	f7ff fcd6 	bl	800e884 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	2200      	movs	r2, #0
 800eedc:	66da      	str	r2, [r3, #108]	; 0x6c
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	2200      	movs	r2, #0
 800eeea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800eeee:	3708      	adds	r7, #8
 800eef0:	46bd      	mov	sp, r7
 800eef2:	bd80      	pop	{r7, pc}
 800eef4:	0801b8a0 	.word	0x0801b8a0
 800eef8:	0801beec 	.word	0x0801beec
 800eefc:	0801b8e4 	.word	0x0801b8e4

0800ef00 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800ef00:	b580      	push	{r7, lr}
 800ef02:	b084      	sub	sp, #16
 800ef04:	af00      	add	r7, sp, #0
 800ef06:	6078      	str	r0, [r7, #4]
 800ef08:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800ef0a:	683b      	ldr	r3, [r7, #0]
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d106      	bne.n	800ef1e <tcp_pcb_remove+0x1e>
 800ef10:	4b3e      	ldr	r3, [pc, #248]	; (800f00c <tcp_pcb_remove+0x10c>)
 800ef12:	f640 0283 	movw	r2, #2179	; 0x883
 800ef16:	493e      	ldr	r1, [pc, #248]	; (800f010 <tcp_pcb_remove+0x110>)
 800ef18:	483e      	ldr	r0, [pc, #248]	; (800f014 <tcp_pcb_remove+0x114>)
 800ef1a:	f009 fe3d 	bl	8018b98 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d106      	bne.n	800ef32 <tcp_pcb_remove+0x32>
 800ef24:	4b39      	ldr	r3, [pc, #228]	; (800f00c <tcp_pcb_remove+0x10c>)
 800ef26:	f640 0284 	movw	r2, #2180	; 0x884
 800ef2a:	493b      	ldr	r1, [pc, #236]	; (800f018 <tcp_pcb_remove+0x118>)
 800ef2c:	4839      	ldr	r0, [pc, #228]	; (800f014 <tcp_pcb_remove+0x114>)
 800ef2e:	f009 fe33 	bl	8018b98 <iprintf>

  TCP_RMV(pcblist, pcb);
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	683a      	ldr	r2, [r7, #0]
 800ef38:	429a      	cmp	r2, r3
 800ef3a:	d105      	bne.n	800ef48 <tcp_pcb_remove+0x48>
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	68da      	ldr	r2, [r3, #12]
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	601a      	str	r2, [r3, #0]
 800ef46:	e013      	b.n	800ef70 <tcp_pcb_remove+0x70>
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	60fb      	str	r3, [r7, #12]
 800ef4e:	e00c      	b.n	800ef6a <tcp_pcb_remove+0x6a>
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	68db      	ldr	r3, [r3, #12]
 800ef54:	683a      	ldr	r2, [r7, #0]
 800ef56:	429a      	cmp	r2, r3
 800ef58:	d104      	bne.n	800ef64 <tcp_pcb_remove+0x64>
 800ef5a:	683b      	ldr	r3, [r7, #0]
 800ef5c:	68da      	ldr	r2, [r3, #12]
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	60da      	str	r2, [r3, #12]
 800ef62:	e005      	b.n	800ef70 <tcp_pcb_remove+0x70>
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	68db      	ldr	r3, [r3, #12]
 800ef68:	60fb      	str	r3, [r7, #12]
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d1ef      	bne.n	800ef50 <tcp_pcb_remove+0x50>
 800ef70:	683b      	ldr	r3, [r7, #0]
 800ef72:	2200      	movs	r2, #0
 800ef74:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800ef76:	6838      	ldr	r0, [r7, #0]
 800ef78:	f7ff ff72 	bl	800ee60 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800ef7c:	683b      	ldr	r3, [r7, #0]
 800ef7e:	7d1b      	ldrb	r3, [r3, #20]
 800ef80:	2b0a      	cmp	r3, #10
 800ef82:	d013      	beq.n	800efac <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800ef84:	683b      	ldr	r3, [r7, #0]
 800ef86:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800ef88:	2b01      	cmp	r3, #1
 800ef8a:	d00f      	beq.n	800efac <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800ef8c:	683b      	ldr	r3, [r7, #0]
 800ef8e:	8b5b      	ldrh	r3, [r3, #26]
 800ef90:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d009      	beq.n	800efac <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800ef98:	683b      	ldr	r3, [r7, #0]
 800ef9a:	8b5b      	ldrh	r3, [r3, #26]
 800ef9c:	f043 0302 	orr.w	r3, r3, #2
 800efa0:	b29a      	uxth	r2, r3
 800efa2:	683b      	ldr	r3, [r7, #0]
 800efa4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800efa6:	6838      	ldr	r0, [r7, #0]
 800efa8:	f003 fbc6 	bl	8012738 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800efac:	683b      	ldr	r3, [r7, #0]
 800efae:	7d1b      	ldrb	r3, [r3, #20]
 800efb0:	2b01      	cmp	r3, #1
 800efb2:	d020      	beq.n	800eff6 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800efb4:	683b      	ldr	r3, [r7, #0]
 800efb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d006      	beq.n	800efca <tcp_pcb_remove+0xca>
 800efbc:	4b13      	ldr	r3, [pc, #76]	; (800f00c <tcp_pcb_remove+0x10c>)
 800efbe:	f640 0293 	movw	r2, #2195	; 0x893
 800efc2:	4916      	ldr	r1, [pc, #88]	; (800f01c <tcp_pcb_remove+0x11c>)
 800efc4:	4813      	ldr	r0, [pc, #76]	; (800f014 <tcp_pcb_remove+0x114>)
 800efc6:	f009 fde7 	bl	8018b98 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800efca:	683b      	ldr	r3, [r7, #0]
 800efcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d006      	beq.n	800efe0 <tcp_pcb_remove+0xe0>
 800efd2:	4b0e      	ldr	r3, [pc, #56]	; (800f00c <tcp_pcb_remove+0x10c>)
 800efd4:	f640 0294 	movw	r2, #2196	; 0x894
 800efd8:	4911      	ldr	r1, [pc, #68]	; (800f020 <tcp_pcb_remove+0x120>)
 800efda:	480e      	ldr	r0, [pc, #56]	; (800f014 <tcp_pcb_remove+0x114>)
 800efdc:	f009 fddc 	bl	8018b98 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800efe0:	683b      	ldr	r3, [r7, #0]
 800efe2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d006      	beq.n	800eff6 <tcp_pcb_remove+0xf6>
 800efe8:	4b08      	ldr	r3, [pc, #32]	; (800f00c <tcp_pcb_remove+0x10c>)
 800efea:	f640 0296 	movw	r2, #2198	; 0x896
 800efee:	490d      	ldr	r1, [pc, #52]	; (800f024 <tcp_pcb_remove+0x124>)
 800eff0:	4808      	ldr	r0, [pc, #32]	; (800f014 <tcp_pcb_remove+0x114>)
 800eff2:	f009 fdd1 	bl	8018b98 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800eff6:	683b      	ldr	r3, [r7, #0]
 800eff8:	2200      	movs	r2, #0
 800effa:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800effc:	683b      	ldr	r3, [r7, #0]
 800effe:	2200      	movs	r2, #0
 800f000:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800f002:	bf00      	nop
 800f004:	3710      	adds	r7, #16
 800f006:	46bd      	mov	sp, r7
 800f008:	bd80      	pop	{r7, pc}
 800f00a:	bf00      	nop
 800f00c:	0801b8a0 	.word	0x0801b8a0
 800f010:	0801bf08 	.word	0x0801bf08
 800f014:	0801b8e4 	.word	0x0801b8e4
 800f018:	0801bf24 	.word	0x0801bf24
 800f01c:	0801bf44 	.word	0x0801bf44
 800f020:	0801bf5c 	.word	0x0801bf5c
 800f024:	0801bf78 	.word	0x0801bf78

0800f028 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800f028:	b580      	push	{r7, lr}
 800f02a:	b082      	sub	sp, #8
 800f02c:	af00      	add	r7, sp, #0
 800f02e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	2b00      	cmp	r3, #0
 800f034:	d106      	bne.n	800f044 <tcp_next_iss+0x1c>
 800f036:	4b0a      	ldr	r3, [pc, #40]	; (800f060 <tcp_next_iss+0x38>)
 800f038:	f640 02af 	movw	r2, #2223	; 0x8af
 800f03c:	4909      	ldr	r1, [pc, #36]	; (800f064 <tcp_next_iss+0x3c>)
 800f03e:	480a      	ldr	r0, [pc, #40]	; (800f068 <tcp_next_iss+0x40>)
 800f040:	f009 fdaa 	bl	8018b98 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800f044:	4b09      	ldr	r3, [pc, #36]	; (800f06c <tcp_next_iss+0x44>)
 800f046:	681a      	ldr	r2, [r3, #0]
 800f048:	4b09      	ldr	r3, [pc, #36]	; (800f070 <tcp_next_iss+0x48>)
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	4413      	add	r3, r2
 800f04e:	4a07      	ldr	r2, [pc, #28]	; (800f06c <tcp_next_iss+0x44>)
 800f050:	6013      	str	r3, [r2, #0]
  return iss;
 800f052:	4b06      	ldr	r3, [pc, #24]	; (800f06c <tcp_next_iss+0x44>)
 800f054:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800f056:	4618      	mov	r0, r3
 800f058:	3708      	adds	r7, #8
 800f05a:	46bd      	mov	sp, r7
 800f05c:	bd80      	pop	{r7, pc}
 800f05e:	bf00      	nop
 800f060:	0801b8a0 	.word	0x0801b8a0
 800f064:	0801bf90 	.word	0x0801bf90
 800f068:	0801b8e4 	.word	0x0801b8e4
 800f06c:	20000028 	.word	0x20000028
 800f070:	20010e70 	.word	0x20010e70

0800f074 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800f074:	b580      	push	{r7, lr}
 800f076:	b086      	sub	sp, #24
 800f078:	af00      	add	r7, sp, #0
 800f07a:	4603      	mov	r3, r0
 800f07c:	60b9      	str	r1, [r7, #8]
 800f07e:	607a      	str	r2, [r7, #4]
 800f080:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	2b00      	cmp	r3, #0
 800f086:	d106      	bne.n	800f096 <tcp_eff_send_mss_netif+0x22>
 800f088:	4b14      	ldr	r3, [pc, #80]	; (800f0dc <tcp_eff_send_mss_netif+0x68>)
 800f08a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800f08e:	4914      	ldr	r1, [pc, #80]	; (800f0e0 <tcp_eff_send_mss_netif+0x6c>)
 800f090:	4814      	ldr	r0, [pc, #80]	; (800f0e4 <tcp_eff_send_mss_netif+0x70>)
 800f092:	f009 fd81 	bl	8018b98 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800f096:	68bb      	ldr	r3, [r7, #8]
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d101      	bne.n	800f0a0 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800f09c:	89fb      	ldrh	r3, [r7, #14]
 800f09e:	e019      	b.n	800f0d4 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800f0a0:	68bb      	ldr	r3, [r7, #8]
 800f0a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f0a4:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800f0a6:	8afb      	ldrh	r3, [r7, #22]
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d012      	beq.n	800f0d2 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800f0ac:	2328      	movs	r3, #40	; 0x28
 800f0ae:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800f0b0:	8afa      	ldrh	r2, [r7, #22]
 800f0b2:	8abb      	ldrh	r3, [r7, #20]
 800f0b4:	429a      	cmp	r2, r3
 800f0b6:	d904      	bls.n	800f0c2 <tcp_eff_send_mss_netif+0x4e>
 800f0b8:	8afa      	ldrh	r2, [r7, #22]
 800f0ba:	8abb      	ldrh	r3, [r7, #20]
 800f0bc:	1ad3      	subs	r3, r2, r3
 800f0be:	b29b      	uxth	r3, r3
 800f0c0:	e000      	b.n	800f0c4 <tcp_eff_send_mss_netif+0x50>
 800f0c2:	2300      	movs	r3, #0
 800f0c4:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800f0c6:	8a7a      	ldrh	r2, [r7, #18]
 800f0c8:	89fb      	ldrh	r3, [r7, #14]
 800f0ca:	4293      	cmp	r3, r2
 800f0cc:	bf28      	it	cs
 800f0ce:	4613      	movcs	r3, r2
 800f0d0:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800f0d2:	89fb      	ldrh	r3, [r7, #14]
}
 800f0d4:	4618      	mov	r0, r3
 800f0d6:	3718      	adds	r7, #24
 800f0d8:	46bd      	mov	sp, r7
 800f0da:	bd80      	pop	{r7, pc}
 800f0dc:	0801b8a0 	.word	0x0801b8a0
 800f0e0:	0801bfac 	.word	0x0801bfac
 800f0e4:	0801b8e4 	.word	0x0801b8e4

0800f0e8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800f0e8:	b580      	push	{r7, lr}
 800f0ea:	b084      	sub	sp, #16
 800f0ec:	af00      	add	r7, sp, #0
 800f0ee:	6078      	str	r0, [r7, #4]
 800f0f0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800f0f2:	683b      	ldr	r3, [r7, #0]
 800f0f4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d119      	bne.n	800f130 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800f0fc:	4b10      	ldr	r3, [pc, #64]	; (800f140 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800f0fe:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800f102:	4910      	ldr	r1, [pc, #64]	; (800f144 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800f104:	4810      	ldr	r0, [pc, #64]	; (800f148 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800f106:	f009 fd47 	bl	8018b98 <iprintf>

  while (pcb != NULL) {
 800f10a:	e011      	b.n	800f130 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	681a      	ldr	r2, [r3, #0]
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	429a      	cmp	r2, r3
 800f116:	d108      	bne.n	800f12a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	68db      	ldr	r3, [r3, #12]
 800f11c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800f11e:	68f8      	ldr	r0, [r7, #12]
 800f120:	f7fe fc08 	bl	800d934 <tcp_abort>
      pcb = next;
 800f124:	68bb      	ldr	r3, [r7, #8]
 800f126:	60fb      	str	r3, [r7, #12]
 800f128:	e002      	b.n	800f130 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	68db      	ldr	r3, [r3, #12]
 800f12e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	2b00      	cmp	r3, #0
 800f134:	d1ea      	bne.n	800f10c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800f136:	bf00      	nop
 800f138:	bf00      	nop
 800f13a:	3710      	adds	r7, #16
 800f13c:	46bd      	mov	sp, r7
 800f13e:	bd80      	pop	{r7, pc}
 800f140:	0801b8a0 	.word	0x0801b8a0
 800f144:	0801bfd4 	.word	0x0801bfd4
 800f148:	0801b8e4 	.word	0x0801b8e4

0800f14c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f14c:	b580      	push	{r7, lr}
 800f14e:	b084      	sub	sp, #16
 800f150:	af00      	add	r7, sp, #0
 800f152:	6078      	str	r0, [r7, #4]
 800f154:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d02a      	beq.n	800f1b2 <tcp_netif_ip_addr_changed+0x66>
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	2b00      	cmp	r3, #0
 800f162:	d026      	beq.n	800f1b2 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800f164:	4b15      	ldr	r3, [pc, #84]	; (800f1bc <tcp_netif_ip_addr_changed+0x70>)
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	4619      	mov	r1, r3
 800f16a:	6878      	ldr	r0, [r7, #4]
 800f16c:	f7ff ffbc 	bl	800f0e8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800f170:	4b13      	ldr	r3, [pc, #76]	; (800f1c0 <tcp_netif_ip_addr_changed+0x74>)
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	4619      	mov	r1, r3
 800f176:	6878      	ldr	r0, [r7, #4]
 800f178:	f7ff ffb6 	bl	800f0e8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800f17c:	683b      	ldr	r3, [r7, #0]
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d017      	beq.n	800f1b2 <tcp_netif_ip_addr_changed+0x66>
 800f182:	683b      	ldr	r3, [r7, #0]
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	2b00      	cmp	r3, #0
 800f188:	d013      	beq.n	800f1b2 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f18a:	4b0e      	ldr	r3, [pc, #56]	; (800f1c4 <tcp_netif_ip_addr_changed+0x78>)
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	60fb      	str	r3, [r7, #12]
 800f190:	e00c      	b.n	800f1ac <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	681a      	ldr	r2, [r3, #0]
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	429a      	cmp	r2, r3
 800f19c:	d103      	bne.n	800f1a6 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800f19e:	683b      	ldr	r3, [r7, #0]
 800f1a0:	681a      	ldr	r2, [r3, #0]
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	68db      	ldr	r3, [r3, #12]
 800f1aa:	60fb      	str	r3, [r7, #12]
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d1ef      	bne.n	800f192 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800f1b2:	bf00      	nop
 800f1b4:	3710      	adds	r7, #16
 800f1b6:	46bd      	mov	sp, r7
 800f1b8:	bd80      	pop	{r7, pc}
 800f1ba:	bf00      	nop
 800f1bc:	20010e7c 	.word	0x20010e7c
 800f1c0:	20010e74 	.word	0x20010e74
 800f1c4:	20010e78 	.word	0x20010e78

0800f1c8 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800f1c8:	b580      	push	{r7, lr}
 800f1ca:	b082      	sub	sp, #8
 800f1cc:	af00      	add	r7, sp, #0
 800f1ce:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d007      	beq.n	800f1e8 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f1dc:	4618      	mov	r0, r3
 800f1de:	f7ff fb51 	bl	800e884 <tcp_segs_free>
    pcb->ooseq = NULL;
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	2200      	movs	r2, #0
 800f1e6:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800f1e8:	bf00      	nop
 800f1ea:	3708      	adds	r7, #8
 800f1ec:	46bd      	mov	sp, r7
 800f1ee:	bd80      	pop	{r7, pc}

0800f1f0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800f1f0:	b590      	push	{r4, r7, lr}
 800f1f2:	b08d      	sub	sp, #52	; 0x34
 800f1f4:	af04      	add	r7, sp, #16
 800f1f6:	6078      	str	r0, [r7, #4]
 800f1f8:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d105      	bne.n	800f20c <tcp_input+0x1c>
 800f200:	4b9b      	ldr	r3, [pc, #620]	; (800f470 <tcp_input+0x280>)
 800f202:	2283      	movs	r2, #131	; 0x83
 800f204:	499b      	ldr	r1, [pc, #620]	; (800f474 <tcp_input+0x284>)
 800f206:	489c      	ldr	r0, [pc, #624]	; (800f478 <tcp_input+0x288>)
 800f208:	f009 fcc6 	bl	8018b98 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	685b      	ldr	r3, [r3, #4]
 800f210:	4a9a      	ldr	r2, [pc, #616]	; (800f47c <tcp_input+0x28c>)
 800f212:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	895b      	ldrh	r3, [r3, #10]
 800f218:	2b13      	cmp	r3, #19
 800f21a:	f240 83d1 	bls.w	800f9c0 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f21e:	4b98      	ldr	r3, [pc, #608]	; (800f480 <tcp_input+0x290>)
 800f220:	695b      	ldr	r3, [r3, #20]
 800f222:	4a97      	ldr	r2, [pc, #604]	; (800f480 <tcp_input+0x290>)
 800f224:	6812      	ldr	r2, [r2, #0]
 800f226:	4611      	mov	r1, r2
 800f228:	4618      	mov	r0, r3
 800f22a:	f008 fa61 	bl	80176f0 <ip4_addr_isbroadcast_u32>
 800f22e:	4603      	mov	r3, r0
 800f230:	2b00      	cmp	r3, #0
 800f232:	f040 83c7 	bne.w	800f9c4 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800f236:	4b92      	ldr	r3, [pc, #584]	; (800f480 <tcp_input+0x290>)
 800f238:	695b      	ldr	r3, [r3, #20]
 800f23a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f23e:	2be0      	cmp	r3, #224	; 0xe0
 800f240:	f000 83c0 	beq.w	800f9c4 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800f244:	4b8d      	ldr	r3, [pc, #564]	; (800f47c <tcp_input+0x28c>)
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	899b      	ldrh	r3, [r3, #12]
 800f24a:	b29b      	uxth	r3, r3
 800f24c:	4618      	mov	r0, r3
 800f24e:	f7fc f93d 	bl	800b4cc <lwip_htons>
 800f252:	4603      	mov	r3, r0
 800f254:	0b1b      	lsrs	r3, r3, #12
 800f256:	b29b      	uxth	r3, r3
 800f258:	b2db      	uxtb	r3, r3
 800f25a:	009b      	lsls	r3, r3, #2
 800f25c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800f25e:	7cbb      	ldrb	r3, [r7, #18]
 800f260:	2b13      	cmp	r3, #19
 800f262:	f240 83b1 	bls.w	800f9c8 <tcp_input+0x7d8>
 800f266:	7cbb      	ldrb	r3, [r7, #18]
 800f268:	b29a      	uxth	r2, r3
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	891b      	ldrh	r3, [r3, #8]
 800f26e:	429a      	cmp	r2, r3
 800f270:	f200 83aa 	bhi.w	800f9c8 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800f274:	7cbb      	ldrb	r3, [r7, #18]
 800f276:	b29b      	uxth	r3, r3
 800f278:	3b14      	subs	r3, #20
 800f27a:	b29a      	uxth	r2, r3
 800f27c:	4b81      	ldr	r3, [pc, #516]	; (800f484 <tcp_input+0x294>)
 800f27e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800f280:	4b81      	ldr	r3, [pc, #516]	; (800f488 <tcp_input+0x298>)
 800f282:	2200      	movs	r2, #0
 800f284:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	895a      	ldrh	r2, [r3, #10]
 800f28a:	7cbb      	ldrb	r3, [r7, #18]
 800f28c:	b29b      	uxth	r3, r3
 800f28e:	429a      	cmp	r2, r3
 800f290:	d309      	bcc.n	800f2a6 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800f292:	4b7c      	ldr	r3, [pc, #496]	; (800f484 <tcp_input+0x294>)
 800f294:	881a      	ldrh	r2, [r3, #0]
 800f296:	4b7d      	ldr	r3, [pc, #500]	; (800f48c <tcp_input+0x29c>)
 800f298:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800f29a:	7cbb      	ldrb	r3, [r7, #18]
 800f29c:	4619      	mov	r1, r3
 800f29e:	6878      	ldr	r0, [r7, #4]
 800f2a0:	f7fd fcc2 	bl	800cc28 <pbuf_remove_header>
 800f2a4:	e04e      	b.n	800f344 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d105      	bne.n	800f2ba <tcp_input+0xca>
 800f2ae:	4b70      	ldr	r3, [pc, #448]	; (800f470 <tcp_input+0x280>)
 800f2b0:	22c2      	movs	r2, #194	; 0xc2
 800f2b2:	4977      	ldr	r1, [pc, #476]	; (800f490 <tcp_input+0x2a0>)
 800f2b4:	4870      	ldr	r0, [pc, #448]	; (800f478 <tcp_input+0x288>)
 800f2b6:	f009 fc6f 	bl	8018b98 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800f2ba:	2114      	movs	r1, #20
 800f2bc:	6878      	ldr	r0, [r7, #4]
 800f2be:	f7fd fcb3 	bl	800cc28 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	895a      	ldrh	r2, [r3, #10]
 800f2c6:	4b71      	ldr	r3, [pc, #452]	; (800f48c <tcp_input+0x29c>)
 800f2c8:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800f2ca:	4b6e      	ldr	r3, [pc, #440]	; (800f484 <tcp_input+0x294>)
 800f2cc:	881a      	ldrh	r2, [r3, #0]
 800f2ce:	4b6f      	ldr	r3, [pc, #444]	; (800f48c <tcp_input+0x29c>)
 800f2d0:	881b      	ldrh	r3, [r3, #0]
 800f2d2:	1ad3      	subs	r3, r2, r3
 800f2d4:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800f2d6:	4b6d      	ldr	r3, [pc, #436]	; (800f48c <tcp_input+0x29c>)
 800f2d8:	881b      	ldrh	r3, [r3, #0]
 800f2da:	4619      	mov	r1, r3
 800f2dc:	6878      	ldr	r0, [r7, #4]
 800f2de:	f7fd fca3 	bl	800cc28 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	895b      	ldrh	r3, [r3, #10]
 800f2e8:	8a3a      	ldrh	r2, [r7, #16]
 800f2ea:	429a      	cmp	r2, r3
 800f2ec:	f200 836e 	bhi.w	800f9cc <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	685b      	ldr	r3, [r3, #4]
 800f2f6:	4a64      	ldr	r2, [pc, #400]	; (800f488 <tcp_input+0x298>)
 800f2f8:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	8a3a      	ldrh	r2, [r7, #16]
 800f300:	4611      	mov	r1, r2
 800f302:	4618      	mov	r0, r3
 800f304:	f7fd fc90 	bl	800cc28 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	891a      	ldrh	r2, [r3, #8]
 800f30c:	8a3b      	ldrh	r3, [r7, #16]
 800f30e:	1ad3      	subs	r3, r2, r3
 800f310:	b29a      	uxth	r2, r3
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	895b      	ldrh	r3, [r3, #10]
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d005      	beq.n	800f32a <tcp_input+0x13a>
 800f31e:	4b54      	ldr	r3, [pc, #336]	; (800f470 <tcp_input+0x280>)
 800f320:	22df      	movs	r2, #223	; 0xdf
 800f322:	495c      	ldr	r1, [pc, #368]	; (800f494 <tcp_input+0x2a4>)
 800f324:	4854      	ldr	r0, [pc, #336]	; (800f478 <tcp_input+0x288>)
 800f326:	f009 fc37 	bl	8018b98 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	891a      	ldrh	r2, [r3, #8]
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	891b      	ldrh	r3, [r3, #8]
 800f334:	429a      	cmp	r2, r3
 800f336:	d005      	beq.n	800f344 <tcp_input+0x154>
 800f338:	4b4d      	ldr	r3, [pc, #308]	; (800f470 <tcp_input+0x280>)
 800f33a:	22e0      	movs	r2, #224	; 0xe0
 800f33c:	4956      	ldr	r1, [pc, #344]	; (800f498 <tcp_input+0x2a8>)
 800f33e:	484e      	ldr	r0, [pc, #312]	; (800f478 <tcp_input+0x288>)
 800f340:	f009 fc2a 	bl	8018b98 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800f344:	4b4d      	ldr	r3, [pc, #308]	; (800f47c <tcp_input+0x28c>)
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	881b      	ldrh	r3, [r3, #0]
 800f34a:	b29b      	uxth	r3, r3
 800f34c:	4a4b      	ldr	r2, [pc, #300]	; (800f47c <tcp_input+0x28c>)
 800f34e:	6814      	ldr	r4, [r2, #0]
 800f350:	4618      	mov	r0, r3
 800f352:	f7fc f8bb 	bl	800b4cc <lwip_htons>
 800f356:	4603      	mov	r3, r0
 800f358:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800f35a:	4b48      	ldr	r3, [pc, #288]	; (800f47c <tcp_input+0x28c>)
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	885b      	ldrh	r3, [r3, #2]
 800f360:	b29b      	uxth	r3, r3
 800f362:	4a46      	ldr	r2, [pc, #280]	; (800f47c <tcp_input+0x28c>)
 800f364:	6814      	ldr	r4, [r2, #0]
 800f366:	4618      	mov	r0, r3
 800f368:	f7fc f8b0 	bl	800b4cc <lwip_htons>
 800f36c:	4603      	mov	r3, r0
 800f36e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800f370:	4b42      	ldr	r3, [pc, #264]	; (800f47c <tcp_input+0x28c>)
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	685b      	ldr	r3, [r3, #4]
 800f376:	4a41      	ldr	r2, [pc, #260]	; (800f47c <tcp_input+0x28c>)
 800f378:	6814      	ldr	r4, [r2, #0]
 800f37a:	4618      	mov	r0, r3
 800f37c:	f7fc f8bb 	bl	800b4f6 <lwip_htonl>
 800f380:	4603      	mov	r3, r0
 800f382:	6063      	str	r3, [r4, #4]
 800f384:	6863      	ldr	r3, [r4, #4]
 800f386:	4a45      	ldr	r2, [pc, #276]	; (800f49c <tcp_input+0x2ac>)
 800f388:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800f38a:	4b3c      	ldr	r3, [pc, #240]	; (800f47c <tcp_input+0x28c>)
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	689b      	ldr	r3, [r3, #8]
 800f390:	4a3a      	ldr	r2, [pc, #232]	; (800f47c <tcp_input+0x28c>)
 800f392:	6814      	ldr	r4, [r2, #0]
 800f394:	4618      	mov	r0, r3
 800f396:	f7fc f8ae 	bl	800b4f6 <lwip_htonl>
 800f39a:	4603      	mov	r3, r0
 800f39c:	60a3      	str	r3, [r4, #8]
 800f39e:	68a3      	ldr	r3, [r4, #8]
 800f3a0:	4a3f      	ldr	r2, [pc, #252]	; (800f4a0 <tcp_input+0x2b0>)
 800f3a2:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800f3a4:	4b35      	ldr	r3, [pc, #212]	; (800f47c <tcp_input+0x28c>)
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	89db      	ldrh	r3, [r3, #14]
 800f3aa:	b29b      	uxth	r3, r3
 800f3ac:	4a33      	ldr	r2, [pc, #204]	; (800f47c <tcp_input+0x28c>)
 800f3ae:	6814      	ldr	r4, [r2, #0]
 800f3b0:	4618      	mov	r0, r3
 800f3b2:	f7fc f88b 	bl	800b4cc <lwip_htons>
 800f3b6:	4603      	mov	r3, r0
 800f3b8:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800f3ba:	4b30      	ldr	r3, [pc, #192]	; (800f47c <tcp_input+0x28c>)
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	899b      	ldrh	r3, [r3, #12]
 800f3c0:	b29b      	uxth	r3, r3
 800f3c2:	4618      	mov	r0, r3
 800f3c4:	f7fc f882 	bl	800b4cc <lwip_htons>
 800f3c8:	4603      	mov	r3, r0
 800f3ca:	b2db      	uxtb	r3, r3
 800f3cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f3d0:	b2da      	uxtb	r2, r3
 800f3d2:	4b34      	ldr	r3, [pc, #208]	; (800f4a4 <tcp_input+0x2b4>)
 800f3d4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	891a      	ldrh	r2, [r3, #8]
 800f3da:	4b33      	ldr	r3, [pc, #204]	; (800f4a8 <tcp_input+0x2b8>)
 800f3dc:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800f3de:	4b31      	ldr	r3, [pc, #196]	; (800f4a4 <tcp_input+0x2b4>)
 800f3e0:	781b      	ldrb	r3, [r3, #0]
 800f3e2:	f003 0303 	and.w	r3, r3, #3
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d00c      	beq.n	800f404 <tcp_input+0x214>
    tcplen++;
 800f3ea:	4b2f      	ldr	r3, [pc, #188]	; (800f4a8 <tcp_input+0x2b8>)
 800f3ec:	881b      	ldrh	r3, [r3, #0]
 800f3ee:	3301      	adds	r3, #1
 800f3f0:	b29a      	uxth	r2, r3
 800f3f2:	4b2d      	ldr	r3, [pc, #180]	; (800f4a8 <tcp_input+0x2b8>)
 800f3f4:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	891a      	ldrh	r2, [r3, #8]
 800f3fa:	4b2b      	ldr	r3, [pc, #172]	; (800f4a8 <tcp_input+0x2b8>)
 800f3fc:	881b      	ldrh	r3, [r3, #0]
 800f3fe:	429a      	cmp	r2, r3
 800f400:	f200 82e6 	bhi.w	800f9d0 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800f404:	2300      	movs	r3, #0
 800f406:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f408:	4b28      	ldr	r3, [pc, #160]	; (800f4ac <tcp_input+0x2bc>)
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	61fb      	str	r3, [r7, #28]
 800f40e:	e09d      	b.n	800f54c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800f410:	69fb      	ldr	r3, [r7, #28]
 800f412:	7d1b      	ldrb	r3, [r3, #20]
 800f414:	2b00      	cmp	r3, #0
 800f416:	d105      	bne.n	800f424 <tcp_input+0x234>
 800f418:	4b15      	ldr	r3, [pc, #84]	; (800f470 <tcp_input+0x280>)
 800f41a:	22fb      	movs	r2, #251	; 0xfb
 800f41c:	4924      	ldr	r1, [pc, #144]	; (800f4b0 <tcp_input+0x2c0>)
 800f41e:	4816      	ldr	r0, [pc, #88]	; (800f478 <tcp_input+0x288>)
 800f420:	f009 fbba 	bl	8018b98 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800f424:	69fb      	ldr	r3, [r7, #28]
 800f426:	7d1b      	ldrb	r3, [r3, #20]
 800f428:	2b0a      	cmp	r3, #10
 800f42a:	d105      	bne.n	800f438 <tcp_input+0x248>
 800f42c:	4b10      	ldr	r3, [pc, #64]	; (800f470 <tcp_input+0x280>)
 800f42e:	22fc      	movs	r2, #252	; 0xfc
 800f430:	4920      	ldr	r1, [pc, #128]	; (800f4b4 <tcp_input+0x2c4>)
 800f432:	4811      	ldr	r0, [pc, #68]	; (800f478 <tcp_input+0x288>)
 800f434:	f009 fbb0 	bl	8018b98 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800f438:	69fb      	ldr	r3, [r7, #28]
 800f43a:	7d1b      	ldrb	r3, [r3, #20]
 800f43c:	2b01      	cmp	r3, #1
 800f43e:	d105      	bne.n	800f44c <tcp_input+0x25c>
 800f440:	4b0b      	ldr	r3, [pc, #44]	; (800f470 <tcp_input+0x280>)
 800f442:	22fd      	movs	r2, #253	; 0xfd
 800f444:	491c      	ldr	r1, [pc, #112]	; (800f4b8 <tcp_input+0x2c8>)
 800f446:	480c      	ldr	r0, [pc, #48]	; (800f478 <tcp_input+0x288>)
 800f448:	f009 fba6 	bl	8018b98 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f44c:	69fb      	ldr	r3, [r7, #28]
 800f44e:	7a1b      	ldrb	r3, [r3, #8]
 800f450:	2b00      	cmp	r3, #0
 800f452:	d033      	beq.n	800f4bc <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f454:	69fb      	ldr	r3, [r7, #28]
 800f456:	7a1a      	ldrb	r2, [r3, #8]
 800f458:	4b09      	ldr	r3, [pc, #36]	; (800f480 <tcp_input+0x290>)
 800f45a:	685b      	ldr	r3, [r3, #4]
 800f45c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f460:	3301      	adds	r3, #1
 800f462:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f464:	429a      	cmp	r2, r3
 800f466:	d029      	beq.n	800f4bc <tcp_input+0x2cc>
      prev = pcb;
 800f468:	69fb      	ldr	r3, [r7, #28]
 800f46a:	61bb      	str	r3, [r7, #24]
      continue;
 800f46c:	e06b      	b.n	800f546 <tcp_input+0x356>
 800f46e:	bf00      	nop
 800f470:	0801c008 	.word	0x0801c008
 800f474:	0801c03c 	.word	0x0801c03c
 800f478:	0801c054 	.word	0x0801c054
 800f47c:	20010e98 	.word	0x20010e98
 800f480:	2000d6fc 	.word	0x2000d6fc
 800f484:	20010e9c 	.word	0x20010e9c
 800f488:	20010ea0 	.word	0x20010ea0
 800f48c:	20010e9e 	.word	0x20010e9e
 800f490:	0801c07c 	.word	0x0801c07c
 800f494:	0801c08c 	.word	0x0801c08c
 800f498:	0801c098 	.word	0x0801c098
 800f49c:	20010ea8 	.word	0x20010ea8
 800f4a0:	20010eac 	.word	0x20010eac
 800f4a4:	20010eb4 	.word	0x20010eb4
 800f4a8:	20010eb2 	.word	0x20010eb2
 800f4ac:	20010e7c 	.word	0x20010e7c
 800f4b0:	0801c0b8 	.word	0x0801c0b8
 800f4b4:	0801c0e0 	.word	0x0801c0e0
 800f4b8:	0801c10c 	.word	0x0801c10c
    }

    if (pcb->remote_port == tcphdr->src &&
 800f4bc:	69fb      	ldr	r3, [r7, #28]
 800f4be:	8b1a      	ldrh	r2, [r3, #24]
 800f4c0:	4b72      	ldr	r3, [pc, #456]	; (800f68c <tcp_input+0x49c>)
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	881b      	ldrh	r3, [r3, #0]
 800f4c6:	b29b      	uxth	r3, r3
 800f4c8:	429a      	cmp	r2, r3
 800f4ca:	d13a      	bne.n	800f542 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800f4cc:	69fb      	ldr	r3, [r7, #28]
 800f4ce:	8ada      	ldrh	r2, [r3, #22]
 800f4d0:	4b6e      	ldr	r3, [pc, #440]	; (800f68c <tcp_input+0x49c>)
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	885b      	ldrh	r3, [r3, #2]
 800f4d6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800f4d8:	429a      	cmp	r2, r3
 800f4da:	d132      	bne.n	800f542 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f4dc:	69fb      	ldr	r3, [r7, #28]
 800f4de:	685a      	ldr	r2, [r3, #4]
 800f4e0:	4b6b      	ldr	r3, [pc, #428]	; (800f690 <tcp_input+0x4a0>)
 800f4e2:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800f4e4:	429a      	cmp	r2, r3
 800f4e6:	d12c      	bne.n	800f542 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f4e8:	69fb      	ldr	r3, [r7, #28]
 800f4ea:	681a      	ldr	r2, [r3, #0]
 800f4ec:	4b68      	ldr	r3, [pc, #416]	; (800f690 <tcp_input+0x4a0>)
 800f4ee:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f4f0:	429a      	cmp	r2, r3
 800f4f2:	d126      	bne.n	800f542 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800f4f4:	69fb      	ldr	r3, [r7, #28]
 800f4f6:	68db      	ldr	r3, [r3, #12]
 800f4f8:	69fa      	ldr	r2, [r7, #28]
 800f4fa:	429a      	cmp	r2, r3
 800f4fc:	d106      	bne.n	800f50c <tcp_input+0x31c>
 800f4fe:	4b65      	ldr	r3, [pc, #404]	; (800f694 <tcp_input+0x4a4>)
 800f500:	f240 120d 	movw	r2, #269	; 0x10d
 800f504:	4964      	ldr	r1, [pc, #400]	; (800f698 <tcp_input+0x4a8>)
 800f506:	4865      	ldr	r0, [pc, #404]	; (800f69c <tcp_input+0x4ac>)
 800f508:	f009 fb46 	bl	8018b98 <iprintf>
      if (prev != NULL) {
 800f50c:	69bb      	ldr	r3, [r7, #24]
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d00a      	beq.n	800f528 <tcp_input+0x338>
        prev->next = pcb->next;
 800f512:	69fb      	ldr	r3, [r7, #28]
 800f514:	68da      	ldr	r2, [r3, #12]
 800f516:	69bb      	ldr	r3, [r7, #24]
 800f518:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800f51a:	4b61      	ldr	r3, [pc, #388]	; (800f6a0 <tcp_input+0x4b0>)
 800f51c:	681a      	ldr	r2, [r3, #0]
 800f51e:	69fb      	ldr	r3, [r7, #28]
 800f520:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800f522:	4a5f      	ldr	r2, [pc, #380]	; (800f6a0 <tcp_input+0x4b0>)
 800f524:	69fb      	ldr	r3, [r7, #28]
 800f526:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800f528:	69fb      	ldr	r3, [r7, #28]
 800f52a:	68db      	ldr	r3, [r3, #12]
 800f52c:	69fa      	ldr	r2, [r7, #28]
 800f52e:	429a      	cmp	r2, r3
 800f530:	d111      	bne.n	800f556 <tcp_input+0x366>
 800f532:	4b58      	ldr	r3, [pc, #352]	; (800f694 <tcp_input+0x4a4>)
 800f534:	f240 1215 	movw	r2, #277	; 0x115
 800f538:	495a      	ldr	r1, [pc, #360]	; (800f6a4 <tcp_input+0x4b4>)
 800f53a:	4858      	ldr	r0, [pc, #352]	; (800f69c <tcp_input+0x4ac>)
 800f53c:	f009 fb2c 	bl	8018b98 <iprintf>
      break;
 800f540:	e009      	b.n	800f556 <tcp_input+0x366>
    }
    prev = pcb;
 800f542:	69fb      	ldr	r3, [r7, #28]
 800f544:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f546:	69fb      	ldr	r3, [r7, #28]
 800f548:	68db      	ldr	r3, [r3, #12]
 800f54a:	61fb      	str	r3, [r7, #28]
 800f54c:	69fb      	ldr	r3, [r7, #28]
 800f54e:	2b00      	cmp	r3, #0
 800f550:	f47f af5e 	bne.w	800f410 <tcp_input+0x220>
 800f554:	e000      	b.n	800f558 <tcp_input+0x368>
      break;
 800f556:	bf00      	nop
  }

  if (pcb == NULL) {
 800f558:	69fb      	ldr	r3, [r7, #28]
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	f040 80aa 	bne.w	800f6b4 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f560:	4b51      	ldr	r3, [pc, #324]	; (800f6a8 <tcp_input+0x4b8>)
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	61fb      	str	r3, [r7, #28]
 800f566:	e03f      	b.n	800f5e8 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f568:	69fb      	ldr	r3, [r7, #28]
 800f56a:	7d1b      	ldrb	r3, [r3, #20]
 800f56c:	2b0a      	cmp	r3, #10
 800f56e:	d006      	beq.n	800f57e <tcp_input+0x38e>
 800f570:	4b48      	ldr	r3, [pc, #288]	; (800f694 <tcp_input+0x4a4>)
 800f572:	f240 121f 	movw	r2, #287	; 0x11f
 800f576:	494d      	ldr	r1, [pc, #308]	; (800f6ac <tcp_input+0x4bc>)
 800f578:	4848      	ldr	r0, [pc, #288]	; (800f69c <tcp_input+0x4ac>)
 800f57a:	f009 fb0d 	bl	8018b98 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f57e:	69fb      	ldr	r3, [r7, #28]
 800f580:	7a1b      	ldrb	r3, [r3, #8]
 800f582:	2b00      	cmp	r3, #0
 800f584:	d009      	beq.n	800f59a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f586:	69fb      	ldr	r3, [r7, #28]
 800f588:	7a1a      	ldrb	r2, [r3, #8]
 800f58a:	4b41      	ldr	r3, [pc, #260]	; (800f690 <tcp_input+0x4a0>)
 800f58c:	685b      	ldr	r3, [r3, #4]
 800f58e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f592:	3301      	adds	r3, #1
 800f594:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f596:	429a      	cmp	r2, r3
 800f598:	d122      	bne.n	800f5e0 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800f59a:	69fb      	ldr	r3, [r7, #28]
 800f59c:	8b1a      	ldrh	r2, [r3, #24]
 800f59e:	4b3b      	ldr	r3, [pc, #236]	; (800f68c <tcp_input+0x49c>)
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	881b      	ldrh	r3, [r3, #0]
 800f5a4:	b29b      	uxth	r3, r3
 800f5a6:	429a      	cmp	r2, r3
 800f5a8:	d11b      	bne.n	800f5e2 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800f5aa:	69fb      	ldr	r3, [r7, #28]
 800f5ac:	8ada      	ldrh	r2, [r3, #22]
 800f5ae:	4b37      	ldr	r3, [pc, #220]	; (800f68c <tcp_input+0x49c>)
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	885b      	ldrh	r3, [r3, #2]
 800f5b4:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800f5b6:	429a      	cmp	r2, r3
 800f5b8:	d113      	bne.n	800f5e2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f5ba:	69fb      	ldr	r3, [r7, #28]
 800f5bc:	685a      	ldr	r2, [r3, #4]
 800f5be:	4b34      	ldr	r3, [pc, #208]	; (800f690 <tcp_input+0x4a0>)
 800f5c0:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800f5c2:	429a      	cmp	r2, r3
 800f5c4:	d10d      	bne.n	800f5e2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f5c6:	69fb      	ldr	r3, [r7, #28]
 800f5c8:	681a      	ldr	r2, [r3, #0]
 800f5ca:	4b31      	ldr	r3, [pc, #196]	; (800f690 <tcp_input+0x4a0>)
 800f5cc:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f5ce:	429a      	cmp	r2, r3
 800f5d0:	d107      	bne.n	800f5e2 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800f5d2:	69f8      	ldr	r0, [r7, #28]
 800f5d4:	f000 fb56 	bl	800fc84 <tcp_timewait_input>
        }
        pbuf_free(p);
 800f5d8:	6878      	ldr	r0, [r7, #4]
 800f5da:	f7fd fbab 	bl	800cd34 <pbuf_free>
        return;
 800f5de:	e1fd      	b.n	800f9dc <tcp_input+0x7ec>
        continue;
 800f5e0:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f5e2:	69fb      	ldr	r3, [r7, #28]
 800f5e4:	68db      	ldr	r3, [r3, #12]
 800f5e6:	61fb      	str	r3, [r7, #28]
 800f5e8:	69fb      	ldr	r3, [r7, #28]
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d1bc      	bne.n	800f568 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800f5ee:	2300      	movs	r3, #0
 800f5f0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f5f2:	4b2f      	ldr	r3, [pc, #188]	; (800f6b0 <tcp_input+0x4c0>)
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	617b      	str	r3, [r7, #20]
 800f5f8:	e02a      	b.n	800f650 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f5fa:	697b      	ldr	r3, [r7, #20]
 800f5fc:	7a1b      	ldrb	r3, [r3, #8]
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d00c      	beq.n	800f61c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f602:	697b      	ldr	r3, [r7, #20]
 800f604:	7a1a      	ldrb	r2, [r3, #8]
 800f606:	4b22      	ldr	r3, [pc, #136]	; (800f690 <tcp_input+0x4a0>)
 800f608:	685b      	ldr	r3, [r3, #4]
 800f60a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f60e:	3301      	adds	r3, #1
 800f610:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f612:	429a      	cmp	r2, r3
 800f614:	d002      	beq.n	800f61c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800f616:	697b      	ldr	r3, [r7, #20]
 800f618:	61bb      	str	r3, [r7, #24]
        continue;
 800f61a:	e016      	b.n	800f64a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800f61c:	697b      	ldr	r3, [r7, #20]
 800f61e:	8ada      	ldrh	r2, [r3, #22]
 800f620:	4b1a      	ldr	r3, [pc, #104]	; (800f68c <tcp_input+0x49c>)
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	885b      	ldrh	r3, [r3, #2]
 800f626:	b29b      	uxth	r3, r3
 800f628:	429a      	cmp	r2, r3
 800f62a:	d10c      	bne.n	800f646 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800f62c:	697b      	ldr	r3, [r7, #20]
 800f62e:	681a      	ldr	r2, [r3, #0]
 800f630:	4b17      	ldr	r3, [pc, #92]	; (800f690 <tcp_input+0x4a0>)
 800f632:	695b      	ldr	r3, [r3, #20]
 800f634:	429a      	cmp	r2, r3
 800f636:	d00f      	beq.n	800f658 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800f638:	697b      	ldr	r3, [r7, #20]
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d00d      	beq.n	800f65a <tcp_input+0x46a>
 800f63e:	697b      	ldr	r3, [r7, #20]
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	2b00      	cmp	r3, #0
 800f644:	d009      	beq.n	800f65a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800f646:	697b      	ldr	r3, [r7, #20]
 800f648:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f64a:	697b      	ldr	r3, [r7, #20]
 800f64c:	68db      	ldr	r3, [r3, #12]
 800f64e:	617b      	str	r3, [r7, #20]
 800f650:	697b      	ldr	r3, [r7, #20]
 800f652:	2b00      	cmp	r3, #0
 800f654:	d1d1      	bne.n	800f5fa <tcp_input+0x40a>
 800f656:	e000      	b.n	800f65a <tcp_input+0x46a>
            break;
 800f658:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800f65a:	697b      	ldr	r3, [r7, #20]
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d029      	beq.n	800f6b4 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800f660:	69bb      	ldr	r3, [r7, #24]
 800f662:	2b00      	cmp	r3, #0
 800f664:	d00a      	beq.n	800f67c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800f666:	697b      	ldr	r3, [r7, #20]
 800f668:	68da      	ldr	r2, [r3, #12]
 800f66a:	69bb      	ldr	r3, [r7, #24]
 800f66c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800f66e:	4b10      	ldr	r3, [pc, #64]	; (800f6b0 <tcp_input+0x4c0>)
 800f670:	681a      	ldr	r2, [r3, #0]
 800f672:	697b      	ldr	r3, [r7, #20]
 800f674:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800f676:	4a0e      	ldr	r2, [pc, #56]	; (800f6b0 <tcp_input+0x4c0>)
 800f678:	697b      	ldr	r3, [r7, #20]
 800f67a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800f67c:	6978      	ldr	r0, [r7, #20]
 800f67e:	f000 fa03 	bl	800fa88 <tcp_listen_input>
      }
      pbuf_free(p);
 800f682:	6878      	ldr	r0, [r7, #4]
 800f684:	f7fd fb56 	bl	800cd34 <pbuf_free>
      return;
 800f688:	e1a8      	b.n	800f9dc <tcp_input+0x7ec>
 800f68a:	bf00      	nop
 800f68c:	20010e98 	.word	0x20010e98
 800f690:	2000d6fc 	.word	0x2000d6fc
 800f694:	0801c008 	.word	0x0801c008
 800f698:	0801c134 	.word	0x0801c134
 800f69c:	0801c054 	.word	0x0801c054
 800f6a0:	20010e7c 	.word	0x20010e7c
 800f6a4:	0801c160 	.word	0x0801c160
 800f6a8:	20010e80 	.word	0x20010e80
 800f6ac:	0801c18c 	.word	0x0801c18c
 800f6b0:	20010e78 	.word	0x20010e78
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800f6b4:	69fb      	ldr	r3, [r7, #28]
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	f000 8158 	beq.w	800f96c <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800f6bc:	4b95      	ldr	r3, [pc, #596]	; (800f914 <tcp_input+0x724>)
 800f6be:	2200      	movs	r2, #0
 800f6c0:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	891a      	ldrh	r2, [r3, #8]
 800f6c6:	4b93      	ldr	r3, [pc, #588]	; (800f914 <tcp_input+0x724>)
 800f6c8:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800f6ca:	4a92      	ldr	r2, [pc, #584]	; (800f914 <tcp_input+0x724>)
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800f6d0:	4b91      	ldr	r3, [pc, #580]	; (800f918 <tcp_input+0x728>)
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	4a8f      	ldr	r2, [pc, #572]	; (800f914 <tcp_input+0x724>)
 800f6d6:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800f6d8:	4b90      	ldr	r3, [pc, #576]	; (800f91c <tcp_input+0x72c>)
 800f6da:	2200      	movs	r2, #0
 800f6dc:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800f6de:	4b90      	ldr	r3, [pc, #576]	; (800f920 <tcp_input+0x730>)
 800f6e0:	2200      	movs	r2, #0
 800f6e2:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800f6e4:	4b8f      	ldr	r3, [pc, #572]	; (800f924 <tcp_input+0x734>)
 800f6e6:	2200      	movs	r2, #0
 800f6e8:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800f6ea:	4b8f      	ldr	r3, [pc, #572]	; (800f928 <tcp_input+0x738>)
 800f6ec:	781b      	ldrb	r3, [r3, #0]
 800f6ee:	f003 0308 	and.w	r3, r3, #8
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d006      	beq.n	800f704 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	7b5b      	ldrb	r3, [r3, #13]
 800f6fa:	f043 0301 	orr.w	r3, r3, #1
 800f6fe:	b2da      	uxtb	r2, r3
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800f704:	69fb      	ldr	r3, [r7, #28]
 800f706:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d017      	beq.n	800f73c <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f70c:	69f8      	ldr	r0, [r7, #28]
 800f70e:	f7ff f83d 	bl	800e78c <tcp_process_refused_data>
 800f712:	4603      	mov	r3, r0
 800f714:	f113 0f0d 	cmn.w	r3, #13
 800f718:	d007      	beq.n	800f72a <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f71a:	69fb      	ldr	r3, [r7, #28]
 800f71c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d00c      	beq.n	800f73c <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f722:	4b82      	ldr	r3, [pc, #520]	; (800f92c <tcp_input+0x73c>)
 800f724:	881b      	ldrh	r3, [r3, #0]
 800f726:	2b00      	cmp	r3, #0
 800f728:	d008      	beq.n	800f73c <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800f72a:	69fb      	ldr	r3, [r7, #28]
 800f72c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f72e:	2b00      	cmp	r3, #0
 800f730:	f040 80e3 	bne.w	800f8fa <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800f734:	69f8      	ldr	r0, [r7, #28]
 800f736:	f003 fe05 	bl	8013344 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800f73a:	e0de      	b.n	800f8fa <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800f73c:	4a7c      	ldr	r2, [pc, #496]	; (800f930 <tcp_input+0x740>)
 800f73e:	69fb      	ldr	r3, [r7, #28]
 800f740:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800f742:	69f8      	ldr	r0, [r7, #28]
 800f744:	f000 fb18 	bl	800fd78 <tcp_process>
 800f748:	4603      	mov	r3, r0
 800f74a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800f74c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f750:	f113 0f0d 	cmn.w	r3, #13
 800f754:	f000 80d3 	beq.w	800f8fe <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800f758:	4b71      	ldr	r3, [pc, #452]	; (800f920 <tcp_input+0x730>)
 800f75a:	781b      	ldrb	r3, [r3, #0]
 800f75c:	f003 0308 	and.w	r3, r3, #8
 800f760:	2b00      	cmp	r3, #0
 800f762:	d015      	beq.n	800f790 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800f764:	69fb      	ldr	r3, [r7, #28]
 800f766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d008      	beq.n	800f780 <tcp_input+0x590>
 800f76e:	69fb      	ldr	r3, [r7, #28]
 800f770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f774:	69fa      	ldr	r2, [r7, #28]
 800f776:	6912      	ldr	r2, [r2, #16]
 800f778:	f06f 010d 	mvn.w	r1, #13
 800f77c:	4610      	mov	r0, r2
 800f77e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f780:	69f9      	ldr	r1, [r7, #28]
 800f782:	486c      	ldr	r0, [pc, #432]	; (800f934 <tcp_input+0x744>)
 800f784:	f7ff fbbc 	bl	800ef00 <tcp_pcb_remove>
        tcp_free(pcb);
 800f788:	69f8      	ldr	r0, [r7, #28]
 800f78a:	f7fd fd8f 	bl	800d2ac <tcp_free>
 800f78e:	e0da      	b.n	800f946 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800f790:	2300      	movs	r3, #0
 800f792:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800f794:	4b63      	ldr	r3, [pc, #396]	; (800f924 <tcp_input+0x734>)
 800f796:	881b      	ldrh	r3, [r3, #0]
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d01d      	beq.n	800f7d8 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800f79c:	4b61      	ldr	r3, [pc, #388]	; (800f924 <tcp_input+0x734>)
 800f79e:	881b      	ldrh	r3, [r3, #0]
 800f7a0:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800f7a2:	69fb      	ldr	r3, [r7, #28]
 800f7a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d00a      	beq.n	800f7c2 <tcp_input+0x5d2>
 800f7ac:	69fb      	ldr	r3, [r7, #28]
 800f7ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f7b2:	69fa      	ldr	r2, [r7, #28]
 800f7b4:	6910      	ldr	r0, [r2, #16]
 800f7b6:	89fa      	ldrh	r2, [r7, #14]
 800f7b8:	69f9      	ldr	r1, [r7, #28]
 800f7ba:	4798      	blx	r3
 800f7bc:	4603      	mov	r3, r0
 800f7be:	74fb      	strb	r3, [r7, #19]
 800f7c0:	e001      	b.n	800f7c6 <tcp_input+0x5d6>
 800f7c2:	2300      	movs	r3, #0
 800f7c4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f7c6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f7ca:	f113 0f0d 	cmn.w	r3, #13
 800f7ce:	f000 8098 	beq.w	800f902 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800f7d2:	4b54      	ldr	r3, [pc, #336]	; (800f924 <tcp_input+0x734>)
 800f7d4:	2200      	movs	r2, #0
 800f7d6:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800f7d8:	69f8      	ldr	r0, [r7, #28]
 800f7da:	f000 f915 	bl	800fa08 <tcp_input_delayed_close>
 800f7de:	4603      	mov	r3, r0
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	f040 8090 	bne.w	800f906 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800f7e6:	4b4d      	ldr	r3, [pc, #308]	; (800f91c <tcp_input+0x72c>)
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d041      	beq.n	800f872 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800f7ee:	69fb      	ldr	r3, [r7, #28]
 800f7f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d006      	beq.n	800f804 <tcp_input+0x614>
 800f7f6:	4b50      	ldr	r3, [pc, #320]	; (800f938 <tcp_input+0x748>)
 800f7f8:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800f7fc:	494f      	ldr	r1, [pc, #316]	; (800f93c <tcp_input+0x74c>)
 800f7fe:	4850      	ldr	r0, [pc, #320]	; (800f940 <tcp_input+0x750>)
 800f800:	f009 f9ca 	bl	8018b98 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800f804:	69fb      	ldr	r3, [r7, #28]
 800f806:	8b5b      	ldrh	r3, [r3, #26]
 800f808:	f003 0310 	and.w	r3, r3, #16
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d008      	beq.n	800f822 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800f810:	4b42      	ldr	r3, [pc, #264]	; (800f91c <tcp_input+0x72c>)
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	4618      	mov	r0, r3
 800f816:	f7fd fa8d 	bl	800cd34 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800f81a:	69f8      	ldr	r0, [r7, #28]
 800f81c:	f7fe f88a 	bl	800d934 <tcp_abort>
            goto aborted;
 800f820:	e091      	b.n	800f946 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800f822:	69fb      	ldr	r3, [r7, #28]
 800f824:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d00c      	beq.n	800f846 <tcp_input+0x656>
 800f82c:	69fb      	ldr	r3, [r7, #28]
 800f82e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f832:	69fb      	ldr	r3, [r7, #28]
 800f834:	6918      	ldr	r0, [r3, #16]
 800f836:	4b39      	ldr	r3, [pc, #228]	; (800f91c <tcp_input+0x72c>)
 800f838:	681a      	ldr	r2, [r3, #0]
 800f83a:	2300      	movs	r3, #0
 800f83c:	69f9      	ldr	r1, [r7, #28]
 800f83e:	47a0      	blx	r4
 800f840:	4603      	mov	r3, r0
 800f842:	74fb      	strb	r3, [r7, #19]
 800f844:	e008      	b.n	800f858 <tcp_input+0x668>
 800f846:	4b35      	ldr	r3, [pc, #212]	; (800f91c <tcp_input+0x72c>)
 800f848:	681a      	ldr	r2, [r3, #0]
 800f84a:	2300      	movs	r3, #0
 800f84c:	69f9      	ldr	r1, [r7, #28]
 800f84e:	2000      	movs	r0, #0
 800f850:	f7ff f890 	bl	800e974 <tcp_recv_null>
 800f854:	4603      	mov	r3, r0
 800f856:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800f858:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f85c:	f113 0f0d 	cmn.w	r3, #13
 800f860:	d053      	beq.n	800f90a <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800f862:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f866:	2b00      	cmp	r3, #0
 800f868:	d003      	beq.n	800f872 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800f86a:	4b2c      	ldr	r3, [pc, #176]	; (800f91c <tcp_input+0x72c>)
 800f86c:	681a      	ldr	r2, [r3, #0]
 800f86e:	69fb      	ldr	r3, [r7, #28]
 800f870:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800f872:	4b2b      	ldr	r3, [pc, #172]	; (800f920 <tcp_input+0x730>)
 800f874:	781b      	ldrb	r3, [r3, #0]
 800f876:	f003 0320 	and.w	r3, r3, #32
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d030      	beq.n	800f8e0 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800f87e:	69fb      	ldr	r3, [r7, #28]
 800f880:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f882:	2b00      	cmp	r3, #0
 800f884:	d009      	beq.n	800f89a <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800f886:	69fb      	ldr	r3, [r7, #28]
 800f888:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f88a:	7b5a      	ldrb	r2, [r3, #13]
 800f88c:	69fb      	ldr	r3, [r7, #28]
 800f88e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f890:	f042 0220 	orr.w	r2, r2, #32
 800f894:	b2d2      	uxtb	r2, r2
 800f896:	735a      	strb	r2, [r3, #13]
 800f898:	e022      	b.n	800f8e0 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f89a:	69fb      	ldr	r3, [r7, #28]
 800f89c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f89e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f8a2:	d005      	beq.n	800f8b0 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800f8a4:	69fb      	ldr	r3, [r7, #28]
 800f8a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f8a8:	3301      	adds	r3, #1
 800f8aa:	b29a      	uxth	r2, r3
 800f8ac:	69fb      	ldr	r3, [r7, #28]
 800f8ae:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800f8b0:	69fb      	ldr	r3, [r7, #28]
 800f8b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d00b      	beq.n	800f8d2 <tcp_input+0x6e2>
 800f8ba:	69fb      	ldr	r3, [r7, #28]
 800f8bc:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f8c0:	69fb      	ldr	r3, [r7, #28]
 800f8c2:	6918      	ldr	r0, [r3, #16]
 800f8c4:	2300      	movs	r3, #0
 800f8c6:	2200      	movs	r2, #0
 800f8c8:	69f9      	ldr	r1, [r7, #28]
 800f8ca:	47a0      	blx	r4
 800f8cc:	4603      	mov	r3, r0
 800f8ce:	74fb      	strb	r3, [r7, #19]
 800f8d0:	e001      	b.n	800f8d6 <tcp_input+0x6e6>
 800f8d2:	2300      	movs	r3, #0
 800f8d4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f8d6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f8da:	f113 0f0d 	cmn.w	r3, #13
 800f8de:	d016      	beq.n	800f90e <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800f8e0:	4b13      	ldr	r3, [pc, #76]	; (800f930 <tcp_input+0x740>)
 800f8e2:	2200      	movs	r2, #0
 800f8e4:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800f8e6:	69f8      	ldr	r0, [r7, #28]
 800f8e8:	f000 f88e 	bl	800fa08 <tcp_input_delayed_close>
 800f8ec:	4603      	mov	r3, r0
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d128      	bne.n	800f944 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800f8f2:	69f8      	ldr	r0, [r7, #28]
 800f8f4:	f002 ff20 	bl	8012738 <tcp_output>
 800f8f8:	e025      	b.n	800f946 <tcp_input+0x756>
        goto aborted;
 800f8fa:	bf00      	nop
 800f8fc:	e023      	b.n	800f946 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800f8fe:	bf00      	nop
 800f900:	e021      	b.n	800f946 <tcp_input+0x756>
              goto aborted;
 800f902:	bf00      	nop
 800f904:	e01f      	b.n	800f946 <tcp_input+0x756>
          goto aborted;
 800f906:	bf00      	nop
 800f908:	e01d      	b.n	800f946 <tcp_input+0x756>
            goto aborted;
 800f90a:	bf00      	nop
 800f90c:	e01b      	b.n	800f946 <tcp_input+0x756>
              goto aborted;
 800f90e:	bf00      	nop
 800f910:	e019      	b.n	800f946 <tcp_input+0x756>
 800f912:	bf00      	nop
 800f914:	20010e88 	.word	0x20010e88
 800f918:	20010e98 	.word	0x20010e98
 800f91c:	20010eb8 	.word	0x20010eb8
 800f920:	20010eb5 	.word	0x20010eb5
 800f924:	20010eb0 	.word	0x20010eb0
 800f928:	20010eb4 	.word	0x20010eb4
 800f92c:	20010eb2 	.word	0x20010eb2
 800f930:	20010ebc 	.word	0x20010ebc
 800f934:	20010e7c 	.word	0x20010e7c
 800f938:	0801c008 	.word	0x0801c008
 800f93c:	0801c1bc 	.word	0x0801c1bc
 800f940:	0801c054 	.word	0x0801c054
          goto aborted;
 800f944:	bf00      	nop
    tcp_input_pcb = NULL;
 800f946:	4b27      	ldr	r3, [pc, #156]	; (800f9e4 <tcp_input+0x7f4>)
 800f948:	2200      	movs	r2, #0
 800f94a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800f94c:	4b26      	ldr	r3, [pc, #152]	; (800f9e8 <tcp_input+0x7f8>)
 800f94e:	2200      	movs	r2, #0
 800f950:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800f952:	4b26      	ldr	r3, [pc, #152]	; (800f9ec <tcp_input+0x7fc>)
 800f954:	685b      	ldr	r3, [r3, #4]
 800f956:	2b00      	cmp	r3, #0
 800f958:	d03f      	beq.n	800f9da <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800f95a:	4b24      	ldr	r3, [pc, #144]	; (800f9ec <tcp_input+0x7fc>)
 800f95c:	685b      	ldr	r3, [r3, #4]
 800f95e:	4618      	mov	r0, r3
 800f960:	f7fd f9e8 	bl	800cd34 <pbuf_free>
      inseg.p = NULL;
 800f964:	4b21      	ldr	r3, [pc, #132]	; (800f9ec <tcp_input+0x7fc>)
 800f966:	2200      	movs	r2, #0
 800f968:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800f96a:	e036      	b.n	800f9da <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800f96c:	4b20      	ldr	r3, [pc, #128]	; (800f9f0 <tcp_input+0x800>)
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	899b      	ldrh	r3, [r3, #12]
 800f972:	b29b      	uxth	r3, r3
 800f974:	4618      	mov	r0, r3
 800f976:	f7fb fda9 	bl	800b4cc <lwip_htons>
 800f97a:	4603      	mov	r3, r0
 800f97c:	b2db      	uxtb	r3, r3
 800f97e:	f003 0304 	and.w	r3, r3, #4
 800f982:	2b00      	cmp	r3, #0
 800f984:	d118      	bne.n	800f9b8 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f986:	4b1b      	ldr	r3, [pc, #108]	; (800f9f4 <tcp_input+0x804>)
 800f988:	6819      	ldr	r1, [r3, #0]
 800f98a:	4b1b      	ldr	r3, [pc, #108]	; (800f9f8 <tcp_input+0x808>)
 800f98c:	881b      	ldrh	r3, [r3, #0]
 800f98e:	461a      	mov	r2, r3
 800f990:	4b1a      	ldr	r3, [pc, #104]	; (800f9fc <tcp_input+0x80c>)
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f996:	4b16      	ldr	r3, [pc, #88]	; (800f9f0 <tcp_input+0x800>)
 800f998:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f99a:	885b      	ldrh	r3, [r3, #2]
 800f99c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f99e:	4a14      	ldr	r2, [pc, #80]	; (800f9f0 <tcp_input+0x800>)
 800f9a0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f9a2:	8812      	ldrh	r2, [r2, #0]
 800f9a4:	b292      	uxth	r2, r2
 800f9a6:	9202      	str	r2, [sp, #8]
 800f9a8:	9301      	str	r3, [sp, #4]
 800f9aa:	4b15      	ldr	r3, [pc, #84]	; (800fa00 <tcp_input+0x810>)
 800f9ac:	9300      	str	r3, [sp, #0]
 800f9ae:	4b15      	ldr	r3, [pc, #84]	; (800fa04 <tcp_input+0x814>)
 800f9b0:	4602      	mov	r2, r0
 800f9b2:	2000      	movs	r0, #0
 800f9b4:	f003 fc74 	bl	80132a0 <tcp_rst>
    pbuf_free(p);
 800f9b8:	6878      	ldr	r0, [r7, #4]
 800f9ba:	f7fd f9bb 	bl	800cd34 <pbuf_free>
  return;
 800f9be:	e00c      	b.n	800f9da <tcp_input+0x7ea>
    goto dropped;
 800f9c0:	bf00      	nop
 800f9c2:	e006      	b.n	800f9d2 <tcp_input+0x7e2>
    goto dropped;
 800f9c4:	bf00      	nop
 800f9c6:	e004      	b.n	800f9d2 <tcp_input+0x7e2>
    goto dropped;
 800f9c8:	bf00      	nop
 800f9ca:	e002      	b.n	800f9d2 <tcp_input+0x7e2>
      goto dropped;
 800f9cc:	bf00      	nop
 800f9ce:	e000      	b.n	800f9d2 <tcp_input+0x7e2>
      goto dropped;
 800f9d0:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800f9d2:	6878      	ldr	r0, [r7, #4]
 800f9d4:	f7fd f9ae 	bl	800cd34 <pbuf_free>
 800f9d8:	e000      	b.n	800f9dc <tcp_input+0x7ec>
  return;
 800f9da:	bf00      	nop
}
 800f9dc:	3724      	adds	r7, #36	; 0x24
 800f9de:	46bd      	mov	sp, r7
 800f9e0:	bd90      	pop	{r4, r7, pc}
 800f9e2:	bf00      	nop
 800f9e4:	20010ebc 	.word	0x20010ebc
 800f9e8:	20010eb8 	.word	0x20010eb8
 800f9ec:	20010e88 	.word	0x20010e88
 800f9f0:	20010e98 	.word	0x20010e98
 800f9f4:	20010eac 	.word	0x20010eac
 800f9f8:	20010eb2 	.word	0x20010eb2
 800f9fc:	20010ea8 	.word	0x20010ea8
 800fa00:	2000d70c 	.word	0x2000d70c
 800fa04:	2000d710 	.word	0x2000d710

0800fa08 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800fa08:	b580      	push	{r7, lr}
 800fa0a:	b082      	sub	sp, #8
 800fa0c:	af00      	add	r7, sp, #0
 800fa0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d106      	bne.n	800fa24 <tcp_input_delayed_close+0x1c>
 800fa16:	4b17      	ldr	r3, [pc, #92]	; (800fa74 <tcp_input_delayed_close+0x6c>)
 800fa18:	f240 225a 	movw	r2, #602	; 0x25a
 800fa1c:	4916      	ldr	r1, [pc, #88]	; (800fa78 <tcp_input_delayed_close+0x70>)
 800fa1e:	4817      	ldr	r0, [pc, #92]	; (800fa7c <tcp_input_delayed_close+0x74>)
 800fa20:	f009 f8ba 	bl	8018b98 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800fa24:	4b16      	ldr	r3, [pc, #88]	; (800fa80 <tcp_input_delayed_close+0x78>)
 800fa26:	781b      	ldrb	r3, [r3, #0]
 800fa28:	f003 0310 	and.w	r3, r3, #16
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d01c      	beq.n	800fa6a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	8b5b      	ldrh	r3, [r3, #26]
 800fa34:	f003 0310 	and.w	r3, r3, #16
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d10d      	bne.n	800fa58 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d008      	beq.n	800fa58 <tcp_input_delayed_close+0x50>
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fa4c:	687a      	ldr	r2, [r7, #4]
 800fa4e:	6912      	ldr	r2, [r2, #16]
 800fa50:	f06f 010e 	mvn.w	r1, #14
 800fa54:	4610      	mov	r0, r2
 800fa56:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800fa58:	6879      	ldr	r1, [r7, #4]
 800fa5a:	480a      	ldr	r0, [pc, #40]	; (800fa84 <tcp_input_delayed_close+0x7c>)
 800fa5c:	f7ff fa50 	bl	800ef00 <tcp_pcb_remove>
    tcp_free(pcb);
 800fa60:	6878      	ldr	r0, [r7, #4]
 800fa62:	f7fd fc23 	bl	800d2ac <tcp_free>
    return 1;
 800fa66:	2301      	movs	r3, #1
 800fa68:	e000      	b.n	800fa6c <tcp_input_delayed_close+0x64>
  }
  return 0;
 800fa6a:	2300      	movs	r3, #0
}
 800fa6c:	4618      	mov	r0, r3
 800fa6e:	3708      	adds	r7, #8
 800fa70:	46bd      	mov	sp, r7
 800fa72:	bd80      	pop	{r7, pc}
 800fa74:	0801c008 	.word	0x0801c008
 800fa78:	0801c1d8 	.word	0x0801c1d8
 800fa7c:	0801c054 	.word	0x0801c054
 800fa80:	20010eb5 	.word	0x20010eb5
 800fa84:	20010e7c 	.word	0x20010e7c

0800fa88 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800fa88:	b590      	push	{r4, r7, lr}
 800fa8a:	b08b      	sub	sp, #44	; 0x2c
 800fa8c:	af04      	add	r7, sp, #16
 800fa8e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800fa90:	4b6f      	ldr	r3, [pc, #444]	; (800fc50 <tcp_listen_input+0x1c8>)
 800fa92:	781b      	ldrb	r3, [r3, #0]
 800fa94:	f003 0304 	and.w	r3, r3, #4
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	f040 80d2 	bne.w	800fc42 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d106      	bne.n	800fab2 <tcp_listen_input+0x2a>
 800faa4:	4b6b      	ldr	r3, [pc, #428]	; (800fc54 <tcp_listen_input+0x1cc>)
 800faa6:	f240 2281 	movw	r2, #641	; 0x281
 800faaa:	496b      	ldr	r1, [pc, #428]	; (800fc58 <tcp_listen_input+0x1d0>)
 800faac:	486b      	ldr	r0, [pc, #428]	; (800fc5c <tcp_listen_input+0x1d4>)
 800faae:	f009 f873 	bl	8018b98 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800fab2:	4b67      	ldr	r3, [pc, #412]	; (800fc50 <tcp_listen_input+0x1c8>)
 800fab4:	781b      	ldrb	r3, [r3, #0]
 800fab6:	f003 0310 	and.w	r3, r3, #16
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d019      	beq.n	800faf2 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fabe:	4b68      	ldr	r3, [pc, #416]	; (800fc60 <tcp_listen_input+0x1d8>)
 800fac0:	6819      	ldr	r1, [r3, #0]
 800fac2:	4b68      	ldr	r3, [pc, #416]	; (800fc64 <tcp_listen_input+0x1dc>)
 800fac4:	881b      	ldrh	r3, [r3, #0]
 800fac6:	461a      	mov	r2, r3
 800fac8:	4b67      	ldr	r3, [pc, #412]	; (800fc68 <tcp_listen_input+0x1e0>)
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800face:	4b67      	ldr	r3, [pc, #412]	; (800fc6c <tcp_listen_input+0x1e4>)
 800fad0:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fad2:	885b      	ldrh	r3, [r3, #2]
 800fad4:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fad6:	4a65      	ldr	r2, [pc, #404]	; (800fc6c <tcp_listen_input+0x1e4>)
 800fad8:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fada:	8812      	ldrh	r2, [r2, #0]
 800fadc:	b292      	uxth	r2, r2
 800fade:	9202      	str	r2, [sp, #8]
 800fae0:	9301      	str	r3, [sp, #4]
 800fae2:	4b63      	ldr	r3, [pc, #396]	; (800fc70 <tcp_listen_input+0x1e8>)
 800fae4:	9300      	str	r3, [sp, #0]
 800fae6:	4b63      	ldr	r3, [pc, #396]	; (800fc74 <tcp_listen_input+0x1ec>)
 800fae8:	4602      	mov	r2, r0
 800faea:	6878      	ldr	r0, [r7, #4]
 800faec:	f003 fbd8 	bl	80132a0 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800faf0:	e0a9      	b.n	800fc46 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800faf2:	4b57      	ldr	r3, [pc, #348]	; (800fc50 <tcp_listen_input+0x1c8>)
 800faf4:	781b      	ldrb	r3, [r3, #0]
 800faf6:	f003 0302 	and.w	r3, r3, #2
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	f000 80a3 	beq.w	800fc46 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	7d5b      	ldrb	r3, [r3, #21]
 800fb04:	4618      	mov	r0, r3
 800fb06:	f7ff f859 	bl	800ebbc <tcp_alloc>
 800fb0a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800fb0c:	697b      	ldr	r3, [r7, #20]
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d111      	bne.n	800fb36 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	699b      	ldr	r3, [r3, #24]
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d00a      	beq.n	800fb30 <tcp_listen_input+0xa8>
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	699b      	ldr	r3, [r3, #24]
 800fb1e:	687a      	ldr	r2, [r7, #4]
 800fb20:	6910      	ldr	r0, [r2, #16]
 800fb22:	f04f 32ff 	mov.w	r2, #4294967295
 800fb26:	2100      	movs	r1, #0
 800fb28:	4798      	blx	r3
 800fb2a:	4603      	mov	r3, r0
 800fb2c:	73bb      	strb	r3, [r7, #14]
      return;
 800fb2e:	e08b      	b.n	800fc48 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800fb30:	23f0      	movs	r3, #240	; 0xf0
 800fb32:	73bb      	strb	r3, [r7, #14]
      return;
 800fb34:	e088      	b.n	800fc48 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800fb36:	4b50      	ldr	r3, [pc, #320]	; (800fc78 <tcp_listen_input+0x1f0>)
 800fb38:	695a      	ldr	r2, [r3, #20]
 800fb3a:	697b      	ldr	r3, [r7, #20]
 800fb3c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800fb3e:	4b4e      	ldr	r3, [pc, #312]	; (800fc78 <tcp_listen_input+0x1f0>)
 800fb40:	691a      	ldr	r2, [r3, #16]
 800fb42:	697b      	ldr	r3, [r7, #20]
 800fb44:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	8ada      	ldrh	r2, [r3, #22]
 800fb4a:	697b      	ldr	r3, [r7, #20]
 800fb4c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800fb4e:	4b47      	ldr	r3, [pc, #284]	; (800fc6c <tcp_listen_input+0x1e4>)
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	881b      	ldrh	r3, [r3, #0]
 800fb54:	b29a      	uxth	r2, r3
 800fb56:	697b      	ldr	r3, [r7, #20]
 800fb58:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800fb5a:	697b      	ldr	r3, [r7, #20]
 800fb5c:	2203      	movs	r2, #3
 800fb5e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800fb60:	4b41      	ldr	r3, [pc, #260]	; (800fc68 <tcp_listen_input+0x1e0>)
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	1c5a      	adds	r2, r3, #1
 800fb66:	697b      	ldr	r3, [r7, #20]
 800fb68:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800fb6a:	697b      	ldr	r3, [r7, #20]
 800fb6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fb6e:	697b      	ldr	r3, [r7, #20]
 800fb70:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800fb72:	6978      	ldr	r0, [r7, #20]
 800fb74:	f7ff fa58 	bl	800f028 <tcp_next_iss>
 800fb78:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800fb7a:	697b      	ldr	r3, [r7, #20]
 800fb7c:	693a      	ldr	r2, [r7, #16]
 800fb7e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800fb80:	697b      	ldr	r3, [r7, #20]
 800fb82:	693a      	ldr	r2, [r7, #16]
 800fb84:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800fb86:	697b      	ldr	r3, [r7, #20]
 800fb88:	693a      	ldr	r2, [r7, #16]
 800fb8a:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800fb8c:	697b      	ldr	r3, [r7, #20]
 800fb8e:	693a      	ldr	r2, [r7, #16]
 800fb90:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800fb92:	4b35      	ldr	r3, [pc, #212]	; (800fc68 <tcp_listen_input+0x1e0>)
 800fb94:	681b      	ldr	r3, [r3, #0]
 800fb96:	1e5a      	subs	r2, r3, #1
 800fb98:	697b      	ldr	r3, [r7, #20]
 800fb9a:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	691a      	ldr	r2, [r3, #16]
 800fba0:	697b      	ldr	r3, [r7, #20]
 800fba2:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800fba4:	697b      	ldr	r3, [r7, #20]
 800fba6:	687a      	ldr	r2, [r7, #4]
 800fba8:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	7a5b      	ldrb	r3, [r3, #9]
 800fbae:	f003 030c 	and.w	r3, r3, #12
 800fbb2:	b2da      	uxtb	r2, r3
 800fbb4:	697b      	ldr	r3, [r7, #20]
 800fbb6:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	7a1a      	ldrb	r2, [r3, #8]
 800fbbc:	697b      	ldr	r3, [r7, #20]
 800fbbe:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800fbc0:	4b2e      	ldr	r3, [pc, #184]	; (800fc7c <tcp_listen_input+0x1f4>)
 800fbc2:	681a      	ldr	r2, [r3, #0]
 800fbc4:	697b      	ldr	r3, [r7, #20]
 800fbc6:	60da      	str	r2, [r3, #12]
 800fbc8:	4a2c      	ldr	r2, [pc, #176]	; (800fc7c <tcp_listen_input+0x1f4>)
 800fbca:	697b      	ldr	r3, [r7, #20]
 800fbcc:	6013      	str	r3, [r2, #0]
 800fbce:	f003 fd29 	bl	8013624 <tcp_timer_needed>
 800fbd2:	4b2b      	ldr	r3, [pc, #172]	; (800fc80 <tcp_listen_input+0x1f8>)
 800fbd4:	2201      	movs	r2, #1
 800fbd6:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800fbd8:	6978      	ldr	r0, [r7, #20]
 800fbda:	f001 fd8f 	bl	80116fc <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800fbde:	4b23      	ldr	r3, [pc, #140]	; (800fc6c <tcp_listen_input+0x1e4>)
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	89db      	ldrh	r3, [r3, #14]
 800fbe4:	b29a      	uxth	r2, r3
 800fbe6:	697b      	ldr	r3, [r7, #20]
 800fbe8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800fbec:	697b      	ldr	r3, [r7, #20]
 800fbee:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fbf2:	697b      	ldr	r3, [r7, #20]
 800fbf4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800fbf8:	697b      	ldr	r3, [r7, #20]
 800fbfa:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800fbfc:	697b      	ldr	r3, [r7, #20]
 800fbfe:	3304      	adds	r3, #4
 800fc00:	4618      	mov	r0, r3
 800fc02:	f007 fac1 	bl	8017188 <ip4_route>
 800fc06:	4601      	mov	r1, r0
 800fc08:	697b      	ldr	r3, [r7, #20]
 800fc0a:	3304      	adds	r3, #4
 800fc0c:	461a      	mov	r2, r3
 800fc0e:	4620      	mov	r0, r4
 800fc10:	f7ff fa30 	bl	800f074 <tcp_eff_send_mss_netif>
 800fc14:	4603      	mov	r3, r0
 800fc16:	461a      	mov	r2, r3
 800fc18:	697b      	ldr	r3, [r7, #20]
 800fc1a:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800fc1c:	2112      	movs	r1, #18
 800fc1e:	6978      	ldr	r0, [r7, #20]
 800fc20:	f002 fc9c 	bl	801255c <tcp_enqueue_flags>
 800fc24:	4603      	mov	r3, r0
 800fc26:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800fc28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d004      	beq.n	800fc3a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800fc30:	2100      	movs	r1, #0
 800fc32:	6978      	ldr	r0, [r7, #20]
 800fc34:	f7fd fdc0 	bl	800d7b8 <tcp_abandon>
      return;
 800fc38:	e006      	b.n	800fc48 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800fc3a:	6978      	ldr	r0, [r7, #20]
 800fc3c:	f002 fd7c 	bl	8012738 <tcp_output>
  return;
 800fc40:	e001      	b.n	800fc46 <tcp_listen_input+0x1be>
    return;
 800fc42:	bf00      	nop
 800fc44:	e000      	b.n	800fc48 <tcp_listen_input+0x1c0>
  return;
 800fc46:	bf00      	nop
}
 800fc48:	371c      	adds	r7, #28
 800fc4a:	46bd      	mov	sp, r7
 800fc4c:	bd90      	pop	{r4, r7, pc}
 800fc4e:	bf00      	nop
 800fc50:	20010eb4 	.word	0x20010eb4
 800fc54:	0801c008 	.word	0x0801c008
 800fc58:	0801c200 	.word	0x0801c200
 800fc5c:	0801c054 	.word	0x0801c054
 800fc60:	20010eac 	.word	0x20010eac
 800fc64:	20010eb2 	.word	0x20010eb2
 800fc68:	20010ea8 	.word	0x20010ea8
 800fc6c:	20010e98 	.word	0x20010e98
 800fc70:	2000d70c 	.word	0x2000d70c
 800fc74:	2000d710 	.word	0x2000d710
 800fc78:	2000d6fc 	.word	0x2000d6fc
 800fc7c:	20010e7c 	.word	0x20010e7c
 800fc80:	20010e84 	.word	0x20010e84

0800fc84 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800fc84:	b580      	push	{r7, lr}
 800fc86:	b086      	sub	sp, #24
 800fc88:	af04      	add	r7, sp, #16
 800fc8a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800fc8c:	4b2f      	ldr	r3, [pc, #188]	; (800fd4c <tcp_timewait_input+0xc8>)
 800fc8e:	781b      	ldrb	r3, [r3, #0]
 800fc90:	f003 0304 	and.w	r3, r3, #4
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d153      	bne.n	800fd40 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d106      	bne.n	800fcac <tcp_timewait_input+0x28>
 800fc9e:	4b2c      	ldr	r3, [pc, #176]	; (800fd50 <tcp_timewait_input+0xcc>)
 800fca0:	f240 22ee 	movw	r2, #750	; 0x2ee
 800fca4:	492b      	ldr	r1, [pc, #172]	; (800fd54 <tcp_timewait_input+0xd0>)
 800fca6:	482c      	ldr	r0, [pc, #176]	; (800fd58 <tcp_timewait_input+0xd4>)
 800fca8:	f008 ff76 	bl	8018b98 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800fcac:	4b27      	ldr	r3, [pc, #156]	; (800fd4c <tcp_timewait_input+0xc8>)
 800fcae:	781b      	ldrb	r3, [r3, #0]
 800fcb0:	f003 0302 	and.w	r3, r3, #2
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d02a      	beq.n	800fd0e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800fcb8:	4b28      	ldr	r3, [pc, #160]	; (800fd5c <tcp_timewait_input+0xd8>)
 800fcba:	681a      	ldr	r2, [r3, #0]
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcc0:	1ad3      	subs	r3, r2, r3
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	db2d      	blt.n	800fd22 <tcp_timewait_input+0x9e>
 800fcc6:	4b25      	ldr	r3, [pc, #148]	; (800fd5c <tcp_timewait_input+0xd8>)
 800fcc8:	681a      	ldr	r2, [r3, #0]
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcce:	6879      	ldr	r1, [r7, #4]
 800fcd0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fcd2:	440b      	add	r3, r1
 800fcd4:	1ad3      	subs	r3, r2, r3
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	dc23      	bgt.n	800fd22 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fcda:	4b21      	ldr	r3, [pc, #132]	; (800fd60 <tcp_timewait_input+0xdc>)
 800fcdc:	6819      	ldr	r1, [r3, #0]
 800fcde:	4b21      	ldr	r3, [pc, #132]	; (800fd64 <tcp_timewait_input+0xe0>)
 800fce0:	881b      	ldrh	r3, [r3, #0]
 800fce2:	461a      	mov	r2, r3
 800fce4:	4b1d      	ldr	r3, [pc, #116]	; (800fd5c <tcp_timewait_input+0xd8>)
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fcea:	4b1f      	ldr	r3, [pc, #124]	; (800fd68 <tcp_timewait_input+0xe4>)
 800fcec:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fcee:	885b      	ldrh	r3, [r3, #2]
 800fcf0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fcf2:	4a1d      	ldr	r2, [pc, #116]	; (800fd68 <tcp_timewait_input+0xe4>)
 800fcf4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fcf6:	8812      	ldrh	r2, [r2, #0]
 800fcf8:	b292      	uxth	r2, r2
 800fcfa:	9202      	str	r2, [sp, #8]
 800fcfc:	9301      	str	r3, [sp, #4]
 800fcfe:	4b1b      	ldr	r3, [pc, #108]	; (800fd6c <tcp_timewait_input+0xe8>)
 800fd00:	9300      	str	r3, [sp, #0]
 800fd02:	4b1b      	ldr	r3, [pc, #108]	; (800fd70 <tcp_timewait_input+0xec>)
 800fd04:	4602      	mov	r2, r0
 800fd06:	6878      	ldr	r0, [r7, #4]
 800fd08:	f003 faca 	bl	80132a0 <tcp_rst>
      return;
 800fd0c:	e01b      	b.n	800fd46 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800fd0e:	4b0f      	ldr	r3, [pc, #60]	; (800fd4c <tcp_timewait_input+0xc8>)
 800fd10:	781b      	ldrb	r3, [r3, #0]
 800fd12:	f003 0301 	and.w	r3, r3, #1
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d003      	beq.n	800fd22 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800fd1a:	4b16      	ldr	r3, [pc, #88]	; (800fd74 <tcp_timewait_input+0xf0>)
 800fd1c:	681a      	ldr	r2, [r3, #0]
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800fd22:	4b10      	ldr	r3, [pc, #64]	; (800fd64 <tcp_timewait_input+0xe0>)
 800fd24:	881b      	ldrh	r3, [r3, #0]
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d00c      	beq.n	800fd44 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	8b5b      	ldrh	r3, [r3, #26]
 800fd2e:	f043 0302 	orr.w	r3, r3, #2
 800fd32:	b29a      	uxth	r2, r3
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800fd38:	6878      	ldr	r0, [r7, #4]
 800fd3a:	f002 fcfd 	bl	8012738 <tcp_output>
  }
  return;
 800fd3e:	e001      	b.n	800fd44 <tcp_timewait_input+0xc0>
    return;
 800fd40:	bf00      	nop
 800fd42:	e000      	b.n	800fd46 <tcp_timewait_input+0xc2>
  return;
 800fd44:	bf00      	nop
}
 800fd46:	3708      	adds	r7, #8
 800fd48:	46bd      	mov	sp, r7
 800fd4a:	bd80      	pop	{r7, pc}
 800fd4c:	20010eb4 	.word	0x20010eb4
 800fd50:	0801c008 	.word	0x0801c008
 800fd54:	0801c220 	.word	0x0801c220
 800fd58:	0801c054 	.word	0x0801c054
 800fd5c:	20010ea8 	.word	0x20010ea8
 800fd60:	20010eac 	.word	0x20010eac
 800fd64:	20010eb2 	.word	0x20010eb2
 800fd68:	20010e98 	.word	0x20010e98
 800fd6c:	2000d70c 	.word	0x2000d70c
 800fd70:	2000d710 	.word	0x2000d710
 800fd74:	20010e70 	.word	0x20010e70

0800fd78 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800fd78:	b590      	push	{r4, r7, lr}
 800fd7a:	b08d      	sub	sp, #52	; 0x34
 800fd7c:	af04      	add	r7, sp, #16
 800fd7e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800fd80:	2300      	movs	r3, #0
 800fd82:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800fd84:	2300      	movs	r3, #0
 800fd86:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	d106      	bne.n	800fd9c <tcp_process+0x24>
 800fd8e:	4b9d      	ldr	r3, [pc, #628]	; (8010004 <tcp_process+0x28c>)
 800fd90:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800fd94:	499c      	ldr	r1, [pc, #624]	; (8010008 <tcp_process+0x290>)
 800fd96:	489d      	ldr	r0, [pc, #628]	; (801000c <tcp_process+0x294>)
 800fd98:	f008 fefe 	bl	8018b98 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800fd9c:	4b9c      	ldr	r3, [pc, #624]	; (8010010 <tcp_process+0x298>)
 800fd9e:	781b      	ldrb	r3, [r3, #0]
 800fda0:	f003 0304 	and.w	r3, r3, #4
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d04e      	beq.n	800fe46 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	7d1b      	ldrb	r3, [r3, #20]
 800fdac:	2b02      	cmp	r3, #2
 800fdae:	d108      	bne.n	800fdc2 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fdb4:	4b97      	ldr	r3, [pc, #604]	; (8010014 <tcp_process+0x29c>)
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	429a      	cmp	r2, r3
 800fdba:	d123      	bne.n	800fe04 <tcp_process+0x8c>
        acceptable = 1;
 800fdbc:	2301      	movs	r3, #1
 800fdbe:	76fb      	strb	r3, [r7, #27]
 800fdc0:	e020      	b.n	800fe04 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fdc6:	4b94      	ldr	r3, [pc, #592]	; (8010018 <tcp_process+0x2a0>)
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	429a      	cmp	r2, r3
 800fdcc:	d102      	bne.n	800fdd4 <tcp_process+0x5c>
        acceptable = 1;
 800fdce:	2301      	movs	r3, #1
 800fdd0:	76fb      	strb	r3, [r7, #27]
 800fdd2:	e017      	b.n	800fe04 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800fdd4:	4b90      	ldr	r3, [pc, #576]	; (8010018 <tcp_process+0x2a0>)
 800fdd6:	681a      	ldr	r2, [r3, #0]
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fddc:	1ad3      	subs	r3, r2, r3
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	db10      	blt.n	800fe04 <tcp_process+0x8c>
 800fde2:	4b8d      	ldr	r3, [pc, #564]	; (8010018 <tcp_process+0x2a0>)
 800fde4:	681a      	ldr	r2, [r3, #0]
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdea:	6879      	ldr	r1, [r7, #4]
 800fdec:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fdee:	440b      	add	r3, r1
 800fdf0:	1ad3      	subs	r3, r2, r3
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	dc06      	bgt.n	800fe04 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	8b5b      	ldrh	r3, [r3, #26]
 800fdfa:	f043 0302 	orr.w	r3, r3, #2
 800fdfe:	b29a      	uxth	r2, r3
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800fe04:	7efb      	ldrb	r3, [r7, #27]
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d01b      	beq.n	800fe42 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	7d1b      	ldrb	r3, [r3, #20]
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d106      	bne.n	800fe20 <tcp_process+0xa8>
 800fe12:	4b7c      	ldr	r3, [pc, #496]	; (8010004 <tcp_process+0x28c>)
 800fe14:	f44f 724e 	mov.w	r2, #824	; 0x338
 800fe18:	4980      	ldr	r1, [pc, #512]	; (801001c <tcp_process+0x2a4>)
 800fe1a:	487c      	ldr	r0, [pc, #496]	; (801000c <tcp_process+0x294>)
 800fe1c:	f008 febc 	bl	8018b98 <iprintf>
      recv_flags |= TF_RESET;
 800fe20:	4b7f      	ldr	r3, [pc, #508]	; (8010020 <tcp_process+0x2a8>)
 800fe22:	781b      	ldrb	r3, [r3, #0]
 800fe24:	f043 0308 	orr.w	r3, r3, #8
 800fe28:	b2da      	uxtb	r2, r3
 800fe2a:	4b7d      	ldr	r3, [pc, #500]	; (8010020 <tcp_process+0x2a8>)
 800fe2c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	8b5b      	ldrh	r3, [r3, #26]
 800fe32:	f023 0301 	bic.w	r3, r3, #1
 800fe36:	b29a      	uxth	r2, r3
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800fe3c:	f06f 030d 	mvn.w	r3, #13
 800fe40:	e37a      	b.n	8010538 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800fe42:	2300      	movs	r3, #0
 800fe44:	e378      	b.n	8010538 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800fe46:	4b72      	ldr	r3, [pc, #456]	; (8010010 <tcp_process+0x298>)
 800fe48:	781b      	ldrb	r3, [r3, #0]
 800fe4a:	f003 0302 	and.w	r3, r3, #2
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d010      	beq.n	800fe74 <tcp_process+0xfc>
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	7d1b      	ldrb	r3, [r3, #20]
 800fe56:	2b02      	cmp	r3, #2
 800fe58:	d00c      	beq.n	800fe74 <tcp_process+0xfc>
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	7d1b      	ldrb	r3, [r3, #20]
 800fe5e:	2b03      	cmp	r3, #3
 800fe60:	d008      	beq.n	800fe74 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	8b5b      	ldrh	r3, [r3, #26]
 800fe66:	f043 0302 	orr.w	r3, r3, #2
 800fe6a:	b29a      	uxth	r2, r3
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800fe70:	2300      	movs	r3, #0
 800fe72:	e361      	b.n	8010538 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	8b5b      	ldrh	r3, [r3, #26]
 800fe78:	f003 0310 	and.w	r3, r3, #16
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d103      	bne.n	800fe88 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800fe80:	4b68      	ldr	r3, [pc, #416]	; (8010024 <tcp_process+0x2ac>)
 800fe82:	681a      	ldr	r2, [r3, #0]
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	2200      	movs	r2, #0
 800fe8c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	2200      	movs	r2, #0
 800fe94:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800fe98:	6878      	ldr	r0, [r7, #4]
 800fe9a:	f001 fc2f 	bl	80116fc <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	7d1b      	ldrb	r3, [r3, #20]
 800fea2:	3b02      	subs	r3, #2
 800fea4:	2b07      	cmp	r3, #7
 800fea6:	f200 8337 	bhi.w	8010518 <tcp_process+0x7a0>
 800feaa:	a201      	add	r2, pc, #4	; (adr r2, 800feb0 <tcp_process+0x138>)
 800feac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800feb0:	0800fed1 	.word	0x0800fed1
 800feb4:	08010101 	.word	0x08010101
 800feb8:	08010279 	.word	0x08010279
 800febc:	080102a3 	.word	0x080102a3
 800fec0:	080103c7 	.word	0x080103c7
 800fec4:	08010279 	.word	0x08010279
 800fec8:	08010453 	.word	0x08010453
 800fecc:	080104e3 	.word	0x080104e3
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800fed0:	4b4f      	ldr	r3, [pc, #316]	; (8010010 <tcp_process+0x298>)
 800fed2:	781b      	ldrb	r3, [r3, #0]
 800fed4:	f003 0310 	and.w	r3, r3, #16
 800fed8:	2b00      	cmp	r3, #0
 800feda:	f000 80e4 	beq.w	80100a6 <tcp_process+0x32e>
 800fede:	4b4c      	ldr	r3, [pc, #304]	; (8010010 <tcp_process+0x298>)
 800fee0:	781b      	ldrb	r3, [r3, #0]
 800fee2:	f003 0302 	and.w	r3, r3, #2
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	f000 80dd 	beq.w	80100a6 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fef0:	1c5a      	adds	r2, r3, #1
 800fef2:	4b48      	ldr	r3, [pc, #288]	; (8010014 <tcp_process+0x29c>)
 800fef4:	681b      	ldr	r3, [r3, #0]
 800fef6:	429a      	cmp	r2, r3
 800fef8:	f040 80d5 	bne.w	80100a6 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800fefc:	4b46      	ldr	r3, [pc, #280]	; (8010018 <tcp_process+0x2a0>)
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	1c5a      	adds	r2, r3, #1
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800ff0e:	4b41      	ldr	r3, [pc, #260]	; (8010014 <tcp_process+0x29c>)
 800ff10:	681a      	ldr	r2, [r3, #0]
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800ff16:	4b44      	ldr	r3, [pc, #272]	; (8010028 <tcp_process+0x2b0>)
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	89db      	ldrh	r3, [r3, #14]
 800ff1c:	b29a      	uxth	r2, r3
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800ff30:	4b39      	ldr	r3, [pc, #228]	; (8010018 <tcp_process+0x2a0>)
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	1e5a      	subs	r2, r3, #1
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	2204      	movs	r2, #4
 800ff3e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	3304      	adds	r3, #4
 800ff48:	4618      	mov	r0, r3
 800ff4a:	f007 f91d 	bl	8017188 <ip4_route>
 800ff4e:	4601      	mov	r1, r0
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	3304      	adds	r3, #4
 800ff54:	461a      	mov	r2, r3
 800ff56:	4620      	mov	r0, r4
 800ff58:	f7ff f88c 	bl	800f074 <tcp_eff_send_mss_netif>
 800ff5c:	4603      	mov	r3, r0
 800ff5e:	461a      	mov	r2, r3
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ff68:	009a      	lsls	r2, r3, #2
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ff6e:	005b      	lsls	r3, r3, #1
 800ff70:	f241 111c 	movw	r1, #4380	; 0x111c
 800ff74:	428b      	cmp	r3, r1
 800ff76:	bf38      	it	cc
 800ff78:	460b      	movcc	r3, r1
 800ff7a:	429a      	cmp	r2, r3
 800ff7c:	d204      	bcs.n	800ff88 <tcp_process+0x210>
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ff82:	009b      	lsls	r3, r3, #2
 800ff84:	b29b      	uxth	r3, r3
 800ff86:	e00d      	b.n	800ffa4 <tcp_process+0x22c>
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ff8c:	005b      	lsls	r3, r3, #1
 800ff8e:	f241 121c 	movw	r2, #4380	; 0x111c
 800ff92:	4293      	cmp	r3, r2
 800ff94:	d904      	bls.n	800ffa0 <tcp_process+0x228>
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ff9a:	005b      	lsls	r3, r3, #1
 800ff9c:	b29b      	uxth	r3, r3
 800ff9e:	e001      	b.n	800ffa4 <tcp_process+0x22c>
 800ffa0:	f241 131c 	movw	r3, #4380	; 0x111c
 800ffa4:	687a      	ldr	r2, [r7, #4]
 800ffa6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d106      	bne.n	800ffc2 <tcp_process+0x24a>
 800ffb4:	4b13      	ldr	r3, [pc, #76]	; (8010004 <tcp_process+0x28c>)
 800ffb6:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800ffba:	491c      	ldr	r1, [pc, #112]	; (801002c <tcp_process+0x2b4>)
 800ffbc:	4813      	ldr	r0, [pc, #76]	; (801000c <tcp_process+0x294>)
 800ffbe:	f008 fdeb 	bl	8018b98 <iprintf>
        --pcb->snd_queuelen;
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ffc8:	3b01      	subs	r3, #1
 800ffca:	b29a      	uxth	r2, r3
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ffd6:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800ffd8:	69fb      	ldr	r3, [r7, #28]
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d12a      	bne.n	8010034 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ffe2:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800ffe4:	69fb      	ldr	r3, [r7, #28]
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d106      	bne.n	800fff8 <tcp_process+0x280>
 800ffea:	4b06      	ldr	r3, [pc, #24]	; (8010004 <tcp_process+0x28c>)
 800ffec:	f44f 725d 	mov.w	r2, #884	; 0x374
 800fff0:	490f      	ldr	r1, [pc, #60]	; (8010030 <tcp_process+0x2b8>)
 800fff2:	4806      	ldr	r0, [pc, #24]	; (801000c <tcp_process+0x294>)
 800fff4:	f008 fdd0 	bl	8018b98 <iprintf>
          pcb->unsent = rseg->next;
 800fff8:	69fb      	ldr	r3, [r7, #28]
 800fffa:	681a      	ldr	r2, [r3, #0]
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	66da      	str	r2, [r3, #108]	; 0x6c
 8010000:	e01c      	b.n	801003c <tcp_process+0x2c4>
 8010002:	bf00      	nop
 8010004:	0801c008 	.word	0x0801c008
 8010008:	0801c240 	.word	0x0801c240
 801000c:	0801c054 	.word	0x0801c054
 8010010:	20010eb4 	.word	0x20010eb4
 8010014:	20010eac 	.word	0x20010eac
 8010018:	20010ea8 	.word	0x20010ea8
 801001c:	0801c25c 	.word	0x0801c25c
 8010020:	20010eb5 	.word	0x20010eb5
 8010024:	20010e70 	.word	0x20010e70
 8010028:	20010e98 	.word	0x20010e98
 801002c:	0801c27c 	.word	0x0801c27c
 8010030:	0801c294 	.word	0x0801c294
        } else {
          pcb->unacked = rseg->next;
 8010034:	69fb      	ldr	r3, [r7, #28]
 8010036:	681a      	ldr	r2, [r3, #0]
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 801003c:	69f8      	ldr	r0, [r7, #28]
 801003e:	f7fe fc36 	bl	800e8ae <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010046:	2b00      	cmp	r3, #0
 8010048:	d104      	bne.n	8010054 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010050:	861a      	strh	r2, [r3, #48]	; 0x30
 8010052:	e006      	b.n	8010062 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	2200      	movs	r2, #0
 8010058:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	2200      	movs	r2, #0
 801005e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010068:	2b00      	cmp	r3, #0
 801006a:	d00a      	beq.n	8010082 <tcp_process+0x30a>
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010072:	687a      	ldr	r2, [r7, #4]
 8010074:	6910      	ldr	r0, [r2, #16]
 8010076:	2200      	movs	r2, #0
 8010078:	6879      	ldr	r1, [r7, #4]
 801007a:	4798      	blx	r3
 801007c:	4603      	mov	r3, r0
 801007e:	76bb      	strb	r3, [r7, #26]
 8010080:	e001      	b.n	8010086 <tcp_process+0x30e>
 8010082:	2300      	movs	r3, #0
 8010084:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8010086:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801008a:	f113 0f0d 	cmn.w	r3, #13
 801008e:	d102      	bne.n	8010096 <tcp_process+0x31e>
          return ERR_ABRT;
 8010090:	f06f 030c 	mvn.w	r3, #12
 8010094:	e250      	b.n	8010538 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	8b5b      	ldrh	r3, [r3, #26]
 801009a:	f043 0302 	orr.w	r3, r3, #2
 801009e:	b29a      	uxth	r2, r3
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80100a4:	e23a      	b.n	801051c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80100a6:	4b98      	ldr	r3, [pc, #608]	; (8010308 <tcp_process+0x590>)
 80100a8:	781b      	ldrb	r3, [r3, #0]
 80100aa:	f003 0310 	and.w	r3, r3, #16
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	f000 8234 	beq.w	801051c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80100b4:	4b95      	ldr	r3, [pc, #596]	; (801030c <tcp_process+0x594>)
 80100b6:	6819      	ldr	r1, [r3, #0]
 80100b8:	4b95      	ldr	r3, [pc, #596]	; (8010310 <tcp_process+0x598>)
 80100ba:	881b      	ldrh	r3, [r3, #0]
 80100bc:	461a      	mov	r2, r3
 80100be:	4b95      	ldr	r3, [pc, #596]	; (8010314 <tcp_process+0x59c>)
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80100c4:	4b94      	ldr	r3, [pc, #592]	; (8010318 <tcp_process+0x5a0>)
 80100c6:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80100c8:	885b      	ldrh	r3, [r3, #2]
 80100ca:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80100cc:	4a92      	ldr	r2, [pc, #584]	; (8010318 <tcp_process+0x5a0>)
 80100ce:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80100d0:	8812      	ldrh	r2, [r2, #0]
 80100d2:	b292      	uxth	r2, r2
 80100d4:	9202      	str	r2, [sp, #8]
 80100d6:	9301      	str	r3, [sp, #4]
 80100d8:	4b90      	ldr	r3, [pc, #576]	; (801031c <tcp_process+0x5a4>)
 80100da:	9300      	str	r3, [sp, #0]
 80100dc:	4b90      	ldr	r3, [pc, #576]	; (8010320 <tcp_process+0x5a8>)
 80100de:	4602      	mov	r2, r0
 80100e0:	6878      	ldr	r0, [r7, #4]
 80100e2:	f003 f8dd 	bl	80132a0 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80100ec:	2b05      	cmp	r3, #5
 80100ee:	f200 8215 	bhi.w	801051c <tcp_process+0x7a4>
          pcb->rtime = 0;
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	2200      	movs	r2, #0
 80100f6:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80100f8:	6878      	ldr	r0, [r7, #4]
 80100fa:	f002 fea9 	bl	8012e50 <tcp_rexmit_rto>
      break;
 80100fe:	e20d      	b.n	801051c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8010100:	4b81      	ldr	r3, [pc, #516]	; (8010308 <tcp_process+0x590>)
 8010102:	781b      	ldrb	r3, [r3, #0]
 8010104:	f003 0310 	and.w	r3, r3, #16
 8010108:	2b00      	cmp	r3, #0
 801010a:	f000 80a1 	beq.w	8010250 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801010e:	4b7f      	ldr	r3, [pc, #508]	; (801030c <tcp_process+0x594>)
 8010110:	681a      	ldr	r2, [r3, #0]
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010116:	1ad3      	subs	r3, r2, r3
 8010118:	3b01      	subs	r3, #1
 801011a:	2b00      	cmp	r3, #0
 801011c:	db7e      	blt.n	801021c <tcp_process+0x4a4>
 801011e:	4b7b      	ldr	r3, [pc, #492]	; (801030c <tcp_process+0x594>)
 8010120:	681a      	ldr	r2, [r3, #0]
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010126:	1ad3      	subs	r3, r2, r3
 8010128:	2b00      	cmp	r3, #0
 801012a:	dc77      	bgt.n	801021c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	2204      	movs	r2, #4
 8010130:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010136:	2b00      	cmp	r3, #0
 8010138:	d102      	bne.n	8010140 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801013a:	23fa      	movs	r3, #250	; 0xfa
 801013c:	76bb      	strb	r3, [r7, #26]
 801013e:	e01d      	b.n	801017c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010144:	699b      	ldr	r3, [r3, #24]
 8010146:	2b00      	cmp	r3, #0
 8010148:	d106      	bne.n	8010158 <tcp_process+0x3e0>
 801014a:	4b76      	ldr	r3, [pc, #472]	; (8010324 <tcp_process+0x5ac>)
 801014c:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8010150:	4975      	ldr	r1, [pc, #468]	; (8010328 <tcp_process+0x5b0>)
 8010152:	4876      	ldr	r0, [pc, #472]	; (801032c <tcp_process+0x5b4>)
 8010154:	f008 fd20 	bl	8018b98 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801015c:	699b      	ldr	r3, [r3, #24]
 801015e:	2b00      	cmp	r3, #0
 8010160:	d00a      	beq.n	8010178 <tcp_process+0x400>
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010166:	699b      	ldr	r3, [r3, #24]
 8010168:	687a      	ldr	r2, [r7, #4]
 801016a:	6910      	ldr	r0, [r2, #16]
 801016c:	2200      	movs	r2, #0
 801016e:	6879      	ldr	r1, [r7, #4]
 8010170:	4798      	blx	r3
 8010172:	4603      	mov	r3, r0
 8010174:	76bb      	strb	r3, [r7, #26]
 8010176:	e001      	b.n	801017c <tcp_process+0x404>
 8010178:	23f0      	movs	r3, #240	; 0xf0
 801017a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 801017c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010180:	2b00      	cmp	r3, #0
 8010182:	d00a      	beq.n	801019a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8010184:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010188:	f113 0f0d 	cmn.w	r3, #13
 801018c:	d002      	beq.n	8010194 <tcp_process+0x41c>
              tcp_abort(pcb);
 801018e:	6878      	ldr	r0, [r7, #4]
 8010190:	f7fd fbd0 	bl	800d934 <tcp_abort>
            }
            return ERR_ABRT;
 8010194:	f06f 030c 	mvn.w	r3, #12
 8010198:	e1ce      	b.n	8010538 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801019a:	6878      	ldr	r0, [r7, #4]
 801019c:	f000 fae0 	bl	8010760 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80101a0:	4b63      	ldr	r3, [pc, #396]	; (8010330 <tcp_process+0x5b8>)
 80101a2:	881b      	ldrh	r3, [r3, #0]
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d005      	beq.n	80101b4 <tcp_process+0x43c>
            recv_acked--;
 80101a8:	4b61      	ldr	r3, [pc, #388]	; (8010330 <tcp_process+0x5b8>)
 80101aa:	881b      	ldrh	r3, [r3, #0]
 80101ac:	3b01      	subs	r3, #1
 80101ae:	b29a      	uxth	r2, r3
 80101b0:	4b5f      	ldr	r3, [pc, #380]	; (8010330 <tcp_process+0x5b8>)
 80101b2:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80101b8:	009a      	lsls	r2, r3, #2
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80101be:	005b      	lsls	r3, r3, #1
 80101c0:	f241 111c 	movw	r1, #4380	; 0x111c
 80101c4:	428b      	cmp	r3, r1
 80101c6:	bf38      	it	cc
 80101c8:	460b      	movcc	r3, r1
 80101ca:	429a      	cmp	r2, r3
 80101cc:	d204      	bcs.n	80101d8 <tcp_process+0x460>
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80101d2:	009b      	lsls	r3, r3, #2
 80101d4:	b29b      	uxth	r3, r3
 80101d6:	e00d      	b.n	80101f4 <tcp_process+0x47c>
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80101dc:	005b      	lsls	r3, r3, #1
 80101de:	f241 121c 	movw	r2, #4380	; 0x111c
 80101e2:	4293      	cmp	r3, r2
 80101e4:	d904      	bls.n	80101f0 <tcp_process+0x478>
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80101ea:	005b      	lsls	r3, r3, #1
 80101ec:	b29b      	uxth	r3, r3
 80101ee:	e001      	b.n	80101f4 <tcp_process+0x47c>
 80101f0:	f241 131c 	movw	r3, #4380	; 0x111c
 80101f4:	687a      	ldr	r2, [r7, #4]
 80101f6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80101fa:	4b4e      	ldr	r3, [pc, #312]	; (8010334 <tcp_process+0x5bc>)
 80101fc:	781b      	ldrb	r3, [r3, #0]
 80101fe:	f003 0320 	and.w	r3, r3, #32
 8010202:	2b00      	cmp	r3, #0
 8010204:	d037      	beq.n	8010276 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	8b5b      	ldrh	r3, [r3, #26]
 801020a:	f043 0302 	orr.w	r3, r3, #2
 801020e:	b29a      	uxth	r2, r3
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	2207      	movs	r2, #7
 8010218:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801021a:	e02c      	b.n	8010276 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801021c:	4b3b      	ldr	r3, [pc, #236]	; (801030c <tcp_process+0x594>)
 801021e:	6819      	ldr	r1, [r3, #0]
 8010220:	4b3b      	ldr	r3, [pc, #236]	; (8010310 <tcp_process+0x598>)
 8010222:	881b      	ldrh	r3, [r3, #0]
 8010224:	461a      	mov	r2, r3
 8010226:	4b3b      	ldr	r3, [pc, #236]	; (8010314 <tcp_process+0x59c>)
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801022c:	4b3a      	ldr	r3, [pc, #232]	; (8010318 <tcp_process+0x5a0>)
 801022e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010230:	885b      	ldrh	r3, [r3, #2]
 8010232:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010234:	4a38      	ldr	r2, [pc, #224]	; (8010318 <tcp_process+0x5a0>)
 8010236:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010238:	8812      	ldrh	r2, [r2, #0]
 801023a:	b292      	uxth	r2, r2
 801023c:	9202      	str	r2, [sp, #8]
 801023e:	9301      	str	r3, [sp, #4]
 8010240:	4b36      	ldr	r3, [pc, #216]	; (801031c <tcp_process+0x5a4>)
 8010242:	9300      	str	r3, [sp, #0]
 8010244:	4b36      	ldr	r3, [pc, #216]	; (8010320 <tcp_process+0x5a8>)
 8010246:	4602      	mov	r2, r0
 8010248:	6878      	ldr	r0, [r7, #4]
 801024a:	f003 f829 	bl	80132a0 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801024e:	e167      	b.n	8010520 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8010250:	4b2d      	ldr	r3, [pc, #180]	; (8010308 <tcp_process+0x590>)
 8010252:	781b      	ldrb	r3, [r3, #0]
 8010254:	f003 0302 	and.w	r3, r3, #2
 8010258:	2b00      	cmp	r3, #0
 801025a:	f000 8161 	beq.w	8010520 <tcp_process+0x7a8>
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010262:	1e5a      	subs	r2, r3, #1
 8010264:	4b2b      	ldr	r3, [pc, #172]	; (8010314 <tcp_process+0x59c>)
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	429a      	cmp	r2, r3
 801026a:	f040 8159 	bne.w	8010520 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801026e:	6878      	ldr	r0, [r7, #4]
 8010270:	f002 fe10 	bl	8012e94 <tcp_rexmit>
      break;
 8010274:	e154      	b.n	8010520 <tcp_process+0x7a8>
 8010276:	e153      	b.n	8010520 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8010278:	6878      	ldr	r0, [r7, #4]
 801027a:	f000 fa71 	bl	8010760 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801027e:	4b2d      	ldr	r3, [pc, #180]	; (8010334 <tcp_process+0x5bc>)
 8010280:	781b      	ldrb	r3, [r3, #0]
 8010282:	f003 0320 	and.w	r3, r3, #32
 8010286:	2b00      	cmp	r3, #0
 8010288:	f000 814c 	beq.w	8010524 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	8b5b      	ldrh	r3, [r3, #26]
 8010290:	f043 0302 	orr.w	r3, r3, #2
 8010294:	b29a      	uxth	r2, r3
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	2207      	movs	r2, #7
 801029e:	751a      	strb	r2, [r3, #20]
      }
      break;
 80102a0:	e140      	b.n	8010524 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80102a2:	6878      	ldr	r0, [r7, #4]
 80102a4:	f000 fa5c 	bl	8010760 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80102a8:	4b22      	ldr	r3, [pc, #136]	; (8010334 <tcp_process+0x5bc>)
 80102aa:	781b      	ldrb	r3, [r3, #0]
 80102ac:	f003 0320 	and.w	r3, r3, #32
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d071      	beq.n	8010398 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80102b4:	4b14      	ldr	r3, [pc, #80]	; (8010308 <tcp_process+0x590>)
 80102b6:	781b      	ldrb	r3, [r3, #0]
 80102b8:	f003 0310 	and.w	r3, r3, #16
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d060      	beq.n	8010382 <tcp_process+0x60a>
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80102c4:	4b11      	ldr	r3, [pc, #68]	; (801030c <tcp_process+0x594>)
 80102c6:	681b      	ldr	r3, [r3, #0]
 80102c8:	429a      	cmp	r2, r3
 80102ca:	d15a      	bne.n	8010382 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d156      	bne.n	8010382 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	8b5b      	ldrh	r3, [r3, #26]
 80102d8:	f043 0302 	orr.w	r3, r3, #2
 80102dc:	b29a      	uxth	r2, r3
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80102e2:	6878      	ldr	r0, [r7, #4]
 80102e4:	f7fe fdbc 	bl	800ee60 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80102e8:	4b13      	ldr	r3, [pc, #76]	; (8010338 <tcp_process+0x5c0>)
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	687a      	ldr	r2, [r7, #4]
 80102ee:	429a      	cmp	r2, r3
 80102f0:	d105      	bne.n	80102fe <tcp_process+0x586>
 80102f2:	4b11      	ldr	r3, [pc, #68]	; (8010338 <tcp_process+0x5c0>)
 80102f4:	681b      	ldr	r3, [r3, #0]
 80102f6:	68db      	ldr	r3, [r3, #12]
 80102f8:	4a0f      	ldr	r2, [pc, #60]	; (8010338 <tcp_process+0x5c0>)
 80102fa:	6013      	str	r3, [r2, #0]
 80102fc:	e02e      	b.n	801035c <tcp_process+0x5e4>
 80102fe:	4b0e      	ldr	r3, [pc, #56]	; (8010338 <tcp_process+0x5c0>)
 8010300:	681b      	ldr	r3, [r3, #0]
 8010302:	617b      	str	r3, [r7, #20]
 8010304:	e027      	b.n	8010356 <tcp_process+0x5de>
 8010306:	bf00      	nop
 8010308:	20010eb4 	.word	0x20010eb4
 801030c:	20010eac 	.word	0x20010eac
 8010310:	20010eb2 	.word	0x20010eb2
 8010314:	20010ea8 	.word	0x20010ea8
 8010318:	20010e98 	.word	0x20010e98
 801031c:	2000d70c 	.word	0x2000d70c
 8010320:	2000d710 	.word	0x2000d710
 8010324:	0801c008 	.word	0x0801c008
 8010328:	0801c2a8 	.word	0x0801c2a8
 801032c:	0801c054 	.word	0x0801c054
 8010330:	20010eb0 	.word	0x20010eb0
 8010334:	20010eb5 	.word	0x20010eb5
 8010338:	20010e7c 	.word	0x20010e7c
 801033c:	697b      	ldr	r3, [r7, #20]
 801033e:	68db      	ldr	r3, [r3, #12]
 8010340:	687a      	ldr	r2, [r7, #4]
 8010342:	429a      	cmp	r2, r3
 8010344:	d104      	bne.n	8010350 <tcp_process+0x5d8>
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	68da      	ldr	r2, [r3, #12]
 801034a:	697b      	ldr	r3, [r7, #20]
 801034c:	60da      	str	r2, [r3, #12]
 801034e:	e005      	b.n	801035c <tcp_process+0x5e4>
 8010350:	697b      	ldr	r3, [r7, #20]
 8010352:	68db      	ldr	r3, [r3, #12]
 8010354:	617b      	str	r3, [r7, #20]
 8010356:	697b      	ldr	r3, [r7, #20]
 8010358:	2b00      	cmp	r3, #0
 801035a:	d1ef      	bne.n	801033c <tcp_process+0x5c4>
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	2200      	movs	r2, #0
 8010360:	60da      	str	r2, [r3, #12]
 8010362:	4b77      	ldr	r3, [pc, #476]	; (8010540 <tcp_process+0x7c8>)
 8010364:	2201      	movs	r2, #1
 8010366:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	220a      	movs	r2, #10
 801036c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801036e:	4b75      	ldr	r3, [pc, #468]	; (8010544 <tcp_process+0x7cc>)
 8010370:	681a      	ldr	r2, [r3, #0]
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	60da      	str	r2, [r3, #12]
 8010376:	4a73      	ldr	r2, [pc, #460]	; (8010544 <tcp_process+0x7cc>)
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	6013      	str	r3, [r2, #0]
 801037c:	f003 f952 	bl	8013624 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8010380:	e0d2      	b.n	8010528 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	8b5b      	ldrh	r3, [r3, #26]
 8010386:	f043 0302 	orr.w	r3, r3, #2
 801038a:	b29a      	uxth	r2, r3
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	2208      	movs	r2, #8
 8010394:	751a      	strb	r2, [r3, #20]
      break;
 8010396:	e0c7      	b.n	8010528 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010398:	4b6b      	ldr	r3, [pc, #428]	; (8010548 <tcp_process+0x7d0>)
 801039a:	781b      	ldrb	r3, [r3, #0]
 801039c:	f003 0310 	and.w	r3, r3, #16
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	f000 80c1 	beq.w	8010528 <tcp_process+0x7b0>
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80103aa:	4b68      	ldr	r3, [pc, #416]	; (801054c <tcp_process+0x7d4>)
 80103ac:	681b      	ldr	r3, [r3, #0]
 80103ae:	429a      	cmp	r2, r3
 80103b0:	f040 80ba 	bne.w	8010528 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	f040 80b5 	bne.w	8010528 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	2206      	movs	r2, #6
 80103c2:	751a      	strb	r2, [r3, #20]
      break;
 80103c4:	e0b0      	b.n	8010528 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80103c6:	6878      	ldr	r0, [r7, #4]
 80103c8:	f000 f9ca 	bl	8010760 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80103cc:	4b60      	ldr	r3, [pc, #384]	; (8010550 <tcp_process+0x7d8>)
 80103ce:	781b      	ldrb	r3, [r3, #0]
 80103d0:	f003 0320 	and.w	r3, r3, #32
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	f000 80a9 	beq.w	801052c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	8b5b      	ldrh	r3, [r3, #26]
 80103de:	f043 0302 	orr.w	r3, r3, #2
 80103e2:	b29a      	uxth	r2, r3
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80103e8:	6878      	ldr	r0, [r7, #4]
 80103ea:	f7fe fd39 	bl	800ee60 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80103ee:	4b59      	ldr	r3, [pc, #356]	; (8010554 <tcp_process+0x7dc>)
 80103f0:	681b      	ldr	r3, [r3, #0]
 80103f2:	687a      	ldr	r2, [r7, #4]
 80103f4:	429a      	cmp	r2, r3
 80103f6:	d105      	bne.n	8010404 <tcp_process+0x68c>
 80103f8:	4b56      	ldr	r3, [pc, #344]	; (8010554 <tcp_process+0x7dc>)
 80103fa:	681b      	ldr	r3, [r3, #0]
 80103fc:	68db      	ldr	r3, [r3, #12]
 80103fe:	4a55      	ldr	r2, [pc, #340]	; (8010554 <tcp_process+0x7dc>)
 8010400:	6013      	str	r3, [r2, #0]
 8010402:	e013      	b.n	801042c <tcp_process+0x6b4>
 8010404:	4b53      	ldr	r3, [pc, #332]	; (8010554 <tcp_process+0x7dc>)
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	613b      	str	r3, [r7, #16]
 801040a:	e00c      	b.n	8010426 <tcp_process+0x6ae>
 801040c:	693b      	ldr	r3, [r7, #16]
 801040e:	68db      	ldr	r3, [r3, #12]
 8010410:	687a      	ldr	r2, [r7, #4]
 8010412:	429a      	cmp	r2, r3
 8010414:	d104      	bne.n	8010420 <tcp_process+0x6a8>
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	68da      	ldr	r2, [r3, #12]
 801041a:	693b      	ldr	r3, [r7, #16]
 801041c:	60da      	str	r2, [r3, #12]
 801041e:	e005      	b.n	801042c <tcp_process+0x6b4>
 8010420:	693b      	ldr	r3, [r7, #16]
 8010422:	68db      	ldr	r3, [r3, #12]
 8010424:	613b      	str	r3, [r7, #16]
 8010426:	693b      	ldr	r3, [r7, #16]
 8010428:	2b00      	cmp	r3, #0
 801042a:	d1ef      	bne.n	801040c <tcp_process+0x694>
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	2200      	movs	r2, #0
 8010430:	60da      	str	r2, [r3, #12]
 8010432:	4b43      	ldr	r3, [pc, #268]	; (8010540 <tcp_process+0x7c8>)
 8010434:	2201      	movs	r2, #1
 8010436:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	220a      	movs	r2, #10
 801043c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801043e:	4b41      	ldr	r3, [pc, #260]	; (8010544 <tcp_process+0x7cc>)
 8010440:	681a      	ldr	r2, [r3, #0]
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	60da      	str	r2, [r3, #12]
 8010446:	4a3f      	ldr	r2, [pc, #252]	; (8010544 <tcp_process+0x7cc>)
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	6013      	str	r3, [r2, #0]
 801044c:	f003 f8ea 	bl	8013624 <tcp_timer_needed>
      }
      break;
 8010450:	e06c      	b.n	801052c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8010452:	6878      	ldr	r0, [r7, #4]
 8010454:	f000 f984 	bl	8010760 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010458:	4b3b      	ldr	r3, [pc, #236]	; (8010548 <tcp_process+0x7d0>)
 801045a:	781b      	ldrb	r3, [r3, #0]
 801045c:	f003 0310 	and.w	r3, r3, #16
 8010460:	2b00      	cmp	r3, #0
 8010462:	d065      	beq.n	8010530 <tcp_process+0x7b8>
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010468:	4b38      	ldr	r3, [pc, #224]	; (801054c <tcp_process+0x7d4>)
 801046a:	681b      	ldr	r3, [r3, #0]
 801046c:	429a      	cmp	r2, r3
 801046e:	d15f      	bne.n	8010530 <tcp_process+0x7b8>
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010474:	2b00      	cmp	r3, #0
 8010476:	d15b      	bne.n	8010530 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8010478:	6878      	ldr	r0, [r7, #4]
 801047a:	f7fe fcf1 	bl	800ee60 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801047e:	4b35      	ldr	r3, [pc, #212]	; (8010554 <tcp_process+0x7dc>)
 8010480:	681b      	ldr	r3, [r3, #0]
 8010482:	687a      	ldr	r2, [r7, #4]
 8010484:	429a      	cmp	r2, r3
 8010486:	d105      	bne.n	8010494 <tcp_process+0x71c>
 8010488:	4b32      	ldr	r3, [pc, #200]	; (8010554 <tcp_process+0x7dc>)
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	68db      	ldr	r3, [r3, #12]
 801048e:	4a31      	ldr	r2, [pc, #196]	; (8010554 <tcp_process+0x7dc>)
 8010490:	6013      	str	r3, [r2, #0]
 8010492:	e013      	b.n	80104bc <tcp_process+0x744>
 8010494:	4b2f      	ldr	r3, [pc, #188]	; (8010554 <tcp_process+0x7dc>)
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	60fb      	str	r3, [r7, #12]
 801049a:	e00c      	b.n	80104b6 <tcp_process+0x73e>
 801049c:	68fb      	ldr	r3, [r7, #12]
 801049e:	68db      	ldr	r3, [r3, #12]
 80104a0:	687a      	ldr	r2, [r7, #4]
 80104a2:	429a      	cmp	r2, r3
 80104a4:	d104      	bne.n	80104b0 <tcp_process+0x738>
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	68da      	ldr	r2, [r3, #12]
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	60da      	str	r2, [r3, #12]
 80104ae:	e005      	b.n	80104bc <tcp_process+0x744>
 80104b0:	68fb      	ldr	r3, [r7, #12]
 80104b2:	68db      	ldr	r3, [r3, #12]
 80104b4:	60fb      	str	r3, [r7, #12]
 80104b6:	68fb      	ldr	r3, [r7, #12]
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d1ef      	bne.n	801049c <tcp_process+0x724>
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	2200      	movs	r2, #0
 80104c0:	60da      	str	r2, [r3, #12]
 80104c2:	4b1f      	ldr	r3, [pc, #124]	; (8010540 <tcp_process+0x7c8>)
 80104c4:	2201      	movs	r2, #1
 80104c6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	220a      	movs	r2, #10
 80104cc:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80104ce:	4b1d      	ldr	r3, [pc, #116]	; (8010544 <tcp_process+0x7cc>)
 80104d0:	681a      	ldr	r2, [r3, #0]
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	60da      	str	r2, [r3, #12]
 80104d6:	4a1b      	ldr	r2, [pc, #108]	; (8010544 <tcp_process+0x7cc>)
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	6013      	str	r3, [r2, #0]
 80104dc:	f003 f8a2 	bl	8013624 <tcp_timer_needed>
      }
      break;
 80104e0:	e026      	b.n	8010530 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80104e2:	6878      	ldr	r0, [r7, #4]
 80104e4:	f000 f93c 	bl	8010760 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80104e8:	4b17      	ldr	r3, [pc, #92]	; (8010548 <tcp_process+0x7d0>)
 80104ea:	781b      	ldrb	r3, [r3, #0]
 80104ec:	f003 0310 	and.w	r3, r3, #16
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d01f      	beq.n	8010534 <tcp_process+0x7bc>
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80104f8:	4b14      	ldr	r3, [pc, #80]	; (801054c <tcp_process+0x7d4>)
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	429a      	cmp	r2, r3
 80104fe:	d119      	bne.n	8010534 <tcp_process+0x7bc>
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010504:	2b00      	cmp	r3, #0
 8010506:	d115      	bne.n	8010534 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8010508:	4b11      	ldr	r3, [pc, #68]	; (8010550 <tcp_process+0x7d8>)
 801050a:	781b      	ldrb	r3, [r3, #0]
 801050c:	f043 0310 	orr.w	r3, r3, #16
 8010510:	b2da      	uxtb	r2, r3
 8010512:	4b0f      	ldr	r3, [pc, #60]	; (8010550 <tcp_process+0x7d8>)
 8010514:	701a      	strb	r2, [r3, #0]
      }
      break;
 8010516:	e00d      	b.n	8010534 <tcp_process+0x7bc>
    default:
      break;
 8010518:	bf00      	nop
 801051a:	e00c      	b.n	8010536 <tcp_process+0x7be>
      break;
 801051c:	bf00      	nop
 801051e:	e00a      	b.n	8010536 <tcp_process+0x7be>
      break;
 8010520:	bf00      	nop
 8010522:	e008      	b.n	8010536 <tcp_process+0x7be>
      break;
 8010524:	bf00      	nop
 8010526:	e006      	b.n	8010536 <tcp_process+0x7be>
      break;
 8010528:	bf00      	nop
 801052a:	e004      	b.n	8010536 <tcp_process+0x7be>
      break;
 801052c:	bf00      	nop
 801052e:	e002      	b.n	8010536 <tcp_process+0x7be>
      break;
 8010530:	bf00      	nop
 8010532:	e000      	b.n	8010536 <tcp_process+0x7be>
      break;
 8010534:	bf00      	nop
  }
  return ERR_OK;
 8010536:	2300      	movs	r3, #0
}
 8010538:	4618      	mov	r0, r3
 801053a:	3724      	adds	r7, #36	; 0x24
 801053c:	46bd      	mov	sp, r7
 801053e:	bd90      	pop	{r4, r7, pc}
 8010540:	20010e84 	.word	0x20010e84
 8010544:	20010e80 	.word	0x20010e80
 8010548:	20010eb4 	.word	0x20010eb4
 801054c:	20010eac 	.word	0x20010eac
 8010550:	20010eb5 	.word	0x20010eb5
 8010554:	20010e7c 	.word	0x20010e7c

08010558 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8010558:	b590      	push	{r4, r7, lr}
 801055a:	b085      	sub	sp, #20
 801055c:	af00      	add	r7, sp, #0
 801055e:	6078      	str	r0, [r7, #4]
 8010560:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	2b00      	cmp	r3, #0
 8010566:	d106      	bne.n	8010576 <tcp_oos_insert_segment+0x1e>
 8010568:	4b3b      	ldr	r3, [pc, #236]	; (8010658 <tcp_oos_insert_segment+0x100>)
 801056a:	f240 421f 	movw	r2, #1055	; 0x41f
 801056e:	493b      	ldr	r1, [pc, #236]	; (801065c <tcp_oos_insert_segment+0x104>)
 8010570:	483b      	ldr	r0, [pc, #236]	; (8010660 <tcp_oos_insert_segment+0x108>)
 8010572:	f008 fb11 	bl	8018b98 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	68db      	ldr	r3, [r3, #12]
 801057a:	899b      	ldrh	r3, [r3, #12]
 801057c:	b29b      	uxth	r3, r3
 801057e:	4618      	mov	r0, r3
 8010580:	f7fa ffa4 	bl	800b4cc <lwip_htons>
 8010584:	4603      	mov	r3, r0
 8010586:	b2db      	uxtb	r3, r3
 8010588:	f003 0301 	and.w	r3, r3, #1
 801058c:	2b00      	cmp	r3, #0
 801058e:	d028      	beq.n	80105e2 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8010590:	6838      	ldr	r0, [r7, #0]
 8010592:	f7fe f977 	bl	800e884 <tcp_segs_free>
    next = NULL;
 8010596:	2300      	movs	r3, #0
 8010598:	603b      	str	r3, [r7, #0]
 801059a:	e056      	b.n	801064a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801059c:	683b      	ldr	r3, [r7, #0]
 801059e:	68db      	ldr	r3, [r3, #12]
 80105a0:	899b      	ldrh	r3, [r3, #12]
 80105a2:	b29b      	uxth	r3, r3
 80105a4:	4618      	mov	r0, r3
 80105a6:	f7fa ff91 	bl	800b4cc <lwip_htons>
 80105aa:	4603      	mov	r3, r0
 80105ac:	b2db      	uxtb	r3, r3
 80105ae:	f003 0301 	and.w	r3, r3, #1
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d00d      	beq.n	80105d2 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	68db      	ldr	r3, [r3, #12]
 80105ba:	899b      	ldrh	r3, [r3, #12]
 80105bc:	b29c      	uxth	r4, r3
 80105be:	2001      	movs	r0, #1
 80105c0:	f7fa ff84 	bl	800b4cc <lwip_htons>
 80105c4:	4603      	mov	r3, r0
 80105c6:	461a      	mov	r2, r3
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	68db      	ldr	r3, [r3, #12]
 80105cc:	4322      	orrs	r2, r4
 80105ce:	b292      	uxth	r2, r2
 80105d0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80105d2:	683b      	ldr	r3, [r7, #0]
 80105d4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80105d6:	683b      	ldr	r3, [r7, #0]
 80105d8:	681b      	ldr	r3, [r3, #0]
 80105da:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80105dc:	68f8      	ldr	r0, [r7, #12]
 80105de:	f7fe f966 	bl	800e8ae <tcp_seg_free>
    while (next &&
 80105e2:	683b      	ldr	r3, [r7, #0]
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d00e      	beq.n	8010606 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	891b      	ldrh	r3, [r3, #8]
 80105ec:	461a      	mov	r2, r3
 80105ee:	4b1d      	ldr	r3, [pc, #116]	; (8010664 <tcp_oos_insert_segment+0x10c>)
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	441a      	add	r2, r3
 80105f4:	683b      	ldr	r3, [r7, #0]
 80105f6:	68db      	ldr	r3, [r3, #12]
 80105f8:	685b      	ldr	r3, [r3, #4]
 80105fa:	6839      	ldr	r1, [r7, #0]
 80105fc:	8909      	ldrh	r1, [r1, #8]
 80105fe:	440b      	add	r3, r1
 8010600:	1ad3      	subs	r3, r2, r3
    while (next &&
 8010602:	2b00      	cmp	r3, #0
 8010604:	daca      	bge.n	801059c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8010606:	683b      	ldr	r3, [r7, #0]
 8010608:	2b00      	cmp	r3, #0
 801060a:	d01e      	beq.n	801064a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	891b      	ldrh	r3, [r3, #8]
 8010610:	461a      	mov	r2, r3
 8010612:	4b14      	ldr	r3, [pc, #80]	; (8010664 <tcp_oos_insert_segment+0x10c>)
 8010614:	681b      	ldr	r3, [r3, #0]
 8010616:	441a      	add	r2, r3
 8010618:	683b      	ldr	r3, [r7, #0]
 801061a:	68db      	ldr	r3, [r3, #12]
 801061c:	685b      	ldr	r3, [r3, #4]
 801061e:	1ad3      	subs	r3, r2, r3
    if (next &&
 8010620:	2b00      	cmp	r3, #0
 8010622:	dd12      	ble.n	801064a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8010624:	683b      	ldr	r3, [r7, #0]
 8010626:	68db      	ldr	r3, [r3, #12]
 8010628:	685b      	ldr	r3, [r3, #4]
 801062a:	b29a      	uxth	r2, r3
 801062c:	4b0d      	ldr	r3, [pc, #52]	; (8010664 <tcp_oos_insert_segment+0x10c>)
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	b29b      	uxth	r3, r3
 8010632:	1ad3      	subs	r3, r2, r3
 8010634:	b29a      	uxth	r2, r3
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	685a      	ldr	r2, [r3, #4]
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	891b      	ldrh	r3, [r3, #8]
 8010642:	4619      	mov	r1, r3
 8010644:	4610      	mov	r0, r2
 8010646:	f7fc f9ef 	bl	800ca28 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	683a      	ldr	r2, [r7, #0]
 801064e:	601a      	str	r2, [r3, #0]
}
 8010650:	bf00      	nop
 8010652:	3714      	adds	r7, #20
 8010654:	46bd      	mov	sp, r7
 8010656:	bd90      	pop	{r4, r7, pc}
 8010658:	0801c008 	.word	0x0801c008
 801065c:	0801c2c8 	.word	0x0801c2c8
 8010660:	0801c054 	.word	0x0801c054
 8010664:	20010ea8 	.word	0x20010ea8

08010668 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8010668:	b5b0      	push	{r4, r5, r7, lr}
 801066a:	b086      	sub	sp, #24
 801066c:	af00      	add	r7, sp, #0
 801066e:	60f8      	str	r0, [r7, #12]
 8010670:	60b9      	str	r1, [r7, #8]
 8010672:	607a      	str	r2, [r7, #4]
 8010674:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8010676:	e03e      	b.n	80106f6 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8010678:	68bb      	ldr	r3, [r7, #8]
 801067a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 801067c:	68bb      	ldr	r3, [r7, #8]
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8010682:	697b      	ldr	r3, [r7, #20]
 8010684:	685b      	ldr	r3, [r3, #4]
 8010686:	4618      	mov	r0, r3
 8010688:	f7fc fbe2 	bl	800ce50 <pbuf_clen>
 801068c:	4603      	mov	r3, r0
 801068e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8010690:	68fb      	ldr	r3, [r7, #12]
 8010692:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010696:	8a7a      	ldrh	r2, [r7, #18]
 8010698:	429a      	cmp	r2, r3
 801069a:	d906      	bls.n	80106aa <tcp_free_acked_segments+0x42>
 801069c:	4b2a      	ldr	r3, [pc, #168]	; (8010748 <tcp_free_acked_segments+0xe0>)
 801069e:	f240 4257 	movw	r2, #1111	; 0x457
 80106a2:	492a      	ldr	r1, [pc, #168]	; (801074c <tcp_free_acked_segments+0xe4>)
 80106a4:	482a      	ldr	r0, [pc, #168]	; (8010750 <tcp_free_acked_segments+0xe8>)
 80106a6:	f008 fa77 	bl	8018b98 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80106aa:	68fb      	ldr	r3, [r7, #12]
 80106ac:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80106b0:	8a7b      	ldrh	r3, [r7, #18]
 80106b2:	1ad3      	subs	r3, r2, r3
 80106b4:	b29a      	uxth	r2, r3
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80106bc:	697b      	ldr	r3, [r7, #20]
 80106be:	891a      	ldrh	r2, [r3, #8]
 80106c0:	4b24      	ldr	r3, [pc, #144]	; (8010754 <tcp_free_acked_segments+0xec>)
 80106c2:	881b      	ldrh	r3, [r3, #0]
 80106c4:	4413      	add	r3, r2
 80106c6:	b29a      	uxth	r2, r3
 80106c8:	4b22      	ldr	r3, [pc, #136]	; (8010754 <tcp_free_acked_segments+0xec>)
 80106ca:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80106cc:	6978      	ldr	r0, [r7, #20]
 80106ce:	f7fe f8ee 	bl	800e8ae <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80106d2:	68fb      	ldr	r3, [r7, #12]
 80106d4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d00c      	beq.n	80106f6 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80106dc:	68bb      	ldr	r3, [r7, #8]
 80106de:	2b00      	cmp	r3, #0
 80106e0:	d109      	bne.n	80106f6 <tcp_free_acked_segments+0x8e>
 80106e2:	683b      	ldr	r3, [r7, #0]
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d106      	bne.n	80106f6 <tcp_free_acked_segments+0x8e>
 80106e8:	4b17      	ldr	r3, [pc, #92]	; (8010748 <tcp_free_acked_segments+0xe0>)
 80106ea:	f240 4261 	movw	r2, #1121	; 0x461
 80106ee:	491a      	ldr	r1, [pc, #104]	; (8010758 <tcp_free_acked_segments+0xf0>)
 80106f0:	4817      	ldr	r0, [pc, #92]	; (8010750 <tcp_free_acked_segments+0xe8>)
 80106f2:	f008 fa51 	bl	8018b98 <iprintf>
  while (seg_list != NULL &&
 80106f6:	68bb      	ldr	r3, [r7, #8]
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d020      	beq.n	801073e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80106fc:	68bb      	ldr	r3, [r7, #8]
 80106fe:	68db      	ldr	r3, [r3, #12]
 8010700:	685b      	ldr	r3, [r3, #4]
 8010702:	4618      	mov	r0, r3
 8010704:	f7fa fef7 	bl	800b4f6 <lwip_htonl>
 8010708:	4604      	mov	r4, r0
 801070a:	68bb      	ldr	r3, [r7, #8]
 801070c:	891b      	ldrh	r3, [r3, #8]
 801070e:	461d      	mov	r5, r3
 8010710:	68bb      	ldr	r3, [r7, #8]
 8010712:	68db      	ldr	r3, [r3, #12]
 8010714:	899b      	ldrh	r3, [r3, #12]
 8010716:	b29b      	uxth	r3, r3
 8010718:	4618      	mov	r0, r3
 801071a:	f7fa fed7 	bl	800b4cc <lwip_htons>
 801071e:	4603      	mov	r3, r0
 8010720:	b2db      	uxtb	r3, r3
 8010722:	f003 0303 	and.w	r3, r3, #3
 8010726:	2b00      	cmp	r3, #0
 8010728:	d001      	beq.n	801072e <tcp_free_acked_segments+0xc6>
 801072a:	2301      	movs	r3, #1
 801072c:	e000      	b.n	8010730 <tcp_free_acked_segments+0xc8>
 801072e:	2300      	movs	r3, #0
 8010730:	442b      	add	r3, r5
 8010732:	18e2      	adds	r2, r4, r3
 8010734:	4b09      	ldr	r3, [pc, #36]	; (801075c <tcp_free_acked_segments+0xf4>)
 8010736:	681b      	ldr	r3, [r3, #0]
 8010738:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801073a:	2b00      	cmp	r3, #0
 801073c:	dd9c      	ble.n	8010678 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801073e:	68bb      	ldr	r3, [r7, #8]
}
 8010740:	4618      	mov	r0, r3
 8010742:	3718      	adds	r7, #24
 8010744:	46bd      	mov	sp, r7
 8010746:	bdb0      	pop	{r4, r5, r7, pc}
 8010748:	0801c008 	.word	0x0801c008
 801074c:	0801c2f0 	.word	0x0801c2f0
 8010750:	0801c054 	.word	0x0801c054
 8010754:	20010eb0 	.word	0x20010eb0
 8010758:	0801c318 	.word	0x0801c318
 801075c:	20010eac 	.word	0x20010eac

08010760 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8010760:	b5b0      	push	{r4, r5, r7, lr}
 8010762:	b094      	sub	sp, #80	; 0x50
 8010764:	af00      	add	r7, sp, #0
 8010766:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8010768:	2300      	movs	r3, #0
 801076a:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	2b00      	cmp	r3, #0
 8010770:	d106      	bne.n	8010780 <tcp_receive+0x20>
 8010772:	4b91      	ldr	r3, [pc, #580]	; (80109b8 <tcp_receive+0x258>)
 8010774:	f240 427b 	movw	r2, #1147	; 0x47b
 8010778:	4990      	ldr	r1, [pc, #576]	; (80109bc <tcp_receive+0x25c>)
 801077a:	4891      	ldr	r0, [pc, #580]	; (80109c0 <tcp_receive+0x260>)
 801077c:	f008 fa0c 	bl	8018b98 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	7d1b      	ldrb	r3, [r3, #20]
 8010784:	2b03      	cmp	r3, #3
 8010786:	d806      	bhi.n	8010796 <tcp_receive+0x36>
 8010788:	4b8b      	ldr	r3, [pc, #556]	; (80109b8 <tcp_receive+0x258>)
 801078a:	f240 427c 	movw	r2, #1148	; 0x47c
 801078e:	498d      	ldr	r1, [pc, #564]	; (80109c4 <tcp_receive+0x264>)
 8010790:	488b      	ldr	r0, [pc, #556]	; (80109c0 <tcp_receive+0x260>)
 8010792:	f008 fa01 	bl	8018b98 <iprintf>

  if (flags & TCP_ACK) {
 8010796:	4b8c      	ldr	r3, [pc, #560]	; (80109c8 <tcp_receive+0x268>)
 8010798:	781b      	ldrb	r3, [r3, #0]
 801079a:	f003 0310 	and.w	r3, r3, #16
 801079e:	2b00      	cmp	r3, #0
 80107a0:	f000 8264 	beq.w	8010c6c <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80107aa:	461a      	mov	r2, r3
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80107b0:	4413      	add	r3, r2
 80107b2:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80107b8:	4b84      	ldr	r3, [pc, #528]	; (80109cc <tcp_receive+0x26c>)
 80107ba:	681b      	ldr	r3, [r3, #0]
 80107bc:	1ad3      	subs	r3, r2, r3
 80107be:	2b00      	cmp	r3, #0
 80107c0:	db1b      	blt.n	80107fa <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80107c6:	4b81      	ldr	r3, [pc, #516]	; (80109cc <tcp_receive+0x26c>)
 80107c8:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80107ca:	429a      	cmp	r2, r3
 80107cc:	d106      	bne.n	80107dc <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80107d2:	4b7f      	ldr	r3, [pc, #508]	; (80109d0 <tcp_receive+0x270>)
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	1ad3      	subs	r3, r2, r3
 80107d8:	2b00      	cmp	r3, #0
 80107da:	db0e      	blt.n	80107fa <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80107e0:	4b7b      	ldr	r3, [pc, #492]	; (80109d0 <tcp_receive+0x270>)
 80107e2:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80107e4:	429a      	cmp	r2, r3
 80107e6:	d125      	bne.n	8010834 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80107e8:	4b7a      	ldr	r3, [pc, #488]	; (80109d4 <tcp_receive+0x274>)
 80107ea:	681b      	ldr	r3, [r3, #0]
 80107ec:	89db      	ldrh	r3, [r3, #14]
 80107ee:	b29a      	uxth	r2, r3
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80107f6:	429a      	cmp	r2, r3
 80107f8:	d91c      	bls.n	8010834 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80107fa:	4b76      	ldr	r3, [pc, #472]	; (80109d4 <tcp_receive+0x274>)
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	89db      	ldrh	r3, [r3, #14]
 8010800:	b29a      	uxth	r2, r3
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010814:	429a      	cmp	r2, r3
 8010816:	d205      	bcs.n	8010824 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8010824:	4b69      	ldr	r3, [pc, #420]	; (80109cc <tcp_receive+0x26c>)
 8010826:	681a      	ldr	r2, [r3, #0]
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 801082c:	4b68      	ldr	r3, [pc, #416]	; (80109d0 <tcp_receive+0x270>)
 801082e:	681a      	ldr	r2, [r3, #0]
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8010834:	4b66      	ldr	r3, [pc, #408]	; (80109d0 <tcp_receive+0x270>)
 8010836:	681a      	ldr	r2, [r3, #0]
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801083c:	1ad3      	subs	r3, r2, r3
 801083e:	2b00      	cmp	r3, #0
 8010840:	dc58      	bgt.n	80108f4 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8010842:	4b65      	ldr	r3, [pc, #404]	; (80109d8 <tcp_receive+0x278>)
 8010844:	881b      	ldrh	r3, [r3, #0]
 8010846:	2b00      	cmp	r3, #0
 8010848:	d14b      	bne.n	80108e2 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801084e:	687a      	ldr	r2, [r7, #4]
 8010850:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8010854:	4413      	add	r3, r2
 8010856:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010858:	429a      	cmp	r2, r3
 801085a:	d142      	bne.n	80108e2 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010862:	2b00      	cmp	r3, #0
 8010864:	db3d      	blt.n	80108e2 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801086a:	4b59      	ldr	r3, [pc, #356]	; (80109d0 <tcp_receive+0x270>)
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	429a      	cmp	r2, r3
 8010870:	d137      	bne.n	80108e2 <tcp_receive+0x182>
              found_dupack = 1;
 8010872:	2301      	movs	r3, #1
 8010874:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801087c:	2bff      	cmp	r3, #255	; 0xff
 801087e:	d007      	beq.n	8010890 <tcp_receive+0x130>
                ++pcb->dupacks;
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010886:	3301      	adds	r3, #1
 8010888:	b2da      	uxtb	r2, r3
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010896:	2b03      	cmp	r3, #3
 8010898:	d91b      	bls.n	80108d2 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80108a4:	4413      	add	r3, r2
 80108a6:	b29a      	uxth	r2, r3
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80108ae:	429a      	cmp	r2, r3
 80108b0:	d30a      	bcc.n	80108c8 <tcp_receive+0x168>
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80108bc:	4413      	add	r3, r2
 80108be:	b29a      	uxth	r2, r3
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80108c6:	e004      	b.n	80108d2 <tcp_receive+0x172>
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80108ce:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80108d8:	2b02      	cmp	r3, #2
 80108da:	d902      	bls.n	80108e2 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80108dc:	6878      	ldr	r0, [r7, #4]
 80108de:	f002 fb45 	bl	8012f6c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80108e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	f040 8161 	bne.w	8010bac <tcp_receive+0x44c>
        pcb->dupacks = 0;
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	2200      	movs	r2, #0
 80108ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80108f2:	e15b      	b.n	8010bac <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80108f4:	4b36      	ldr	r3, [pc, #216]	; (80109d0 <tcp_receive+0x270>)
 80108f6:	681a      	ldr	r2, [r3, #0]
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80108fc:	1ad3      	subs	r3, r2, r3
 80108fe:	3b01      	subs	r3, #1
 8010900:	2b00      	cmp	r3, #0
 8010902:	f2c0 814e 	blt.w	8010ba2 <tcp_receive+0x442>
 8010906:	4b32      	ldr	r3, [pc, #200]	; (80109d0 <tcp_receive+0x270>)
 8010908:	681a      	ldr	r2, [r3, #0]
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801090e:	1ad3      	subs	r3, r2, r3
 8010910:	2b00      	cmp	r3, #0
 8010912:	f300 8146 	bgt.w	8010ba2 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	8b5b      	ldrh	r3, [r3, #26]
 801091a:	f003 0304 	and.w	r3, r3, #4
 801091e:	2b00      	cmp	r3, #0
 8010920:	d010      	beq.n	8010944 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	8b5b      	ldrh	r3, [r3, #26]
 8010926:	f023 0304 	bic.w	r3, r3, #4
 801092a:	b29a      	uxth	r2, r3
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	2200      	movs	r2, #0
 8010940:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	2200      	movs	r2, #0
 8010948:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010952:	10db      	asrs	r3, r3, #3
 8010954:	b21b      	sxth	r3, r3
 8010956:	b29a      	uxth	r2, r3
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801095e:	b29b      	uxth	r3, r3
 8010960:	4413      	add	r3, r2
 8010962:	b29b      	uxth	r3, r3
 8010964:	b21a      	sxth	r2, r3
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 801096c:	4b18      	ldr	r3, [pc, #96]	; (80109d0 <tcp_receive+0x270>)
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	b29a      	uxth	r2, r3
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010976:	b29b      	uxth	r3, r3
 8010978:	1ad3      	subs	r3, r2, r3
 801097a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	2200      	movs	r2, #0
 8010980:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8010984:	4b12      	ldr	r3, [pc, #72]	; (80109d0 <tcp_receive+0x270>)
 8010986:	681a      	ldr	r2, [r3, #0]
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	7d1b      	ldrb	r3, [r3, #20]
 8010990:	2b03      	cmp	r3, #3
 8010992:	f240 8097 	bls.w	8010ac4 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80109a2:	429a      	cmp	r2, r3
 80109a4:	d245      	bcs.n	8010a32 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	8b5b      	ldrh	r3, [r3, #26]
 80109aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d014      	beq.n	80109dc <tcp_receive+0x27c>
 80109b2:	2301      	movs	r3, #1
 80109b4:	e013      	b.n	80109de <tcp_receive+0x27e>
 80109b6:	bf00      	nop
 80109b8:	0801c008 	.word	0x0801c008
 80109bc:	0801c338 	.word	0x0801c338
 80109c0:	0801c054 	.word	0x0801c054
 80109c4:	0801c354 	.word	0x0801c354
 80109c8:	20010eb4 	.word	0x20010eb4
 80109cc:	20010ea8 	.word	0x20010ea8
 80109d0:	20010eac 	.word	0x20010eac
 80109d4:	20010e98 	.word	0x20010e98
 80109d8:	20010eb2 	.word	0x20010eb2
 80109dc:	2302      	movs	r3, #2
 80109de:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80109e2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80109e6:	b29a      	uxth	r2, r3
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80109ec:	fb12 f303 	smulbb	r3, r2, r3
 80109f0:	b29b      	uxth	r3, r3
 80109f2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80109f4:	4293      	cmp	r3, r2
 80109f6:	bf28      	it	cs
 80109f8:	4613      	movcs	r3, r2
 80109fa:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010a02:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010a04:	4413      	add	r3, r2
 8010a06:	b29a      	uxth	r2, r3
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010a0e:	429a      	cmp	r2, r3
 8010a10:	d309      	bcc.n	8010a26 <tcp_receive+0x2c6>
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010a18:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010a1a:	4413      	add	r3, r2
 8010a1c:	b29a      	uxth	r2, r3
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010a24:	e04e      	b.n	8010ac4 <tcp_receive+0x364>
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010a2c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010a30:	e048      	b.n	8010ac4 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010a38:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010a3a:	4413      	add	r3, r2
 8010a3c:	b29a      	uxth	r2, r3
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010a44:	429a      	cmp	r2, r3
 8010a46:	d309      	bcc.n	8010a5c <tcp_receive+0x2fc>
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010a4e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010a50:	4413      	add	r3, r2
 8010a52:	b29a      	uxth	r2, r3
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8010a5a:	e004      	b.n	8010a66 <tcp_receive+0x306>
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010a62:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010a72:	429a      	cmp	r2, r3
 8010a74:	d326      	bcc.n	8010ac4 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010a82:	1ad3      	subs	r3, r2, r3
 8010a84:	b29a      	uxth	r2, r3
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010a96:	4413      	add	r3, r2
 8010a98:	b29a      	uxth	r2, r3
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010aa0:	429a      	cmp	r2, r3
 8010aa2:	d30a      	bcc.n	8010aba <tcp_receive+0x35a>
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010aae:	4413      	add	r3, r2
 8010ab0:	b29a      	uxth	r2, r3
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010ab8:	e004      	b.n	8010ac4 <tcp_receive+0x364>
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010ac0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010acc:	4a98      	ldr	r2, [pc, #608]	; (8010d30 <tcp_receive+0x5d0>)
 8010ace:	6878      	ldr	r0, [r7, #4]
 8010ad0:	f7ff fdca 	bl	8010668 <tcp_free_acked_segments>
 8010ad4:	4602      	mov	r2, r0
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010ae2:	4a94      	ldr	r2, [pc, #592]	; (8010d34 <tcp_receive+0x5d4>)
 8010ae4:	6878      	ldr	r0, [r7, #4]
 8010ae6:	f7ff fdbf 	bl	8010668 <tcp_free_acked_segments>
 8010aea:	4602      	mov	r2, r0
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	d104      	bne.n	8010b02 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010afe:	861a      	strh	r2, [r3, #48]	; 0x30
 8010b00:	e002      	b.n	8010b08 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	2200      	movs	r2, #0
 8010b06:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	2200      	movs	r2, #0
 8010b0c:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d103      	bne.n	8010b1e <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	2200      	movs	r2, #0
 8010b1a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8010b24:	4b84      	ldr	r3, [pc, #528]	; (8010d38 <tcp_receive+0x5d8>)
 8010b26:	881b      	ldrh	r3, [r3, #0]
 8010b28:	4413      	add	r3, r2
 8010b2a:	b29a      	uxth	r2, r3
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	8b5b      	ldrh	r3, [r3, #26]
 8010b36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d035      	beq.n	8010baa <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	d118      	bne.n	8010b78 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d00c      	beq.n	8010b68 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b56:	68db      	ldr	r3, [r3, #12]
 8010b58:	685b      	ldr	r3, [r3, #4]
 8010b5a:	4618      	mov	r0, r3
 8010b5c:	f7fa fccb 	bl	800b4f6 <lwip_htonl>
 8010b60:	4603      	mov	r3, r0
 8010b62:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	dc20      	bgt.n	8010baa <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	8b5b      	ldrh	r3, [r3, #26]
 8010b6c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010b70:	b29a      	uxth	r2, r3
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010b76:	e018      	b.n	8010baa <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b80:	68db      	ldr	r3, [r3, #12]
 8010b82:	685b      	ldr	r3, [r3, #4]
 8010b84:	4618      	mov	r0, r3
 8010b86:	f7fa fcb6 	bl	800b4f6 <lwip_htonl>
 8010b8a:	4603      	mov	r3, r0
 8010b8c:	1ae3      	subs	r3, r4, r3
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	dc0b      	bgt.n	8010baa <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	8b5b      	ldrh	r3, [r3, #26]
 8010b96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010b9a:	b29a      	uxth	r2, r3
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010ba0:	e003      	b.n	8010baa <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8010ba2:	6878      	ldr	r0, [r7, #4]
 8010ba4:	f002 fbce 	bl	8013344 <tcp_send_empty_ack>
 8010ba8:	e000      	b.n	8010bac <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010baa:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d05b      	beq.n	8010c6c <tcp_receive+0x50c>
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010bb8:	4b60      	ldr	r3, [pc, #384]	; (8010d3c <tcp_receive+0x5dc>)
 8010bba:	681b      	ldr	r3, [r3, #0]
 8010bbc:	1ad3      	subs	r3, r2, r3
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	da54      	bge.n	8010c6c <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8010bc2:	4b5f      	ldr	r3, [pc, #380]	; (8010d40 <tcp_receive+0x5e0>)
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	b29a      	uxth	r2, r3
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010bcc:	b29b      	uxth	r3, r3
 8010bce:	1ad3      	subs	r3, r2, r3
 8010bd0:	b29b      	uxth	r3, r3
 8010bd2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8010bd6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010be0:	10db      	asrs	r3, r3, #3
 8010be2:	b21b      	sxth	r3, r3
 8010be4:	b29b      	uxth	r3, r3
 8010be6:	1ad3      	subs	r3, r2, r3
 8010be8:	b29b      	uxth	r3, r3
 8010bea:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010bf4:	b29a      	uxth	r2, r3
 8010bf6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010bfa:	4413      	add	r3, r2
 8010bfc:	b29b      	uxth	r3, r3
 8010bfe:	b21a      	sxth	r2, r3
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8010c04:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	da05      	bge.n	8010c18 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8010c0c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010c10:	425b      	negs	r3, r3
 8010c12:	b29b      	uxth	r3, r3
 8010c14:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8010c18:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010c22:	109b      	asrs	r3, r3, #2
 8010c24:	b21b      	sxth	r3, r3
 8010c26:	b29b      	uxth	r3, r3
 8010c28:	1ad3      	subs	r3, r2, r3
 8010c2a:	b29b      	uxth	r3, r3
 8010c2c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010c36:	b29a      	uxth	r2, r3
 8010c38:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010c3c:	4413      	add	r3, r2
 8010c3e:	b29b      	uxth	r3, r3
 8010c40:	b21a      	sxth	r2, r3
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010c4c:	10db      	asrs	r3, r3, #3
 8010c4e:	b21b      	sxth	r3, r3
 8010c50:	b29a      	uxth	r2, r3
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010c58:	b29b      	uxth	r3, r3
 8010c5a:	4413      	add	r3, r2
 8010c5c:	b29b      	uxth	r3, r3
 8010c5e:	b21a      	sxth	r2, r3
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	2200      	movs	r2, #0
 8010c6a:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8010c6c:	4b35      	ldr	r3, [pc, #212]	; (8010d44 <tcp_receive+0x5e4>)
 8010c6e:	881b      	ldrh	r3, [r3, #0]
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	f000 84e2 	beq.w	801163a <tcp_receive+0xeda>
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	7d1b      	ldrb	r3, [r3, #20]
 8010c7a:	2b06      	cmp	r3, #6
 8010c7c:	f200 84dd 	bhi.w	801163a <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010c84:	4b30      	ldr	r3, [pc, #192]	; (8010d48 <tcp_receive+0x5e8>)
 8010c86:	681b      	ldr	r3, [r3, #0]
 8010c88:	1ad3      	subs	r3, r2, r3
 8010c8a:	3b01      	subs	r3, #1
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	f2c0 808f 	blt.w	8010db0 <tcp_receive+0x650>
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010c96:	4b2b      	ldr	r3, [pc, #172]	; (8010d44 <tcp_receive+0x5e4>)
 8010c98:	881b      	ldrh	r3, [r3, #0]
 8010c9a:	4619      	mov	r1, r3
 8010c9c:	4b2a      	ldr	r3, [pc, #168]	; (8010d48 <tcp_receive+0x5e8>)
 8010c9e:	681b      	ldr	r3, [r3, #0]
 8010ca0:	440b      	add	r3, r1
 8010ca2:	1ad3      	subs	r3, r2, r3
 8010ca4:	3301      	adds	r3, #1
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	f300 8082 	bgt.w	8010db0 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8010cac:	4b27      	ldr	r3, [pc, #156]	; (8010d4c <tcp_receive+0x5ec>)
 8010cae:	685b      	ldr	r3, [r3, #4]
 8010cb0:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010cb6:	4b24      	ldr	r3, [pc, #144]	; (8010d48 <tcp_receive+0x5e8>)
 8010cb8:	681b      	ldr	r3, [r3, #0]
 8010cba:	1ad3      	subs	r3, r2, r3
 8010cbc:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8010cbe:	4b23      	ldr	r3, [pc, #140]	; (8010d4c <tcp_receive+0x5ec>)
 8010cc0:	685b      	ldr	r3, [r3, #4]
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d106      	bne.n	8010cd4 <tcp_receive+0x574>
 8010cc6:	4b22      	ldr	r3, [pc, #136]	; (8010d50 <tcp_receive+0x5f0>)
 8010cc8:	f240 5294 	movw	r2, #1428	; 0x594
 8010ccc:	4921      	ldr	r1, [pc, #132]	; (8010d54 <tcp_receive+0x5f4>)
 8010cce:	4822      	ldr	r0, [pc, #136]	; (8010d58 <tcp_receive+0x5f8>)
 8010cd0:	f007 ff62 	bl	8018b98 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8010cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cd6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8010cda:	4293      	cmp	r3, r2
 8010cdc:	d906      	bls.n	8010cec <tcp_receive+0x58c>
 8010cde:	4b1c      	ldr	r3, [pc, #112]	; (8010d50 <tcp_receive+0x5f0>)
 8010ce0:	f240 5295 	movw	r2, #1429	; 0x595
 8010ce4:	491d      	ldr	r1, [pc, #116]	; (8010d5c <tcp_receive+0x5fc>)
 8010ce6:	481c      	ldr	r0, [pc, #112]	; (8010d58 <tcp_receive+0x5f8>)
 8010ce8:	f007 ff56 	bl	8018b98 <iprintf>
      off = (u16_t)off32;
 8010cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cee:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8010cf2:	4b16      	ldr	r3, [pc, #88]	; (8010d4c <tcp_receive+0x5ec>)
 8010cf4:	685b      	ldr	r3, [r3, #4]
 8010cf6:	891b      	ldrh	r3, [r3, #8]
 8010cf8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010cfc:	429a      	cmp	r2, r3
 8010cfe:	d906      	bls.n	8010d0e <tcp_receive+0x5ae>
 8010d00:	4b13      	ldr	r3, [pc, #76]	; (8010d50 <tcp_receive+0x5f0>)
 8010d02:	f240 5297 	movw	r2, #1431	; 0x597
 8010d06:	4916      	ldr	r1, [pc, #88]	; (8010d60 <tcp_receive+0x600>)
 8010d08:	4813      	ldr	r0, [pc, #76]	; (8010d58 <tcp_receive+0x5f8>)
 8010d0a:	f007 ff45 	bl	8018b98 <iprintf>
      inseg.len -= off;
 8010d0e:	4b0f      	ldr	r3, [pc, #60]	; (8010d4c <tcp_receive+0x5ec>)
 8010d10:	891a      	ldrh	r2, [r3, #8]
 8010d12:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010d16:	1ad3      	subs	r3, r2, r3
 8010d18:	b29a      	uxth	r2, r3
 8010d1a:	4b0c      	ldr	r3, [pc, #48]	; (8010d4c <tcp_receive+0x5ec>)
 8010d1c:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8010d1e:	4b0b      	ldr	r3, [pc, #44]	; (8010d4c <tcp_receive+0x5ec>)
 8010d20:	685b      	ldr	r3, [r3, #4]
 8010d22:	891a      	ldrh	r2, [r3, #8]
 8010d24:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010d28:	1ad3      	subs	r3, r2, r3
 8010d2a:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8010d2c:	e02a      	b.n	8010d84 <tcp_receive+0x624>
 8010d2e:	bf00      	nop
 8010d30:	0801c370 	.word	0x0801c370
 8010d34:	0801c378 	.word	0x0801c378
 8010d38:	20010eb0 	.word	0x20010eb0
 8010d3c:	20010eac 	.word	0x20010eac
 8010d40:	20010e70 	.word	0x20010e70
 8010d44:	20010eb2 	.word	0x20010eb2
 8010d48:	20010ea8 	.word	0x20010ea8
 8010d4c:	20010e88 	.word	0x20010e88
 8010d50:	0801c008 	.word	0x0801c008
 8010d54:	0801c380 	.word	0x0801c380
 8010d58:	0801c054 	.word	0x0801c054
 8010d5c:	0801c390 	.word	0x0801c390
 8010d60:	0801c3a0 	.word	0x0801c3a0
        off -= p->len;
 8010d64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010d66:	895b      	ldrh	r3, [r3, #10]
 8010d68:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010d6c:	1ad3      	subs	r3, r2, r3
 8010d6e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8010d72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010d74:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010d76:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8010d78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010d7a:	2200      	movs	r2, #0
 8010d7c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8010d7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010d80:	681b      	ldr	r3, [r3, #0]
 8010d82:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8010d84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010d86:	895b      	ldrh	r3, [r3, #10]
 8010d88:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010d8c:	429a      	cmp	r2, r3
 8010d8e:	d8e9      	bhi.n	8010d64 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8010d90:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010d94:	4619      	mov	r1, r3
 8010d96:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010d98:	f7fb ff46 	bl	800cc28 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010da0:	4a91      	ldr	r2, [pc, #580]	; (8010fe8 <tcp_receive+0x888>)
 8010da2:	6013      	str	r3, [r2, #0]
 8010da4:	4b91      	ldr	r3, [pc, #580]	; (8010fec <tcp_receive+0x88c>)
 8010da6:	68db      	ldr	r3, [r3, #12]
 8010da8:	4a8f      	ldr	r2, [pc, #572]	; (8010fe8 <tcp_receive+0x888>)
 8010daa:	6812      	ldr	r2, [r2, #0]
 8010dac:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010dae:	e00d      	b.n	8010dcc <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8010db0:	4b8d      	ldr	r3, [pc, #564]	; (8010fe8 <tcp_receive+0x888>)
 8010db2:	681a      	ldr	r2, [r3, #0]
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010db8:	1ad3      	subs	r3, r2, r3
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	da06      	bge.n	8010dcc <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	8b5b      	ldrh	r3, [r3, #26]
 8010dc2:	f043 0302 	orr.w	r3, r3, #2
 8010dc6:	b29a      	uxth	r2, r3
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010dcc:	4b86      	ldr	r3, [pc, #536]	; (8010fe8 <tcp_receive+0x888>)
 8010dce:	681a      	ldr	r2, [r3, #0]
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010dd4:	1ad3      	subs	r3, r2, r3
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	f2c0 842a 	blt.w	8011630 <tcp_receive+0xed0>
 8010ddc:	4b82      	ldr	r3, [pc, #520]	; (8010fe8 <tcp_receive+0x888>)
 8010dde:	681a      	ldr	r2, [r3, #0]
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010de4:	6879      	ldr	r1, [r7, #4]
 8010de6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010de8:	440b      	add	r3, r1
 8010dea:	1ad3      	subs	r3, r2, r3
 8010dec:	3301      	adds	r3, #1
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	f300 841e 	bgt.w	8011630 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010df8:	4b7b      	ldr	r3, [pc, #492]	; (8010fe8 <tcp_receive+0x888>)
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	429a      	cmp	r2, r3
 8010dfe:	f040 829a 	bne.w	8011336 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8010e02:	4b7a      	ldr	r3, [pc, #488]	; (8010fec <tcp_receive+0x88c>)
 8010e04:	891c      	ldrh	r4, [r3, #8]
 8010e06:	4b79      	ldr	r3, [pc, #484]	; (8010fec <tcp_receive+0x88c>)
 8010e08:	68db      	ldr	r3, [r3, #12]
 8010e0a:	899b      	ldrh	r3, [r3, #12]
 8010e0c:	b29b      	uxth	r3, r3
 8010e0e:	4618      	mov	r0, r3
 8010e10:	f7fa fb5c 	bl	800b4cc <lwip_htons>
 8010e14:	4603      	mov	r3, r0
 8010e16:	b2db      	uxtb	r3, r3
 8010e18:	f003 0303 	and.w	r3, r3, #3
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d001      	beq.n	8010e24 <tcp_receive+0x6c4>
 8010e20:	2301      	movs	r3, #1
 8010e22:	e000      	b.n	8010e26 <tcp_receive+0x6c6>
 8010e24:	2300      	movs	r3, #0
 8010e26:	4423      	add	r3, r4
 8010e28:	b29a      	uxth	r2, r3
 8010e2a:	4b71      	ldr	r3, [pc, #452]	; (8010ff0 <tcp_receive+0x890>)
 8010e2c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010e32:	4b6f      	ldr	r3, [pc, #444]	; (8010ff0 <tcp_receive+0x890>)
 8010e34:	881b      	ldrh	r3, [r3, #0]
 8010e36:	429a      	cmp	r2, r3
 8010e38:	d275      	bcs.n	8010f26 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010e3a:	4b6c      	ldr	r3, [pc, #432]	; (8010fec <tcp_receive+0x88c>)
 8010e3c:	68db      	ldr	r3, [r3, #12]
 8010e3e:	899b      	ldrh	r3, [r3, #12]
 8010e40:	b29b      	uxth	r3, r3
 8010e42:	4618      	mov	r0, r3
 8010e44:	f7fa fb42 	bl	800b4cc <lwip_htons>
 8010e48:	4603      	mov	r3, r0
 8010e4a:	b2db      	uxtb	r3, r3
 8010e4c:	f003 0301 	and.w	r3, r3, #1
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d01f      	beq.n	8010e94 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8010e54:	4b65      	ldr	r3, [pc, #404]	; (8010fec <tcp_receive+0x88c>)
 8010e56:	68db      	ldr	r3, [r3, #12]
 8010e58:	899b      	ldrh	r3, [r3, #12]
 8010e5a:	b29b      	uxth	r3, r3
 8010e5c:	b21b      	sxth	r3, r3
 8010e5e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010e62:	b21c      	sxth	r4, r3
 8010e64:	4b61      	ldr	r3, [pc, #388]	; (8010fec <tcp_receive+0x88c>)
 8010e66:	68db      	ldr	r3, [r3, #12]
 8010e68:	899b      	ldrh	r3, [r3, #12]
 8010e6a:	b29b      	uxth	r3, r3
 8010e6c:	4618      	mov	r0, r3
 8010e6e:	f7fa fb2d 	bl	800b4cc <lwip_htons>
 8010e72:	4603      	mov	r3, r0
 8010e74:	b2db      	uxtb	r3, r3
 8010e76:	b29b      	uxth	r3, r3
 8010e78:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8010e7c:	b29b      	uxth	r3, r3
 8010e7e:	4618      	mov	r0, r3
 8010e80:	f7fa fb24 	bl	800b4cc <lwip_htons>
 8010e84:	4603      	mov	r3, r0
 8010e86:	b21b      	sxth	r3, r3
 8010e88:	4323      	orrs	r3, r4
 8010e8a:	b21a      	sxth	r2, r3
 8010e8c:	4b57      	ldr	r3, [pc, #348]	; (8010fec <tcp_receive+0x88c>)
 8010e8e:	68db      	ldr	r3, [r3, #12]
 8010e90:	b292      	uxth	r2, r2
 8010e92:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010e98:	4b54      	ldr	r3, [pc, #336]	; (8010fec <tcp_receive+0x88c>)
 8010e9a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010e9c:	4b53      	ldr	r3, [pc, #332]	; (8010fec <tcp_receive+0x88c>)
 8010e9e:	68db      	ldr	r3, [r3, #12]
 8010ea0:	899b      	ldrh	r3, [r3, #12]
 8010ea2:	b29b      	uxth	r3, r3
 8010ea4:	4618      	mov	r0, r3
 8010ea6:	f7fa fb11 	bl	800b4cc <lwip_htons>
 8010eaa:	4603      	mov	r3, r0
 8010eac:	b2db      	uxtb	r3, r3
 8010eae:	f003 0302 	and.w	r3, r3, #2
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d005      	beq.n	8010ec2 <tcp_receive+0x762>
            inseg.len -= 1;
 8010eb6:	4b4d      	ldr	r3, [pc, #308]	; (8010fec <tcp_receive+0x88c>)
 8010eb8:	891b      	ldrh	r3, [r3, #8]
 8010eba:	3b01      	subs	r3, #1
 8010ebc:	b29a      	uxth	r2, r3
 8010ebe:	4b4b      	ldr	r3, [pc, #300]	; (8010fec <tcp_receive+0x88c>)
 8010ec0:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8010ec2:	4b4a      	ldr	r3, [pc, #296]	; (8010fec <tcp_receive+0x88c>)
 8010ec4:	685b      	ldr	r3, [r3, #4]
 8010ec6:	4a49      	ldr	r2, [pc, #292]	; (8010fec <tcp_receive+0x88c>)
 8010ec8:	8912      	ldrh	r2, [r2, #8]
 8010eca:	4611      	mov	r1, r2
 8010ecc:	4618      	mov	r0, r3
 8010ece:	f7fb fdab 	bl	800ca28 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8010ed2:	4b46      	ldr	r3, [pc, #280]	; (8010fec <tcp_receive+0x88c>)
 8010ed4:	891c      	ldrh	r4, [r3, #8]
 8010ed6:	4b45      	ldr	r3, [pc, #276]	; (8010fec <tcp_receive+0x88c>)
 8010ed8:	68db      	ldr	r3, [r3, #12]
 8010eda:	899b      	ldrh	r3, [r3, #12]
 8010edc:	b29b      	uxth	r3, r3
 8010ede:	4618      	mov	r0, r3
 8010ee0:	f7fa faf4 	bl	800b4cc <lwip_htons>
 8010ee4:	4603      	mov	r3, r0
 8010ee6:	b2db      	uxtb	r3, r3
 8010ee8:	f003 0303 	and.w	r3, r3, #3
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d001      	beq.n	8010ef4 <tcp_receive+0x794>
 8010ef0:	2301      	movs	r3, #1
 8010ef2:	e000      	b.n	8010ef6 <tcp_receive+0x796>
 8010ef4:	2300      	movs	r3, #0
 8010ef6:	4423      	add	r3, r4
 8010ef8:	b29a      	uxth	r2, r3
 8010efa:	4b3d      	ldr	r3, [pc, #244]	; (8010ff0 <tcp_receive+0x890>)
 8010efc:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010efe:	4b3c      	ldr	r3, [pc, #240]	; (8010ff0 <tcp_receive+0x890>)
 8010f00:	881b      	ldrh	r3, [r3, #0]
 8010f02:	461a      	mov	r2, r3
 8010f04:	4b38      	ldr	r3, [pc, #224]	; (8010fe8 <tcp_receive+0x888>)
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	441a      	add	r2, r3
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f0e:	6879      	ldr	r1, [r7, #4]
 8010f10:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010f12:	440b      	add	r3, r1
 8010f14:	429a      	cmp	r2, r3
 8010f16:	d006      	beq.n	8010f26 <tcp_receive+0x7c6>
 8010f18:	4b36      	ldr	r3, [pc, #216]	; (8010ff4 <tcp_receive+0x894>)
 8010f1a:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8010f1e:	4936      	ldr	r1, [pc, #216]	; (8010ff8 <tcp_receive+0x898>)
 8010f20:	4836      	ldr	r0, [pc, #216]	; (8010ffc <tcp_receive+0x89c>)
 8010f22:	f007 fe39 	bl	8018b98 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	f000 80e7 	beq.w	80110fe <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010f30:	4b2e      	ldr	r3, [pc, #184]	; (8010fec <tcp_receive+0x88c>)
 8010f32:	68db      	ldr	r3, [r3, #12]
 8010f34:	899b      	ldrh	r3, [r3, #12]
 8010f36:	b29b      	uxth	r3, r3
 8010f38:	4618      	mov	r0, r3
 8010f3a:	f7fa fac7 	bl	800b4cc <lwip_htons>
 8010f3e:	4603      	mov	r3, r0
 8010f40:	b2db      	uxtb	r3, r3
 8010f42:	f003 0301 	and.w	r3, r3, #1
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d010      	beq.n	8010f6c <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8010f4a:	e00a      	b.n	8010f62 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010f50:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010f56:	681a      	ldr	r2, [r3, #0]
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8010f5c:	68f8      	ldr	r0, [r7, #12]
 8010f5e:	f7fd fca6 	bl	800e8ae <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d1f0      	bne.n	8010f4c <tcp_receive+0x7ec>
 8010f6a:	e0c8      	b.n	80110fe <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010f70:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8010f72:	e052      	b.n	801101a <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010f74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010f76:	68db      	ldr	r3, [r3, #12]
 8010f78:	899b      	ldrh	r3, [r3, #12]
 8010f7a:	b29b      	uxth	r3, r3
 8010f7c:	4618      	mov	r0, r3
 8010f7e:	f7fa faa5 	bl	800b4cc <lwip_htons>
 8010f82:	4603      	mov	r3, r0
 8010f84:	b2db      	uxtb	r3, r3
 8010f86:	f003 0301 	and.w	r3, r3, #1
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d03d      	beq.n	801100a <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8010f8e:	4b17      	ldr	r3, [pc, #92]	; (8010fec <tcp_receive+0x88c>)
 8010f90:	68db      	ldr	r3, [r3, #12]
 8010f92:	899b      	ldrh	r3, [r3, #12]
 8010f94:	b29b      	uxth	r3, r3
 8010f96:	4618      	mov	r0, r3
 8010f98:	f7fa fa98 	bl	800b4cc <lwip_htons>
 8010f9c:	4603      	mov	r3, r0
 8010f9e:	b2db      	uxtb	r3, r3
 8010fa0:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	d130      	bne.n	801100a <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8010fa8:	4b10      	ldr	r3, [pc, #64]	; (8010fec <tcp_receive+0x88c>)
 8010faa:	68db      	ldr	r3, [r3, #12]
 8010fac:	899b      	ldrh	r3, [r3, #12]
 8010fae:	b29c      	uxth	r4, r3
 8010fb0:	2001      	movs	r0, #1
 8010fb2:	f7fa fa8b 	bl	800b4cc <lwip_htons>
 8010fb6:	4603      	mov	r3, r0
 8010fb8:	461a      	mov	r2, r3
 8010fba:	4b0c      	ldr	r3, [pc, #48]	; (8010fec <tcp_receive+0x88c>)
 8010fbc:	68db      	ldr	r3, [r3, #12]
 8010fbe:	4322      	orrs	r2, r4
 8010fc0:	b292      	uxth	r2, r2
 8010fc2:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8010fc4:	4b09      	ldr	r3, [pc, #36]	; (8010fec <tcp_receive+0x88c>)
 8010fc6:	891c      	ldrh	r4, [r3, #8]
 8010fc8:	4b08      	ldr	r3, [pc, #32]	; (8010fec <tcp_receive+0x88c>)
 8010fca:	68db      	ldr	r3, [r3, #12]
 8010fcc:	899b      	ldrh	r3, [r3, #12]
 8010fce:	b29b      	uxth	r3, r3
 8010fd0:	4618      	mov	r0, r3
 8010fd2:	f7fa fa7b 	bl	800b4cc <lwip_htons>
 8010fd6:	4603      	mov	r3, r0
 8010fd8:	b2db      	uxtb	r3, r3
 8010fda:	f003 0303 	and.w	r3, r3, #3
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d00e      	beq.n	8011000 <tcp_receive+0x8a0>
 8010fe2:	2301      	movs	r3, #1
 8010fe4:	e00d      	b.n	8011002 <tcp_receive+0x8a2>
 8010fe6:	bf00      	nop
 8010fe8:	20010ea8 	.word	0x20010ea8
 8010fec:	20010e88 	.word	0x20010e88
 8010ff0:	20010eb2 	.word	0x20010eb2
 8010ff4:	0801c008 	.word	0x0801c008
 8010ff8:	0801c3b0 	.word	0x0801c3b0
 8010ffc:	0801c054 	.word	0x0801c054
 8011000:	2300      	movs	r3, #0
 8011002:	4423      	add	r3, r4
 8011004:	b29a      	uxth	r2, r3
 8011006:	4b98      	ldr	r3, [pc, #608]	; (8011268 <tcp_receive+0xb08>)
 8011008:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801100a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801100c:	613b      	str	r3, [r7, #16]
              next = next->next;
 801100e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011010:	681b      	ldr	r3, [r3, #0]
 8011012:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8011014:	6938      	ldr	r0, [r7, #16]
 8011016:	f7fd fc4a 	bl	800e8ae <tcp_seg_free>
            while (next &&
 801101a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801101c:	2b00      	cmp	r3, #0
 801101e:	d00e      	beq.n	801103e <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8011020:	4b91      	ldr	r3, [pc, #580]	; (8011268 <tcp_receive+0xb08>)
 8011022:	881b      	ldrh	r3, [r3, #0]
 8011024:	461a      	mov	r2, r3
 8011026:	4b91      	ldr	r3, [pc, #580]	; (801126c <tcp_receive+0xb0c>)
 8011028:	681b      	ldr	r3, [r3, #0]
 801102a:	441a      	add	r2, r3
 801102c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801102e:	68db      	ldr	r3, [r3, #12]
 8011030:	685b      	ldr	r3, [r3, #4]
 8011032:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011034:	8909      	ldrh	r1, [r1, #8]
 8011036:	440b      	add	r3, r1
 8011038:	1ad3      	subs	r3, r2, r3
            while (next &&
 801103a:	2b00      	cmp	r3, #0
 801103c:	da9a      	bge.n	8010f74 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801103e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011040:	2b00      	cmp	r3, #0
 8011042:	d059      	beq.n	80110f8 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8011044:	4b88      	ldr	r3, [pc, #544]	; (8011268 <tcp_receive+0xb08>)
 8011046:	881b      	ldrh	r3, [r3, #0]
 8011048:	461a      	mov	r2, r3
 801104a:	4b88      	ldr	r3, [pc, #544]	; (801126c <tcp_receive+0xb0c>)
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	441a      	add	r2, r3
 8011050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011052:	68db      	ldr	r3, [r3, #12]
 8011054:	685b      	ldr	r3, [r3, #4]
 8011056:	1ad3      	subs	r3, r2, r3
            if (next &&
 8011058:	2b00      	cmp	r3, #0
 801105a:	dd4d      	ble.n	80110f8 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801105c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801105e:	68db      	ldr	r3, [r3, #12]
 8011060:	685b      	ldr	r3, [r3, #4]
 8011062:	b29a      	uxth	r2, r3
 8011064:	4b81      	ldr	r3, [pc, #516]	; (801126c <tcp_receive+0xb0c>)
 8011066:	681b      	ldr	r3, [r3, #0]
 8011068:	b29b      	uxth	r3, r3
 801106a:	1ad3      	subs	r3, r2, r3
 801106c:	b29a      	uxth	r2, r3
 801106e:	4b80      	ldr	r3, [pc, #512]	; (8011270 <tcp_receive+0xb10>)
 8011070:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011072:	4b7f      	ldr	r3, [pc, #508]	; (8011270 <tcp_receive+0xb10>)
 8011074:	68db      	ldr	r3, [r3, #12]
 8011076:	899b      	ldrh	r3, [r3, #12]
 8011078:	b29b      	uxth	r3, r3
 801107a:	4618      	mov	r0, r3
 801107c:	f7fa fa26 	bl	800b4cc <lwip_htons>
 8011080:	4603      	mov	r3, r0
 8011082:	b2db      	uxtb	r3, r3
 8011084:	f003 0302 	and.w	r3, r3, #2
 8011088:	2b00      	cmp	r3, #0
 801108a:	d005      	beq.n	8011098 <tcp_receive+0x938>
                inseg.len -= 1;
 801108c:	4b78      	ldr	r3, [pc, #480]	; (8011270 <tcp_receive+0xb10>)
 801108e:	891b      	ldrh	r3, [r3, #8]
 8011090:	3b01      	subs	r3, #1
 8011092:	b29a      	uxth	r2, r3
 8011094:	4b76      	ldr	r3, [pc, #472]	; (8011270 <tcp_receive+0xb10>)
 8011096:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8011098:	4b75      	ldr	r3, [pc, #468]	; (8011270 <tcp_receive+0xb10>)
 801109a:	685b      	ldr	r3, [r3, #4]
 801109c:	4a74      	ldr	r2, [pc, #464]	; (8011270 <tcp_receive+0xb10>)
 801109e:	8912      	ldrh	r2, [r2, #8]
 80110a0:	4611      	mov	r1, r2
 80110a2:	4618      	mov	r0, r3
 80110a4:	f7fb fcc0 	bl	800ca28 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80110a8:	4b71      	ldr	r3, [pc, #452]	; (8011270 <tcp_receive+0xb10>)
 80110aa:	891c      	ldrh	r4, [r3, #8]
 80110ac:	4b70      	ldr	r3, [pc, #448]	; (8011270 <tcp_receive+0xb10>)
 80110ae:	68db      	ldr	r3, [r3, #12]
 80110b0:	899b      	ldrh	r3, [r3, #12]
 80110b2:	b29b      	uxth	r3, r3
 80110b4:	4618      	mov	r0, r3
 80110b6:	f7fa fa09 	bl	800b4cc <lwip_htons>
 80110ba:	4603      	mov	r3, r0
 80110bc:	b2db      	uxtb	r3, r3
 80110be:	f003 0303 	and.w	r3, r3, #3
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	d001      	beq.n	80110ca <tcp_receive+0x96a>
 80110c6:	2301      	movs	r3, #1
 80110c8:	e000      	b.n	80110cc <tcp_receive+0x96c>
 80110ca:	2300      	movs	r3, #0
 80110cc:	4423      	add	r3, r4
 80110ce:	b29a      	uxth	r2, r3
 80110d0:	4b65      	ldr	r3, [pc, #404]	; (8011268 <tcp_receive+0xb08>)
 80110d2:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80110d4:	4b64      	ldr	r3, [pc, #400]	; (8011268 <tcp_receive+0xb08>)
 80110d6:	881b      	ldrh	r3, [r3, #0]
 80110d8:	461a      	mov	r2, r3
 80110da:	4b64      	ldr	r3, [pc, #400]	; (801126c <tcp_receive+0xb0c>)
 80110dc:	681b      	ldr	r3, [r3, #0]
 80110de:	441a      	add	r2, r3
 80110e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80110e2:	68db      	ldr	r3, [r3, #12]
 80110e4:	685b      	ldr	r3, [r3, #4]
 80110e6:	429a      	cmp	r2, r3
 80110e8:	d006      	beq.n	80110f8 <tcp_receive+0x998>
 80110ea:	4b62      	ldr	r3, [pc, #392]	; (8011274 <tcp_receive+0xb14>)
 80110ec:	f240 52fc 	movw	r2, #1532	; 0x5fc
 80110f0:	4961      	ldr	r1, [pc, #388]	; (8011278 <tcp_receive+0xb18>)
 80110f2:	4862      	ldr	r0, [pc, #392]	; (801127c <tcp_receive+0xb1c>)
 80110f4:	f007 fd50 	bl	8018b98 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80110fc:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80110fe:	4b5a      	ldr	r3, [pc, #360]	; (8011268 <tcp_receive+0xb08>)
 8011100:	881b      	ldrh	r3, [r3, #0]
 8011102:	461a      	mov	r2, r3
 8011104:	4b59      	ldr	r3, [pc, #356]	; (801126c <tcp_receive+0xb0c>)
 8011106:	681b      	ldr	r3, [r3, #0]
 8011108:	441a      	add	r2, r3
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011112:	4b55      	ldr	r3, [pc, #340]	; (8011268 <tcp_receive+0xb08>)
 8011114:	881b      	ldrh	r3, [r3, #0]
 8011116:	429a      	cmp	r2, r3
 8011118:	d206      	bcs.n	8011128 <tcp_receive+0x9c8>
 801111a:	4b56      	ldr	r3, [pc, #344]	; (8011274 <tcp_receive+0xb14>)
 801111c:	f240 6207 	movw	r2, #1543	; 0x607
 8011120:	4957      	ldr	r1, [pc, #348]	; (8011280 <tcp_receive+0xb20>)
 8011122:	4856      	ldr	r0, [pc, #344]	; (801127c <tcp_receive+0xb1c>)
 8011124:	f007 fd38 	bl	8018b98 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801112c:	4b4e      	ldr	r3, [pc, #312]	; (8011268 <tcp_receive+0xb08>)
 801112e:	881b      	ldrh	r3, [r3, #0]
 8011130:	1ad3      	subs	r3, r2, r3
 8011132:	b29a      	uxth	r2, r3
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8011138:	6878      	ldr	r0, [r7, #4]
 801113a:	f7fc fd7b 	bl	800dc34 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801113e:	4b4c      	ldr	r3, [pc, #304]	; (8011270 <tcp_receive+0xb10>)
 8011140:	685b      	ldr	r3, [r3, #4]
 8011142:	891b      	ldrh	r3, [r3, #8]
 8011144:	2b00      	cmp	r3, #0
 8011146:	d006      	beq.n	8011156 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8011148:	4b49      	ldr	r3, [pc, #292]	; (8011270 <tcp_receive+0xb10>)
 801114a:	685b      	ldr	r3, [r3, #4]
 801114c:	4a4d      	ldr	r2, [pc, #308]	; (8011284 <tcp_receive+0xb24>)
 801114e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8011150:	4b47      	ldr	r3, [pc, #284]	; (8011270 <tcp_receive+0xb10>)
 8011152:	2200      	movs	r2, #0
 8011154:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011156:	4b46      	ldr	r3, [pc, #280]	; (8011270 <tcp_receive+0xb10>)
 8011158:	68db      	ldr	r3, [r3, #12]
 801115a:	899b      	ldrh	r3, [r3, #12]
 801115c:	b29b      	uxth	r3, r3
 801115e:	4618      	mov	r0, r3
 8011160:	f7fa f9b4 	bl	800b4cc <lwip_htons>
 8011164:	4603      	mov	r3, r0
 8011166:	b2db      	uxtb	r3, r3
 8011168:	f003 0301 	and.w	r3, r3, #1
 801116c:	2b00      	cmp	r3, #0
 801116e:	f000 80b8 	beq.w	80112e2 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8011172:	4b45      	ldr	r3, [pc, #276]	; (8011288 <tcp_receive+0xb28>)
 8011174:	781b      	ldrb	r3, [r3, #0]
 8011176:	f043 0320 	orr.w	r3, r3, #32
 801117a:	b2da      	uxtb	r2, r3
 801117c:	4b42      	ldr	r3, [pc, #264]	; (8011288 <tcp_receive+0xb28>)
 801117e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8011180:	e0af      	b.n	80112e2 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011186:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801118c:	68db      	ldr	r3, [r3, #12]
 801118e:	685b      	ldr	r3, [r3, #4]
 8011190:	4a36      	ldr	r2, [pc, #216]	; (801126c <tcp_receive+0xb0c>)
 8011192:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8011194:	68bb      	ldr	r3, [r7, #8]
 8011196:	891b      	ldrh	r3, [r3, #8]
 8011198:	461c      	mov	r4, r3
 801119a:	68bb      	ldr	r3, [r7, #8]
 801119c:	68db      	ldr	r3, [r3, #12]
 801119e:	899b      	ldrh	r3, [r3, #12]
 80111a0:	b29b      	uxth	r3, r3
 80111a2:	4618      	mov	r0, r3
 80111a4:	f7fa f992 	bl	800b4cc <lwip_htons>
 80111a8:	4603      	mov	r3, r0
 80111aa:	b2db      	uxtb	r3, r3
 80111ac:	f003 0303 	and.w	r3, r3, #3
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	d001      	beq.n	80111b8 <tcp_receive+0xa58>
 80111b4:	2301      	movs	r3, #1
 80111b6:	e000      	b.n	80111ba <tcp_receive+0xa5a>
 80111b8:	2300      	movs	r3, #0
 80111ba:	191a      	adds	r2, r3, r4
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111c0:	441a      	add	r2, r3
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80111ca:	461c      	mov	r4, r3
 80111cc:	68bb      	ldr	r3, [r7, #8]
 80111ce:	891b      	ldrh	r3, [r3, #8]
 80111d0:	461d      	mov	r5, r3
 80111d2:	68bb      	ldr	r3, [r7, #8]
 80111d4:	68db      	ldr	r3, [r3, #12]
 80111d6:	899b      	ldrh	r3, [r3, #12]
 80111d8:	b29b      	uxth	r3, r3
 80111da:	4618      	mov	r0, r3
 80111dc:	f7fa f976 	bl	800b4cc <lwip_htons>
 80111e0:	4603      	mov	r3, r0
 80111e2:	b2db      	uxtb	r3, r3
 80111e4:	f003 0303 	and.w	r3, r3, #3
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d001      	beq.n	80111f0 <tcp_receive+0xa90>
 80111ec:	2301      	movs	r3, #1
 80111ee:	e000      	b.n	80111f2 <tcp_receive+0xa92>
 80111f0:	2300      	movs	r3, #0
 80111f2:	442b      	add	r3, r5
 80111f4:	429c      	cmp	r4, r3
 80111f6:	d206      	bcs.n	8011206 <tcp_receive+0xaa6>
 80111f8:	4b1e      	ldr	r3, [pc, #120]	; (8011274 <tcp_receive+0xb14>)
 80111fa:	f240 622b 	movw	r2, #1579	; 0x62b
 80111fe:	4923      	ldr	r1, [pc, #140]	; (801128c <tcp_receive+0xb2c>)
 8011200:	481e      	ldr	r0, [pc, #120]	; (801127c <tcp_receive+0xb1c>)
 8011202:	f007 fcc9 	bl	8018b98 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8011206:	68bb      	ldr	r3, [r7, #8]
 8011208:	891b      	ldrh	r3, [r3, #8]
 801120a:	461c      	mov	r4, r3
 801120c:	68bb      	ldr	r3, [r7, #8]
 801120e:	68db      	ldr	r3, [r3, #12]
 8011210:	899b      	ldrh	r3, [r3, #12]
 8011212:	b29b      	uxth	r3, r3
 8011214:	4618      	mov	r0, r3
 8011216:	f7fa f959 	bl	800b4cc <lwip_htons>
 801121a:	4603      	mov	r3, r0
 801121c:	b2db      	uxtb	r3, r3
 801121e:	f003 0303 	and.w	r3, r3, #3
 8011222:	2b00      	cmp	r3, #0
 8011224:	d001      	beq.n	801122a <tcp_receive+0xaca>
 8011226:	2301      	movs	r3, #1
 8011228:	e000      	b.n	801122c <tcp_receive+0xacc>
 801122a:	2300      	movs	r3, #0
 801122c:	1919      	adds	r1, r3, r4
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011232:	b28b      	uxth	r3, r1
 8011234:	1ad3      	subs	r3, r2, r3
 8011236:	b29a      	uxth	r2, r3
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801123c:	6878      	ldr	r0, [r7, #4]
 801123e:	f7fc fcf9 	bl	800dc34 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8011242:	68bb      	ldr	r3, [r7, #8]
 8011244:	685b      	ldr	r3, [r3, #4]
 8011246:	891b      	ldrh	r3, [r3, #8]
 8011248:	2b00      	cmp	r3, #0
 801124a:	d028      	beq.n	801129e <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801124c:	4b0d      	ldr	r3, [pc, #52]	; (8011284 <tcp_receive+0xb24>)
 801124e:	681b      	ldr	r3, [r3, #0]
 8011250:	2b00      	cmp	r3, #0
 8011252:	d01d      	beq.n	8011290 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8011254:	4b0b      	ldr	r3, [pc, #44]	; (8011284 <tcp_receive+0xb24>)
 8011256:	681a      	ldr	r2, [r3, #0]
 8011258:	68bb      	ldr	r3, [r7, #8]
 801125a:	685b      	ldr	r3, [r3, #4]
 801125c:	4619      	mov	r1, r3
 801125e:	4610      	mov	r0, r2
 8011260:	f7fb fe36 	bl	800ced0 <pbuf_cat>
 8011264:	e018      	b.n	8011298 <tcp_receive+0xb38>
 8011266:	bf00      	nop
 8011268:	20010eb2 	.word	0x20010eb2
 801126c:	20010ea8 	.word	0x20010ea8
 8011270:	20010e88 	.word	0x20010e88
 8011274:	0801c008 	.word	0x0801c008
 8011278:	0801c3e8 	.word	0x0801c3e8
 801127c:	0801c054 	.word	0x0801c054
 8011280:	0801c424 	.word	0x0801c424
 8011284:	20010eb8 	.word	0x20010eb8
 8011288:	20010eb5 	.word	0x20010eb5
 801128c:	0801c444 	.word	0x0801c444
            } else {
              recv_data = cseg->p;
 8011290:	68bb      	ldr	r3, [r7, #8]
 8011292:	685b      	ldr	r3, [r3, #4]
 8011294:	4a70      	ldr	r2, [pc, #448]	; (8011458 <tcp_receive+0xcf8>)
 8011296:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8011298:	68bb      	ldr	r3, [r7, #8]
 801129a:	2200      	movs	r2, #0
 801129c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801129e:	68bb      	ldr	r3, [r7, #8]
 80112a0:	68db      	ldr	r3, [r3, #12]
 80112a2:	899b      	ldrh	r3, [r3, #12]
 80112a4:	b29b      	uxth	r3, r3
 80112a6:	4618      	mov	r0, r3
 80112a8:	f7fa f910 	bl	800b4cc <lwip_htons>
 80112ac:	4603      	mov	r3, r0
 80112ae:	b2db      	uxtb	r3, r3
 80112b0:	f003 0301 	and.w	r3, r3, #1
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d00d      	beq.n	80112d4 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80112b8:	4b68      	ldr	r3, [pc, #416]	; (801145c <tcp_receive+0xcfc>)
 80112ba:	781b      	ldrb	r3, [r3, #0]
 80112bc:	f043 0320 	orr.w	r3, r3, #32
 80112c0:	b2da      	uxtb	r2, r3
 80112c2:	4b66      	ldr	r3, [pc, #408]	; (801145c <tcp_receive+0xcfc>)
 80112c4:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	7d1b      	ldrb	r3, [r3, #20]
 80112ca:	2b04      	cmp	r3, #4
 80112cc:	d102      	bne.n	80112d4 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	2207      	movs	r2, #7
 80112d2:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80112d4:	68bb      	ldr	r3, [r7, #8]
 80112d6:	681a      	ldr	r2, [r3, #0]
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80112dc:	68b8      	ldr	r0, [r7, #8]
 80112de:	f7fd fae6 	bl	800e8ae <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d008      	beq.n	80112fc <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80112ee:	68db      	ldr	r3, [r3, #12]
 80112f0:	685a      	ldr	r2, [r3, #4]
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80112f6:	429a      	cmp	r2, r3
 80112f8:	f43f af43 	beq.w	8011182 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	8b5b      	ldrh	r3, [r3, #26]
 8011300:	f003 0301 	and.w	r3, r3, #1
 8011304:	2b00      	cmp	r3, #0
 8011306:	d00e      	beq.n	8011326 <tcp_receive+0xbc6>
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	8b5b      	ldrh	r3, [r3, #26]
 801130c:	f023 0301 	bic.w	r3, r3, #1
 8011310:	b29a      	uxth	r2, r3
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	835a      	strh	r2, [r3, #26]
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	8b5b      	ldrh	r3, [r3, #26]
 801131a:	f043 0302 	orr.w	r3, r3, #2
 801131e:	b29a      	uxth	r2, r3
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011324:	e188      	b.n	8011638 <tcp_receive+0xed8>
        tcp_ack(pcb);
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	8b5b      	ldrh	r3, [r3, #26]
 801132a:	f043 0301 	orr.w	r3, r3, #1
 801132e:	b29a      	uxth	r2, r3
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011334:	e180      	b.n	8011638 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801133a:	2b00      	cmp	r3, #0
 801133c:	d106      	bne.n	801134c <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801133e:	4848      	ldr	r0, [pc, #288]	; (8011460 <tcp_receive+0xd00>)
 8011340:	f7fd faec 	bl	800e91c <tcp_seg_copy>
 8011344:	4602      	mov	r2, r0
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	675a      	str	r2, [r3, #116]	; 0x74
 801134a:	e16d      	b.n	8011628 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801134c:	2300      	movs	r3, #0
 801134e:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011354:	63bb      	str	r3, [r7, #56]	; 0x38
 8011356:	e157      	b.n	8011608 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8011358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801135a:	68db      	ldr	r3, [r3, #12]
 801135c:	685a      	ldr	r2, [r3, #4]
 801135e:	4b41      	ldr	r3, [pc, #260]	; (8011464 <tcp_receive+0xd04>)
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	429a      	cmp	r2, r3
 8011364:	d11d      	bne.n	80113a2 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8011366:	4b3e      	ldr	r3, [pc, #248]	; (8011460 <tcp_receive+0xd00>)
 8011368:	891a      	ldrh	r2, [r3, #8]
 801136a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801136c:	891b      	ldrh	r3, [r3, #8]
 801136e:	429a      	cmp	r2, r3
 8011370:	f240 814f 	bls.w	8011612 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011374:	483a      	ldr	r0, [pc, #232]	; (8011460 <tcp_receive+0xd00>)
 8011376:	f7fd fad1 	bl	800e91c <tcp_seg_copy>
 801137a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801137c:	697b      	ldr	r3, [r7, #20]
 801137e:	2b00      	cmp	r3, #0
 8011380:	f000 8149 	beq.w	8011616 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8011384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011386:	2b00      	cmp	r3, #0
 8011388:	d003      	beq.n	8011392 <tcp_receive+0xc32>
                    prev->next = cseg;
 801138a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801138c:	697a      	ldr	r2, [r7, #20]
 801138e:	601a      	str	r2, [r3, #0]
 8011390:	e002      	b.n	8011398 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	697a      	ldr	r2, [r7, #20]
 8011396:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8011398:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801139a:	6978      	ldr	r0, [r7, #20]
 801139c:	f7ff f8dc 	bl	8010558 <tcp_oos_insert_segment>
                }
                break;
 80113a0:	e139      	b.n	8011616 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80113a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d117      	bne.n	80113d8 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80113a8:	4b2e      	ldr	r3, [pc, #184]	; (8011464 <tcp_receive+0xd04>)
 80113aa:	681a      	ldr	r2, [r3, #0]
 80113ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113ae:	68db      	ldr	r3, [r3, #12]
 80113b0:	685b      	ldr	r3, [r3, #4]
 80113b2:	1ad3      	subs	r3, r2, r3
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	da57      	bge.n	8011468 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80113b8:	4829      	ldr	r0, [pc, #164]	; (8011460 <tcp_receive+0xd00>)
 80113ba:	f7fd faaf 	bl	800e91c <tcp_seg_copy>
 80113be:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80113c0:	69bb      	ldr	r3, [r7, #24]
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	f000 8129 	beq.w	801161a <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	69ba      	ldr	r2, [r7, #24]
 80113cc:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80113ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80113d0:	69b8      	ldr	r0, [r7, #24]
 80113d2:	f7ff f8c1 	bl	8010558 <tcp_oos_insert_segment>
                  }
                  break;
 80113d6:	e120      	b.n	801161a <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80113d8:	4b22      	ldr	r3, [pc, #136]	; (8011464 <tcp_receive+0xd04>)
 80113da:	681a      	ldr	r2, [r3, #0]
 80113dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113de:	68db      	ldr	r3, [r3, #12]
 80113e0:	685b      	ldr	r3, [r3, #4]
 80113e2:	1ad3      	subs	r3, r2, r3
 80113e4:	3b01      	subs	r3, #1
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	db3e      	blt.n	8011468 <tcp_receive+0xd08>
 80113ea:	4b1e      	ldr	r3, [pc, #120]	; (8011464 <tcp_receive+0xd04>)
 80113ec:	681a      	ldr	r2, [r3, #0]
 80113ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113f0:	68db      	ldr	r3, [r3, #12]
 80113f2:	685b      	ldr	r3, [r3, #4]
 80113f4:	1ad3      	subs	r3, r2, r3
 80113f6:	3301      	adds	r3, #1
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	dc35      	bgt.n	8011468 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80113fc:	4818      	ldr	r0, [pc, #96]	; (8011460 <tcp_receive+0xd00>)
 80113fe:	f7fd fa8d 	bl	800e91c <tcp_seg_copy>
 8011402:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8011404:	69fb      	ldr	r3, [r7, #28]
 8011406:	2b00      	cmp	r3, #0
 8011408:	f000 8109 	beq.w	801161e <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801140c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801140e:	68db      	ldr	r3, [r3, #12]
 8011410:	685b      	ldr	r3, [r3, #4]
 8011412:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011414:	8912      	ldrh	r2, [r2, #8]
 8011416:	441a      	add	r2, r3
 8011418:	4b12      	ldr	r3, [pc, #72]	; (8011464 <tcp_receive+0xd04>)
 801141a:	681b      	ldr	r3, [r3, #0]
 801141c:	1ad3      	subs	r3, r2, r3
 801141e:	2b00      	cmp	r3, #0
 8011420:	dd12      	ble.n	8011448 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8011422:	4b10      	ldr	r3, [pc, #64]	; (8011464 <tcp_receive+0xd04>)
 8011424:	681b      	ldr	r3, [r3, #0]
 8011426:	b29a      	uxth	r2, r3
 8011428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801142a:	68db      	ldr	r3, [r3, #12]
 801142c:	685b      	ldr	r3, [r3, #4]
 801142e:	b29b      	uxth	r3, r3
 8011430:	1ad3      	subs	r3, r2, r3
 8011432:	b29a      	uxth	r2, r3
 8011434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011436:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8011438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801143a:	685a      	ldr	r2, [r3, #4]
 801143c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801143e:	891b      	ldrh	r3, [r3, #8]
 8011440:	4619      	mov	r1, r3
 8011442:	4610      	mov	r0, r2
 8011444:	f7fb faf0 	bl	800ca28 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8011448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801144a:	69fa      	ldr	r2, [r7, #28]
 801144c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801144e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011450:	69f8      	ldr	r0, [r7, #28]
 8011452:	f7ff f881 	bl	8010558 <tcp_oos_insert_segment>
                  }
                  break;
 8011456:	e0e2      	b.n	801161e <tcp_receive+0xebe>
 8011458:	20010eb8 	.word	0x20010eb8
 801145c:	20010eb5 	.word	0x20010eb5
 8011460:	20010e88 	.word	0x20010e88
 8011464:	20010ea8 	.word	0x20010ea8
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8011468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801146a:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801146c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801146e:	681b      	ldr	r3, [r3, #0]
 8011470:	2b00      	cmp	r3, #0
 8011472:	f040 80c6 	bne.w	8011602 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8011476:	4b80      	ldr	r3, [pc, #512]	; (8011678 <tcp_receive+0xf18>)
 8011478:	681a      	ldr	r2, [r3, #0]
 801147a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801147c:	68db      	ldr	r3, [r3, #12]
 801147e:	685b      	ldr	r3, [r3, #4]
 8011480:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8011482:	2b00      	cmp	r3, #0
 8011484:	f340 80bd 	ble.w	8011602 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801148a:	68db      	ldr	r3, [r3, #12]
 801148c:	899b      	ldrh	r3, [r3, #12]
 801148e:	b29b      	uxth	r3, r3
 8011490:	4618      	mov	r0, r3
 8011492:	f7fa f81b 	bl	800b4cc <lwip_htons>
 8011496:	4603      	mov	r3, r0
 8011498:	b2db      	uxtb	r3, r3
 801149a:	f003 0301 	and.w	r3, r3, #1
 801149e:	2b00      	cmp	r3, #0
 80114a0:	f040 80bf 	bne.w	8011622 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80114a4:	4875      	ldr	r0, [pc, #468]	; (801167c <tcp_receive+0xf1c>)
 80114a6:	f7fd fa39 	bl	800e91c <tcp_seg_copy>
 80114aa:	4602      	mov	r2, r0
 80114ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114ae:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80114b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114b2:	681b      	ldr	r3, [r3, #0]
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	f000 80b6 	beq.w	8011626 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80114ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114bc:	68db      	ldr	r3, [r3, #12]
 80114be:	685b      	ldr	r3, [r3, #4]
 80114c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80114c2:	8912      	ldrh	r2, [r2, #8]
 80114c4:	441a      	add	r2, r3
 80114c6:	4b6c      	ldr	r3, [pc, #432]	; (8011678 <tcp_receive+0xf18>)
 80114c8:	681b      	ldr	r3, [r3, #0]
 80114ca:	1ad3      	subs	r3, r2, r3
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	dd12      	ble.n	80114f6 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80114d0:	4b69      	ldr	r3, [pc, #420]	; (8011678 <tcp_receive+0xf18>)
 80114d2:	681b      	ldr	r3, [r3, #0]
 80114d4:	b29a      	uxth	r2, r3
 80114d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114d8:	68db      	ldr	r3, [r3, #12]
 80114da:	685b      	ldr	r3, [r3, #4]
 80114dc:	b29b      	uxth	r3, r3
 80114de:	1ad3      	subs	r3, r2, r3
 80114e0:	b29a      	uxth	r2, r3
 80114e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114e4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80114e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114e8:	685a      	ldr	r2, [r3, #4]
 80114ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114ec:	891b      	ldrh	r3, [r3, #8]
 80114ee:	4619      	mov	r1, r3
 80114f0:	4610      	mov	r0, r2
 80114f2:	f7fb fa99 	bl	800ca28 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80114f6:	4b62      	ldr	r3, [pc, #392]	; (8011680 <tcp_receive+0xf20>)
 80114f8:	881b      	ldrh	r3, [r3, #0]
 80114fa:	461a      	mov	r2, r3
 80114fc:	4b5e      	ldr	r3, [pc, #376]	; (8011678 <tcp_receive+0xf18>)
 80114fe:	681b      	ldr	r3, [r3, #0]
 8011500:	441a      	add	r2, r3
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011506:	6879      	ldr	r1, [r7, #4]
 8011508:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801150a:	440b      	add	r3, r1
 801150c:	1ad3      	subs	r3, r2, r3
 801150e:	2b00      	cmp	r3, #0
 8011510:	f340 8089 	ble.w	8011626 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8011514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	68db      	ldr	r3, [r3, #12]
 801151a:	899b      	ldrh	r3, [r3, #12]
 801151c:	b29b      	uxth	r3, r3
 801151e:	4618      	mov	r0, r3
 8011520:	f7f9 ffd4 	bl	800b4cc <lwip_htons>
 8011524:	4603      	mov	r3, r0
 8011526:	b2db      	uxtb	r3, r3
 8011528:	f003 0301 	and.w	r3, r3, #1
 801152c:	2b00      	cmp	r3, #0
 801152e:	d022      	beq.n	8011576 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8011530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011532:	681b      	ldr	r3, [r3, #0]
 8011534:	68db      	ldr	r3, [r3, #12]
 8011536:	899b      	ldrh	r3, [r3, #12]
 8011538:	b29b      	uxth	r3, r3
 801153a:	b21b      	sxth	r3, r3
 801153c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011540:	b21c      	sxth	r4, r3
 8011542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011544:	681b      	ldr	r3, [r3, #0]
 8011546:	68db      	ldr	r3, [r3, #12]
 8011548:	899b      	ldrh	r3, [r3, #12]
 801154a:	b29b      	uxth	r3, r3
 801154c:	4618      	mov	r0, r3
 801154e:	f7f9 ffbd 	bl	800b4cc <lwip_htons>
 8011552:	4603      	mov	r3, r0
 8011554:	b2db      	uxtb	r3, r3
 8011556:	b29b      	uxth	r3, r3
 8011558:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801155c:	b29b      	uxth	r3, r3
 801155e:	4618      	mov	r0, r3
 8011560:	f7f9 ffb4 	bl	800b4cc <lwip_htons>
 8011564:	4603      	mov	r3, r0
 8011566:	b21b      	sxth	r3, r3
 8011568:	4323      	orrs	r3, r4
 801156a:	b21a      	sxth	r2, r3
 801156c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801156e:	681b      	ldr	r3, [r3, #0]
 8011570:	68db      	ldr	r3, [r3, #12]
 8011572:	b292      	uxth	r2, r2
 8011574:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801157a:	b29a      	uxth	r2, r3
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011580:	4413      	add	r3, r2
 8011582:	b299      	uxth	r1, r3
 8011584:	4b3c      	ldr	r3, [pc, #240]	; (8011678 <tcp_receive+0xf18>)
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	b29a      	uxth	r2, r3
 801158a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801158c:	681b      	ldr	r3, [r3, #0]
 801158e:	1a8a      	subs	r2, r1, r2
 8011590:	b292      	uxth	r2, r2
 8011592:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8011594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011596:	681b      	ldr	r3, [r3, #0]
 8011598:	685a      	ldr	r2, [r3, #4]
 801159a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801159c:	681b      	ldr	r3, [r3, #0]
 801159e:	891b      	ldrh	r3, [r3, #8]
 80115a0:	4619      	mov	r1, r3
 80115a2:	4610      	mov	r0, r2
 80115a4:	f7fb fa40 	bl	800ca28 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80115a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115aa:	681b      	ldr	r3, [r3, #0]
 80115ac:	891c      	ldrh	r4, [r3, #8]
 80115ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115b0:	681b      	ldr	r3, [r3, #0]
 80115b2:	68db      	ldr	r3, [r3, #12]
 80115b4:	899b      	ldrh	r3, [r3, #12]
 80115b6:	b29b      	uxth	r3, r3
 80115b8:	4618      	mov	r0, r3
 80115ba:	f7f9 ff87 	bl	800b4cc <lwip_htons>
 80115be:	4603      	mov	r3, r0
 80115c0:	b2db      	uxtb	r3, r3
 80115c2:	f003 0303 	and.w	r3, r3, #3
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	d001      	beq.n	80115ce <tcp_receive+0xe6e>
 80115ca:	2301      	movs	r3, #1
 80115cc:	e000      	b.n	80115d0 <tcp_receive+0xe70>
 80115ce:	2300      	movs	r3, #0
 80115d0:	4423      	add	r3, r4
 80115d2:	b29a      	uxth	r2, r3
 80115d4:	4b2a      	ldr	r3, [pc, #168]	; (8011680 <tcp_receive+0xf20>)
 80115d6:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80115d8:	4b29      	ldr	r3, [pc, #164]	; (8011680 <tcp_receive+0xf20>)
 80115da:	881b      	ldrh	r3, [r3, #0]
 80115dc:	461a      	mov	r2, r3
 80115de:	4b26      	ldr	r3, [pc, #152]	; (8011678 <tcp_receive+0xf18>)
 80115e0:	681b      	ldr	r3, [r3, #0]
 80115e2:	441a      	add	r2, r3
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115e8:	6879      	ldr	r1, [r7, #4]
 80115ea:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80115ec:	440b      	add	r3, r1
 80115ee:	429a      	cmp	r2, r3
 80115f0:	d019      	beq.n	8011626 <tcp_receive+0xec6>
 80115f2:	4b24      	ldr	r3, [pc, #144]	; (8011684 <tcp_receive+0xf24>)
 80115f4:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 80115f8:	4923      	ldr	r1, [pc, #140]	; (8011688 <tcp_receive+0xf28>)
 80115fa:	4824      	ldr	r0, [pc, #144]	; (801168c <tcp_receive+0xf2c>)
 80115fc:	f007 facc 	bl	8018b98 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8011600:	e011      	b.n	8011626 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011604:	681b      	ldr	r3, [r3, #0]
 8011606:	63bb      	str	r3, [r7, #56]	; 0x38
 8011608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801160a:	2b00      	cmp	r3, #0
 801160c:	f47f aea4 	bne.w	8011358 <tcp_receive+0xbf8>
 8011610:	e00a      	b.n	8011628 <tcp_receive+0xec8>
                break;
 8011612:	bf00      	nop
 8011614:	e008      	b.n	8011628 <tcp_receive+0xec8>
                break;
 8011616:	bf00      	nop
 8011618:	e006      	b.n	8011628 <tcp_receive+0xec8>
                  break;
 801161a:	bf00      	nop
 801161c:	e004      	b.n	8011628 <tcp_receive+0xec8>
                  break;
 801161e:	bf00      	nop
 8011620:	e002      	b.n	8011628 <tcp_receive+0xec8>
                  break;
 8011622:	bf00      	nop
 8011624:	e000      	b.n	8011628 <tcp_receive+0xec8>
                break;
 8011626:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8011628:	6878      	ldr	r0, [r7, #4]
 801162a:	f001 fe8b 	bl	8013344 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801162e:	e003      	b.n	8011638 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8011630:	6878      	ldr	r0, [r7, #4]
 8011632:	f001 fe87 	bl	8013344 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011636:	e01a      	b.n	801166e <tcp_receive+0xf0e>
 8011638:	e019      	b.n	801166e <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801163a:	4b0f      	ldr	r3, [pc, #60]	; (8011678 <tcp_receive+0xf18>)
 801163c:	681a      	ldr	r2, [r3, #0]
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011642:	1ad3      	subs	r3, r2, r3
 8011644:	2b00      	cmp	r3, #0
 8011646:	db0a      	blt.n	801165e <tcp_receive+0xefe>
 8011648:	4b0b      	ldr	r3, [pc, #44]	; (8011678 <tcp_receive+0xf18>)
 801164a:	681a      	ldr	r2, [r3, #0]
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011650:	6879      	ldr	r1, [r7, #4]
 8011652:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011654:	440b      	add	r3, r1
 8011656:	1ad3      	subs	r3, r2, r3
 8011658:	3301      	adds	r3, #1
 801165a:	2b00      	cmp	r3, #0
 801165c:	dd07      	ble.n	801166e <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	8b5b      	ldrh	r3, [r3, #26]
 8011662:	f043 0302 	orr.w	r3, r3, #2
 8011666:	b29a      	uxth	r2, r3
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801166c:	e7ff      	b.n	801166e <tcp_receive+0xf0e>
 801166e:	bf00      	nop
 8011670:	3750      	adds	r7, #80	; 0x50
 8011672:	46bd      	mov	sp, r7
 8011674:	bdb0      	pop	{r4, r5, r7, pc}
 8011676:	bf00      	nop
 8011678:	20010ea8 	.word	0x20010ea8
 801167c:	20010e88 	.word	0x20010e88
 8011680:	20010eb2 	.word	0x20010eb2
 8011684:	0801c008 	.word	0x0801c008
 8011688:	0801c3b0 	.word	0x0801c3b0
 801168c:	0801c054 	.word	0x0801c054

08011690 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8011690:	b480      	push	{r7}
 8011692:	b083      	sub	sp, #12
 8011694:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8011696:	4b15      	ldr	r3, [pc, #84]	; (80116ec <tcp_get_next_optbyte+0x5c>)
 8011698:	881b      	ldrh	r3, [r3, #0]
 801169a:	1c5a      	adds	r2, r3, #1
 801169c:	b291      	uxth	r1, r2
 801169e:	4a13      	ldr	r2, [pc, #76]	; (80116ec <tcp_get_next_optbyte+0x5c>)
 80116a0:	8011      	strh	r1, [r2, #0]
 80116a2:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80116a4:	4b12      	ldr	r3, [pc, #72]	; (80116f0 <tcp_get_next_optbyte+0x60>)
 80116a6:	681b      	ldr	r3, [r3, #0]
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	d004      	beq.n	80116b6 <tcp_get_next_optbyte+0x26>
 80116ac:	4b11      	ldr	r3, [pc, #68]	; (80116f4 <tcp_get_next_optbyte+0x64>)
 80116ae:	881b      	ldrh	r3, [r3, #0]
 80116b0:	88fa      	ldrh	r2, [r7, #6]
 80116b2:	429a      	cmp	r2, r3
 80116b4:	d208      	bcs.n	80116c8 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80116b6:	4b10      	ldr	r3, [pc, #64]	; (80116f8 <tcp_get_next_optbyte+0x68>)
 80116b8:	681b      	ldr	r3, [r3, #0]
 80116ba:	3314      	adds	r3, #20
 80116bc:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80116be:	88fb      	ldrh	r3, [r7, #6]
 80116c0:	683a      	ldr	r2, [r7, #0]
 80116c2:	4413      	add	r3, r2
 80116c4:	781b      	ldrb	r3, [r3, #0]
 80116c6:	e00b      	b.n	80116e0 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80116c8:	88fb      	ldrh	r3, [r7, #6]
 80116ca:	b2da      	uxtb	r2, r3
 80116cc:	4b09      	ldr	r3, [pc, #36]	; (80116f4 <tcp_get_next_optbyte+0x64>)
 80116ce:	881b      	ldrh	r3, [r3, #0]
 80116d0:	b2db      	uxtb	r3, r3
 80116d2:	1ad3      	subs	r3, r2, r3
 80116d4:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80116d6:	4b06      	ldr	r3, [pc, #24]	; (80116f0 <tcp_get_next_optbyte+0x60>)
 80116d8:	681a      	ldr	r2, [r3, #0]
 80116da:	797b      	ldrb	r3, [r7, #5]
 80116dc:	4413      	add	r3, r2
 80116de:	781b      	ldrb	r3, [r3, #0]
  }
}
 80116e0:	4618      	mov	r0, r3
 80116e2:	370c      	adds	r7, #12
 80116e4:	46bd      	mov	sp, r7
 80116e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ea:	4770      	bx	lr
 80116ec:	20010ea4 	.word	0x20010ea4
 80116f0:	20010ea0 	.word	0x20010ea0
 80116f4:	20010e9e 	.word	0x20010e9e
 80116f8:	20010e98 	.word	0x20010e98

080116fc <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80116fc:	b580      	push	{r7, lr}
 80116fe:	b084      	sub	sp, #16
 8011700:	af00      	add	r7, sp, #0
 8011702:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	2b00      	cmp	r3, #0
 8011708:	d106      	bne.n	8011718 <tcp_parseopt+0x1c>
 801170a:	4b32      	ldr	r3, [pc, #200]	; (80117d4 <tcp_parseopt+0xd8>)
 801170c:	f240 727d 	movw	r2, #1917	; 0x77d
 8011710:	4931      	ldr	r1, [pc, #196]	; (80117d8 <tcp_parseopt+0xdc>)
 8011712:	4832      	ldr	r0, [pc, #200]	; (80117dc <tcp_parseopt+0xe0>)
 8011714:	f007 fa40 	bl	8018b98 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8011718:	4b31      	ldr	r3, [pc, #196]	; (80117e0 <tcp_parseopt+0xe4>)
 801171a:	881b      	ldrh	r3, [r3, #0]
 801171c:	2b00      	cmp	r3, #0
 801171e:	d055      	beq.n	80117cc <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011720:	4b30      	ldr	r3, [pc, #192]	; (80117e4 <tcp_parseopt+0xe8>)
 8011722:	2200      	movs	r2, #0
 8011724:	801a      	strh	r2, [r3, #0]
 8011726:	e045      	b.n	80117b4 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8011728:	f7ff ffb2 	bl	8011690 <tcp_get_next_optbyte>
 801172c:	4603      	mov	r3, r0
 801172e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8011730:	7bfb      	ldrb	r3, [r7, #15]
 8011732:	2b02      	cmp	r3, #2
 8011734:	d006      	beq.n	8011744 <tcp_parseopt+0x48>
 8011736:	2b02      	cmp	r3, #2
 8011738:	dc2b      	bgt.n	8011792 <tcp_parseopt+0x96>
 801173a:	2b00      	cmp	r3, #0
 801173c:	d041      	beq.n	80117c2 <tcp_parseopt+0xc6>
 801173e:	2b01      	cmp	r3, #1
 8011740:	d127      	bne.n	8011792 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8011742:	e037      	b.n	80117b4 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8011744:	f7ff ffa4 	bl	8011690 <tcp_get_next_optbyte>
 8011748:	4603      	mov	r3, r0
 801174a:	2b04      	cmp	r3, #4
 801174c:	d13b      	bne.n	80117c6 <tcp_parseopt+0xca>
 801174e:	4b25      	ldr	r3, [pc, #148]	; (80117e4 <tcp_parseopt+0xe8>)
 8011750:	881b      	ldrh	r3, [r3, #0]
 8011752:	3301      	adds	r3, #1
 8011754:	4a22      	ldr	r2, [pc, #136]	; (80117e0 <tcp_parseopt+0xe4>)
 8011756:	8812      	ldrh	r2, [r2, #0]
 8011758:	4293      	cmp	r3, r2
 801175a:	da34      	bge.n	80117c6 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801175c:	f7ff ff98 	bl	8011690 <tcp_get_next_optbyte>
 8011760:	4603      	mov	r3, r0
 8011762:	b29b      	uxth	r3, r3
 8011764:	021b      	lsls	r3, r3, #8
 8011766:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8011768:	f7ff ff92 	bl	8011690 <tcp_get_next_optbyte>
 801176c:	4603      	mov	r3, r0
 801176e:	b29a      	uxth	r2, r3
 8011770:	89bb      	ldrh	r3, [r7, #12]
 8011772:	4313      	orrs	r3, r2
 8011774:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8011776:	89bb      	ldrh	r3, [r7, #12]
 8011778:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801177c:	d804      	bhi.n	8011788 <tcp_parseopt+0x8c>
 801177e:	89bb      	ldrh	r3, [r7, #12]
 8011780:	2b00      	cmp	r3, #0
 8011782:	d001      	beq.n	8011788 <tcp_parseopt+0x8c>
 8011784:	89ba      	ldrh	r2, [r7, #12]
 8011786:	e001      	b.n	801178c <tcp_parseopt+0x90>
 8011788:	f44f 7206 	mov.w	r2, #536	; 0x218
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8011790:	e010      	b.n	80117b4 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8011792:	f7ff ff7d 	bl	8011690 <tcp_get_next_optbyte>
 8011796:	4603      	mov	r3, r0
 8011798:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801179a:	7afb      	ldrb	r3, [r7, #11]
 801179c:	2b01      	cmp	r3, #1
 801179e:	d914      	bls.n	80117ca <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80117a0:	7afb      	ldrb	r3, [r7, #11]
 80117a2:	b29a      	uxth	r2, r3
 80117a4:	4b0f      	ldr	r3, [pc, #60]	; (80117e4 <tcp_parseopt+0xe8>)
 80117a6:	881b      	ldrh	r3, [r3, #0]
 80117a8:	4413      	add	r3, r2
 80117aa:	b29b      	uxth	r3, r3
 80117ac:	3b02      	subs	r3, #2
 80117ae:	b29a      	uxth	r2, r3
 80117b0:	4b0c      	ldr	r3, [pc, #48]	; (80117e4 <tcp_parseopt+0xe8>)
 80117b2:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80117b4:	4b0b      	ldr	r3, [pc, #44]	; (80117e4 <tcp_parseopt+0xe8>)
 80117b6:	881a      	ldrh	r2, [r3, #0]
 80117b8:	4b09      	ldr	r3, [pc, #36]	; (80117e0 <tcp_parseopt+0xe4>)
 80117ba:	881b      	ldrh	r3, [r3, #0]
 80117bc:	429a      	cmp	r2, r3
 80117be:	d3b3      	bcc.n	8011728 <tcp_parseopt+0x2c>
 80117c0:	e004      	b.n	80117cc <tcp_parseopt+0xd0>
          return;
 80117c2:	bf00      	nop
 80117c4:	e002      	b.n	80117cc <tcp_parseopt+0xd0>
            return;
 80117c6:	bf00      	nop
 80117c8:	e000      	b.n	80117cc <tcp_parseopt+0xd0>
            return;
 80117ca:	bf00      	nop
      }
    }
  }
}
 80117cc:	3710      	adds	r7, #16
 80117ce:	46bd      	mov	sp, r7
 80117d0:	bd80      	pop	{r7, pc}
 80117d2:	bf00      	nop
 80117d4:	0801c008 	.word	0x0801c008
 80117d8:	0801c46c 	.word	0x0801c46c
 80117dc:	0801c054 	.word	0x0801c054
 80117e0:	20010e9c 	.word	0x20010e9c
 80117e4:	20010ea4 	.word	0x20010ea4

080117e8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80117e8:	b480      	push	{r7}
 80117ea:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80117ec:	4b05      	ldr	r3, [pc, #20]	; (8011804 <tcp_trigger_input_pcb_close+0x1c>)
 80117ee:	781b      	ldrb	r3, [r3, #0]
 80117f0:	f043 0310 	orr.w	r3, r3, #16
 80117f4:	b2da      	uxtb	r2, r3
 80117f6:	4b03      	ldr	r3, [pc, #12]	; (8011804 <tcp_trigger_input_pcb_close+0x1c>)
 80117f8:	701a      	strb	r2, [r3, #0]
}
 80117fa:	bf00      	nop
 80117fc:	46bd      	mov	sp, r7
 80117fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011802:	4770      	bx	lr
 8011804:	20010eb5 	.word	0x20010eb5

08011808 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8011808:	b580      	push	{r7, lr}
 801180a:	b084      	sub	sp, #16
 801180c:	af00      	add	r7, sp, #0
 801180e:	60f8      	str	r0, [r7, #12]
 8011810:	60b9      	str	r1, [r7, #8]
 8011812:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8011814:	68fb      	ldr	r3, [r7, #12]
 8011816:	2b00      	cmp	r3, #0
 8011818:	d00a      	beq.n	8011830 <tcp_route+0x28>
 801181a:	68fb      	ldr	r3, [r7, #12]
 801181c:	7a1b      	ldrb	r3, [r3, #8]
 801181e:	2b00      	cmp	r3, #0
 8011820:	d006      	beq.n	8011830 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8011822:	68fb      	ldr	r3, [r7, #12]
 8011824:	7a1b      	ldrb	r3, [r3, #8]
 8011826:	4618      	mov	r0, r3
 8011828:	f7fa fef6 	bl	800c618 <netif_get_by_index>
 801182c:	4603      	mov	r3, r0
 801182e:	e003      	b.n	8011838 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8011830:	6878      	ldr	r0, [r7, #4]
 8011832:	f005 fca9 	bl	8017188 <ip4_route>
 8011836:	4603      	mov	r3, r0
  }
}
 8011838:	4618      	mov	r0, r3
 801183a:	3710      	adds	r7, #16
 801183c:	46bd      	mov	sp, r7
 801183e:	bd80      	pop	{r7, pc}

08011840 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8011840:	b590      	push	{r4, r7, lr}
 8011842:	b087      	sub	sp, #28
 8011844:	af00      	add	r7, sp, #0
 8011846:	60f8      	str	r0, [r7, #12]
 8011848:	60b9      	str	r1, [r7, #8]
 801184a:	603b      	str	r3, [r7, #0]
 801184c:	4613      	mov	r3, r2
 801184e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8011850:	68fb      	ldr	r3, [r7, #12]
 8011852:	2b00      	cmp	r3, #0
 8011854:	d105      	bne.n	8011862 <tcp_create_segment+0x22>
 8011856:	4b44      	ldr	r3, [pc, #272]	; (8011968 <tcp_create_segment+0x128>)
 8011858:	22a3      	movs	r2, #163	; 0xa3
 801185a:	4944      	ldr	r1, [pc, #272]	; (801196c <tcp_create_segment+0x12c>)
 801185c:	4844      	ldr	r0, [pc, #272]	; (8011970 <tcp_create_segment+0x130>)
 801185e:	f007 f99b 	bl	8018b98 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8011862:	68bb      	ldr	r3, [r7, #8]
 8011864:	2b00      	cmp	r3, #0
 8011866:	d105      	bne.n	8011874 <tcp_create_segment+0x34>
 8011868:	4b3f      	ldr	r3, [pc, #252]	; (8011968 <tcp_create_segment+0x128>)
 801186a:	22a4      	movs	r2, #164	; 0xa4
 801186c:	4941      	ldr	r1, [pc, #260]	; (8011974 <tcp_create_segment+0x134>)
 801186e:	4840      	ldr	r0, [pc, #256]	; (8011970 <tcp_create_segment+0x130>)
 8011870:	f007 f992 	bl	8018b98 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011874:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011878:	009b      	lsls	r3, r3, #2
 801187a:	b2db      	uxtb	r3, r3
 801187c:	f003 0304 	and.w	r3, r3, #4
 8011880:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8011882:	2003      	movs	r0, #3
 8011884:	f7fa fb30 	bl	800bee8 <memp_malloc>
 8011888:	6138      	str	r0, [r7, #16]
 801188a:	693b      	ldr	r3, [r7, #16]
 801188c:	2b00      	cmp	r3, #0
 801188e:	d104      	bne.n	801189a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8011890:	68b8      	ldr	r0, [r7, #8]
 8011892:	f7fb fa4f 	bl	800cd34 <pbuf_free>
    return NULL;
 8011896:	2300      	movs	r3, #0
 8011898:	e061      	b.n	801195e <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801189a:	693b      	ldr	r3, [r7, #16]
 801189c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80118a0:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80118a2:	693b      	ldr	r3, [r7, #16]
 80118a4:	2200      	movs	r2, #0
 80118a6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80118a8:	693b      	ldr	r3, [r7, #16]
 80118aa:	68ba      	ldr	r2, [r7, #8]
 80118ac:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80118ae:	68bb      	ldr	r3, [r7, #8]
 80118b0:	891a      	ldrh	r2, [r3, #8]
 80118b2:	7dfb      	ldrb	r3, [r7, #23]
 80118b4:	b29b      	uxth	r3, r3
 80118b6:	429a      	cmp	r2, r3
 80118b8:	d205      	bcs.n	80118c6 <tcp_create_segment+0x86>
 80118ba:	4b2b      	ldr	r3, [pc, #172]	; (8011968 <tcp_create_segment+0x128>)
 80118bc:	22b0      	movs	r2, #176	; 0xb0
 80118be:	492e      	ldr	r1, [pc, #184]	; (8011978 <tcp_create_segment+0x138>)
 80118c0:	482b      	ldr	r0, [pc, #172]	; (8011970 <tcp_create_segment+0x130>)
 80118c2:	f007 f969 	bl	8018b98 <iprintf>
  seg->len = p->tot_len - optlen;
 80118c6:	68bb      	ldr	r3, [r7, #8]
 80118c8:	891a      	ldrh	r2, [r3, #8]
 80118ca:	7dfb      	ldrb	r3, [r7, #23]
 80118cc:	b29b      	uxth	r3, r3
 80118ce:	1ad3      	subs	r3, r2, r3
 80118d0:	b29a      	uxth	r2, r3
 80118d2:	693b      	ldr	r3, [r7, #16]
 80118d4:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80118d6:	2114      	movs	r1, #20
 80118d8:	68b8      	ldr	r0, [r7, #8]
 80118da:	f7fb f995 	bl	800cc08 <pbuf_add_header>
 80118de:	4603      	mov	r3, r0
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	d004      	beq.n	80118ee <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80118e4:	6938      	ldr	r0, [r7, #16]
 80118e6:	f7fc ffe2 	bl	800e8ae <tcp_seg_free>
    return NULL;
 80118ea:	2300      	movs	r3, #0
 80118ec:	e037      	b.n	801195e <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80118ee:	693b      	ldr	r3, [r7, #16]
 80118f0:	685b      	ldr	r3, [r3, #4]
 80118f2:	685a      	ldr	r2, [r3, #4]
 80118f4:	693b      	ldr	r3, [r7, #16]
 80118f6:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80118f8:	68fb      	ldr	r3, [r7, #12]
 80118fa:	8ada      	ldrh	r2, [r3, #22]
 80118fc:	693b      	ldr	r3, [r7, #16]
 80118fe:	68dc      	ldr	r4, [r3, #12]
 8011900:	4610      	mov	r0, r2
 8011902:	f7f9 fde3 	bl	800b4cc <lwip_htons>
 8011906:	4603      	mov	r3, r0
 8011908:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801190a:	68fb      	ldr	r3, [r7, #12]
 801190c:	8b1a      	ldrh	r2, [r3, #24]
 801190e:	693b      	ldr	r3, [r7, #16]
 8011910:	68dc      	ldr	r4, [r3, #12]
 8011912:	4610      	mov	r0, r2
 8011914:	f7f9 fdda 	bl	800b4cc <lwip_htons>
 8011918:	4603      	mov	r3, r0
 801191a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801191c:	693b      	ldr	r3, [r7, #16]
 801191e:	68dc      	ldr	r4, [r3, #12]
 8011920:	6838      	ldr	r0, [r7, #0]
 8011922:	f7f9 fde8 	bl	800b4f6 <lwip_htonl>
 8011926:	4603      	mov	r3, r0
 8011928:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801192a:	7dfb      	ldrb	r3, [r7, #23]
 801192c:	089b      	lsrs	r3, r3, #2
 801192e:	b2db      	uxtb	r3, r3
 8011930:	b29b      	uxth	r3, r3
 8011932:	3305      	adds	r3, #5
 8011934:	b29b      	uxth	r3, r3
 8011936:	031b      	lsls	r3, r3, #12
 8011938:	b29a      	uxth	r2, r3
 801193a:	79fb      	ldrb	r3, [r7, #7]
 801193c:	b29b      	uxth	r3, r3
 801193e:	4313      	orrs	r3, r2
 8011940:	b29a      	uxth	r2, r3
 8011942:	693b      	ldr	r3, [r7, #16]
 8011944:	68dc      	ldr	r4, [r3, #12]
 8011946:	4610      	mov	r0, r2
 8011948:	f7f9 fdc0 	bl	800b4cc <lwip_htons>
 801194c:	4603      	mov	r3, r0
 801194e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8011950:	693b      	ldr	r3, [r7, #16]
 8011952:	68db      	ldr	r3, [r3, #12]
 8011954:	2200      	movs	r2, #0
 8011956:	749a      	strb	r2, [r3, #18]
 8011958:	2200      	movs	r2, #0
 801195a:	74da      	strb	r2, [r3, #19]
  return seg;
 801195c:	693b      	ldr	r3, [r7, #16]
}
 801195e:	4618      	mov	r0, r3
 8011960:	371c      	adds	r7, #28
 8011962:	46bd      	mov	sp, r7
 8011964:	bd90      	pop	{r4, r7, pc}
 8011966:	bf00      	nop
 8011968:	0801c488 	.word	0x0801c488
 801196c:	0801c4bc 	.word	0x0801c4bc
 8011970:	0801c4dc 	.word	0x0801c4dc
 8011974:	0801c504 	.word	0x0801c504
 8011978:	0801c528 	.word	0x0801c528

0801197c <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 801197c:	b580      	push	{r7, lr}
 801197e:	b086      	sub	sp, #24
 8011980:	af00      	add	r7, sp, #0
 8011982:	607b      	str	r3, [r7, #4]
 8011984:	4603      	mov	r3, r0
 8011986:	73fb      	strb	r3, [r7, #15]
 8011988:	460b      	mov	r3, r1
 801198a:	81bb      	strh	r3, [r7, #12]
 801198c:	4613      	mov	r3, r2
 801198e:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8011990:	89bb      	ldrh	r3, [r7, #12]
 8011992:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	2b00      	cmp	r3, #0
 8011998:	d105      	bne.n	80119a6 <tcp_pbuf_prealloc+0x2a>
 801199a:	4b30      	ldr	r3, [pc, #192]	; (8011a5c <tcp_pbuf_prealloc+0xe0>)
 801199c:	22e8      	movs	r2, #232	; 0xe8
 801199e:	4930      	ldr	r1, [pc, #192]	; (8011a60 <tcp_pbuf_prealloc+0xe4>)
 80119a0:	4830      	ldr	r0, [pc, #192]	; (8011a64 <tcp_pbuf_prealloc+0xe8>)
 80119a2:	f007 f8f9 	bl	8018b98 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 80119a6:	6a3b      	ldr	r3, [r7, #32]
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d105      	bne.n	80119b8 <tcp_pbuf_prealloc+0x3c>
 80119ac:	4b2b      	ldr	r3, [pc, #172]	; (8011a5c <tcp_pbuf_prealloc+0xe0>)
 80119ae:	22e9      	movs	r2, #233	; 0xe9
 80119b0:	492d      	ldr	r1, [pc, #180]	; (8011a68 <tcp_pbuf_prealloc+0xec>)
 80119b2:	482c      	ldr	r0, [pc, #176]	; (8011a64 <tcp_pbuf_prealloc+0xe8>)
 80119b4:	f007 f8f0 	bl	8018b98 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 80119b8:	89ba      	ldrh	r2, [r7, #12]
 80119ba:	897b      	ldrh	r3, [r7, #10]
 80119bc:	429a      	cmp	r2, r3
 80119be:	d221      	bcs.n	8011a04 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80119c0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80119c4:	f003 0302 	and.w	r3, r3, #2
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d111      	bne.n	80119f0 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 80119cc:	6a3b      	ldr	r3, [r7, #32]
 80119ce:	8b5b      	ldrh	r3, [r3, #26]
 80119d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	d115      	bne.n	8011a04 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 80119d8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d007      	beq.n	80119f0 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 80119e0:	6a3b      	ldr	r3, [r7, #32]
 80119e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d103      	bne.n	80119f0 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 80119e8:	6a3b      	ldr	r3, [r7, #32]
 80119ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	d009      	beq.n	8011a04 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 80119f0:	89bb      	ldrh	r3, [r7, #12]
 80119f2:	f203 231b 	addw	r3, r3, #539	; 0x21b
 80119f6:	f023 0203 	bic.w	r2, r3, #3
 80119fa:	897b      	ldrh	r3, [r7, #10]
 80119fc:	4293      	cmp	r3, r2
 80119fe:	bf28      	it	cs
 8011a00:	4613      	movcs	r3, r2
 8011a02:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8011a04:	8af9      	ldrh	r1, [r7, #22]
 8011a06:	7bfb      	ldrb	r3, [r7, #15]
 8011a08:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011a0c:	4618      	mov	r0, r3
 8011a0e:	f7fa fead 	bl	800c76c <pbuf_alloc>
 8011a12:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011a14:	693b      	ldr	r3, [r7, #16]
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d101      	bne.n	8011a1e <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8011a1a:	2300      	movs	r3, #0
 8011a1c:	e019      	b.n	8011a52 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8011a1e:	693b      	ldr	r3, [r7, #16]
 8011a20:	681b      	ldr	r3, [r3, #0]
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d006      	beq.n	8011a34 <tcp_pbuf_prealloc+0xb8>
 8011a26:	4b0d      	ldr	r3, [pc, #52]	; (8011a5c <tcp_pbuf_prealloc+0xe0>)
 8011a28:	f240 120b 	movw	r2, #267	; 0x10b
 8011a2c:	490f      	ldr	r1, [pc, #60]	; (8011a6c <tcp_pbuf_prealloc+0xf0>)
 8011a2e:	480d      	ldr	r0, [pc, #52]	; (8011a64 <tcp_pbuf_prealloc+0xe8>)
 8011a30:	f007 f8b2 	bl	8018b98 <iprintf>
  *oversize = p->len - length;
 8011a34:	693b      	ldr	r3, [r7, #16]
 8011a36:	895a      	ldrh	r2, [r3, #10]
 8011a38:	89bb      	ldrh	r3, [r7, #12]
 8011a3a:	1ad3      	subs	r3, r2, r3
 8011a3c:	b29a      	uxth	r2, r3
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8011a42:	693b      	ldr	r3, [r7, #16]
 8011a44:	89ba      	ldrh	r2, [r7, #12]
 8011a46:	811a      	strh	r2, [r3, #8]
 8011a48:	693b      	ldr	r3, [r7, #16]
 8011a4a:	891a      	ldrh	r2, [r3, #8]
 8011a4c:	693b      	ldr	r3, [r7, #16]
 8011a4e:	815a      	strh	r2, [r3, #10]
  return p;
 8011a50:	693b      	ldr	r3, [r7, #16]
}
 8011a52:	4618      	mov	r0, r3
 8011a54:	3718      	adds	r7, #24
 8011a56:	46bd      	mov	sp, r7
 8011a58:	bd80      	pop	{r7, pc}
 8011a5a:	bf00      	nop
 8011a5c:	0801c488 	.word	0x0801c488
 8011a60:	0801c540 	.word	0x0801c540
 8011a64:	0801c4dc 	.word	0x0801c4dc
 8011a68:	0801c564 	.word	0x0801c564
 8011a6c:	0801c584 	.word	0x0801c584

08011a70 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8011a70:	b580      	push	{r7, lr}
 8011a72:	b082      	sub	sp, #8
 8011a74:	af00      	add	r7, sp, #0
 8011a76:	6078      	str	r0, [r7, #4]
 8011a78:	460b      	mov	r3, r1
 8011a7a:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	d106      	bne.n	8011a90 <tcp_write_checks+0x20>
 8011a82:	4b33      	ldr	r3, [pc, #204]	; (8011b50 <tcp_write_checks+0xe0>)
 8011a84:	f240 1233 	movw	r2, #307	; 0x133
 8011a88:	4932      	ldr	r1, [pc, #200]	; (8011b54 <tcp_write_checks+0xe4>)
 8011a8a:	4833      	ldr	r0, [pc, #204]	; (8011b58 <tcp_write_checks+0xe8>)
 8011a8c:	f007 f884 	bl	8018b98 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	7d1b      	ldrb	r3, [r3, #20]
 8011a94:	2b04      	cmp	r3, #4
 8011a96:	d00e      	beq.n	8011ab6 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8011a9c:	2b07      	cmp	r3, #7
 8011a9e:	d00a      	beq.n	8011ab6 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8011aa4:	2b02      	cmp	r3, #2
 8011aa6:	d006      	beq.n	8011ab6 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8011aac:	2b03      	cmp	r3, #3
 8011aae:	d002      	beq.n	8011ab6 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8011ab0:	f06f 030a 	mvn.w	r3, #10
 8011ab4:	e048      	b.n	8011b48 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8011ab6:	887b      	ldrh	r3, [r7, #2]
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	d101      	bne.n	8011ac0 <tcp_write_checks+0x50>
    return ERR_OK;
 8011abc:	2300      	movs	r3, #0
 8011abe:	e043      	b.n	8011b48 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011ac6:	887a      	ldrh	r2, [r7, #2]
 8011ac8:	429a      	cmp	r2, r3
 8011aca:	d909      	bls.n	8011ae0 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	8b5b      	ldrh	r3, [r3, #26]
 8011ad0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011ad4:	b29a      	uxth	r2, r3
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8011ada:	f04f 33ff 	mov.w	r3, #4294967295
 8011ade:	e033      	b.n	8011b48 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011ae6:	2b08      	cmp	r3, #8
 8011ae8:	d909      	bls.n	8011afe <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	8b5b      	ldrh	r3, [r3, #26]
 8011aee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011af2:	b29a      	uxth	r2, r3
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8011af8:	f04f 33ff 	mov.w	r3, #4294967295
 8011afc:	e024      	b.n	8011b48 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d00f      	beq.n	8011b28 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	d11a      	bne.n	8011b46 <tcp_write_checks+0xd6>
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	d116      	bne.n	8011b46 <tcp_write_checks+0xd6>
 8011b18:	4b0d      	ldr	r3, [pc, #52]	; (8011b50 <tcp_write_checks+0xe0>)
 8011b1a:	f240 1255 	movw	r2, #341	; 0x155
 8011b1e:	490f      	ldr	r1, [pc, #60]	; (8011b5c <tcp_write_checks+0xec>)
 8011b20:	480d      	ldr	r0, [pc, #52]	; (8011b58 <tcp_write_checks+0xe8>)
 8011b22:	f007 f839 	bl	8018b98 <iprintf>
 8011b26:	e00e      	b.n	8011b46 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	d103      	bne.n	8011b38 <tcp_write_checks+0xc8>
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d006      	beq.n	8011b46 <tcp_write_checks+0xd6>
 8011b38:	4b05      	ldr	r3, [pc, #20]	; (8011b50 <tcp_write_checks+0xe0>)
 8011b3a:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8011b3e:	4908      	ldr	r1, [pc, #32]	; (8011b60 <tcp_write_checks+0xf0>)
 8011b40:	4805      	ldr	r0, [pc, #20]	; (8011b58 <tcp_write_checks+0xe8>)
 8011b42:	f007 f829 	bl	8018b98 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8011b46:	2300      	movs	r3, #0
}
 8011b48:	4618      	mov	r0, r3
 8011b4a:	3708      	adds	r7, #8
 8011b4c:	46bd      	mov	sp, r7
 8011b4e:	bd80      	pop	{r7, pc}
 8011b50:	0801c488 	.word	0x0801c488
 8011b54:	0801c598 	.word	0x0801c598
 8011b58:	0801c4dc 	.word	0x0801c4dc
 8011b5c:	0801c5b8 	.word	0x0801c5b8
 8011b60:	0801c5f4 	.word	0x0801c5f4

08011b64 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8011b64:	b590      	push	{r4, r7, lr}
 8011b66:	b09b      	sub	sp, #108	; 0x6c
 8011b68:	af04      	add	r7, sp, #16
 8011b6a:	60f8      	str	r0, [r7, #12]
 8011b6c:	60b9      	str	r1, [r7, #8]
 8011b6e:	4611      	mov	r1, r2
 8011b70:	461a      	mov	r2, r3
 8011b72:	460b      	mov	r3, r1
 8011b74:	80fb      	strh	r3, [r7, #6]
 8011b76:	4613      	mov	r3, r2
 8011b78:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8011b7a:	2300      	movs	r3, #0
 8011b7c:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8011b7e:	2300      	movs	r3, #0
 8011b80:	653b      	str	r3, [r7, #80]	; 0x50
 8011b82:	2300      	movs	r3, #0
 8011b84:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011b86:	2300      	movs	r3, #0
 8011b88:	64bb      	str	r3, [r7, #72]	; 0x48
 8011b8a:	2300      	movs	r3, #0
 8011b8c:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8011b8e:	2300      	movs	r3, #0
 8011b90:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8011b94:	2300      	movs	r3, #0
 8011b96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8011b9a:	2300      	movs	r3, #0
 8011b9c:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8011b9e:	2300      	movs	r3, #0
 8011ba0:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8011ba2:	2300      	movs	r3, #0
 8011ba4:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8011ba6:	68fb      	ldr	r3, [r7, #12]
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	d109      	bne.n	8011bc0 <tcp_write+0x5c>
 8011bac:	4ba4      	ldr	r3, [pc, #656]	; (8011e40 <tcp_write+0x2dc>)
 8011bae:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8011bb2:	49a4      	ldr	r1, [pc, #656]	; (8011e44 <tcp_write+0x2e0>)
 8011bb4:	48a4      	ldr	r0, [pc, #656]	; (8011e48 <tcp_write+0x2e4>)
 8011bb6:	f006 ffef 	bl	8018b98 <iprintf>
 8011bba:	f06f 030f 	mvn.w	r3, #15
 8011bbe:	e32a      	b.n	8012216 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8011bc0:	68fb      	ldr	r3, [r7, #12]
 8011bc2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011bc6:	085b      	lsrs	r3, r3, #1
 8011bc8:	b29a      	uxth	r2, r3
 8011bca:	68fb      	ldr	r3, [r7, #12]
 8011bcc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011bce:	4293      	cmp	r3, r2
 8011bd0:	bf28      	it	cs
 8011bd2:	4613      	movcs	r3, r2
 8011bd4:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8011bd6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	d102      	bne.n	8011be2 <tcp_write+0x7e>
 8011bdc:	68fb      	ldr	r3, [r7, #12]
 8011bde:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011be0:	e000      	b.n	8011be4 <tcp_write+0x80>
 8011be2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011be4:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8011be6:	68bb      	ldr	r3, [r7, #8]
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	d109      	bne.n	8011c00 <tcp_write+0x9c>
 8011bec:	4b94      	ldr	r3, [pc, #592]	; (8011e40 <tcp_write+0x2dc>)
 8011bee:	f240 12ad 	movw	r2, #429	; 0x1ad
 8011bf2:	4996      	ldr	r1, [pc, #600]	; (8011e4c <tcp_write+0x2e8>)
 8011bf4:	4894      	ldr	r0, [pc, #592]	; (8011e48 <tcp_write+0x2e4>)
 8011bf6:	f006 ffcf 	bl	8018b98 <iprintf>
 8011bfa:	f06f 030f 	mvn.w	r3, #15
 8011bfe:	e30a      	b.n	8012216 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8011c00:	88fb      	ldrh	r3, [r7, #6]
 8011c02:	4619      	mov	r1, r3
 8011c04:	68f8      	ldr	r0, [r7, #12]
 8011c06:	f7ff ff33 	bl	8011a70 <tcp_write_checks>
 8011c0a:	4603      	mov	r3, r0
 8011c0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8011c10:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d002      	beq.n	8011c1e <tcp_write+0xba>
    return err;
 8011c18:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8011c1c:	e2fb      	b.n	8012216 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8011c1e:	68fb      	ldr	r3, [r7, #12]
 8011c20:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011c24:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011c28:	2300      	movs	r3, #0
 8011c2a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8011c2e:	68fb      	ldr	r3, [r7, #12]
 8011c30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	f000 80f6 	beq.w	8011e24 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011c38:	68fb      	ldr	r3, [r7, #12]
 8011c3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c3c:	653b      	str	r3, [r7, #80]	; 0x50
 8011c3e:	e002      	b.n	8011c46 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8011c40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011c42:	681b      	ldr	r3, [r3, #0]
 8011c44:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011c46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011c48:	681b      	ldr	r3, [r3, #0]
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	d1f8      	bne.n	8011c40 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8011c4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011c50:	7a9b      	ldrb	r3, [r3, #10]
 8011c52:	009b      	lsls	r3, r3, #2
 8011c54:	b29b      	uxth	r3, r3
 8011c56:	f003 0304 	and.w	r3, r3, #4
 8011c5a:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8011c5c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011c5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011c60:	891b      	ldrh	r3, [r3, #8]
 8011c62:	4619      	mov	r1, r3
 8011c64:	8c3b      	ldrh	r3, [r7, #32]
 8011c66:	440b      	add	r3, r1
 8011c68:	429a      	cmp	r2, r3
 8011c6a:	da06      	bge.n	8011c7a <tcp_write+0x116>
 8011c6c:	4b74      	ldr	r3, [pc, #464]	; (8011e40 <tcp_write+0x2dc>)
 8011c6e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8011c72:	4977      	ldr	r1, [pc, #476]	; (8011e50 <tcp_write+0x2ec>)
 8011c74:	4874      	ldr	r0, [pc, #464]	; (8011e48 <tcp_write+0x2e4>)
 8011c76:	f006 ff8f 	bl	8018b98 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8011c7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011c7c:	891a      	ldrh	r2, [r3, #8]
 8011c7e:	8c3b      	ldrh	r3, [r7, #32]
 8011c80:	4413      	add	r3, r2
 8011c82:	b29b      	uxth	r3, r3
 8011c84:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011c86:	1ad3      	subs	r3, r2, r3
 8011c88:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8011c8a:	68fb      	ldr	r3, [r7, #12]
 8011c8c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011c90:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8011c92:	8a7b      	ldrh	r3, [r7, #18]
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d026      	beq.n	8011ce6 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8011c98:	8a7b      	ldrh	r3, [r7, #18]
 8011c9a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011c9c:	429a      	cmp	r2, r3
 8011c9e:	d206      	bcs.n	8011cae <tcp_write+0x14a>
 8011ca0:	4b67      	ldr	r3, [pc, #412]	; (8011e40 <tcp_write+0x2dc>)
 8011ca2:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8011ca6:	496b      	ldr	r1, [pc, #428]	; (8011e54 <tcp_write+0x2f0>)
 8011ca8:	4867      	ldr	r0, [pc, #412]	; (8011e48 <tcp_write+0x2e4>)
 8011caa:	f006 ff75 	bl	8018b98 <iprintf>
      seg = last_unsent;
 8011cae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011cb0:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8011cb2:	8a7b      	ldrh	r3, [r7, #18]
 8011cb4:	88fa      	ldrh	r2, [r7, #6]
 8011cb6:	4293      	cmp	r3, r2
 8011cb8:	bf28      	it	cs
 8011cba:	4613      	movcs	r3, r2
 8011cbc:	b29b      	uxth	r3, r3
 8011cbe:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011cc0:	4293      	cmp	r3, r2
 8011cc2:	bf28      	it	cs
 8011cc4:	4613      	movcs	r3, r2
 8011cc6:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8011cc8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011ccc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011cce:	4413      	add	r3, r2
 8011cd0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8011cd4:	8a7a      	ldrh	r2, [r7, #18]
 8011cd6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011cd8:	1ad3      	subs	r3, r2, r3
 8011cda:	b29b      	uxth	r3, r3
 8011cdc:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8011cde:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011ce0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011ce2:	1ad3      	subs	r3, r2, r3
 8011ce4:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8011ce6:	8a7b      	ldrh	r3, [r7, #18]
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	d00b      	beq.n	8011d04 <tcp_write+0x1a0>
 8011cec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011cf0:	88fb      	ldrh	r3, [r7, #6]
 8011cf2:	429a      	cmp	r2, r3
 8011cf4:	d006      	beq.n	8011d04 <tcp_write+0x1a0>
 8011cf6:	4b52      	ldr	r3, [pc, #328]	; (8011e40 <tcp_write+0x2dc>)
 8011cf8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011cfc:	4956      	ldr	r1, [pc, #344]	; (8011e58 <tcp_write+0x2f4>)
 8011cfe:	4852      	ldr	r0, [pc, #328]	; (8011e48 <tcp_write+0x2e4>)
 8011d00:	f006 ff4a 	bl	8018b98 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8011d04:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011d08:	88fb      	ldrh	r3, [r7, #6]
 8011d0a:	429a      	cmp	r2, r3
 8011d0c:	f080 8167 	bcs.w	8011fde <tcp_write+0x47a>
 8011d10:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	f000 8163 	beq.w	8011fde <tcp_write+0x47a>
 8011d18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011d1a:	891b      	ldrh	r3, [r3, #8]
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	f000 815e 	beq.w	8011fde <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8011d22:	88fa      	ldrh	r2, [r7, #6]
 8011d24:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011d28:	1ad2      	subs	r2, r2, r3
 8011d2a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011d2c:	4293      	cmp	r3, r2
 8011d2e:	bfa8      	it	ge
 8011d30:	4613      	movge	r3, r2
 8011d32:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8011d34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011d36:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8011d38:	797b      	ldrb	r3, [r7, #5]
 8011d3a:	f003 0301 	and.w	r3, r3, #1
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	d027      	beq.n	8011d92 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8011d42:	f107 0012 	add.w	r0, r7, #18
 8011d46:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011d48:	8bf9      	ldrh	r1, [r7, #30]
 8011d4a:	2301      	movs	r3, #1
 8011d4c:	9302      	str	r3, [sp, #8]
 8011d4e:	797b      	ldrb	r3, [r7, #5]
 8011d50:	9301      	str	r3, [sp, #4]
 8011d52:	68fb      	ldr	r3, [r7, #12]
 8011d54:	9300      	str	r3, [sp, #0]
 8011d56:	4603      	mov	r3, r0
 8011d58:	2000      	movs	r0, #0
 8011d5a:	f7ff fe0f 	bl	801197c <tcp_pbuf_prealloc>
 8011d5e:	6578      	str	r0, [r7, #84]	; 0x54
 8011d60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	f000 8225 	beq.w	80121b2 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8011d68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011d6a:	6858      	ldr	r0, [r3, #4]
 8011d6c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011d70:	68ba      	ldr	r2, [r7, #8]
 8011d72:	4413      	add	r3, r2
 8011d74:	8bfa      	ldrh	r2, [r7, #30]
 8011d76:	4619      	mov	r1, r3
 8011d78:	f007 f90e 	bl	8018f98 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8011d7c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011d7e:	f7fb f867 	bl	800ce50 <pbuf_clen>
 8011d82:	4603      	mov	r3, r0
 8011d84:	461a      	mov	r2, r3
 8011d86:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011d8a:	4413      	add	r3, r2
 8011d8c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8011d90:	e041      	b.n	8011e16 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8011d92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011d94:	685b      	ldr	r3, [r3, #4]
 8011d96:	637b      	str	r3, [r7, #52]	; 0x34
 8011d98:	e002      	b.n	8011da0 <tcp_write+0x23c>
 8011d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d9c:	681b      	ldr	r3, [r3, #0]
 8011d9e:	637b      	str	r3, [r7, #52]	; 0x34
 8011da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011da2:	681b      	ldr	r3, [r3, #0]
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	d1f8      	bne.n	8011d9a <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8011da8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011daa:	7b1b      	ldrb	r3, [r3, #12]
 8011dac:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	d115      	bne.n	8011de0 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8011db4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011db6:	685b      	ldr	r3, [r3, #4]
 8011db8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011dba:	8952      	ldrh	r2, [r2, #10]
 8011dbc:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8011dbe:	68ba      	ldr	r2, [r7, #8]
 8011dc0:	429a      	cmp	r2, r3
 8011dc2:	d10d      	bne.n	8011de0 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8011dc4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	d006      	beq.n	8011dda <tcp_write+0x276>
 8011dcc:	4b1c      	ldr	r3, [pc, #112]	; (8011e40 <tcp_write+0x2dc>)
 8011dce:	f240 2231 	movw	r2, #561	; 0x231
 8011dd2:	4922      	ldr	r1, [pc, #136]	; (8011e5c <tcp_write+0x2f8>)
 8011dd4:	481c      	ldr	r0, [pc, #112]	; (8011e48 <tcp_write+0x2e4>)
 8011dd6:	f006 fedf 	bl	8018b98 <iprintf>
          extendlen = seglen;
 8011dda:	8bfb      	ldrh	r3, [r7, #30]
 8011ddc:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8011dde:	e01a      	b.n	8011e16 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8011de0:	8bfb      	ldrh	r3, [r7, #30]
 8011de2:	2201      	movs	r2, #1
 8011de4:	4619      	mov	r1, r3
 8011de6:	2000      	movs	r0, #0
 8011de8:	f7fa fcc0 	bl	800c76c <pbuf_alloc>
 8011dec:	6578      	str	r0, [r7, #84]	; 0x54
 8011dee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	f000 81e0 	beq.w	80121b6 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8011df6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011dfa:	68ba      	ldr	r2, [r7, #8]
 8011dfc:	441a      	add	r2, r3
 8011dfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011e00:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8011e02:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011e04:	f7fb f824 	bl	800ce50 <pbuf_clen>
 8011e08:	4603      	mov	r3, r0
 8011e0a:	461a      	mov	r2, r3
 8011e0c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011e10:	4413      	add	r3, r2
 8011e12:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8011e16:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011e1a:	8bfb      	ldrh	r3, [r7, #30]
 8011e1c:	4413      	add	r3, r2
 8011e1e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8011e22:	e0dc      	b.n	8011fde <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8011e24:	68fb      	ldr	r3, [r7, #12]
 8011e26:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	f000 80d7 	beq.w	8011fde <tcp_write+0x47a>
 8011e30:	4b03      	ldr	r3, [pc, #12]	; (8011e40 <tcp_write+0x2dc>)
 8011e32:	f240 224a 	movw	r2, #586	; 0x24a
 8011e36:	490a      	ldr	r1, [pc, #40]	; (8011e60 <tcp_write+0x2fc>)
 8011e38:	4803      	ldr	r0, [pc, #12]	; (8011e48 <tcp_write+0x2e4>)
 8011e3a:	f006 fead 	bl	8018b98 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8011e3e:	e0ce      	b.n	8011fde <tcp_write+0x47a>
 8011e40:	0801c488 	.word	0x0801c488
 8011e44:	0801c628 	.word	0x0801c628
 8011e48:	0801c4dc 	.word	0x0801c4dc
 8011e4c:	0801c640 	.word	0x0801c640
 8011e50:	0801c674 	.word	0x0801c674
 8011e54:	0801c68c 	.word	0x0801c68c
 8011e58:	0801c6ac 	.word	0x0801c6ac
 8011e5c:	0801c6cc 	.word	0x0801c6cc
 8011e60:	0801c6f8 	.word	0x0801c6f8
    struct pbuf *p;
    u16_t left = len - pos;
 8011e64:	88fa      	ldrh	r2, [r7, #6]
 8011e66:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011e6a:	1ad3      	subs	r3, r2, r3
 8011e6c:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8011e6e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011e72:	b29b      	uxth	r3, r3
 8011e74:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011e76:	1ad3      	subs	r3, r2, r3
 8011e78:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8011e7a:	8b7a      	ldrh	r2, [r7, #26]
 8011e7c:	8bbb      	ldrh	r3, [r7, #28]
 8011e7e:	4293      	cmp	r3, r2
 8011e80:	bf28      	it	cs
 8011e82:	4613      	movcs	r3, r2
 8011e84:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8011e86:	797b      	ldrb	r3, [r7, #5]
 8011e88:	f003 0301 	and.w	r3, r3, #1
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	d036      	beq.n	8011efe <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8011e90:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011e94:	b29a      	uxth	r2, r3
 8011e96:	8b3b      	ldrh	r3, [r7, #24]
 8011e98:	4413      	add	r3, r2
 8011e9a:	b299      	uxth	r1, r3
 8011e9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	bf0c      	ite	eq
 8011ea2:	2301      	moveq	r3, #1
 8011ea4:	2300      	movne	r3, #0
 8011ea6:	b2db      	uxtb	r3, r3
 8011ea8:	f107 0012 	add.w	r0, r7, #18
 8011eac:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011eae:	9302      	str	r3, [sp, #8]
 8011eb0:	797b      	ldrb	r3, [r7, #5]
 8011eb2:	9301      	str	r3, [sp, #4]
 8011eb4:	68fb      	ldr	r3, [r7, #12]
 8011eb6:	9300      	str	r3, [sp, #0]
 8011eb8:	4603      	mov	r3, r0
 8011eba:	2036      	movs	r0, #54	; 0x36
 8011ebc:	f7ff fd5e 	bl	801197c <tcp_pbuf_prealloc>
 8011ec0:	6338      	str	r0, [r7, #48]	; 0x30
 8011ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	f000 8178 	beq.w	80121ba <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8011eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ecc:	895b      	ldrh	r3, [r3, #10]
 8011ece:	8b3a      	ldrh	r2, [r7, #24]
 8011ed0:	429a      	cmp	r2, r3
 8011ed2:	d906      	bls.n	8011ee2 <tcp_write+0x37e>
 8011ed4:	4b8c      	ldr	r3, [pc, #560]	; (8012108 <tcp_write+0x5a4>)
 8011ed6:	f240 2266 	movw	r2, #614	; 0x266
 8011eda:	498c      	ldr	r1, [pc, #560]	; (801210c <tcp_write+0x5a8>)
 8011edc:	488c      	ldr	r0, [pc, #560]	; (8012110 <tcp_write+0x5ac>)
 8011ede:	f006 fe5b 	bl	8018b98 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8011ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ee4:	685a      	ldr	r2, [r3, #4]
 8011ee6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011eea:	18d0      	adds	r0, r2, r3
 8011eec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011ef0:	68ba      	ldr	r2, [r7, #8]
 8011ef2:	4413      	add	r3, r2
 8011ef4:	8b3a      	ldrh	r2, [r7, #24]
 8011ef6:	4619      	mov	r1, r3
 8011ef8:	f007 f84e 	bl	8018f98 <memcpy>
 8011efc:	e02f      	b.n	8011f5e <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8011efe:	8a7b      	ldrh	r3, [r7, #18]
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	d006      	beq.n	8011f12 <tcp_write+0x3ae>
 8011f04:	4b80      	ldr	r3, [pc, #512]	; (8012108 <tcp_write+0x5a4>)
 8011f06:	f240 2271 	movw	r2, #625	; 0x271
 8011f0a:	4982      	ldr	r1, [pc, #520]	; (8012114 <tcp_write+0x5b0>)
 8011f0c:	4880      	ldr	r0, [pc, #512]	; (8012110 <tcp_write+0x5ac>)
 8011f0e:	f006 fe43 	bl	8018b98 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8011f12:	8b3b      	ldrh	r3, [r7, #24]
 8011f14:	2201      	movs	r2, #1
 8011f16:	4619      	mov	r1, r3
 8011f18:	2036      	movs	r0, #54	; 0x36
 8011f1a:	f7fa fc27 	bl	800c76c <pbuf_alloc>
 8011f1e:	6178      	str	r0, [r7, #20]
 8011f20:	697b      	ldr	r3, [r7, #20]
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	f000 814b 	beq.w	80121be <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8011f28:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011f2c:	68ba      	ldr	r2, [r7, #8]
 8011f2e:	441a      	add	r2, r3
 8011f30:	697b      	ldr	r3, [r7, #20]
 8011f32:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8011f34:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011f38:	b29b      	uxth	r3, r3
 8011f3a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011f3e:	4619      	mov	r1, r3
 8011f40:	2036      	movs	r0, #54	; 0x36
 8011f42:	f7fa fc13 	bl	800c76c <pbuf_alloc>
 8011f46:	6338      	str	r0, [r7, #48]	; 0x30
 8011f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	d103      	bne.n	8011f56 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8011f4e:	6978      	ldr	r0, [r7, #20]
 8011f50:	f7fa fef0 	bl	800cd34 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8011f54:	e136      	b.n	80121c4 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8011f56:	6979      	ldr	r1, [r7, #20]
 8011f58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011f5a:	f7fa ffb9 	bl	800ced0 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8011f5e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011f60:	f7fa ff76 	bl	800ce50 <pbuf_clen>
 8011f64:	4603      	mov	r3, r0
 8011f66:	461a      	mov	r2, r3
 8011f68:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011f6c:	4413      	add	r3, r2
 8011f6e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8011f72:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011f76:	2b09      	cmp	r3, #9
 8011f78:	d903      	bls.n	8011f82 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8011f7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011f7c:	f7fa feda 	bl	800cd34 <pbuf_free>
      goto memerr;
 8011f80:	e120      	b.n	80121c4 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8011f82:	68fb      	ldr	r3, [r7, #12]
 8011f84:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011f86:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011f8a:	441a      	add	r2, r3
 8011f8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011f90:	9300      	str	r3, [sp, #0]
 8011f92:	4613      	mov	r3, r2
 8011f94:	2200      	movs	r2, #0
 8011f96:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011f98:	68f8      	ldr	r0, [r7, #12]
 8011f9a:	f7ff fc51 	bl	8011840 <tcp_create_segment>
 8011f9e:	64f8      	str	r0, [r7, #76]	; 0x4c
 8011fa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	f000 810d 	beq.w	80121c2 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8011fa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011faa:	2b00      	cmp	r3, #0
 8011fac:	d102      	bne.n	8011fb4 <tcp_write+0x450>
      queue = seg;
 8011fae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011fb0:	647b      	str	r3, [r7, #68]	; 0x44
 8011fb2:	e00c      	b.n	8011fce <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8011fb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011fb6:	2b00      	cmp	r3, #0
 8011fb8:	d106      	bne.n	8011fc8 <tcp_write+0x464>
 8011fba:	4b53      	ldr	r3, [pc, #332]	; (8012108 <tcp_write+0x5a4>)
 8011fbc:	f240 22ab 	movw	r2, #683	; 0x2ab
 8011fc0:	4955      	ldr	r1, [pc, #340]	; (8012118 <tcp_write+0x5b4>)
 8011fc2:	4853      	ldr	r0, [pc, #332]	; (8012110 <tcp_write+0x5ac>)
 8011fc4:	f006 fde8 	bl	8018b98 <iprintf>
      prev_seg->next = seg;
 8011fc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011fca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011fcc:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8011fce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011fd0:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8011fd2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011fd6:	8b3b      	ldrh	r3, [r7, #24]
 8011fd8:	4413      	add	r3, r2
 8011fda:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8011fde:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011fe2:	88fb      	ldrh	r3, [r7, #6]
 8011fe4:	429a      	cmp	r2, r3
 8011fe6:	f4ff af3d 	bcc.w	8011e64 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8011fea:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	d02c      	beq.n	801204a <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8011ff0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011ff2:	685b      	ldr	r3, [r3, #4]
 8011ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011ff6:	e01e      	b.n	8012036 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8011ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ffa:	891a      	ldrh	r2, [r3, #8]
 8011ffc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011ffe:	4413      	add	r3, r2
 8012000:	b29a      	uxth	r2, r3
 8012002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012004:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8012006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012008:	681b      	ldr	r3, [r3, #0]
 801200a:	2b00      	cmp	r3, #0
 801200c:	d110      	bne.n	8012030 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801200e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012010:	685b      	ldr	r3, [r3, #4]
 8012012:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012014:	8952      	ldrh	r2, [r2, #10]
 8012016:	4413      	add	r3, r2
 8012018:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801201a:	68b9      	ldr	r1, [r7, #8]
 801201c:	4618      	mov	r0, r3
 801201e:	f006 ffbb 	bl	8018f98 <memcpy>
        p->len += oversize_used;
 8012022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012024:	895a      	ldrh	r2, [r3, #10]
 8012026:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012028:	4413      	add	r3, r2
 801202a:	b29a      	uxth	r2, r3
 801202c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801202e:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8012030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012032:	681b      	ldr	r3, [r3, #0]
 8012034:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012038:	2b00      	cmp	r3, #0
 801203a:	d1dd      	bne.n	8011ff8 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 801203c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801203e:	891a      	ldrh	r2, [r3, #8]
 8012040:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012042:	4413      	add	r3, r2
 8012044:	b29a      	uxth	r2, r3
 8012046:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012048:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801204a:	8a7a      	ldrh	r2, [r7, #18]
 801204c:	68fb      	ldr	r3, [r7, #12]
 801204e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8012052:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012054:	2b00      	cmp	r3, #0
 8012056:	d018      	beq.n	801208a <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8012058:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801205a:	2b00      	cmp	r3, #0
 801205c:	d106      	bne.n	801206c <tcp_write+0x508>
 801205e:	4b2a      	ldr	r3, [pc, #168]	; (8012108 <tcp_write+0x5a4>)
 8012060:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8012064:	492d      	ldr	r1, [pc, #180]	; (801211c <tcp_write+0x5b8>)
 8012066:	482a      	ldr	r0, [pc, #168]	; (8012110 <tcp_write+0x5ac>)
 8012068:	f006 fd96 	bl	8018b98 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801206c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801206e:	685b      	ldr	r3, [r3, #4]
 8012070:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012072:	4618      	mov	r0, r3
 8012074:	f7fa ff2c 	bl	800ced0 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8012078:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801207a:	891a      	ldrh	r2, [r3, #8]
 801207c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801207e:	891b      	ldrh	r3, [r3, #8]
 8012080:	4413      	add	r3, r2
 8012082:	b29a      	uxth	r2, r3
 8012084:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012086:	811a      	strh	r2, [r3, #8]
 8012088:	e037      	b.n	80120fa <tcp_write+0x596>
  } else if (extendlen > 0) {
 801208a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801208c:	2b00      	cmp	r3, #0
 801208e:	d034      	beq.n	80120fa <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8012090:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012092:	2b00      	cmp	r3, #0
 8012094:	d003      	beq.n	801209e <tcp_write+0x53a>
 8012096:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012098:	685b      	ldr	r3, [r3, #4]
 801209a:	2b00      	cmp	r3, #0
 801209c:	d106      	bne.n	80120ac <tcp_write+0x548>
 801209e:	4b1a      	ldr	r3, [pc, #104]	; (8012108 <tcp_write+0x5a4>)
 80120a0:	f240 22e6 	movw	r2, #742	; 0x2e6
 80120a4:	491e      	ldr	r1, [pc, #120]	; (8012120 <tcp_write+0x5bc>)
 80120a6:	481a      	ldr	r0, [pc, #104]	; (8012110 <tcp_write+0x5ac>)
 80120a8:	f006 fd76 	bl	8018b98 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80120ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80120ae:	685b      	ldr	r3, [r3, #4]
 80120b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80120b2:	e009      	b.n	80120c8 <tcp_write+0x564>
      p->tot_len += extendlen;
 80120b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120b6:	891a      	ldrh	r2, [r3, #8]
 80120b8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80120ba:	4413      	add	r3, r2
 80120bc:	b29a      	uxth	r2, r3
 80120be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120c0:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80120c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120c4:	681b      	ldr	r3, [r3, #0]
 80120c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80120c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120ca:	681b      	ldr	r3, [r3, #0]
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	d1f1      	bne.n	80120b4 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 80120d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120d2:	891a      	ldrh	r2, [r3, #8]
 80120d4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80120d6:	4413      	add	r3, r2
 80120d8:	b29a      	uxth	r2, r3
 80120da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120dc:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80120de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120e0:	895a      	ldrh	r2, [r3, #10]
 80120e2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80120e4:	4413      	add	r3, r2
 80120e6:	b29a      	uxth	r2, r3
 80120e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120ea:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80120ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80120ee:	891a      	ldrh	r2, [r3, #8]
 80120f0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80120f2:	4413      	add	r3, r2
 80120f4:	b29a      	uxth	r2, r3
 80120f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80120f8:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 80120fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	d111      	bne.n	8012124 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8012100:	68fb      	ldr	r3, [r7, #12]
 8012102:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012104:	66da      	str	r2, [r3, #108]	; 0x6c
 8012106:	e010      	b.n	801212a <tcp_write+0x5c6>
 8012108:	0801c488 	.word	0x0801c488
 801210c:	0801c728 	.word	0x0801c728
 8012110:	0801c4dc 	.word	0x0801c4dc
 8012114:	0801c768 	.word	0x0801c768
 8012118:	0801c778 	.word	0x0801c778
 801211c:	0801c78c 	.word	0x0801c78c
 8012120:	0801c7c4 	.word	0x0801c7c4
  } else {
    last_unsent->next = queue;
 8012124:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012126:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012128:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801212a:	68fb      	ldr	r3, [r7, #12]
 801212c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801212e:	88fb      	ldrh	r3, [r7, #6]
 8012130:	441a      	add	r2, r3
 8012132:	68fb      	ldr	r3, [r7, #12]
 8012134:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8012136:	68fb      	ldr	r3, [r7, #12]
 8012138:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801213c:	88fb      	ldrh	r3, [r7, #6]
 801213e:	1ad3      	subs	r3, r2, r3
 8012140:	b29a      	uxth	r2, r3
 8012142:	68fb      	ldr	r3, [r7, #12]
 8012144:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8012148:	68fb      	ldr	r3, [r7, #12]
 801214a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801214e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012152:	68fb      	ldr	r3, [r7, #12]
 8012154:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012158:	2b00      	cmp	r3, #0
 801215a:	d00e      	beq.n	801217a <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 801215c:	68fb      	ldr	r3, [r7, #12]
 801215e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012160:	2b00      	cmp	r3, #0
 8012162:	d10a      	bne.n	801217a <tcp_write+0x616>
 8012164:	68fb      	ldr	r3, [r7, #12]
 8012166:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012168:	2b00      	cmp	r3, #0
 801216a:	d106      	bne.n	801217a <tcp_write+0x616>
 801216c:	4b2c      	ldr	r3, [pc, #176]	; (8012220 <tcp_write+0x6bc>)
 801216e:	f240 3212 	movw	r2, #786	; 0x312
 8012172:	492c      	ldr	r1, [pc, #176]	; (8012224 <tcp_write+0x6c0>)
 8012174:	482c      	ldr	r0, [pc, #176]	; (8012228 <tcp_write+0x6c4>)
 8012176:	f006 fd0f 	bl	8018b98 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801217a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801217c:	2b00      	cmp	r3, #0
 801217e:	d016      	beq.n	80121ae <tcp_write+0x64a>
 8012180:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012182:	68db      	ldr	r3, [r3, #12]
 8012184:	2b00      	cmp	r3, #0
 8012186:	d012      	beq.n	80121ae <tcp_write+0x64a>
 8012188:	797b      	ldrb	r3, [r7, #5]
 801218a:	f003 0302 	and.w	r3, r3, #2
 801218e:	2b00      	cmp	r3, #0
 8012190:	d10d      	bne.n	80121ae <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8012192:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012194:	68db      	ldr	r3, [r3, #12]
 8012196:	899b      	ldrh	r3, [r3, #12]
 8012198:	b29c      	uxth	r4, r3
 801219a:	2008      	movs	r0, #8
 801219c:	f7f9 f996 	bl	800b4cc <lwip_htons>
 80121a0:	4603      	mov	r3, r0
 80121a2:	461a      	mov	r2, r3
 80121a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80121a6:	68db      	ldr	r3, [r3, #12]
 80121a8:	4322      	orrs	r2, r4
 80121aa:	b292      	uxth	r2, r2
 80121ac:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 80121ae:	2300      	movs	r3, #0
 80121b0:	e031      	b.n	8012216 <tcp_write+0x6b2>
          goto memerr;
 80121b2:	bf00      	nop
 80121b4:	e006      	b.n	80121c4 <tcp_write+0x660>
            goto memerr;
 80121b6:	bf00      	nop
 80121b8:	e004      	b.n	80121c4 <tcp_write+0x660>
        goto memerr;
 80121ba:	bf00      	nop
 80121bc:	e002      	b.n	80121c4 <tcp_write+0x660>
        goto memerr;
 80121be:	bf00      	nop
 80121c0:	e000      	b.n	80121c4 <tcp_write+0x660>
      goto memerr;
 80121c2:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80121c4:	68fb      	ldr	r3, [r7, #12]
 80121c6:	8b5b      	ldrh	r3, [r3, #26]
 80121c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80121cc:	b29a      	uxth	r2, r3
 80121ce:	68fb      	ldr	r3, [r7, #12]
 80121d0:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 80121d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	d002      	beq.n	80121de <tcp_write+0x67a>
    pbuf_free(concat_p);
 80121d8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80121da:	f7fa fdab 	bl	800cd34 <pbuf_free>
  }
  if (queue != NULL) {
 80121de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	d002      	beq.n	80121ea <tcp_write+0x686>
    tcp_segs_free(queue);
 80121e4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80121e6:	f7fc fb4d 	bl	800e884 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 80121ea:	68fb      	ldr	r3, [r7, #12]
 80121ec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	d00e      	beq.n	8012212 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80121f4:	68fb      	ldr	r3, [r7, #12]
 80121f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	d10a      	bne.n	8012212 <tcp_write+0x6ae>
 80121fc:	68fb      	ldr	r3, [r7, #12]
 80121fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012200:	2b00      	cmp	r3, #0
 8012202:	d106      	bne.n	8012212 <tcp_write+0x6ae>
 8012204:	4b06      	ldr	r3, [pc, #24]	; (8012220 <tcp_write+0x6bc>)
 8012206:	f240 3227 	movw	r2, #807	; 0x327
 801220a:	4906      	ldr	r1, [pc, #24]	; (8012224 <tcp_write+0x6c0>)
 801220c:	4806      	ldr	r0, [pc, #24]	; (8012228 <tcp_write+0x6c4>)
 801220e:	f006 fcc3 	bl	8018b98 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8012212:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012216:	4618      	mov	r0, r3
 8012218:	375c      	adds	r7, #92	; 0x5c
 801221a:	46bd      	mov	sp, r7
 801221c:	bd90      	pop	{r4, r7, pc}
 801221e:	bf00      	nop
 8012220:	0801c488 	.word	0x0801c488
 8012224:	0801c7fc 	.word	0x0801c7fc
 8012228:	0801c4dc 	.word	0x0801c4dc

0801222c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801222c:	b590      	push	{r4, r7, lr}
 801222e:	b08b      	sub	sp, #44	; 0x2c
 8012230:	af02      	add	r7, sp, #8
 8012232:	6078      	str	r0, [r7, #4]
 8012234:	460b      	mov	r3, r1
 8012236:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8012238:	2300      	movs	r3, #0
 801223a:	61fb      	str	r3, [r7, #28]
 801223c:	2300      	movs	r3, #0
 801223e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8012240:	2300      	movs	r3, #0
 8012242:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	2b00      	cmp	r3, #0
 8012248:	d106      	bne.n	8012258 <tcp_split_unsent_seg+0x2c>
 801224a:	4b95      	ldr	r3, [pc, #596]	; (80124a0 <tcp_split_unsent_seg+0x274>)
 801224c:	f240 324b 	movw	r2, #843	; 0x34b
 8012250:	4994      	ldr	r1, [pc, #592]	; (80124a4 <tcp_split_unsent_seg+0x278>)
 8012252:	4895      	ldr	r0, [pc, #596]	; (80124a8 <tcp_split_unsent_seg+0x27c>)
 8012254:	f006 fca0 	bl	8018b98 <iprintf>

  useg = pcb->unsent;
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801225c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801225e:	697b      	ldr	r3, [r7, #20]
 8012260:	2b00      	cmp	r3, #0
 8012262:	d102      	bne.n	801226a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8012264:	f04f 33ff 	mov.w	r3, #4294967295
 8012268:	e116      	b.n	8012498 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801226a:	887b      	ldrh	r3, [r7, #2]
 801226c:	2b00      	cmp	r3, #0
 801226e:	d109      	bne.n	8012284 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8012270:	4b8b      	ldr	r3, [pc, #556]	; (80124a0 <tcp_split_unsent_seg+0x274>)
 8012272:	f240 3253 	movw	r2, #851	; 0x353
 8012276:	498d      	ldr	r1, [pc, #564]	; (80124ac <tcp_split_unsent_seg+0x280>)
 8012278:	488b      	ldr	r0, [pc, #556]	; (80124a8 <tcp_split_unsent_seg+0x27c>)
 801227a:	f006 fc8d 	bl	8018b98 <iprintf>
    return ERR_VAL;
 801227e:	f06f 0305 	mvn.w	r3, #5
 8012282:	e109      	b.n	8012498 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8012284:	697b      	ldr	r3, [r7, #20]
 8012286:	891b      	ldrh	r3, [r3, #8]
 8012288:	887a      	ldrh	r2, [r7, #2]
 801228a:	429a      	cmp	r2, r3
 801228c:	d301      	bcc.n	8012292 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801228e:	2300      	movs	r3, #0
 8012290:	e102      	b.n	8012498 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012296:	887a      	ldrh	r2, [r7, #2]
 8012298:	429a      	cmp	r2, r3
 801229a:	d906      	bls.n	80122aa <tcp_split_unsent_seg+0x7e>
 801229c:	4b80      	ldr	r3, [pc, #512]	; (80124a0 <tcp_split_unsent_seg+0x274>)
 801229e:	f240 325b 	movw	r2, #859	; 0x35b
 80122a2:	4983      	ldr	r1, [pc, #524]	; (80124b0 <tcp_split_unsent_seg+0x284>)
 80122a4:	4880      	ldr	r0, [pc, #512]	; (80124a8 <tcp_split_unsent_seg+0x27c>)
 80122a6:	f006 fc77 	bl	8018b98 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80122aa:	697b      	ldr	r3, [r7, #20]
 80122ac:	891b      	ldrh	r3, [r3, #8]
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	d106      	bne.n	80122c0 <tcp_split_unsent_seg+0x94>
 80122b2:	4b7b      	ldr	r3, [pc, #492]	; (80124a0 <tcp_split_unsent_seg+0x274>)
 80122b4:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80122b8:	497e      	ldr	r1, [pc, #504]	; (80124b4 <tcp_split_unsent_seg+0x288>)
 80122ba:	487b      	ldr	r0, [pc, #492]	; (80124a8 <tcp_split_unsent_seg+0x27c>)
 80122bc:	f006 fc6c 	bl	8018b98 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80122c0:	697b      	ldr	r3, [r7, #20]
 80122c2:	7a9b      	ldrb	r3, [r3, #10]
 80122c4:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80122c6:	7bfb      	ldrb	r3, [r7, #15]
 80122c8:	009b      	lsls	r3, r3, #2
 80122ca:	b2db      	uxtb	r3, r3
 80122cc:	f003 0304 	and.w	r3, r3, #4
 80122d0:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80122d2:	697b      	ldr	r3, [r7, #20]
 80122d4:	891a      	ldrh	r2, [r3, #8]
 80122d6:	887b      	ldrh	r3, [r7, #2]
 80122d8:	1ad3      	subs	r3, r2, r3
 80122da:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80122dc:	7bbb      	ldrb	r3, [r7, #14]
 80122de:	b29a      	uxth	r2, r3
 80122e0:	89bb      	ldrh	r3, [r7, #12]
 80122e2:	4413      	add	r3, r2
 80122e4:	b29b      	uxth	r3, r3
 80122e6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80122ea:	4619      	mov	r1, r3
 80122ec:	2036      	movs	r0, #54	; 0x36
 80122ee:	f7fa fa3d 	bl	800c76c <pbuf_alloc>
 80122f2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80122f4:	693b      	ldr	r3, [r7, #16]
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	f000 80b7 	beq.w	801246a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80122fc:	697b      	ldr	r3, [r7, #20]
 80122fe:	685b      	ldr	r3, [r3, #4]
 8012300:	891a      	ldrh	r2, [r3, #8]
 8012302:	697b      	ldr	r3, [r7, #20]
 8012304:	891b      	ldrh	r3, [r3, #8]
 8012306:	1ad3      	subs	r3, r2, r3
 8012308:	b29a      	uxth	r2, r3
 801230a:	887b      	ldrh	r3, [r7, #2]
 801230c:	4413      	add	r3, r2
 801230e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8012310:	697b      	ldr	r3, [r7, #20]
 8012312:	6858      	ldr	r0, [r3, #4]
 8012314:	693b      	ldr	r3, [r7, #16]
 8012316:	685a      	ldr	r2, [r3, #4]
 8012318:	7bbb      	ldrb	r3, [r7, #14]
 801231a:	18d1      	adds	r1, r2, r3
 801231c:	897b      	ldrh	r3, [r7, #10]
 801231e:	89ba      	ldrh	r2, [r7, #12]
 8012320:	f7fa ff0e 	bl	800d140 <pbuf_copy_partial>
 8012324:	4603      	mov	r3, r0
 8012326:	461a      	mov	r2, r3
 8012328:	89bb      	ldrh	r3, [r7, #12]
 801232a:	4293      	cmp	r3, r2
 801232c:	f040 809f 	bne.w	801246e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8012330:	697b      	ldr	r3, [r7, #20]
 8012332:	68db      	ldr	r3, [r3, #12]
 8012334:	899b      	ldrh	r3, [r3, #12]
 8012336:	b29b      	uxth	r3, r3
 8012338:	4618      	mov	r0, r3
 801233a:	f7f9 f8c7 	bl	800b4cc <lwip_htons>
 801233e:	4603      	mov	r3, r0
 8012340:	b2db      	uxtb	r3, r3
 8012342:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012346:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8012348:	2300      	movs	r3, #0
 801234a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801234c:	7efb      	ldrb	r3, [r7, #27]
 801234e:	f003 0308 	and.w	r3, r3, #8
 8012352:	2b00      	cmp	r3, #0
 8012354:	d007      	beq.n	8012366 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8012356:	7efb      	ldrb	r3, [r7, #27]
 8012358:	f023 0308 	bic.w	r3, r3, #8
 801235c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801235e:	7ebb      	ldrb	r3, [r7, #26]
 8012360:	f043 0308 	orr.w	r3, r3, #8
 8012364:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8012366:	7efb      	ldrb	r3, [r7, #27]
 8012368:	f003 0301 	and.w	r3, r3, #1
 801236c:	2b00      	cmp	r3, #0
 801236e:	d007      	beq.n	8012380 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8012370:	7efb      	ldrb	r3, [r7, #27]
 8012372:	f023 0301 	bic.w	r3, r3, #1
 8012376:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8012378:	7ebb      	ldrb	r3, [r7, #26]
 801237a:	f043 0301 	orr.w	r3, r3, #1
 801237e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8012380:	697b      	ldr	r3, [r7, #20]
 8012382:	68db      	ldr	r3, [r3, #12]
 8012384:	685b      	ldr	r3, [r3, #4]
 8012386:	4618      	mov	r0, r3
 8012388:	f7f9 f8b5 	bl	800b4f6 <lwip_htonl>
 801238c:	4602      	mov	r2, r0
 801238e:	887b      	ldrh	r3, [r7, #2]
 8012390:	18d1      	adds	r1, r2, r3
 8012392:	7eba      	ldrb	r2, [r7, #26]
 8012394:	7bfb      	ldrb	r3, [r7, #15]
 8012396:	9300      	str	r3, [sp, #0]
 8012398:	460b      	mov	r3, r1
 801239a:	6939      	ldr	r1, [r7, #16]
 801239c:	6878      	ldr	r0, [r7, #4]
 801239e:	f7ff fa4f 	bl	8011840 <tcp_create_segment>
 80123a2:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80123a4:	69fb      	ldr	r3, [r7, #28]
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d063      	beq.n	8012472 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80123aa:	697b      	ldr	r3, [r7, #20]
 80123ac:	685b      	ldr	r3, [r3, #4]
 80123ae:	4618      	mov	r0, r3
 80123b0:	f7fa fd4e 	bl	800ce50 <pbuf_clen>
 80123b4:	4603      	mov	r3, r0
 80123b6:	461a      	mov	r2, r3
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80123be:	1a9b      	subs	r3, r3, r2
 80123c0:	b29a      	uxth	r2, r3
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80123c8:	697b      	ldr	r3, [r7, #20]
 80123ca:	6858      	ldr	r0, [r3, #4]
 80123cc:	697b      	ldr	r3, [r7, #20]
 80123ce:	685b      	ldr	r3, [r3, #4]
 80123d0:	891a      	ldrh	r2, [r3, #8]
 80123d2:	89bb      	ldrh	r3, [r7, #12]
 80123d4:	1ad3      	subs	r3, r2, r3
 80123d6:	b29b      	uxth	r3, r3
 80123d8:	4619      	mov	r1, r3
 80123da:	f7fa fb25 	bl	800ca28 <pbuf_realloc>
  useg->len -= remainder;
 80123de:	697b      	ldr	r3, [r7, #20]
 80123e0:	891a      	ldrh	r2, [r3, #8]
 80123e2:	89bb      	ldrh	r3, [r7, #12]
 80123e4:	1ad3      	subs	r3, r2, r3
 80123e6:	b29a      	uxth	r2, r3
 80123e8:	697b      	ldr	r3, [r7, #20]
 80123ea:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80123ec:	697b      	ldr	r3, [r7, #20]
 80123ee:	68db      	ldr	r3, [r3, #12]
 80123f0:	899b      	ldrh	r3, [r3, #12]
 80123f2:	b29c      	uxth	r4, r3
 80123f4:	7efb      	ldrb	r3, [r7, #27]
 80123f6:	b29b      	uxth	r3, r3
 80123f8:	4618      	mov	r0, r3
 80123fa:	f7f9 f867 	bl	800b4cc <lwip_htons>
 80123fe:	4603      	mov	r3, r0
 8012400:	461a      	mov	r2, r3
 8012402:	697b      	ldr	r3, [r7, #20]
 8012404:	68db      	ldr	r3, [r3, #12]
 8012406:	4322      	orrs	r2, r4
 8012408:	b292      	uxth	r2, r2
 801240a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801240c:	697b      	ldr	r3, [r7, #20]
 801240e:	685b      	ldr	r3, [r3, #4]
 8012410:	4618      	mov	r0, r3
 8012412:	f7fa fd1d 	bl	800ce50 <pbuf_clen>
 8012416:	4603      	mov	r3, r0
 8012418:	461a      	mov	r2, r3
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012420:	4413      	add	r3, r2
 8012422:	b29a      	uxth	r2, r3
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801242a:	69fb      	ldr	r3, [r7, #28]
 801242c:	685b      	ldr	r3, [r3, #4]
 801242e:	4618      	mov	r0, r3
 8012430:	f7fa fd0e 	bl	800ce50 <pbuf_clen>
 8012434:	4603      	mov	r3, r0
 8012436:	461a      	mov	r2, r3
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801243e:	4413      	add	r3, r2
 8012440:	b29a      	uxth	r2, r3
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8012448:	697b      	ldr	r3, [r7, #20]
 801244a:	681a      	ldr	r2, [r3, #0]
 801244c:	69fb      	ldr	r3, [r7, #28]
 801244e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8012450:	697b      	ldr	r3, [r7, #20]
 8012452:	69fa      	ldr	r2, [r7, #28]
 8012454:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8012456:	69fb      	ldr	r3, [r7, #28]
 8012458:	681b      	ldr	r3, [r3, #0]
 801245a:	2b00      	cmp	r3, #0
 801245c:	d103      	bne.n	8012466 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	2200      	movs	r2, #0
 8012462:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8012466:	2300      	movs	r3, #0
 8012468:	e016      	b.n	8012498 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801246a:	bf00      	nop
 801246c:	e002      	b.n	8012474 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801246e:	bf00      	nop
 8012470:	e000      	b.n	8012474 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8012472:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8012474:	69fb      	ldr	r3, [r7, #28]
 8012476:	2b00      	cmp	r3, #0
 8012478:	d006      	beq.n	8012488 <tcp_split_unsent_seg+0x25c>
 801247a:	4b09      	ldr	r3, [pc, #36]	; (80124a0 <tcp_split_unsent_seg+0x274>)
 801247c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8012480:	490d      	ldr	r1, [pc, #52]	; (80124b8 <tcp_split_unsent_seg+0x28c>)
 8012482:	4809      	ldr	r0, [pc, #36]	; (80124a8 <tcp_split_unsent_seg+0x27c>)
 8012484:	f006 fb88 	bl	8018b98 <iprintf>
  if (p != NULL) {
 8012488:	693b      	ldr	r3, [r7, #16]
 801248a:	2b00      	cmp	r3, #0
 801248c:	d002      	beq.n	8012494 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801248e:	6938      	ldr	r0, [r7, #16]
 8012490:	f7fa fc50 	bl	800cd34 <pbuf_free>
  }

  return ERR_MEM;
 8012494:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012498:	4618      	mov	r0, r3
 801249a:	3724      	adds	r7, #36	; 0x24
 801249c:	46bd      	mov	sp, r7
 801249e:	bd90      	pop	{r4, r7, pc}
 80124a0:	0801c488 	.word	0x0801c488
 80124a4:	0801c81c 	.word	0x0801c81c
 80124a8:	0801c4dc 	.word	0x0801c4dc
 80124ac:	0801c840 	.word	0x0801c840
 80124b0:	0801c864 	.word	0x0801c864
 80124b4:	0801c874 	.word	0x0801c874
 80124b8:	0801c884 	.word	0x0801c884

080124bc <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80124bc:	b590      	push	{r4, r7, lr}
 80124be:	b085      	sub	sp, #20
 80124c0:	af00      	add	r7, sp, #0
 80124c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d106      	bne.n	80124d8 <tcp_send_fin+0x1c>
 80124ca:	4b21      	ldr	r3, [pc, #132]	; (8012550 <tcp_send_fin+0x94>)
 80124cc:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80124d0:	4920      	ldr	r1, [pc, #128]	; (8012554 <tcp_send_fin+0x98>)
 80124d2:	4821      	ldr	r0, [pc, #132]	; (8012558 <tcp_send_fin+0x9c>)
 80124d4:	f006 fb60 	bl	8018b98 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80124dc:	2b00      	cmp	r3, #0
 80124de:	d02e      	beq.n	801253e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80124e4:	60fb      	str	r3, [r7, #12]
 80124e6:	e002      	b.n	80124ee <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80124e8:	68fb      	ldr	r3, [r7, #12]
 80124ea:	681b      	ldr	r3, [r3, #0]
 80124ec:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80124ee:	68fb      	ldr	r3, [r7, #12]
 80124f0:	681b      	ldr	r3, [r3, #0]
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	d1f8      	bne.n	80124e8 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80124f6:	68fb      	ldr	r3, [r7, #12]
 80124f8:	68db      	ldr	r3, [r3, #12]
 80124fa:	899b      	ldrh	r3, [r3, #12]
 80124fc:	b29b      	uxth	r3, r3
 80124fe:	4618      	mov	r0, r3
 8012500:	f7f8 ffe4 	bl	800b4cc <lwip_htons>
 8012504:	4603      	mov	r3, r0
 8012506:	b2db      	uxtb	r3, r3
 8012508:	f003 0307 	and.w	r3, r3, #7
 801250c:	2b00      	cmp	r3, #0
 801250e:	d116      	bne.n	801253e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8012510:	68fb      	ldr	r3, [r7, #12]
 8012512:	68db      	ldr	r3, [r3, #12]
 8012514:	899b      	ldrh	r3, [r3, #12]
 8012516:	b29c      	uxth	r4, r3
 8012518:	2001      	movs	r0, #1
 801251a:	f7f8 ffd7 	bl	800b4cc <lwip_htons>
 801251e:	4603      	mov	r3, r0
 8012520:	461a      	mov	r2, r3
 8012522:	68fb      	ldr	r3, [r7, #12]
 8012524:	68db      	ldr	r3, [r3, #12]
 8012526:	4322      	orrs	r2, r4
 8012528:	b292      	uxth	r2, r2
 801252a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	8b5b      	ldrh	r3, [r3, #26]
 8012530:	f043 0320 	orr.w	r3, r3, #32
 8012534:	b29a      	uxth	r2, r3
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801253a:	2300      	movs	r3, #0
 801253c:	e004      	b.n	8012548 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801253e:	2101      	movs	r1, #1
 8012540:	6878      	ldr	r0, [r7, #4]
 8012542:	f000 f80b 	bl	801255c <tcp_enqueue_flags>
 8012546:	4603      	mov	r3, r0
}
 8012548:	4618      	mov	r0, r3
 801254a:	3714      	adds	r7, #20
 801254c:	46bd      	mov	sp, r7
 801254e:	bd90      	pop	{r4, r7, pc}
 8012550:	0801c488 	.word	0x0801c488
 8012554:	0801c890 	.word	0x0801c890
 8012558:	0801c4dc 	.word	0x0801c4dc

0801255c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801255c:	b580      	push	{r7, lr}
 801255e:	b08a      	sub	sp, #40	; 0x28
 8012560:	af02      	add	r7, sp, #8
 8012562:	6078      	str	r0, [r7, #4]
 8012564:	460b      	mov	r3, r1
 8012566:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8012568:	2300      	movs	r3, #0
 801256a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801256c:	2300      	movs	r3, #0
 801256e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8012570:	78fb      	ldrb	r3, [r7, #3]
 8012572:	f003 0303 	and.w	r3, r3, #3
 8012576:	2b00      	cmp	r3, #0
 8012578:	d106      	bne.n	8012588 <tcp_enqueue_flags+0x2c>
 801257a:	4b67      	ldr	r3, [pc, #412]	; (8012718 <tcp_enqueue_flags+0x1bc>)
 801257c:	f240 4211 	movw	r2, #1041	; 0x411
 8012580:	4966      	ldr	r1, [pc, #408]	; (801271c <tcp_enqueue_flags+0x1c0>)
 8012582:	4867      	ldr	r0, [pc, #412]	; (8012720 <tcp_enqueue_flags+0x1c4>)
 8012584:	f006 fb08 	bl	8018b98 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	2b00      	cmp	r3, #0
 801258c:	d106      	bne.n	801259c <tcp_enqueue_flags+0x40>
 801258e:	4b62      	ldr	r3, [pc, #392]	; (8012718 <tcp_enqueue_flags+0x1bc>)
 8012590:	f240 4213 	movw	r2, #1043	; 0x413
 8012594:	4963      	ldr	r1, [pc, #396]	; (8012724 <tcp_enqueue_flags+0x1c8>)
 8012596:	4862      	ldr	r0, [pc, #392]	; (8012720 <tcp_enqueue_flags+0x1c4>)
 8012598:	f006 fafe 	bl	8018b98 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801259c:	78fb      	ldrb	r3, [r7, #3]
 801259e:	f003 0302 	and.w	r3, r3, #2
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d001      	beq.n	80125aa <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80125a6:	2301      	movs	r3, #1
 80125a8:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80125aa:	7ffb      	ldrb	r3, [r7, #31]
 80125ac:	009b      	lsls	r3, r3, #2
 80125ae:	b2db      	uxtb	r3, r3
 80125b0:	f003 0304 	and.w	r3, r3, #4
 80125b4:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80125b6:	7dfb      	ldrb	r3, [r7, #23]
 80125b8:	b29b      	uxth	r3, r3
 80125ba:	f44f 7220 	mov.w	r2, #640	; 0x280
 80125be:	4619      	mov	r1, r3
 80125c0:	2036      	movs	r0, #54	; 0x36
 80125c2:	f7fa f8d3 	bl	800c76c <pbuf_alloc>
 80125c6:	6138      	str	r0, [r7, #16]
 80125c8:	693b      	ldr	r3, [r7, #16]
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	d109      	bne.n	80125e2 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	8b5b      	ldrh	r3, [r3, #26]
 80125d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80125d6:	b29a      	uxth	r2, r3
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80125dc:	f04f 33ff 	mov.w	r3, #4294967295
 80125e0:	e095      	b.n	801270e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80125e2:	693b      	ldr	r3, [r7, #16]
 80125e4:	895a      	ldrh	r2, [r3, #10]
 80125e6:	7dfb      	ldrb	r3, [r7, #23]
 80125e8:	b29b      	uxth	r3, r3
 80125ea:	429a      	cmp	r2, r3
 80125ec:	d206      	bcs.n	80125fc <tcp_enqueue_flags+0xa0>
 80125ee:	4b4a      	ldr	r3, [pc, #296]	; (8012718 <tcp_enqueue_flags+0x1bc>)
 80125f0:	f240 4239 	movw	r2, #1081	; 0x439
 80125f4:	494c      	ldr	r1, [pc, #304]	; (8012728 <tcp_enqueue_flags+0x1cc>)
 80125f6:	484a      	ldr	r0, [pc, #296]	; (8012720 <tcp_enqueue_flags+0x1c4>)
 80125f8:	f006 face 	bl	8018b98 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8012600:	78fa      	ldrb	r2, [r7, #3]
 8012602:	7ffb      	ldrb	r3, [r7, #31]
 8012604:	9300      	str	r3, [sp, #0]
 8012606:	460b      	mov	r3, r1
 8012608:	6939      	ldr	r1, [r7, #16]
 801260a:	6878      	ldr	r0, [r7, #4]
 801260c:	f7ff f918 	bl	8011840 <tcp_create_segment>
 8012610:	60f8      	str	r0, [r7, #12]
 8012612:	68fb      	ldr	r3, [r7, #12]
 8012614:	2b00      	cmp	r3, #0
 8012616:	d109      	bne.n	801262c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	8b5b      	ldrh	r3, [r3, #26]
 801261c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012620:	b29a      	uxth	r2, r3
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8012626:	f04f 33ff 	mov.w	r3, #4294967295
 801262a:	e070      	b.n	801270e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801262c:	68fb      	ldr	r3, [r7, #12]
 801262e:	68db      	ldr	r3, [r3, #12]
 8012630:	f003 0303 	and.w	r3, r3, #3
 8012634:	2b00      	cmp	r3, #0
 8012636:	d006      	beq.n	8012646 <tcp_enqueue_flags+0xea>
 8012638:	4b37      	ldr	r3, [pc, #220]	; (8012718 <tcp_enqueue_flags+0x1bc>)
 801263a:	f240 4242 	movw	r2, #1090	; 0x442
 801263e:	493b      	ldr	r1, [pc, #236]	; (801272c <tcp_enqueue_flags+0x1d0>)
 8012640:	4837      	ldr	r0, [pc, #220]	; (8012720 <tcp_enqueue_flags+0x1c4>)
 8012642:	f006 faa9 	bl	8018b98 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8012646:	68fb      	ldr	r3, [r7, #12]
 8012648:	891b      	ldrh	r3, [r3, #8]
 801264a:	2b00      	cmp	r3, #0
 801264c:	d006      	beq.n	801265c <tcp_enqueue_flags+0x100>
 801264e:	4b32      	ldr	r3, [pc, #200]	; (8012718 <tcp_enqueue_flags+0x1bc>)
 8012650:	f240 4243 	movw	r2, #1091	; 0x443
 8012654:	4936      	ldr	r1, [pc, #216]	; (8012730 <tcp_enqueue_flags+0x1d4>)
 8012656:	4832      	ldr	r0, [pc, #200]	; (8012720 <tcp_enqueue_flags+0x1c4>)
 8012658:	f006 fa9e 	bl	8018b98 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012660:	2b00      	cmp	r3, #0
 8012662:	d103      	bne.n	801266c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	68fa      	ldr	r2, [r7, #12]
 8012668:	66da      	str	r2, [r3, #108]	; 0x6c
 801266a:	e00d      	b.n	8012688 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012670:	61bb      	str	r3, [r7, #24]
 8012672:	e002      	b.n	801267a <tcp_enqueue_flags+0x11e>
 8012674:	69bb      	ldr	r3, [r7, #24]
 8012676:	681b      	ldr	r3, [r3, #0]
 8012678:	61bb      	str	r3, [r7, #24]
 801267a:	69bb      	ldr	r3, [r7, #24]
 801267c:	681b      	ldr	r3, [r3, #0]
 801267e:	2b00      	cmp	r3, #0
 8012680:	d1f8      	bne.n	8012674 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8012682:	69bb      	ldr	r3, [r7, #24]
 8012684:	68fa      	ldr	r2, [r7, #12]
 8012686:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	2200      	movs	r2, #0
 801268c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8012690:	78fb      	ldrb	r3, [r7, #3]
 8012692:	f003 0302 	and.w	r3, r3, #2
 8012696:	2b00      	cmp	r3, #0
 8012698:	d104      	bne.n	80126a4 <tcp_enqueue_flags+0x148>
 801269a:	78fb      	ldrb	r3, [r7, #3]
 801269c:	f003 0301 	and.w	r3, r3, #1
 80126a0:	2b00      	cmp	r3, #0
 80126a2:	d004      	beq.n	80126ae <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80126a8:	1c5a      	adds	r2, r3, #1
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80126ae:	78fb      	ldrb	r3, [r7, #3]
 80126b0:	f003 0301 	and.w	r3, r3, #1
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	d006      	beq.n	80126c6 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	8b5b      	ldrh	r3, [r3, #26]
 80126bc:	f043 0320 	orr.w	r3, r3, #32
 80126c0:	b29a      	uxth	r2, r3
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80126c6:	68fb      	ldr	r3, [r7, #12]
 80126c8:	685b      	ldr	r3, [r3, #4]
 80126ca:	4618      	mov	r0, r3
 80126cc:	f7fa fbc0 	bl	800ce50 <pbuf_clen>
 80126d0:	4603      	mov	r3, r0
 80126d2:	461a      	mov	r2, r3
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80126da:	4413      	add	r3, r2
 80126dc:	b29a      	uxth	r2, r3
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	d00e      	beq.n	801270c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	d10a      	bne.n	801270c <tcp_enqueue_flags+0x1b0>
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	d106      	bne.n	801270c <tcp_enqueue_flags+0x1b0>
 80126fe:	4b06      	ldr	r3, [pc, #24]	; (8012718 <tcp_enqueue_flags+0x1bc>)
 8012700:	f240 4265 	movw	r2, #1125	; 0x465
 8012704:	490b      	ldr	r1, [pc, #44]	; (8012734 <tcp_enqueue_flags+0x1d8>)
 8012706:	4806      	ldr	r0, [pc, #24]	; (8012720 <tcp_enqueue_flags+0x1c4>)
 8012708:	f006 fa46 	bl	8018b98 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801270c:	2300      	movs	r3, #0
}
 801270e:	4618      	mov	r0, r3
 8012710:	3720      	adds	r7, #32
 8012712:	46bd      	mov	sp, r7
 8012714:	bd80      	pop	{r7, pc}
 8012716:	bf00      	nop
 8012718:	0801c488 	.word	0x0801c488
 801271c:	0801c8ac 	.word	0x0801c8ac
 8012720:	0801c4dc 	.word	0x0801c4dc
 8012724:	0801c904 	.word	0x0801c904
 8012728:	0801c924 	.word	0x0801c924
 801272c:	0801c960 	.word	0x0801c960
 8012730:	0801c978 	.word	0x0801c978
 8012734:	0801c9a4 	.word	0x0801c9a4

08012738 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8012738:	b5b0      	push	{r4, r5, r7, lr}
 801273a:	b08a      	sub	sp, #40	; 0x28
 801273c:	af00      	add	r7, sp, #0
 801273e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	2b00      	cmp	r3, #0
 8012744:	d106      	bne.n	8012754 <tcp_output+0x1c>
 8012746:	4b8a      	ldr	r3, [pc, #552]	; (8012970 <tcp_output+0x238>)
 8012748:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801274c:	4989      	ldr	r1, [pc, #548]	; (8012974 <tcp_output+0x23c>)
 801274e:	488a      	ldr	r0, [pc, #552]	; (8012978 <tcp_output+0x240>)
 8012750:	f006 fa22 	bl	8018b98 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	7d1b      	ldrb	r3, [r3, #20]
 8012758:	2b01      	cmp	r3, #1
 801275a:	d106      	bne.n	801276a <tcp_output+0x32>
 801275c:	4b84      	ldr	r3, [pc, #528]	; (8012970 <tcp_output+0x238>)
 801275e:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8012762:	4986      	ldr	r1, [pc, #536]	; (801297c <tcp_output+0x244>)
 8012764:	4884      	ldr	r0, [pc, #528]	; (8012978 <tcp_output+0x240>)
 8012766:	f006 fa17 	bl	8018b98 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801276a:	4b85      	ldr	r3, [pc, #532]	; (8012980 <tcp_output+0x248>)
 801276c:	681b      	ldr	r3, [r3, #0]
 801276e:	687a      	ldr	r2, [r7, #4]
 8012770:	429a      	cmp	r2, r3
 8012772:	d101      	bne.n	8012778 <tcp_output+0x40>
    return ERR_OK;
 8012774:	2300      	movs	r3, #0
 8012776:	e1ce      	b.n	8012b16 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012784:	4293      	cmp	r3, r2
 8012786:	bf28      	it	cs
 8012788:	4613      	movcs	r3, r2
 801278a:	b29b      	uxth	r3, r3
 801278c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012792:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8012794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012796:	2b00      	cmp	r3, #0
 8012798:	d10b      	bne.n	80127b2 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	8b5b      	ldrh	r3, [r3, #26]
 801279e:	f003 0302 	and.w	r3, r3, #2
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	f000 81aa 	beq.w	8012afc <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 80127a8:	6878      	ldr	r0, [r7, #4]
 80127aa:	f000 fdcb 	bl	8013344 <tcp_send_empty_ack>
 80127ae:	4603      	mov	r3, r0
 80127b0:	e1b1      	b.n	8012b16 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80127b2:	6879      	ldr	r1, [r7, #4]
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	3304      	adds	r3, #4
 80127b8:	461a      	mov	r2, r3
 80127ba:	6878      	ldr	r0, [r7, #4]
 80127bc:	f7ff f824 	bl	8011808 <tcp_route>
 80127c0:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80127c2:	697b      	ldr	r3, [r7, #20]
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	d102      	bne.n	80127ce <tcp_output+0x96>
    return ERR_RTE;
 80127c8:	f06f 0303 	mvn.w	r3, #3
 80127cc:	e1a3      	b.n	8012b16 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	d003      	beq.n	80127dc <tcp_output+0xa4>
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	681b      	ldr	r3, [r3, #0]
 80127d8:	2b00      	cmp	r3, #0
 80127da:	d111      	bne.n	8012800 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80127dc:	697b      	ldr	r3, [r7, #20]
 80127de:	2b00      	cmp	r3, #0
 80127e0:	d002      	beq.n	80127e8 <tcp_output+0xb0>
 80127e2:	697b      	ldr	r3, [r7, #20]
 80127e4:	3304      	adds	r3, #4
 80127e6:	e000      	b.n	80127ea <tcp_output+0xb2>
 80127e8:	2300      	movs	r3, #0
 80127ea:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80127ec:	693b      	ldr	r3, [r7, #16]
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	d102      	bne.n	80127f8 <tcp_output+0xc0>
      return ERR_RTE;
 80127f2:	f06f 0303 	mvn.w	r3, #3
 80127f6:	e18e      	b.n	8012b16 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80127f8:	693b      	ldr	r3, [r7, #16]
 80127fa:	681a      	ldr	r2, [r3, #0]
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8012800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012802:	68db      	ldr	r3, [r3, #12]
 8012804:	685b      	ldr	r3, [r3, #4]
 8012806:	4618      	mov	r0, r3
 8012808:	f7f8 fe75 	bl	800b4f6 <lwip_htonl>
 801280c:	4602      	mov	r2, r0
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012812:	1ad3      	subs	r3, r2, r3
 8012814:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012816:	8912      	ldrh	r2, [r2, #8]
 8012818:	4413      	add	r3, r2
 801281a:	69ba      	ldr	r2, [r7, #24]
 801281c:	429a      	cmp	r2, r3
 801281e:	d227      	bcs.n	8012870 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012826:	461a      	mov	r2, r3
 8012828:	69bb      	ldr	r3, [r7, #24]
 801282a:	4293      	cmp	r3, r2
 801282c:	d114      	bne.n	8012858 <tcp_output+0x120>
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012832:	2b00      	cmp	r3, #0
 8012834:	d110      	bne.n	8012858 <tcp_output+0x120>
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801283c:	2b00      	cmp	r3, #0
 801283e:	d10b      	bne.n	8012858 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	2200      	movs	r2, #0
 8012844:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	2201      	movs	r2, #1
 801284c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	2200      	movs	r2, #0
 8012854:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	8b5b      	ldrh	r3, [r3, #26]
 801285c:	f003 0302 	and.w	r3, r3, #2
 8012860:	2b00      	cmp	r3, #0
 8012862:	f000 814d 	beq.w	8012b00 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8012866:	6878      	ldr	r0, [r7, #4]
 8012868:	f000 fd6c 	bl	8013344 <tcp_send_empty_ack>
 801286c:	4603      	mov	r3, r0
 801286e:	e152      	b.n	8012b16 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	2200      	movs	r2, #0
 8012874:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801287c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801287e:	6a3b      	ldr	r3, [r7, #32]
 8012880:	2b00      	cmp	r3, #0
 8012882:	f000 811c 	beq.w	8012abe <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8012886:	e002      	b.n	801288e <tcp_output+0x156>
 8012888:	6a3b      	ldr	r3, [r7, #32]
 801288a:	681b      	ldr	r3, [r3, #0]
 801288c:	623b      	str	r3, [r7, #32]
 801288e:	6a3b      	ldr	r3, [r7, #32]
 8012890:	681b      	ldr	r3, [r3, #0]
 8012892:	2b00      	cmp	r3, #0
 8012894:	d1f8      	bne.n	8012888 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8012896:	e112      	b.n	8012abe <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8012898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801289a:	68db      	ldr	r3, [r3, #12]
 801289c:	899b      	ldrh	r3, [r3, #12]
 801289e:	b29b      	uxth	r3, r3
 80128a0:	4618      	mov	r0, r3
 80128a2:	f7f8 fe13 	bl	800b4cc <lwip_htons>
 80128a6:	4603      	mov	r3, r0
 80128a8:	b2db      	uxtb	r3, r3
 80128aa:	f003 0304 	and.w	r3, r3, #4
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	d006      	beq.n	80128c0 <tcp_output+0x188>
 80128b2:	4b2f      	ldr	r3, [pc, #188]	; (8012970 <tcp_output+0x238>)
 80128b4:	f240 5236 	movw	r2, #1334	; 0x536
 80128b8:	4932      	ldr	r1, [pc, #200]	; (8012984 <tcp_output+0x24c>)
 80128ba:	482f      	ldr	r0, [pc, #188]	; (8012978 <tcp_output+0x240>)
 80128bc:	f006 f96c 	bl	8018b98 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	d01f      	beq.n	8012908 <tcp_output+0x1d0>
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	8b5b      	ldrh	r3, [r3, #26]
 80128cc:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80128d0:	2b00      	cmp	r3, #0
 80128d2:	d119      	bne.n	8012908 <tcp_output+0x1d0>
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80128d8:	2b00      	cmp	r3, #0
 80128da:	d00b      	beq.n	80128f4 <tcp_output+0x1bc>
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80128e0:	681b      	ldr	r3, [r3, #0]
 80128e2:	2b00      	cmp	r3, #0
 80128e4:	d110      	bne.n	8012908 <tcp_output+0x1d0>
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80128ea:	891a      	ldrh	r2, [r3, #8]
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80128f0:	429a      	cmp	r2, r3
 80128f2:	d209      	bcs.n	8012908 <tcp_output+0x1d0>
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	d004      	beq.n	8012908 <tcp_output+0x1d0>
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012904:	2b08      	cmp	r3, #8
 8012906:	d901      	bls.n	801290c <tcp_output+0x1d4>
 8012908:	2301      	movs	r3, #1
 801290a:	e000      	b.n	801290e <tcp_output+0x1d6>
 801290c:	2300      	movs	r3, #0
 801290e:	2b00      	cmp	r3, #0
 8012910:	d106      	bne.n	8012920 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	8b5b      	ldrh	r3, [r3, #26]
 8012916:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801291a:	2b00      	cmp	r3, #0
 801291c:	f000 80e4 	beq.w	8012ae8 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	7d1b      	ldrb	r3, [r3, #20]
 8012924:	2b02      	cmp	r3, #2
 8012926:	d00d      	beq.n	8012944 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8012928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801292a:	68db      	ldr	r3, [r3, #12]
 801292c:	899b      	ldrh	r3, [r3, #12]
 801292e:	b29c      	uxth	r4, r3
 8012930:	2010      	movs	r0, #16
 8012932:	f7f8 fdcb 	bl	800b4cc <lwip_htons>
 8012936:	4603      	mov	r3, r0
 8012938:	461a      	mov	r2, r3
 801293a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801293c:	68db      	ldr	r3, [r3, #12]
 801293e:	4322      	orrs	r2, r4
 8012940:	b292      	uxth	r2, r2
 8012942:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8012944:	697a      	ldr	r2, [r7, #20]
 8012946:	6879      	ldr	r1, [r7, #4]
 8012948:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801294a:	f000 f909 	bl	8012b60 <tcp_output_segment>
 801294e:	4603      	mov	r3, r0
 8012950:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8012952:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012956:	2b00      	cmp	r3, #0
 8012958:	d016      	beq.n	8012988 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	8b5b      	ldrh	r3, [r3, #26]
 801295e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012962:	b29a      	uxth	r2, r3
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	835a      	strh	r2, [r3, #26]
      return err;
 8012968:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801296c:	e0d3      	b.n	8012b16 <tcp_output+0x3de>
 801296e:	bf00      	nop
 8012970:	0801c488 	.word	0x0801c488
 8012974:	0801c9cc 	.word	0x0801c9cc
 8012978:	0801c4dc 	.word	0x0801c4dc
 801297c:	0801c9e4 	.word	0x0801c9e4
 8012980:	20010ebc 	.word	0x20010ebc
 8012984:	0801ca0c 	.word	0x0801ca0c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8012988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801298a:	681a      	ldr	r2, [r3, #0]
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	7d1b      	ldrb	r3, [r3, #20]
 8012994:	2b02      	cmp	r3, #2
 8012996:	d006      	beq.n	80129a6 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	8b5b      	ldrh	r3, [r3, #26]
 801299c:	f023 0303 	bic.w	r3, r3, #3
 80129a0:	b29a      	uxth	r2, r3
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80129a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129a8:	68db      	ldr	r3, [r3, #12]
 80129aa:	685b      	ldr	r3, [r3, #4]
 80129ac:	4618      	mov	r0, r3
 80129ae:	f7f8 fda2 	bl	800b4f6 <lwip_htonl>
 80129b2:	4604      	mov	r4, r0
 80129b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129b6:	891b      	ldrh	r3, [r3, #8]
 80129b8:	461d      	mov	r5, r3
 80129ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129bc:	68db      	ldr	r3, [r3, #12]
 80129be:	899b      	ldrh	r3, [r3, #12]
 80129c0:	b29b      	uxth	r3, r3
 80129c2:	4618      	mov	r0, r3
 80129c4:	f7f8 fd82 	bl	800b4cc <lwip_htons>
 80129c8:	4603      	mov	r3, r0
 80129ca:	b2db      	uxtb	r3, r3
 80129cc:	f003 0303 	and.w	r3, r3, #3
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	d001      	beq.n	80129d8 <tcp_output+0x2a0>
 80129d4:	2301      	movs	r3, #1
 80129d6:	e000      	b.n	80129da <tcp_output+0x2a2>
 80129d8:	2300      	movs	r3, #0
 80129da:	442b      	add	r3, r5
 80129dc:	4423      	add	r3, r4
 80129de:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80129e4:	68bb      	ldr	r3, [r7, #8]
 80129e6:	1ad3      	subs	r3, r2, r3
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	da02      	bge.n	80129f2 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	68ba      	ldr	r2, [r7, #8]
 80129f0:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80129f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129f4:	891b      	ldrh	r3, [r3, #8]
 80129f6:	461c      	mov	r4, r3
 80129f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129fa:	68db      	ldr	r3, [r3, #12]
 80129fc:	899b      	ldrh	r3, [r3, #12]
 80129fe:	b29b      	uxth	r3, r3
 8012a00:	4618      	mov	r0, r3
 8012a02:	f7f8 fd63 	bl	800b4cc <lwip_htons>
 8012a06:	4603      	mov	r3, r0
 8012a08:	b2db      	uxtb	r3, r3
 8012a0a:	f003 0303 	and.w	r3, r3, #3
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	d001      	beq.n	8012a16 <tcp_output+0x2de>
 8012a12:	2301      	movs	r3, #1
 8012a14:	e000      	b.n	8012a18 <tcp_output+0x2e0>
 8012a16:	2300      	movs	r3, #0
 8012a18:	4423      	add	r3, r4
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	d049      	beq.n	8012ab2 <tcp_output+0x37a>
      seg->next = NULL;
 8012a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a20:	2200      	movs	r2, #0
 8012a22:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d105      	bne.n	8012a38 <tcp_output+0x300>
        pcb->unacked = seg;
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012a30:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8012a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a34:	623b      	str	r3, [r7, #32]
 8012a36:	e03f      	b.n	8012ab8 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8012a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a3a:	68db      	ldr	r3, [r3, #12]
 8012a3c:	685b      	ldr	r3, [r3, #4]
 8012a3e:	4618      	mov	r0, r3
 8012a40:	f7f8 fd59 	bl	800b4f6 <lwip_htonl>
 8012a44:	4604      	mov	r4, r0
 8012a46:	6a3b      	ldr	r3, [r7, #32]
 8012a48:	68db      	ldr	r3, [r3, #12]
 8012a4a:	685b      	ldr	r3, [r3, #4]
 8012a4c:	4618      	mov	r0, r3
 8012a4e:	f7f8 fd52 	bl	800b4f6 <lwip_htonl>
 8012a52:	4603      	mov	r3, r0
 8012a54:	1ae3      	subs	r3, r4, r3
 8012a56:	2b00      	cmp	r3, #0
 8012a58:	da24      	bge.n	8012aa4 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	3370      	adds	r3, #112	; 0x70
 8012a5e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012a60:	e002      	b.n	8012a68 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8012a62:	69fb      	ldr	r3, [r7, #28]
 8012a64:	681b      	ldr	r3, [r3, #0]
 8012a66:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012a68:	69fb      	ldr	r3, [r7, #28]
 8012a6a:	681b      	ldr	r3, [r3, #0]
 8012a6c:	2b00      	cmp	r3, #0
 8012a6e:	d011      	beq.n	8012a94 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012a70:	69fb      	ldr	r3, [r7, #28]
 8012a72:	681b      	ldr	r3, [r3, #0]
 8012a74:	68db      	ldr	r3, [r3, #12]
 8012a76:	685b      	ldr	r3, [r3, #4]
 8012a78:	4618      	mov	r0, r3
 8012a7a:	f7f8 fd3c 	bl	800b4f6 <lwip_htonl>
 8012a7e:	4604      	mov	r4, r0
 8012a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a82:	68db      	ldr	r3, [r3, #12]
 8012a84:	685b      	ldr	r3, [r3, #4]
 8012a86:	4618      	mov	r0, r3
 8012a88:	f7f8 fd35 	bl	800b4f6 <lwip_htonl>
 8012a8c:	4603      	mov	r3, r0
 8012a8e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8012a90:	2b00      	cmp	r3, #0
 8012a92:	dbe6      	blt.n	8012a62 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8012a94:	69fb      	ldr	r3, [r7, #28]
 8012a96:	681a      	ldr	r2, [r3, #0]
 8012a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a9a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8012a9c:	69fb      	ldr	r3, [r7, #28]
 8012a9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012aa0:	601a      	str	r2, [r3, #0]
 8012aa2:	e009      	b.n	8012ab8 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8012aa4:	6a3b      	ldr	r3, [r7, #32]
 8012aa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012aa8:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8012aaa:	6a3b      	ldr	r3, [r7, #32]
 8012aac:	681b      	ldr	r3, [r3, #0]
 8012aae:	623b      	str	r3, [r7, #32]
 8012ab0:	e002      	b.n	8012ab8 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8012ab2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012ab4:	f7fb fefb 	bl	800e8ae <tcp_seg_free>
    }
    seg = pcb->unsent;
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012abc:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8012abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	d012      	beq.n	8012aea <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8012ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ac6:	68db      	ldr	r3, [r3, #12]
 8012ac8:	685b      	ldr	r3, [r3, #4]
 8012aca:	4618      	mov	r0, r3
 8012acc:	f7f8 fd13 	bl	800b4f6 <lwip_htonl>
 8012ad0:	4602      	mov	r2, r0
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012ad6:	1ad3      	subs	r3, r2, r3
 8012ad8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012ada:	8912      	ldrh	r2, [r2, #8]
 8012adc:	4413      	add	r3, r2
  while (seg != NULL &&
 8012ade:	69ba      	ldr	r2, [r7, #24]
 8012ae0:	429a      	cmp	r2, r3
 8012ae2:	f4bf aed9 	bcs.w	8012898 <tcp_output+0x160>
 8012ae6:	e000      	b.n	8012aea <tcp_output+0x3b2>
      break;
 8012ae8:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	d108      	bne.n	8012b04 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	2200      	movs	r2, #0
 8012af6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8012afa:	e004      	b.n	8012b06 <tcp_output+0x3ce>
    goto output_done;
 8012afc:	bf00      	nop
 8012afe:	e002      	b.n	8012b06 <tcp_output+0x3ce>
    goto output_done;
 8012b00:	bf00      	nop
 8012b02:	e000      	b.n	8012b06 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8012b04:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	8b5b      	ldrh	r3, [r3, #26]
 8012b0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012b0e:	b29a      	uxth	r2, r3
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8012b14:	2300      	movs	r3, #0
}
 8012b16:	4618      	mov	r0, r3
 8012b18:	3728      	adds	r7, #40	; 0x28
 8012b1a:	46bd      	mov	sp, r7
 8012b1c:	bdb0      	pop	{r4, r5, r7, pc}
 8012b1e:	bf00      	nop

08012b20 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8012b20:	b580      	push	{r7, lr}
 8012b22:	b082      	sub	sp, #8
 8012b24:	af00      	add	r7, sp, #0
 8012b26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d106      	bne.n	8012b3c <tcp_output_segment_busy+0x1c>
 8012b2e:	4b09      	ldr	r3, [pc, #36]	; (8012b54 <tcp_output_segment_busy+0x34>)
 8012b30:	f240 529a 	movw	r2, #1434	; 0x59a
 8012b34:	4908      	ldr	r1, [pc, #32]	; (8012b58 <tcp_output_segment_busy+0x38>)
 8012b36:	4809      	ldr	r0, [pc, #36]	; (8012b5c <tcp_output_segment_busy+0x3c>)
 8012b38:	f006 f82e 	bl	8018b98 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	685b      	ldr	r3, [r3, #4]
 8012b40:	7b9b      	ldrb	r3, [r3, #14]
 8012b42:	2b01      	cmp	r3, #1
 8012b44:	d001      	beq.n	8012b4a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8012b46:	2301      	movs	r3, #1
 8012b48:	e000      	b.n	8012b4c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8012b4a:	2300      	movs	r3, #0
}
 8012b4c:	4618      	mov	r0, r3
 8012b4e:	3708      	adds	r7, #8
 8012b50:	46bd      	mov	sp, r7
 8012b52:	bd80      	pop	{r7, pc}
 8012b54:	0801c488 	.word	0x0801c488
 8012b58:	0801ca24 	.word	0x0801ca24
 8012b5c:	0801c4dc 	.word	0x0801c4dc

08012b60 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8012b60:	b5b0      	push	{r4, r5, r7, lr}
 8012b62:	b08c      	sub	sp, #48	; 0x30
 8012b64:	af04      	add	r7, sp, #16
 8012b66:	60f8      	str	r0, [r7, #12]
 8012b68:	60b9      	str	r1, [r7, #8]
 8012b6a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8012b6c:	68fb      	ldr	r3, [r7, #12]
 8012b6e:	2b00      	cmp	r3, #0
 8012b70:	d106      	bne.n	8012b80 <tcp_output_segment+0x20>
 8012b72:	4b64      	ldr	r3, [pc, #400]	; (8012d04 <tcp_output_segment+0x1a4>)
 8012b74:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8012b78:	4963      	ldr	r1, [pc, #396]	; (8012d08 <tcp_output_segment+0x1a8>)
 8012b7a:	4864      	ldr	r0, [pc, #400]	; (8012d0c <tcp_output_segment+0x1ac>)
 8012b7c:	f006 f80c 	bl	8018b98 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8012b80:	68bb      	ldr	r3, [r7, #8]
 8012b82:	2b00      	cmp	r3, #0
 8012b84:	d106      	bne.n	8012b94 <tcp_output_segment+0x34>
 8012b86:	4b5f      	ldr	r3, [pc, #380]	; (8012d04 <tcp_output_segment+0x1a4>)
 8012b88:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8012b8c:	4960      	ldr	r1, [pc, #384]	; (8012d10 <tcp_output_segment+0x1b0>)
 8012b8e:	485f      	ldr	r0, [pc, #380]	; (8012d0c <tcp_output_segment+0x1ac>)
 8012b90:	f006 f802 	bl	8018b98 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	d106      	bne.n	8012ba8 <tcp_output_segment+0x48>
 8012b9a:	4b5a      	ldr	r3, [pc, #360]	; (8012d04 <tcp_output_segment+0x1a4>)
 8012b9c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8012ba0:	495c      	ldr	r1, [pc, #368]	; (8012d14 <tcp_output_segment+0x1b4>)
 8012ba2:	485a      	ldr	r0, [pc, #360]	; (8012d0c <tcp_output_segment+0x1ac>)
 8012ba4:	f005 fff8 	bl	8018b98 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8012ba8:	68f8      	ldr	r0, [r7, #12]
 8012baa:	f7ff ffb9 	bl	8012b20 <tcp_output_segment_busy>
 8012bae:	4603      	mov	r3, r0
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	d001      	beq.n	8012bb8 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8012bb4:	2300      	movs	r3, #0
 8012bb6:	e0a1      	b.n	8012cfc <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8012bb8:	68bb      	ldr	r3, [r7, #8]
 8012bba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012bbc:	68fb      	ldr	r3, [r7, #12]
 8012bbe:	68dc      	ldr	r4, [r3, #12]
 8012bc0:	4610      	mov	r0, r2
 8012bc2:	f7f8 fc98 	bl	800b4f6 <lwip_htonl>
 8012bc6:	4603      	mov	r3, r0
 8012bc8:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8012bca:	68bb      	ldr	r3, [r7, #8]
 8012bcc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8012bce:	68fb      	ldr	r3, [r7, #12]
 8012bd0:	68dc      	ldr	r4, [r3, #12]
 8012bd2:	4610      	mov	r0, r2
 8012bd4:	f7f8 fc7a 	bl	800b4cc <lwip_htons>
 8012bd8:	4603      	mov	r3, r0
 8012bda:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012bdc:	68bb      	ldr	r3, [r7, #8]
 8012bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012be0:	68ba      	ldr	r2, [r7, #8]
 8012be2:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8012be4:	441a      	add	r2, r3
 8012be6:	68bb      	ldr	r3, [r7, #8]
 8012be8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8012bea:	68fb      	ldr	r3, [r7, #12]
 8012bec:	68db      	ldr	r3, [r3, #12]
 8012bee:	3314      	adds	r3, #20
 8012bf0:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8012bf2:	68fb      	ldr	r3, [r7, #12]
 8012bf4:	7a9b      	ldrb	r3, [r3, #10]
 8012bf6:	f003 0301 	and.w	r3, r3, #1
 8012bfa:	2b00      	cmp	r3, #0
 8012bfc:	d015      	beq.n	8012c2a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8012bfe:	68bb      	ldr	r3, [r7, #8]
 8012c00:	3304      	adds	r3, #4
 8012c02:	461a      	mov	r2, r3
 8012c04:	6879      	ldr	r1, [r7, #4]
 8012c06:	f44f 7006 	mov.w	r0, #536	; 0x218
 8012c0a:	f7fc fa33 	bl	800f074 <tcp_eff_send_mss_netif>
 8012c0e:	4603      	mov	r3, r0
 8012c10:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8012c12:	8b7b      	ldrh	r3, [r7, #26]
 8012c14:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8012c18:	4618      	mov	r0, r3
 8012c1a:	f7f8 fc6c 	bl	800b4f6 <lwip_htonl>
 8012c1e:	4602      	mov	r2, r0
 8012c20:	69fb      	ldr	r3, [r7, #28]
 8012c22:	601a      	str	r2, [r3, #0]
    opts += 1;
 8012c24:	69fb      	ldr	r3, [r7, #28]
 8012c26:	3304      	adds	r3, #4
 8012c28:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8012c2a:	68bb      	ldr	r3, [r7, #8]
 8012c2c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	da02      	bge.n	8012c3a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8012c34:	68bb      	ldr	r3, [r7, #8]
 8012c36:	2200      	movs	r2, #0
 8012c38:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8012c3a:	68bb      	ldr	r3, [r7, #8]
 8012c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d10c      	bne.n	8012c5c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8012c42:	4b35      	ldr	r3, [pc, #212]	; (8012d18 <tcp_output_segment+0x1b8>)
 8012c44:	681a      	ldr	r2, [r3, #0]
 8012c46:	68bb      	ldr	r3, [r7, #8]
 8012c48:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8012c4a:	68fb      	ldr	r3, [r7, #12]
 8012c4c:	68db      	ldr	r3, [r3, #12]
 8012c4e:	685b      	ldr	r3, [r3, #4]
 8012c50:	4618      	mov	r0, r3
 8012c52:	f7f8 fc50 	bl	800b4f6 <lwip_htonl>
 8012c56:	4602      	mov	r2, r0
 8012c58:	68bb      	ldr	r3, [r7, #8]
 8012c5a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8012c5c:	68fb      	ldr	r3, [r7, #12]
 8012c5e:	68da      	ldr	r2, [r3, #12]
 8012c60:	68fb      	ldr	r3, [r7, #12]
 8012c62:	685b      	ldr	r3, [r3, #4]
 8012c64:	685b      	ldr	r3, [r3, #4]
 8012c66:	1ad3      	subs	r3, r2, r3
 8012c68:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8012c6a:	68fb      	ldr	r3, [r7, #12]
 8012c6c:	685b      	ldr	r3, [r3, #4]
 8012c6e:	8959      	ldrh	r1, [r3, #10]
 8012c70:	68fb      	ldr	r3, [r7, #12]
 8012c72:	685b      	ldr	r3, [r3, #4]
 8012c74:	8b3a      	ldrh	r2, [r7, #24]
 8012c76:	1a8a      	subs	r2, r1, r2
 8012c78:	b292      	uxth	r2, r2
 8012c7a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8012c7c:	68fb      	ldr	r3, [r7, #12]
 8012c7e:	685b      	ldr	r3, [r3, #4]
 8012c80:	8919      	ldrh	r1, [r3, #8]
 8012c82:	68fb      	ldr	r3, [r7, #12]
 8012c84:	685b      	ldr	r3, [r3, #4]
 8012c86:	8b3a      	ldrh	r2, [r7, #24]
 8012c88:	1a8a      	subs	r2, r1, r2
 8012c8a:	b292      	uxth	r2, r2
 8012c8c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8012c8e:	68fb      	ldr	r3, [r7, #12]
 8012c90:	685b      	ldr	r3, [r3, #4]
 8012c92:	68fa      	ldr	r2, [r7, #12]
 8012c94:	68d2      	ldr	r2, [r2, #12]
 8012c96:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8012c98:	68fb      	ldr	r3, [r7, #12]
 8012c9a:	68db      	ldr	r3, [r3, #12]
 8012c9c:	2200      	movs	r2, #0
 8012c9e:	741a      	strb	r2, [r3, #16]
 8012ca0:	2200      	movs	r2, #0
 8012ca2:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8012ca4:	68fb      	ldr	r3, [r7, #12]
 8012ca6:	68da      	ldr	r2, [r3, #12]
 8012ca8:	68fb      	ldr	r3, [r7, #12]
 8012caa:	7a9b      	ldrb	r3, [r3, #10]
 8012cac:	f003 0301 	and.w	r3, r3, #1
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	d001      	beq.n	8012cb8 <tcp_output_segment+0x158>
 8012cb4:	2318      	movs	r3, #24
 8012cb6:	e000      	b.n	8012cba <tcp_output_segment+0x15a>
 8012cb8:	2314      	movs	r3, #20
 8012cba:	4413      	add	r3, r2
 8012cbc:	69fa      	ldr	r2, [r7, #28]
 8012cbe:	429a      	cmp	r2, r3
 8012cc0:	d006      	beq.n	8012cd0 <tcp_output_segment+0x170>
 8012cc2:	4b10      	ldr	r3, [pc, #64]	; (8012d04 <tcp_output_segment+0x1a4>)
 8012cc4:	f240 621c 	movw	r2, #1564	; 0x61c
 8012cc8:	4914      	ldr	r1, [pc, #80]	; (8012d1c <tcp_output_segment+0x1bc>)
 8012cca:	4810      	ldr	r0, [pc, #64]	; (8012d0c <tcp_output_segment+0x1ac>)
 8012ccc:	f005 ff64 	bl	8018b98 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8012cd0:	68fb      	ldr	r3, [r7, #12]
 8012cd2:	6858      	ldr	r0, [r3, #4]
 8012cd4:	68b9      	ldr	r1, [r7, #8]
 8012cd6:	68bb      	ldr	r3, [r7, #8]
 8012cd8:	1d1c      	adds	r4, r3, #4
 8012cda:	68bb      	ldr	r3, [r7, #8]
 8012cdc:	7add      	ldrb	r5, [r3, #11]
 8012cde:	68bb      	ldr	r3, [r7, #8]
 8012ce0:	7a9b      	ldrb	r3, [r3, #10]
 8012ce2:	687a      	ldr	r2, [r7, #4]
 8012ce4:	9202      	str	r2, [sp, #8]
 8012ce6:	2206      	movs	r2, #6
 8012ce8:	9201      	str	r2, [sp, #4]
 8012cea:	9300      	str	r3, [sp, #0]
 8012cec:	462b      	mov	r3, r5
 8012cee:	4622      	mov	r2, r4
 8012cf0:	f004 fc26 	bl	8017540 <ip4_output_if>
 8012cf4:	4603      	mov	r3, r0
 8012cf6:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8012cf8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012cfc:	4618      	mov	r0, r3
 8012cfe:	3720      	adds	r7, #32
 8012d00:	46bd      	mov	sp, r7
 8012d02:	bdb0      	pop	{r4, r5, r7, pc}
 8012d04:	0801c488 	.word	0x0801c488
 8012d08:	0801ca4c 	.word	0x0801ca4c
 8012d0c:	0801c4dc 	.word	0x0801c4dc
 8012d10:	0801ca6c 	.word	0x0801ca6c
 8012d14:	0801ca8c 	.word	0x0801ca8c
 8012d18:	20010e70 	.word	0x20010e70
 8012d1c:	0801cab0 	.word	0x0801cab0

08012d20 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8012d20:	b5b0      	push	{r4, r5, r7, lr}
 8012d22:	b084      	sub	sp, #16
 8012d24:	af00      	add	r7, sp, #0
 8012d26:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	d106      	bne.n	8012d3c <tcp_rexmit_rto_prepare+0x1c>
 8012d2e:	4b31      	ldr	r3, [pc, #196]	; (8012df4 <tcp_rexmit_rto_prepare+0xd4>)
 8012d30:	f240 6263 	movw	r2, #1635	; 0x663
 8012d34:	4930      	ldr	r1, [pc, #192]	; (8012df8 <tcp_rexmit_rto_prepare+0xd8>)
 8012d36:	4831      	ldr	r0, [pc, #196]	; (8012dfc <tcp_rexmit_rto_prepare+0xdc>)
 8012d38:	f005 ff2e 	bl	8018b98 <iprintf>

  if (pcb->unacked == NULL) {
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012d40:	2b00      	cmp	r3, #0
 8012d42:	d102      	bne.n	8012d4a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8012d44:	f06f 0305 	mvn.w	r3, #5
 8012d48:	e050      	b.n	8012dec <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012d4e:	60fb      	str	r3, [r7, #12]
 8012d50:	e00b      	b.n	8012d6a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8012d52:	68f8      	ldr	r0, [r7, #12]
 8012d54:	f7ff fee4 	bl	8012b20 <tcp_output_segment_busy>
 8012d58:	4603      	mov	r3, r0
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	d002      	beq.n	8012d64 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8012d5e:	f06f 0305 	mvn.w	r3, #5
 8012d62:	e043      	b.n	8012dec <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012d64:	68fb      	ldr	r3, [r7, #12]
 8012d66:	681b      	ldr	r3, [r3, #0]
 8012d68:	60fb      	str	r3, [r7, #12]
 8012d6a:	68fb      	ldr	r3, [r7, #12]
 8012d6c:	681b      	ldr	r3, [r3, #0]
 8012d6e:	2b00      	cmp	r3, #0
 8012d70:	d1ef      	bne.n	8012d52 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8012d72:	68f8      	ldr	r0, [r7, #12]
 8012d74:	f7ff fed4 	bl	8012b20 <tcp_output_segment_busy>
 8012d78:	4603      	mov	r3, r0
 8012d7a:	2b00      	cmp	r3, #0
 8012d7c:	d002      	beq.n	8012d84 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8012d7e:	f06f 0305 	mvn.w	r3, #5
 8012d82:	e033      	b.n	8012dec <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8012d88:	68fb      	ldr	r3, [r7, #12]
 8012d8a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	2200      	movs	r2, #0
 8012d98:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	8b5b      	ldrh	r3, [r3, #26]
 8012d9e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8012da2:	b29a      	uxth	r2, r3
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012da8:	68fb      	ldr	r3, [r7, #12]
 8012daa:	68db      	ldr	r3, [r3, #12]
 8012dac:	685b      	ldr	r3, [r3, #4]
 8012dae:	4618      	mov	r0, r3
 8012db0:	f7f8 fba1 	bl	800b4f6 <lwip_htonl>
 8012db4:	4604      	mov	r4, r0
 8012db6:	68fb      	ldr	r3, [r7, #12]
 8012db8:	891b      	ldrh	r3, [r3, #8]
 8012dba:	461d      	mov	r5, r3
 8012dbc:	68fb      	ldr	r3, [r7, #12]
 8012dbe:	68db      	ldr	r3, [r3, #12]
 8012dc0:	899b      	ldrh	r3, [r3, #12]
 8012dc2:	b29b      	uxth	r3, r3
 8012dc4:	4618      	mov	r0, r3
 8012dc6:	f7f8 fb81 	bl	800b4cc <lwip_htons>
 8012dca:	4603      	mov	r3, r0
 8012dcc:	b2db      	uxtb	r3, r3
 8012dce:	f003 0303 	and.w	r3, r3, #3
 8012dd2:	2b00      	cmp	r3, #0
 8012dd4:	d001      	beq.n	8012dda <tcp_rexmit_rto_prepare+0xba>
 8012dd6:	2301      	movs	r3, #1
 8012dd8:	e000      	b.n	8012ddc <tcp_rexmit_rto_prepare+0xbc>
 8012dda:	2300      	movs	r3, #0
 8012ddc:	442b      	add	r3, r5
 8012dde:	18e2      	adds	r2, r4, r3
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	2200      	movs	r2, #0
 8012de8:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8012dea:	2300      	movs	r3, #0
}
 8012dec:	4618      	mov	r0, r3
 8012dee:	3710      	adds	r7, #16
 8012df0:	46bd      	mov	sp, r7
 8012df2:	bdb0      	pop	{r4, r5, r7, pc}
 8012df4:	0801c488 	.word	0x0801c488
 8012df8:	0801cac4 	.word	0x0801cac4
 8012dfc:	0801c4dc 	.word	0x0801c4dc

08012e00 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8012e00:	b580      	push	{r7, lr}
 8012e02:	b082      	sub	sp, #8
 8012e04:	af00      	add	r7, sp, #0
 8012e06:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	d106      	bne.n	8012e1c <tcp_rexmit_rto_commit+0x1c>
 8012e0e:	4b0d      	ldr	r3, [pc, #52]	; (8012e44 <tcp_rexmit_rto_commit+0x44>)
 8012e10:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8012e14:	490c      	ldr	r1, [pc, #48]	; (8012e48 <tcp_rexmit_rto_commit+0x48>)
 8012e16:	480d      	ldr	r0, [pc, #52]	; (8012e4c <tcp_rexmit_rto_commit+0x4c>)
 8012e18:	f005 febe 	bl	8018b98 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012e22:	2bff      	cmp	r3, #255	; 0xff
 8012e24:	d007      	beq.n	8012e36 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012e2c:	3301      	adds	r3, #1
 8012e2e:	b2da      	uxtb	r2, r3
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8012e36:	6878      	ldr	r0, [r7, #4]
 8012e38:	f7ff fc7e 	bl	8012738 <tcp_output>
}
 8012e3c:	bf00      	nop
 8012e3e:	3708      	adds	r7, #8
 8012e40:	46bd      	mov	sp, r7
 8012e42:	bd80      	pop	{r7, pc}
 8012e44:	0801c488 	.word	0x0801c488
 8012e48:	0801cae8 	.word	0x0801cae8
 8012e4c:	0801c4dc 	.word	0x0801c4dc

08012e50 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8012e50:	b580      	push	{r7, lr}
 8012e52:	b082      	sub	sp, #8
 8012e54:	af00      	add	r7, sp, #0
 8012e56:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	d106      	bne.n	8012e6c <tcp_rexmit_rto+0x1c>
 8012e5e:	4b0a      	ldr	r3, [pc, #40]	; (8012e88 <tcp_rexmit_rto+0x38>)
 8012e60:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8012e64:	4909      	ldr	r1, [pc, #36]	; (8012e8c <tcp_rexmit_rto+0x3c>)
 8012e66:	480a      	ldr	r0, [pc, #40]	; (8012e90 <tcp_rexmit_rto+0x40>)
 8012e68:	f005 fe96 	bl	8018b98 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8012e6c:	6878      	ldr	r0, [r7, #4]
 8012e6e:	f7ff ff57 	bl	8012d20 <tcp_rexmit_rto_prepare>
 8012e72:	4603      	mov	r3, r0
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	d102      	bne.n	8012e7e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8012e78:	6878      	ldr	r0, [r7, #4]
 8012e7a:	f7ff ffc1 	bl	8012e00 <tcp_rexmit_rto_commit>
  }
}
 8012e7e:	bf00      	nop
 8012e80:	3708      	adds	r7, #8
 8012e82:	46bd      	mov	sp, r7
 8012e84:	bd80      	pop	{r7, pc}
 8012e86:	bf00      	nop
 8012e88:	0801c488 	.word	0x0801c488
 8012e8c:	0801cb0c 	.word	0x0801cb0c
 8012e90:	0801c4dc 	.word	0x0801c4dc

08012e94 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8012e94:	b590      	push	{r4, r7, lr}
 8012e96:	b085      	sub	sp, #20
 8012e98:	af00      	add	r7, sp, #0
 8012e9a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	2b00      	cmp	r3, #0
 8012ea0:	d106      	bne.n	8012eb0 <tcp_rexmit+0x1c>
 8012ea2:	4b2f      	ldr	r3, [pc, #188]	; (8012f60 <tcp_rexmit+0xcc>)
 8012ea4:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8012ea8:	492e      	ldr	r1, [pc, #184]	; (8012f64 <tcp_rexmit+0xd0>)
 8012eaa:	482f      	ldr	r0, [pc, #188]	; (8012f68 <tcp_rexmit+0xd4>)
 8012eac:	f005 fe74 	bl	8018b98 <iprintf>

  if (pcb->unacked == NULL) {
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012eb4:	2b00      	cmp	r3, #0
 8012eb6:	d102      	bne.n	8012ebe <tcp_rexmit+0x2a>
    return ERR_VAL;
 8012eb8:	f06f 0305 	mvn.w	r3, #5
 8012ebc:	e04c      	b.n	8012f58 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012ec2:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8012ec4:	68b8      	ldr	r0, [r7, #8]
 8012ec6:	f7ff fe2b 	bl	8012b20 <tcp_output_segment_busy>
 8012eca:	4603      	mov	r3, r0
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d002      	beq.n	8012ed6 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8012ed0:	f06f 0305 	mvn.w	r3, #5
 8012ed4:	e040      	b.n	8012f58 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8012ed6:	68bb      	ldr	r3, [r7, #8]
 8012ed8:	681a      	ldr	r2, [r3, #0]
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	336c      	adds	r3, #108	; 0x6c
 8012ee2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012ee4:	e002      	b.n	8012eec <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8012ee6:	68fb      	ldr	r3, [r7, #12]
 8012ee8:	681b      	ldr	r3, [r3, #0]
 8012eea:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012eec:	68fb      	ldr	r3, [r7, #12]
 8012eee:	681b      	ldr	r3, [r3, #0]
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	d011      	beq.n	8012f18 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012ef4:	68fb      	ldr	r3, [r7, #12]
 8012ef6:	681b      	ldr	r3, [r3, #0]
 8012ef8:	68db      	ldr	r3, [r3, #12]
 8012efa:	685b      	ldr	r3, [r3, #4]
 8012efc:	4618      	mov	r0, r3
 8012efe:	f7f8 fafa 	bl	800b4f6 <lwip_htonl>
 8012f02:	4604      	mov	r4, r0
 8012f04:	68bb      	ldr	r3, [r7, #8]
 8012f06:	68db      	ldr	r3, [r3, #12]
 8012f08:	685b      	ldr	r3, [r3, #4]
 8012f0a:	4618      	mov	r0, r3
 8012f0c:	f7f8 faf3 	bl	800b4f6 <lwip_htonl>
 8012f10:	4603      	mov	r3, r0
 8012f12:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8012f14:	2b00      	cmp	r3, #0
 8012f16:	dbe6      	blt.n	8012ee6 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8012f18:	68fb      	ldr	r3, [r7, #12]
 8012f1a:	681a      	ldr	r2, [r3, #0]
 8012f1c:	68bb      	ldr	r3, [r7, #8]
 8012f1e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8012f20:	68fb      	ldr	r3, [r7, #12]
 8012f22:	68ba      	ldr	r2, [r7, #8]
 8012f24:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8012f26:	68bb      	ldr	r3, [r7, #8]
 8012f28:	681b      	ldr	r3, [r3, #0]
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	d103      	bne.n	8012f36 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	2200      	movs	r2, #0
 8012f32:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012f3c:	2bff      	cmp	r3, #255	; 0xff
 8012f3e:	d007      	beq.n	8012f50 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012f46:	3301      	adds	r3, #1
 8012f48:	b2da      	uxtb	r2, r3
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	2200      	movs	r2, #0
 8012f54:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8012f56:	2300      	movs	r3, #0
}
 8012f58:	4618      	mov	r0, r3
 8012f5a:	3714      	adds	r7, #20
 8012f5c:	46bd      	mov	sp, r7
 8012f5e:	bd90      	pop	{r4, r7, pc}
 8012f60:	0801c488 	.word	0x0801c488
 8012f64:	0801cb28 	.word	0x0801cb28
 8012f68:	0801c4dc 	.word	0x0801c4dc

08012f6c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8012f6c:	b580      	push	{r7, lr}
 8012f6e:	b082      	sub	sp, #8
 8012f70:	af00      	add	r7, sp, #0
 8012f72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	2b00      	cmp	r3, #0
 8012f78:	d106      	bne.n	8012f88 <tcp_rexmit_fast+0x1c>
 8012f7a:	4b2a      	ldr	r3, [pc, #168]	; (8013024 <tcp_rexmit_fast+0xb8>)
 8012f7c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8012f80:	4929      	ldr	r1, [pc, #164]	; (8013028 <tcp_rexmit_fast+0xbc>)
 8012f82:	482a      	ldr	r0, [pc, #168]	; (801302c <tcp_rexmit_fast+0xc0>)
 8012f84:	f005 fe08 	bl	8018b98 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	d044      	beq.n	801301a <tcp_rexmit_fast+0xae>
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	8b5b      	ldrh	r3, [r3, #26]
 8012f94:	f003 0304 	and.w	r3, r3, #4
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	d13e      	bne.n	801301a <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8012f9c:	6878      	ldr	r0, [r7, #4]
 8012f9e:	f7ff ff79 	bl	8012e94 <tcp_rexmit>
 8012fa2:	4603      	mov	r3, r0
 8012fa4:	2b00      	cmp	r3, #0
 8012fa6:	d138      	bne.n	801301a <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012fb4:	4293      	cmp	r3, r2
 8012fb6:	bf28      	it	cs
 8012fb8:	4613      	movcs	r3, r2
 8012fba:	b29b      	uxth	r3, r3
 8012fbc:	0fda      	lsrs	r2, r3, #31
 8012fbe:	4413      	add	r3, r2
 8012fc0:	105b      	asrs	r3, r3, #1
 8012fc2:	b29a      	uxth	r2, r3
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8012fd0:	461a      	mov	r2, r3
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012fd6:	005b      	lsls	r3, r3, #1
 8012fd8:	429a      	cmp	r2, r3
 8012fda:	d206      	bcs.n	8012fea <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012fe0:	005b      	lsls	r3, r3, #1
 8012fe2:	b29a      	uxth	r2, r3
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012ff4:	4619      	mov	r1, r3
 8012ff6:	0049      	lsls	r1, r1, #1
 8012ff8:	440b      	add	r3, r1
 8012ffa:	b29b      	uxth	r3, r3
 8012ffc:	4413      	add	r3, r2
 8012ffe:	b29a      	uxth	r2, r3
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	8b5b      	ldrh	r3, [r3, #26]
 801300a:	f043 0304 	orr.w	r3, r3, #4
 801300e:	b29a      	uxth	r2, r3
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	2200      	movs	r2, #0
 8013018:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801301a:	bf00      	nop
 801301c:	3708      	adds	r7, #8
 801301e:	46bd      	mov	sp, r7
 8013020:	bd80      	pop	{r7, pc}
 8013022:	bf00      	nop
 8013024:	0801c488 	.word	0x0801c488
 8013028:	0801cb40 	.word	0x0801cb40
 801302c:	0801c4dc 	.word	0x0801c4dc

08013030 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8013030:	b580      	push	{r7, lr}
 8013032:	b086      	sub	sp, #24
 8013034:	af00      	add	r7, sp, #0
 8013036:	60f8      	str	r0, [r7, #12]
 8013038:	607b      	str	r3, [r7, #4]
 801303a:	460b      	mov	r3, r1
 801303c:	817b      	strh	r3, [r7, #10]
 801303e:	4613      	mov	r3, r2
 8013040:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8013042:	897a      	ldrh	r2, [r7, #10]
 8013044:	893b      	ldrh	r3, [r7, #8]
 8013046:	4413      	add	r3, r2
 8013048:	b29b      	uxth	r3, r3
 801304a:	3314      	adds	r3, #20
 801304c:	b29b      	uxth	r3, r3
 801304e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013052:	4619      	mov	r1, r3
 8013054:	2022      	movs	r0, #34	; 0x22
 8013056:	f7f9 fb89 	bl	800c76c <pbuf_alloc>
 801305a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801305c:	697b      	ldr	r3, [r7, #20]
 801305e:	2b00      	cmp	r3, #0
 8013060:	d04d      	beq.n	80130fe <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8013062:	897b      	ldrh	r3, [r7, #10]
 8013064:	3313      	adds	r3, #19
 8013066:	697a      	ldr	r2, [r7, #20]
 8013068:	8952      	ldrh	r2, [r2, #10]
 801306a:	4293      	cmp	r3, r2
 801306c:	db06      	blt.n	801307c <tcp_output_alloc_header_common+0x4c>
 801306e:	4b26      	ldr	r3, [pc, #152]	; (8013108 <tcp_output_alloc_header_common+0xd8>)
 8013070:	f240 7223 	movw	r2, #1827	; 0x723
 8013074:	4925      	ldr	r1, [pc, #148]	; (801310c <tcp_output_alloc_header_common+0xdc>)
 8013076:	4826      	ldr	r0, [pc, #152]	; (8013110 <tcp_output_alloc_header_common+0xe0>)
 8013078:	f005 fd8e 	bl	8018b98 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801307c:	697b      	ldr	r3, [r7, #20]
 801307e:	685b      	ldr	r3, [r3, #4]
 8013080:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8013082:	8c3b      	ldrh	r3, [r7, #32]
 8013084:	4618      	mov	r0, r3
 8013086:	f7f8 fa21 	bl	800b4cc <lwip_htons>
 801308a:	4603      	mov	r3, r0
 801308c:	461a      	mov	r2, r3
 801308e:	693b      	ldr	r3, [r7, #16]
 8013090:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8013092:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013094:	4618      	mov	r0, r3
 8013096:	f7f8 fa19 	bl	800b4cc <lwip_htons>
 801309a:	4603      	mov	r3, r0
 801309c:	461a      	mov	r2, r3
 801309e:	693b      	ldr	r3, [r7, #16]
 80130a0:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80130a2:	693b      	ldr	r3, [r7, #16]
 80130a4:	687a      	ldr	r2, [r7, #4]
 80130a6:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80130a8:	68f8      	ldr	r0, [r7, #12]
 80130aa:	f7f8 fa24 	bl	800b4f6 <lwip_htonl>
 80130ae:	4602      	mov	r2, r0
 80130b0:	693b      	ldr	r3, [r7, #16]
 80130b2:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80130b4:	897b      	ldrh	r3, [r7, #10]
 80130b6:	089b      	lsrs	r3, r3, #2
 80130b8:	b29b      	uxth	r3, r3
 80130ba:	3305      	adds	r3, #5
 80130bc:	b29b      	uxth	r3, r3
 80130be:	031b      	lsls	r3, r3, #12
 80130c0:	b29a      	uxth	r2, r3
 80130c2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80130c6:	b29b      	uxth	r3, r3
 80130c8:	4313      	orrs	r3, r2
 80130ca:	b29b      	uxth	r3, r3
 80130cc:	4618      	mov	r0, r3
 80130ce:	f7f8 f9fd 	bl	800b4cc <lwip_htons>
 80130d2:	4603      	mov	r3, r0
 80130d4:	461a      	mov	r2, r3
 80130d6:	693b      	ldr	r3, [r7, #16]
 80130d8:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80130da:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80130dc:	4618      	mov	r0, r3
 80130de:	f7f8 f9f5 	bl	800b4cc <lwip_htons>
 80130e2:	4603      	mov	r3, r0
 80130e4:	461a      	mov	r2, r3
 80130e6:	693b      	ldr	r3, [r7, #16]
 80130e8:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80130ea:	693b      	ldr	r3, [r7, #16]
 80130ec:	2200      	movs	r2, #0
 80130ee:	741a      	strb	r2, [r3, #16]
 80130f0:	2200      	movs	r2, #0
 80130f2:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80130f4:	693b      	ldr	r3, [r7, #16]
 80130f6:	2200      	movs	r2, #0
 80130f8:	749a      	strb	r2, [r3, #18]
 80130fa:	2200      	movs	r2, #0
 80130fc:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80130fe:	697b      	ldr	r3, [r7, #20]
}
 8013100:	4618      	mov	r0, r3
 8013102:	3718      	adds	r7, #24
 8013104:	46bd      	mov	sp, r7
 8013106:	bd80      	pop	{r7, pc}
 8013108:	0801c488 	.word	0x0801c488
 801310c:	0801cb60 	.word	0x0801cb60
 8013110:	0801c4dc 	.word	0x0801c4dc

08013114 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8013114:	b5b0      	push	{r4, r5, r7, lr}
 8013116:	b08a      	sub	sp, #40	; 0x28
 8013118:	af04      	add	r7, sp, #16
 801311a:	60f8      	str	r0, [r7, #12]
 801311c:	607b      	str	r3, [r7, #4]
 801311e:	460b      	mov	r3, r1
 8013120:	817b      	strh	r3, [r7, #10]
 8013122:	4613      	mov	r3, r2
 8013124:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8013126:	68fb      	ldr	r3, [r7, #12]
 8013128:	2b00      	cmp	r3, #0
 801312a:	d106      	bne.n	801313a <tcp_output_alloc_header+0x26>
 801312c:	4b15      	ldr	r3, [pc, #84]	; (8013184 <tcp_output_alloc_header+0x70>)
 801312e:	f240 7242 	movw	r2, #1858	; 0x742
 8013132:	4915      	ldr	r1, [pc, #84]	; (8013188 <tcp_output_alloc_header+0x74>)
 8013134:	4815      	ldr	r0, [pc, #84]	; (801318c <tcp_output_alloc_header+0x78>)
 8013136:	f005 fd2f 	bl	8018b98 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801313a:	68fb      	ldr	r3, [r7, #12]
 801313c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801313e:	68fb      	ldr	r3, [r7, #12]
 8013140:	8adb      	ldrh	r3, [r3, #22]
 8013142:	68fa      	ldr	r2, [r7, #12]
 8013144:	8b12      	ldrh	r2, [r2, #24]
 8013146:	68f9      	ldr	r1, [r7, #12]
 8013148:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801314a:	893d      	ldrh	r5, [r7, #8]
 801314c:	897c      	ldrh	r4, [r7, #10]
 801314e:	9103      	str	r1, [sp, #12]
 8013150:	2110      	movs	r1, #16
 8013152:	9102      	str	r1, [sp, #8]
 8013154:	9201      	str	r2, [sp, #4]
 8013156:	9300      	str	r3, [sp, #0]
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	462a      	mov	r2, r5
 801315c:	4621      	mov	r1, r4
 801315e:	f7ff ff67 	bl	8013030 <tcp_output_alloc_header_common>
 8013162:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8013164:	697b      	ldr	r3, [r7, #20]
 8013166:	2b00      	cmp	r3, #0
 8013168:	d006      	beq.n	8013178 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801316a:	68fb      	ldr	r3, [r7, #12]
 801316c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801316e:	68fa      	ldr	r2, [r7, #12]
 8013170:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8013172:	441a      	add	r2, r3
 8013174:	68fb      	ldr	r3, [r7, #12]
 8013176:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8013178:	697b      	ldr	r3, [r7, #20]
}
 801317a:	4618      	mov	r0, r3
 801317c:	3718      	adds	r7, #24
 801317e:	46bd      	mov	sp, r7
 8013180:	bdb0      	pop	{r4, r5, r7, pc}
 8013182:	bf00      	nop
 8013184:	0801c488 	.word	0x0801c488
 8013188:	0801cb90 	.word	0x0801cb90
 801318c:	0801c4dc 	.word	0x0801c4dc

08013190 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8013190:	b580      	push	{r7, lr}
 8013192:	b088      	sub	sp, #32
 8013194:	af00      	add	r7, sp, #0
 8013196:	60f8      	str	r0, [r7, #12]
 8013198:	60b9      	str	r1, [r7, #8]
 801319a:	4611      	mov	r1, r2
 801319c:	461a      	mov	r2, r3
 801319e:	460b      	mov	r3, r1
 80131a0:	71fb      	strb	r3, [r7, #7]
 80131a2:	4613      	mov	r3, r2
 80131a4:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80131a6:	2300      	movs	r3, #0
 80131a8:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80131aa:	68bb      	ldr	r3, [r7, #8]
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	d106      	bne.n	80131be <tcp_output_fill_options+0x2e>
 80131b0:	4b12      	ldr	r3, [pc, #72]	; (80131fc <tcp_output_fill_options+0x6c>)
 80131b2:	f240 7256 	movw	r2, #1878	; 0x756
 80131b6:	4912      	ldr	r1, [pc, #72]	; (8013200 <tcp_output_fill_options+0x70>)
 80131b8:	4812      	ldr	r0, [pc, #72]	; (8013204 <tcp_output_fill_options+0x74>)
 80131ba:	f005 fced 	bl	8018b98 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80131be:	68bb      	ldr	r3, [r7, #8]
 80131c0:	685b      	ldr	r3, [r3, #4]
 80131c2:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80131c4:	69bb      	ldr	r3, [r7, #24]
 80131c6:	3314      	adds	r3, #20
 80131c8:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80131ca:	8bfb      	ldrh	r3, [r7, #30]
 80131cc:	009b      	lsls	r3, r3, #2
 80131ce:	461a      	mov	r2, r3
 80131d0:	79fb      	ldrb	r3, [r7, #7]
 80131d2:	009b      	lsls	r3, r3, #2
 80131d4:	f003 0304 	and.w	r3, r3, #4
 80131d8:	4413      	add	r3, r2
 80131da:	3314      	adds	r3, #20
 80131dc:	69ba      	ldr	r2, [r7, #24]
 80131de:	4413      	add	r3, r2
 80131e0:	697a      	ldr	r2, [r7, #20]
 80131e2:	429a      	cmp	r2, r3
 80131e4:	d006      	beq.n	80131f4 <tcp_output_fill_options+0x64>
 80131e6:	4b05      	ldr	r3, [pc, #20]	; (80131fc <tcp_output_fill_options+0x6c>)
 80131e8:	f240 7275 	movw	r2, #1909	; 0x775
 80131ec:	4906      	ldr	r1, [pc, #24]	; (8013208 <tcp_output_fill_options+0x78>)
 80131ee:	4805      	ldr	r0, [pc, #20]	; (8013204 <tcp_output_fill_options+0x74>)
 80131f0:	f005 fcd2 	bl	8018b98 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80131f4:	bf00      	nop
 80131f6:	3720      	adds	r7, #32
 80131f8:	46bd      	mov	sp, r7
 80131fa:	bd80      	pop	{r7, pc}
 80131fc:	0801c488 	.word	0x0801c488
 8013200:	0801cbb8 	.word	0x0801cbb8
 8013204:	0801c4dc 	.word	0x0801c4dc
 8013208:	0801cab0 	.word	0x0801cab0

0801320c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801320c:	b580      	push	{r7, lr}
 801320e:	b08a      	sub	sp, #40	; 0x28
 8013210:	af04      	add	r7, sp, #16
 8013212:	60f8      	str	r0, [r7, #12]
 8013214:	60b9      	str	r1, [r7, #8]
 8013216:	607a      	str	r2, [r7, #4]
 8013218:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801321a:	68bb      	ldr	r3, [r7, #8]
 801321c:	2b00      	cmp	r3, #0
 801321e:	d106      	bne.n	801322e <tcp_output_control_segment+0x22>
 8013220:	4b1c      	ldr	r3, [pc, #112]	; (8013294 <tcp_output_control_segment+0x88>)
 8013222:	f240 7287 	movw	r2, #1927	; 0x787
 8013226:	491c      	ldr	r1, [pc, #112]	; (8013298 <tcp_output_control_segment+0x8c>)
 8013228:	481c      	ldr	r0, [pc, #112]	; (801329c <tcp_output_control_segment+0x90>)
 801322a:	f005 fcb5 	bl	8018b98 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801322e:	683a      	ldr	r2, [r7, #0]
 8013230:	6879      	ldr	r1, [r7, #4]
 8013232:	68f8      	ldr	r0, [r7, #12]
 8013234:	f7fe fae8 	bl	8011808 <tcp_route>
 8013238:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801323a:	693b      	ldr	r3, [r7, #16]
 801323c:	2b00      	cmp	r3, #0
 801323e:	d102      	bne.n	8013246 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8013240:	23fc      	movs	r3, #252	; 0xfc
 8013242:	75fb      	strb	r3, [r7, #23]
 8013244:	e01c      	b.n	8013280 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8013246:	68fb      	ldr	r3, [r7, #12]
 8013248:	2b00      	cmp	r3, #0
 801324a:	d006      	beq.n	801325a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801324c:	68fb      	ldr	r3, [r7, #12]
 801324e:	7adb      	ldrb	r3, [r3, #11]
 8013250:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8013252:	68fb      	ldr	r3, [r7, #12]
 8013254:	7a9b      	ldrb	r3, [r3, #10]
 8013256:	757b      	strb	r3, [r7, #21]
 8013258:	e003      	b.n	8013262 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801325a:	23ff      	movs	r3, #255	; 0xff
 801325c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801325e:	2300      	movs	r3, #0
 8013260:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8013262:	7dba      	ldrb	r2, [r7, #22]
 8013264:	693b      	ldr	r3, [r7, #16]
 8013266:	9302      	str	r3, [sp, #8]
 8013268:	2306      	movs	r3, #6
 801326a:	9301      	str	r3, [sp, #4]
 801326c:	7d7b      	ldrb	r3, [r7, #21]
 801326e:	9300      	str	r3, [sp, #0]
 8013270:	4613      	mov	r3, r2
 8013272:	683a      	ldr	r2, [r7, #0]
 8013274:	6879      	ldr	r1, [r7, #4]
 8013276:	68b8      	ldr	r0, [r7, #8]
 8013278:	f004 f962 	bl	8017540 <ip4_output_if>
 801327c:	4603      	mov	r3, r0
 801327e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8013280:	68b8      	ldr	r0, [r7, #8]
 8013282:	f7f9 fd57 	bl	800cd34 <pbuf_free>
  return err;
 8013286:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801328a:	4618      	mov	r0, r3
 801328c:	3718      	adds	r7, #24
 801328e:	46bd      	mov	sp, r7
 8013290:	bd80      	pop	{r7, pc}
 8013292:	bf00      	nop
 8013294:	0801c488 	.word	0x0801c488
 8013298:	0801cbe0 	.word	0x0801cbe0
 801329c:	0801c4dc 	.word	0x0801c4dc

080132a0 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80132a0:	b590      	push	{r4, r7, lr}
 80132a2:	b08b      	sub	sp, #44	; 0x2c
 80132a4:	af04      	add	r7, sp, #16
 80132a6:	60f8      	str	r0, [r7, #12]
 80132a8:	60b9      	str	r1, [r7, #8]
 80132aa:	607a      	str	r2, [r7, #4]
 80132ac:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80132ae:	683b      	ldr	r3, [r7, #0]
 80132b0:	2b00      	cmp	r3, #0
 80132b2:	d106      	bne.n	80132c2 <tcp_rst+0x22>
 80132b4:	4b1f      	ldr	r3, [pc, #124]	; (8013334 <tcp_rst+0x94>)
 80132b6:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80132ba:	491f      	ldr	r1, [pc, #124]	; (8013338 <tcp_rst+0x98>)
 80132bc:	481f      	ldr	r0, [pc, #124]	; (801333c <tcp_rst+0x9c>)
 80132be:	f005 fc6b 	bl	8018b98 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80132c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	d106      	bne.n	80132d6 <tcp_rst+0x36>
 80132c8:	4b1a      	ldr	r3, [pc, #104]	; (8013334 <tcp_rst+0x94>)
 80132ca:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80132ce:	491c      	ldr	r1, [pc, #112]	; (8013340 <tcp_rst+0xa0>)
 80132d0:	481a      	ldr	r0, [pc, #104]	; (801333c <tcp_rst+0x9c>)
 80132d2:	f005 fc61 	bl	8018b98 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80132d6:	2300      	movs	r3, #0
 80132d8:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80132da:	f246 0308 	movw	r3, #24584	; 0x6008
 80132de:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80132e0:	7dfb      	ldrb	r3, [r7, #23]
 80132e2:	b29c      	uxth	r4, r3
 80132e4:	68b8      	ldr	r0, [r7, #8]
 80132e6:	f7f8 f906 	bl	800b4f6 <lwip_htonl>
 80132ea:	4602      	mov	r2, r0
 80132ec:	8abb      	ldrh	r3, [r7, #20]
 80132ee:	9303      	str	r3, [sp, #12]
 80132f0:	2314      	movs	r3, #20
 80132f2:	9302      	str	r3, [sp, #8]
 80132f4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80132f6:	9301      	str	r3, [sp, #4]
 80132f8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80132fa:	9300      	str	r3, [sp, #0]
 80132fc:	4613      	mov	r3, r2
 80132fe:	2200      	movs	r2, #0
 8013300:	4621      	mov	r1, r4
 8013302:	6878      	ldr	r0, [r7, #4]
 8013304:	f7ff fe94 	bl	8013030 <tcp_output_alloc_header_common>
 8013308:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801330a:	693b      	ldr	r3, [r7, #16]
 801330c:	2b00      	cmp	r3, #0
 801330e:	d00c      	beq.n	801332a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013310:	7dfb      	ldrb	r3, [r7, #23]
 8013312:	2200      	movs	r2, #0
 8013314:	6939      	ldr	r1, [r7, #16]
 8013316:	68f8      	ldr	r0, [r7, #12]
 8013318:	f7ff ff3a 	bl	8013190 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801331c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801331e:	683a      	ldr	r2, [r7, #0]
 8013320:	6939      	ldr	r1, [r7, #16]
 8013322:	68f8      	ldr	r0, [r7, #12]
 8013324:	f7ff ff72 	bl	801320c <tcp_output_control_segment>
 8013328:	e000      	b.n	801332c <tcp_rst+0x8c>
    return;
 801332a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801332c:	371c      	adds	r7, #28
 801332e:	46bd      	mov	sp, r7
 8013330:	bd90      	pop	{r4, r7, pc}
 8013332:	bf00      	nop
 8013334:	0801c488 	.word	0x0801c488
 8013338:	0801cc0c 	.word	0x0801cc0c
 801333c:	0801c4dc 	.word	0x0801c4dc
 8013340:	0801cc28 	.word	0x0801cc28

08013344 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8013344:	b590      	push	{r4, r7, lr}
 8013346:	b087      	sub	sp, #28
 8013348:	af00      	add	r7, sp, #0
 801334a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801334c:	2300      	movs	r3, #0
 801334e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8013350:	2300      	movs	r3, #0
 8013352:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	2b00      	cmp	r3, #0
 8013358:	d106      	bne.n	8013368 <tcp_send_empty_ack+0x24>
 801335a:	4b28      	ldr	r3, [pc, #160]	; (80133fc <tcp_send_empty_ack+0xb8>)
 801335c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8013360:	4927      	ldr	r1, [pc, #156]	; (8013400 <tcp_send_empty_ack+0xbc>)
 8013362:	4828      	ldr	r0, [pc, #160]	; (8013404 <tcp_send_empty_ack+0xc0>)
 8013364:	f005 fc18 	bl	8018b98 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013368:	7dfb      	ldrb	r3, [r7, #23]
 801336a:	009b      	lsls	r3, r3, #2
 801336c:	b2db      	uxtb	r3, r3
 801336e:	f003 0304 	and.w	r3, r3, #4
 8013372:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8013374:	7d7b      	ldrb	r3, [r7, #21]
 8013376:	b29c      	uxth	r4, r3
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801337c:	4618      	mov	r0, r3
 801337e:	f7f8 f8ba 	bl	800b4f6 <lwip_htonl>
 8013382:	4603      	mov	r3, r0
 8013384:	2200      	movs	r2, #0
 8013386:	4621      	mov	r1, r4
 8013388:	6878      	ldr	r0, [r7, #4]
 801338a:	f7ff fec3 	bl	8013114 <tcp_output_alloc_header>
 801338e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013390:	693b      	ldr	r3, [r7, #16]
 8013392:	2b00      	cmp	r3, #0
 8013394:	d109      	bne.n	80133aa <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	8b5b      	ldrh	r3, [r3, #26]
 801339a:	f043 0303 	orr.w	r3, r3, #3
 801339e:	b29a      	uxth	r2, r3
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80133a4:	f06f 0301 	mvn.w	r3, #1
 80133a8:	e023      	b.n	80133f2 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80133aa:	7dbb      	ldrb	r3, [r7, #22]
 80133ac:	7dfa      	ldrb	r2, [r7, #23]
 80133ae:	6939      	ldr	r1, [r7, #16]
 80133b0:	6878      	ldr	r0, [r7, #4]
 80133b2:	f7ff feed 	bl	8013190 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80133b6:	687a      	ldr	r2, [r7, #4]
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	3304      	adds	r3, #4
 80133bc:	6939      	ldr	r1, [r7, #16]
 80133be:	6878      	ldr	r0, [r7, #4]
 80133c0:	f7ff ff24 	bl	801320c <tcp_output_control_segment>
 80133c4:	4603      	mov	r3, r0
 80133c6:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80133c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	d007      	beq.n	80133e0 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	8b5b      	ldrh	r3, [r3, #26]
 80133d4:	f043 0303 	orr.w	r3, r3, #3
 80133d8:	b29a      	uxth	r2, r3
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	835a      	strh	r2, [r3, #26]
 80133de:	e006      	b.n	80133ee <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	8b5b      	ldrh	r3, [r3, #26]
 80133e4:	f023 0303 	bic.w	r3, r3, #3
 80133e8:	b29a      	uxth	r2, r3
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80133ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80133f2:	4618      	mov	r0, r3
 80133f4:	371c      	adds	r7, #28
 80133f6:	46bd      	mov	sp, r7
 80133f8:	bd90      	pop	{r4, r7, pc}
 80133fa:	bf00      	nop
 80133fc:	0801c488 	.word	0x0801c488
 8013400:	0801cc44 	.word	0x0801cc44
 8013404:	0801c4dc 	.word	0x0801c4dc

08013408 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8013408:	b590      	push	{r4, r7, lr}
 801340a:	b087      	sub	sp, #28
 801340c:	af00      	add	r7, sp, #0
 801340e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013410:	2300      	movs	r3, #0
 8013412:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	2b00      	cmp	r3, #0
 8013418:	d106      	bne.n	8013428 <tcp_keepalive+0x20>
 801341a:	4b18      	ldr	r3, [pc, #96]	; (801347c <tcp_keepalive+0x74>)
 801341c:	f640 0224 	movw	r2, #2084	; 0x824
 8013420:	4917      	ldr	r1, [pc, #92]	; (8013480 <tcp_keepalive+0x78>)
 8013422:	4818      	ldr	r0, [pc, #96]	; (8013484 <tcp_keepalive+0x7c>)
 8013424:	f005 fbb8 	bl	8018b98 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8013428:	7dfb      	ldrb	r3, [r7, #23]
 801342a:	b29c      	uxth	r4, r3
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013430:	3b01      	subs	r3, #1
 8013432:	4618      	mov	r0, r3
 8013434:	f7f8 f85f 	bl	800b4f6 <lwip_htonl>
 8013438:	4603      	mov	r3, r0
 801343a:	2200      	movs	r2, #0
 801343c:	4621      	mov	r1, r4
 801343e:	6878      	ldr	r0, [r7, #4]
 8013440:	f7ff fe68 	bl	8013114 <tcp_output_alloc_header>
 8013444:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013446:	693b      	ldr	r3, [r7, #16]
 8013448:	2b00      	cmp	r3, #0
 801344a:	d102      	bne.n	8013452 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801344c:	f04f 33ff 	mov.w	r3, #4294967295
 8013450:	e010      	b.n	8013474 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013452:	7dfb      	ldrb	r3, [r7, #23]
 8013454:	2200      	movs	r2, #0
 8013456:	6939      	ldr	r1, [r7, #16]
 8013458:	6878      	ldr	r0, [r7, #4]
 801345a:	f7ff fe99 	bl	8013190 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801345e:	687a      	ldr	r2, [r7, #4]
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	3304      	adds	r3, #4
 8013464:	6939      	ldr	r1, [r7, #16]
 8013466:	6878      	ldr	r0, [r7, #4]
 8013468:	f7ff fed0 	bl	801320c <tcp_output_control_segment>
 801346c:	4603      	mov	r3, r0
 801346e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013470:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013474:	4618      	mov	r0, r3
 8013476:	371c      	adds	r7, #28
 8013478:	46bd      	mov	sp, r7
 801347a:	bd90      	pop	{r4, r7, pc}
 801347c:	0801c488 	.word	0x0801c488
 8013480:	0801cc64 	.word	0x0801cc64
 8013484:	0801c4dc 	.word	0x0801c4dc

08013488 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8013488:	b590      	push	{r4, r7, lr}
 801348a:	b08b      	sub	sp, #44	; 0x2c
 801348c:	af00      	add	r7, sp, #0
 801348e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013490:	2300      	movs	r3, #0
 8013492:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	2b00      	cmp	r3, #0
 801349a:	d106      	bne.n	80134aa <tcp_zero_window_probe+0x22>
 801349c:	4b4c      	ldr	r3, [pc, #304]	; (80135d0 <tcp_zero_window_probe+0x148>)
 801349e:	f640 024f 	movw	r2, #2127	; 0x84f
 80134a2:	494c      	ldr	r1, [pc, #304]	; (80135d4 <tcp_zero_window_probe+0x14c>)
 80134a4:	484c      	ldr	r0, [pc, #304]	; (80135d8 <tcp_zero_window_probe+0x150>)
 80134a6:	f005 fb77 	bl	8018b98 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80134ae:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80134b0:	6a3b      	ldr	r3, [r7, #32]
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	d101      	bne.n	80134ba <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80134b6:	2300      	movs	r3, #0
 80134b8:	e086      	b.n	80135c8 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80134c0:	2bff      	cmp	r3, #255	; 0xff
 80134c2:	d007      	beq.n	80134d4 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80134ca:	3301      	adds	r3, #1
 80134cc:	b2da      	uxtb	r2, r3
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80134d4:	6a3b      	ldr	r3, [r7, #32]
 80134d6:	68db      	ldr	r3, [r3, #12]
 80134d8:	899b      	ldrh	r3, [r3, #12]
 80134da:	b29b      	uxth	r3, r3
 80134dc:	4618      	mov	r0, r3
 80134de:	f7f7 fff5 	bl	800b4cc <lwip_htons>
 80134e2:	4603      	mov	r3, r0
 80134e4:	b2db      	uxtb	r3, r3
 80134e6:	f003 0301 	and.w	r3, r3, #1
 80134ea:	2b00      	cmp	r3, #0
 80134ec:	d005      	beq.n	80134fa <tcp_zero_window_probe+0x72>
 80134ee:	6a3b      	ldr	r3, [r7, #32]
 80134f0:	891b      	ldrh	r3, [r3, #8]
 80134f2:	2b00      	cmp	r3, #0
 80134f4:	d101      	bne.n	80134fa <tcp_zero_window_probe+0x72>
 80134f6:	2301      	movs	r3, #1
 80134f8:	e000      	b.n	80134fc <tcp_zero_window_probe+0x74>
 80134fa:	2300      	movs	r3, #0
 80134fc:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80134fe:	7ffb      	ldrb	r3, [r7, #31]
 8013500:	2b00      	cmp	r3, #0
 8013502:	bf0c      	ite	eq
 8013504:	2301      	moveq	r3, #1
 8013506:	2300      	movne	r3, #0
 8013508:	b2db      	uxtb	r3, r3
 801350a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801350c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013510:	b299      	uxth	r1, r3
 8013512:	6a3b      	ldr	r3, [r7, #32]
 8013514:	68db      	ldr	r3, [r3, #12]
 8013516:	685b      	ldr	r3, [r3, #4]
 8013518:	8bba      	ldrh	r2, [r7, #28]
 801351a:	6878      	ldr	r0, [r7, #4]
 801351c:	f7ff fdfa 	bl	8013114 <tcp_output_alloc_header>
 8013520:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8013522:	69bb      	ldr	r3, [r7, #24]
 8013524:	2b00      	cmp	r3, #0
 8013526:	d102      	bne.n	801352e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8013528:	f04f 33ff 	mov.w	r3, #4294967295
 801352c:	e04c      	b.n	80135c8 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801352e:	69bb      	ldr	r3, [r7, #24]
 8013530:	685b      	ldr	r3, [r3, #4]
 8013532:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8013534:	7ffb      	ldrb	r3, [r7, #31]
 8013536:	2b00      	cmp	r3, #0
 8013538:	d011      	beq.n	801355e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801353a:	697b      	ldr	r3, [r7, #20]
 801353c:	899b      	ldrh	r3, [r3, #12]
 801353e:	b29b      	uxth	r3, r3
 8013540:	b21b      	sxth	r3, r3
 8013542:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8013546:	b21c      	sxth	r4, r3
 8013548:	2011      	movs	r0, #17
 801354a:	f7f7 ffbf 	bl	800b4cc <lwip_htons>
 801354e:	4603      	mov	r3, r0
 8013550:	b21b      	sxth	r3, r3
 8013552:	4323      	orrs	r3, r4
 8013554:	b21b      	sxth	r3, r3
 8013556:	b29a      	uxth	r2, r3
 8013558:	697b      	ldr	r3, [r7, #20]
 801355a:	819a      	strh	r2, [r3, #12]
 801355c:	e010      	b.n	8013580 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801355e:	69bb      	ldr	r3, [r7, #24]
 8013560:	685b      	ldr	r3, [r3, #4]
 8013562:	3314      	adds	r3, #20
 8013564:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8013566:	6a3b      	ldr	r3, [r7, #32]
 8013568:	6858      	ldr	r0, [r3, #4]
 801356a:	6a3b      	ldr	r3, [r7, #32]
 801356c:	685b      	ldr	r3, [r3, #4]
 801356e:	891a      	ldrh	r2, [r3, #8]
 8013570:	6a3b      	ldr	r3, [r7, #32]
 8013572:	891b      	ldrh	r3, [r3, #8]
 8013574:	1ad3      	subs	r3, r2, r3
 8013576:	b29b      	uxth	r3, r3
 8013578:	2201      	movs	r2, #1
 801357a:	6939      	ldr	r1, [r7, #16]
 801357c:	f7f9 fde0 	bl	800d140 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8013580:	6a3b      	ldr	r3, [r7, #32]
 8013582:	68db      	ldr	r3, [r3, #12]
 8013584:	685b      	ldr	r3, [r3, #4]
 8013586:	4618      	mov	r0, r3
 8013588:	f7f7 ffb5 	bl	800b4f6 <lwip_htonl>
 801358c:	4603      	mov	r3, r0
 801358e:	3301      	adds	r3, #1
 8013590:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013596:	68fb      	ldr	r3, [r7, #12]
 8013598:	1ad3      	subs	r3, r2, r3
 801359a:	2b00      	cmp	r3, #0
 801359c:	da02      	bge.n	80135a4 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	68fa      	ldr	r2, [r7, #12]
 80135a2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80135a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80135a8:	2200      	movs	r2, #0
 80135aa:	69b9      	ldr	r1, [r7, #24]
 80135ac:	6878      	ldr	r0, [r7, #4]
 80135ae:	f7ff fdef 	bl	8013190 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80135b2:	687a      	ldr	r2, [r7, #4]
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	3304      	adds	r3, #4
 80135b8:	69b9      	ldr	r1, [r7, #24]
 80135ba:	6878      	ldr	r0, [r7, #4]
 80135bc:	f7ff fe26 	bl	801320c <tcp_output_control_segment>
 80135c0:	4603      	mov	r3, r0
 80135c2:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80135c4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80135c8:	4618      	mov	r0, r3
 80135ca:	372c      	adds	r7, #44	; 0x2c
 80135cc:	46bd      	mov	sp, r7
 80135ce:	bd90      	pop	{r4, r7, pc}
 80135d0:	0801c488 	.word	0x0801c488
 80135d4:	0801cc80 	.word	0x0801cc80
 80135d8:	0801c4dc 	.word	0x0801c4dc

080135dc <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80135dc:	b580      	push	{r7, lr}
 80135de:	b082      	sub	sp, #8
 80135e0:	af00      	add	r7, sp, #0
 80135e2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80135e4:	f7f9 fe9a 	bl	800d31c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80135e8:	4b0a      	ldr	r3, [pc, #40]	; (8013614 <tcpip_tcp_timer+0x38>)
 80135ea:	681b      	ldr	r3, [r3, #0]
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	d103      	bne.n	80135f8 <tcpip_tcp_timer+0x1c>
 80135f0:	4b09      	ldr	r3, [pc, #36]	; (8013618 <tcpip_tcp_timer+0x3c>)
 80135f2:	681b      	ldr	r3, [r3, #0]
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	d005      	beq.n	8013604 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80135f8:	2200      	movs	r2, #0
 80135fa:	4908      	ldr	r1, [pc, #32]	; (801361c <tcpip_tcp_timer+0x40>)
 80135fc:	20fa      	movs	r0, #250	; 0xfa
 80135fe:	f000 f8f3 	bl	80137e8 <sys_timeout>
 8013602:	e003      	b.n	801360c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8013604:	4b06      	ldr	r3, [pc, #24]	; (8013620 <tcpip_tcp_timer+0x44>)
 8013606:	2200      	movs	r2, #0
 8013608:	601a      	str	r2, [r3, #0]
  }
}
 801360a:	bf00      	nop
 801360c:	bf00      	nop
 801360e:	3708      	adds	r7, #8
 8013610:	46bd      	mov	sp, r7
 8013612:	bd80      	pop	{r7, pc}
 8013614:	20010e7c 	.word	0x20010e7c
 8013618:	20010e80 	.word	0x20010e80
 801361c:	080135dd 	.word	0x080135dd
 8013620:	20010ec8 	.word	0x20010ec8

08013624 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8013624:	b580      	push	{r7, lr}
 8013626:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8013628:	4b0a      	ldr	r3, [pc, #40]	; (8013654 <tcp_timer_needed+0x30>)
 801362a:	681b      	ldr	r3, [r3, #0]
 801362c:	2b00      	cmp	r3, #0
 801362e:	d10f      	bne.n	8013650 <tcp_timer_needed+0x2c>
 8013630:	4b09      	ldr	r3, [pc, #36]	; (8013658 <tcp_timer_needed+0x34>)
 8013632:	681b      	ldr	r3, [r3, #0]
 8013634:	2b00      	cmp	r3, #0
 8013636:	d103      	bne.n	8013640 <tcp_timer_needed+0x1c>
 8013638:	4b08      	ldr	r3, [pc, #32]	; (801365c <tcp_timer_needed+0x38>)
 801363a:	681b      	ldr	r3, [r3, #0]
 801363c:	2b00      	cmp	r3, #0
 801363e:	d007      	beq.n	8013650 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8013640:	4b04      	ldr	r3, [pc, #16]	; (8013654 <tcp_timer_needed+0x30>)
 8013642:	2201      	movs	r2, #1
 8013644:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8013646:	2200      	movs	r2, #0
 8013648:	4905      	ldr	r1, [pc, #20]	; (8013660 <tcp_timer_needed+0x3c>)
 801364a:	20fa      	movs	r0, #250	; 0xfa
 801364c:	f000 f8cc 	bl	80137e8 <sys_timeout>
  }
}
 8013650:	bf00      	nop
 8013652:	bd80      	pop	{r7, pc}
 8013654:	20010ec8 	.word	0x20010ec8
 8013658:	20010e7c 	.word	0x20010e7c
 801365c:	20010e80 	.word	0x20010e80
 8013660:	080135dd 	.word	0x080135dd

08013664 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8013664:	b580      	push	{r7, lr}
 8013666:	b086      	sub	sp, #24
 8013668:	af00      	add	r7, sp, #0
 801366a:	60f8      	str	r0, [r7, #12]
 801366c:	60b9      	str	r1, [r7, #8]
 801366e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8013670:	200a      	movs	r0, #10
 8013672:	f7f8 fc39 	bl	800bee8 <memp_malloc>
 8013676:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8013678:	693b      	ldr	r3, [r7, #16]
 801367a:	2b00      	cmp	r3, #0
 801367c:	d109      	bne.n	8013692 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801367e:	693b      	ldr	r3, [r7, #16]
 8013680:	2b00      	cmp	r3, #0
 8013682:	d151      	bne.n	8013728 <sys_timeout_abs+0xc4>
 8013684:	4b2a      	ldr	r3, [pc, #168]	; (8013730 <sys_timeout_abs+0xcc>)
 8013686:	22be      	movs	r2, #190	; 0xbe
 8013688:	492a      	ldr	r1, [pc, #168]	; (8013734 <sys_timeout_abs+0xd0>)
 801368a:	482b      	ldr	r0, [pc, #172]	; (8013738 <sys_timeout_abs+0xd4>)
 801368c:	f005 fa84 	bl	8018b98 <iprintf>
    return;
 8013690:	e04a      	b.n	8013728 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8013692:	693b      	ldr	r3, [r7, #16]
 8013694:	2200      	movs	r2, #0
 8013696:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8013698:	693b      	ldr	r3, [r7, #16]
 801369a:	68ba      	ldr	r2, [r7, #8]
 801369c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801369e:	693b      	ldr	r3, [r7, #16]
 80136a0:	687a      	ldr	r2, [r7, #4]
 80136a2:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80136a4:	693b      	ldr	r3, [r7, #16]
 80136a6:	68fa      	ldr	r2, [r7, #12]
 80136a8:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80136aa:	4b24      	ldr	r3, [pc, #144]	; (801373c <sys_timeout_abs+0xd8>)
 80136ac:	681b      	ldr	r3, [r3, #0]
 80136ae:	2b00      	cmp	r3, #0
 80136b0:	d103      	bne.n	80136ba <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80136b2:	4a22      	ldr	r2, [pc, #136]	; (801373c <sys_timeout_abs+0xd8>)
 80136b4:	693b      	ldr	r3, [r7, #16]
 80136b6:	6013      	str	r3, [r2, #0]
    return;
 80136b8:	e037      	b.n	801372a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80136ba:	693b      	ldr	r3, [r7, #16]
 80136bc:	685a      	ldr	r2, [r3, #4]
 80136be:	4b1f      	ldr	r3, [pc, #124]	; (801373c <sys_timeout_abs+0xd8>)
 80136c0:	681b      	ldr	r3, [r3, #0]
 80136c2:	685b      	ldr	r3, [r3, #4]
 80136c4:	1ad3      	subs	r3, r2, r3
 80136c6:	0fdb      	lsrs	r3, r3, #31
 80136c8:	f003 0301 	and.w	r3, r3, #1
 80136cc:	b2db      	uxtb	r3, r3
 80136ce:	2b00      	cmp	r3, #0
 80136d0:	d007      	beq.n	80136e2 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80136d2:	4b1a      	ldr	r3, [pc, #104]	; (801373c <sys_timeout_abs+0xd8>)
 80136d4:	681a      	ldr	r2, [r3, #0]
 80136d6:	693b      	ldr	r3, [r7, #16]
 80136d8:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80136da:	4a18      	ldr	r2, [pc, #96]	; (801373c <sys_timeout_abs+0xd8>)
 80136dc:	693b      	ldr	r3, [r7, #16]
 80136de:	6013      	str	r3, [r2, #0]
 80136e0:	e023      	b.n	801372a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80136e2:	4b16      	ldr	r3, [pc, #88]	; (801373c <sys_timeout_abs+0xd8>)
 80136e4:	681b      	ldr	r3, [r3, #0]
 80136e6:	617b      	str	r3, [r7, #20]
 80136e8:	e01a      	b.n	8013720 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80136ea:	697b      	ldr	r3, [r7, #20]
 80136ec:	681b      	ldr	r3, [r3, #0]
 80136ee:	2b00      	cmp	r3, #0
 80136f0:	d00b      	beq.n	801370a <sys_timeout_abs+0xa6>
 80136f2:	693b      	ldr	r3, [r7, #16]
 80136f4:	685a      	ldr	r2, [r3, #4]
 80136f6:	697b      	ldr	r3, [r7, #20]
 80136f8:	681b      	ldr	r3, [r3, #0]
 80136fa:	685b      	ldr	r3, [r3, #4]
 80136fc:	1ad3      	subs	r3, r2, r3
 80136fe:	0fdb      	lsrs	r3, r3, #31
 8013700:	f003 0301 	and.w	r3, r3, #1
 8013704:	b2db      	uxtb	r3, r3
 8013706:	2b00      	cmp	r3, #0
 8013708:	d007      	beq.n	801371a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801370a:	697b      	ldr	r3, [r7, #20]
 801370c:	681a      	ldr	r2, [r3, #0]
 801370e:	693b      	ldr	r3, [r7, #16]
 8013710:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8013712:	697b      	ldr	r3, [r7, #20]
 8013714:	693a      	ldr	r2, [r7, #16]
 8013716:	601a      	str	r2, [r3, #0]
        break;
 8013718:	e007      	b.n	801372a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801371a:	697b      	ldr	r3, [r7, #20]
 801371c:	681b      	ldr	r3, [r3, #0]
 801371e:	617b      	str	r3, [r7, #20]
 8013720:	697b      	ldr	r3, [r7, #20]
 8013722:	2b00      	cmp	r3, #0
 8013724:	d1e1      	bne.n	80136ea <sys_timeout_abs+0x86>
 8013726:	e000      	b.n	801372a <sys_timeout_abs+0xc6>
    return;
 8013728:	bf00      	nop
      }
    }
  }
}
 801372a:	3718      	adds	r7, #24
 801372c:	46bd      	mov	sp, r7
 801372e:	bd80      	pop	{r7, pc}
 8013730:	0801cca4 	.word	0x0801cca4
 8013734:	0801ccd8 	.word	0x0801ccd8
 8013738:	0801cd18 	.word	0x0801cd18
 801373c:	20010ec0 	.word	0x20010ec0

08013740 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8013740:	b580      	push	{r7, lr}
 8013742:	b086      	sub	sp, #24
 8013744:	af00      	add	r7, sp, #0
 8013746:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801374c:	697b      	ldr	r3, [r7, #20]
 801374e:	685b      	ldr	r3, [r3, #4]
 8013750:	4798      	blx	r3

  now = sys_now();
 8013752:	f7f1 f9e3 	bl	8004b1c <sys_now>
 8013756:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8013758:	697b      	ldr	r3, [r7, #20]
 801375a:	681a      	ldr	r2, [r3, #0]
 801375c:	4b0f      	ldr	r3, [pc, #60]	; (801379c <lwip_cyclic_timer+0x5c>)
 801375e:	681b      	ldr	r3, [r3, #0]
 8013760:	4413      	add	r3, r2
 8013762:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8013764:	68fa      	ldr	r2, [r7, #12]
 8013766:	693b      	ldr	r3, [r7, #16]
 8013768:	1ad3      	subs	r3, r2, r3
 801376a:	0fdb      	lsrs	r3, r3, #31
 801376c:	f003 0301 	and.w	r3, r3, #1
 8013770:	b2db      	uxtb	r3, r3
 8013772:	2b00      	cmp	r3, #0
 8013774:	d009      	beq.n	801378a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8013776:	697b      	ldr	r3, [r7, #20]
 8013778:	681a      	ldr	r2, [r3, #0]
 801377a:	693b      	ldr	r3, [r7, #16]
 801377c:	4413      	add	r3, r2
 801377e:	687a      	ldr	r2, [r7, #4]
 8013780:	4907      	ldr	r1, [pc, #28]	; (80137a0 <lwip_cyclic_timer+0x60>)
 8013782:	4618      	mov	r0, r3
 8013784:	f7ff ff6e 	bl	8013664 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8013788:	e004      	b.n	8013794 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801378a:	687a      	ldr	r2, [r7, #4]
 801378c:	4904      	ldr	r1, [pc, #16]	; (80137a0 <lwip_cyclic_timer+0x60>)
 801378e:	68f8      	ldr	r0, [r7, #12]
 8013790:	f7ff ff68 	bl	8013664 <sys_timeout_abs>
}
 8013794:	bf00      	nop
 8013796:	3718      	adds	r7, #24
 8013798:	46bd      	mov	sp, r7
 801379a:	bd80      	pop	{r7, pc}
 801379c:	20010ec4 	.word	0x20010ec4
 80137a0:	08013741 	.word	0x08013741

080137a4 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80137a4:	b580      	push	{r7, lr}
 80137a6:	b082      	sub	sp, #8
 80137a8:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80137aa:	2301      	movs	r3, #1
 80137ac:	607b      	str	r3, [r7, #4]
 80137ae:	e00e      	b.n	80137ce <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80137b0:	4a0b      	ldr	r2, [pc, #44]	; (80137e0 <sys_timeouts_init+0x3c>)
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	00db      	lsls	r3, r3, #3
 80137bc:	4a08      	ldr	r2, [pc, #32]	; (80137e0 <sys_timeouts_init+0x3c>)
 80137be:	4413      	add	r3, r2
 80137c0:	461a      	mov	r2, r3
 80137c2:	4908      	ldr	r1, [pc, #32]	; (80137e4 <sys_timeouts_init+0x40>)
 80137c4:	f000 f810 	bl	80137e8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	3301      	adds	r3, #1
 80137cc:	607b      	str	r3, [r7, #4]
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	2b04      	cmp	r3, #4
 80137d2:	d9ed      	bls.n	80137b0 <sys_timeouts_init+0xc>
  }
}
 80137d4:	bf00      	nop
 80137d6:	bf00      	nop
 80137d8:	3708      	adds	r7, #8
 80137da:	46bd      	mov	sp, r7
 80137dc:	bd80      	pop	{r7, pc}
 80137de:	bf00      	nop
 80137e0:	08027dac 	.word	0x08027dac
 80137e4:	08013741 	.word	0x08013741

080137e8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80137e8:	b580      	push	{r7, lr}
 80137ea:	b086      	sub	sp, #24
 80137ec:	af00      	add	r7, sp, #0
 80137ee:	60f8      	str	r0, [r7, #12]
 80137f0:	60b9      	str	r1, [r7, #8]
 80137f2:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80137f4:	68fb      	ldr	r3, [r7, #12]
 80137f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80137fa:	d306      	bcc.n	801380a <sys_timeout+0x22>
 80137fc:	4b0a      	ldr	r3, [pc, #40]	; (8013828 <sys_timeout+0x40>)
 80137fe:	f240 1229 	movw	r2, #297	; 0x129
 8013802:	490a      	ldr	r1, [pc, #40]	; (801382c <sys_timeout+0x44>)
 8013804:	480a      	ldr	r0, [pc, #40]	; (8013830 <sys_timeout+0x48>)
 8013806:	f005 f9c7 	bl	8018b98 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801380a:	f7f1 f987 	bl	8004b1c <sys_now>
 801380e:	4602      	mov	r2, r0
 8013810:	68fb      	ldr	r3, [r7, #12]
 8013812:	4413      	add	r3, r2
 8013814:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8013816:	687a      	ldr	r2, [r7, #4]
 8013818:	68b9      	ldr	r1, [r7, #8]
 801381a:	6978      	ldr	r0, [r7, #20]
 801381c:	f7ff ff22 	bl	8013664 <sys_timeout_abs>
#endif
}
 8013820:	bf00      	nop
 8013822:	3718      	adds	r7, #24
 8013824:	46bd      	mov	sp, r7
 8013826:	bd80      	pop	{r7, pc}
 8013828:	0801cca4 	.word	0x0801cca4
 801382c:	0801cd40 	.word	0x0801cd40
 8013830:	0801cd18 	.word	0x0801cd18

08013834 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8013834:	b580      	push	{r7, lr}
 8013836:	b084      	sub	sp, #16
 8013838:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801383a:	f7f1 f96f 	bl	8004b1c <sys_now>
 801383e:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8013840:	4b17      	ldr	r3, [pc, #92]	; (80138a0 <sys_check_timeouts+0x6c>)
 8013842:	681b      	ldr	r3, [r3, #0]
 8013844:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8013846:	68bb      	ldr	r3, [r7, #8]
 8013848:	2b00      	cmp	r3, #0
 801384a:	d022      	beq.n	8013892 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801384c:	68bb      	ldr	r3, [r7, #8]
 801384e:	685b      	ldr	r3, [r3, #4]
 8013850:	68fa      	ldr	r2, [r7, #12]
 8013852:	1ad3      	subs	r3, r2, r3
 8013854:	0fdb      	lsrs	r3, r3, #31
 8013856:	f003 0301 	and.w	r3, r3, #1
 801385a:	b2db      	uxtb	r3, r3
 801385c:	2b00      	cmp	r3, #0
 801385e:	d11a      	bne.n	8013896 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8013860:	68bb      	ldr	r3, [r7, #8]
 8013862:	681b      	ldr	r3, [r3, #0]
 8013864:	4a0e      	ldr	r2, [pc, #56]	; (80138a0 <sys_check_timeouts+0x6c>)
 8013866:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8013868:	68bb      	ldr	r3, [r7, #8]
 801386a:	689b      	ldr	r3, [r3, #8]
 801386c:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801386e:	68bb      	ldr	r3, [r7, #8]
 8013870:	68db      	ldr	r3, [r3, #12]
 8013872:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8013874:	68bb      	ldr	r3, [r7, #8]
 8013876:	685b      	ldr	r3, [r3, #4]
 8013878:	4a0a      	ldr	r2, [pc, #40]	; (80138a4 <sys_check_timeouts+0x70>)
 801387a:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801387c:	68b9      	ldr	r1, [r7, #8]
 801387e:	200a      	movs	r0, #10
 8013880:	f7f8 fba8 	bl	800bfd4 <memp_free>
    if (handler != NULL) {
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	2b00      	cmp	r3, #0
 8013888:	d0da      	beq.n	8013840 <sys_check_timeouts+0xc>
      handler(arg);
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	6838      	ldr	r0, [r7, #0]
 801388e:	4798      	blx	r3
  do {
 8013890:	e7d6      	b.n	8013840 <sys_check_timeouts+0xc>
      return;
 8013892:	bf00      	nop
 8013894:	e000      	b.n	8013898 <sys_check_timeouts+0x64>
      return;
 8013896:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8013898:	3710      	adds	r7, #16
 801389a:	46bd      	mov	sp, r7
 801389c:	bd80      	pop	{r7, pc}
 801389e:	bf00      	nop
 80138a0:	20010ec0 	.word	0x20010ec0
 80138a4:	20010ec4 	.word	0x20010ec4

080138a8 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 80138a8:	b580      	push	{r7, lr}
 80138aa:	b082      	sub	sp, #8
 80138ac:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 80138ae:	4b16      	ldr	r3, [pc, #88]	; (8013908 <sys_timeouts_sleeptime+0x60>)
 80138b0:	681b      	ldr	r3, [r3, #0]
 80138b2:	2b00      	cmp	r3, #0
 80138b4:	d102      	bne.n	80138bc <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 80138b6:	f04f 33ff 	mov.w	r3, #4294967295
 80138ba:	e020      	b.n	80138fe <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 80138bc:	f7f1 f92e 	bl	8004b1c <sys_now>
 80138c0:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 80138c2:	4b11      	ldr	r3, [pc, #68]	; (8013908 <sys_timeouts_sleeptime+0x60>)
 80138c4:	681b      	ldr	r3, [r3, #0]
 80138c6:	685a      	ldr	r2, [r3, #4]
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	1ad3      	subs	r3, r2, r3
 80138cc:	0fdb      	lsrs	r3, r3, #31
 80138ce:	f003 0301 	and.w	r3, r3, #1
 80138d2:	b2db      	uxtb	r3, r3
 80138d4:	2b00      	cmp	r3, #0
 80138d6:	d001      	beq.n	80138dc <sys_timeouts_sleeptime+0x34>
    return 0;
 80138d8:	2300      	movs	r3, #0
 80138da:	e010      	b.n	80138fe <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 80138dc:	4b0a      	ldr	r3, [pc, #40]	; (8013908 <sys_timeouts_sleeptime+0x60>)
 80138de:	681b      	ldr	r3, [r3, #0]
 80138e0:	685a      	ldr	r2, [r3, #4]
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	1ad3      	subs	r3, r2, r3
 80138e6:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 80138e8:	683b      	ldr	r3, [r7, #0]
 80138ea:	2b00      	cmp	r3, #0
 80138ec:	da06      	bge.n	80138fc <sys_timeouts_sleeptime+0x54>
 80138ee:	4b07      	ldr	r3, [pc, #28]	; (801390c <sys_timeouts_sleeptime+0x64>)
 80138f0:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80138f4:	4906      	ldr	r1, [pc, #24]	; (8013910 <sys_timeouts_sleeptime+0x68>)
 80138f6:	4807      	ldr	r0, [pc, #28]	; (8013914 <sys_timeouts_sleeptime+0x6c>)
 80138f8:	f005 f94e 	bl	8018b98 <iprintf>
    return ret;
 80138fc:	683b      	ldr	r3, [r7, #0]
  }
}
 80138fe:	4618      	mov	r0, r3
 8013900:	3708      	adds	r7, #8
 8013902:	46bd      	mov	sp, r7
 8013904:	bd80      	pop	{r7, pc}
 8013906:	bf00      	nop
 8013908:	20010ec0 	.word	0x20010ec0
 801390c:	0801cca4 	.word	0x0801cca4
 8013910:	0801cd78 	.word	0x0801cd78
 8013914:	0801cd18 	.word	0x0801cd18

08013918 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8013918:	b580      	push	{r7, lr}
 801391a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801391c:	f005 f84e 	bl	80189bc <rand>
 8013920:	4603      	mov	r3, r0
 8013922:	b29b      	uxth	r3, r3
 8013924:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8013928:	b29b      	uxth	r3, r3
 801392a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801392e:	b29a      	uxth	r2, r3
 8013930:	4b01      	ldr	r3, [pc, #4]	; (8013938 <udp_init+0x20>)
 8013932:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8013934:	bf00      	nop
 8013936:	bd80      	pop	{r7, pc}
 8013938:	2000002c 	.word	0x2000002c

0801393c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801393c:	b480      	push	{r7}
 801393e:	b083      	sub	sp, #12
 8013940:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8013942:	2300      	movs	r3, #0
 8013944:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8013946:	4b17      	ldr	r3, [pc, #92]	; (80139a4 <udp_new_port+0x68>)
 8013948:	881b      	ldrh	r3, [r3, #0]
 801394a:	1c5a      	adds	r2, r3, #1
 801394c:	b291      	uxth	r1, r2
 801394e:	4a15      	ldr	r2, [pc, #84]	; (80139a4 <udp_new_port+0x68>)
 8013950:	8011      	strh	r1, [r2, #0]
 8013952:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013956:	4293      	cmp	r3, r2
 8013958:	d103      	bne.n	8013962 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801395a:	4b12      	ldr	r3, [pc, #72]	; (80139a4 <udp_new_port+0x68>)
 801395c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8013960:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013962:	4b11      	ldr	r3, [pc, #68]	; (80139a8 <udp_new_port+0x6c>)
 8013964:	681b      	ldr	r3, [r3, #0]
 8013966:	603b      	str	r3, [r7, #0]
 8013968:	e011      	b.n	801398e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801396a:	683b      	ldr	r3, [r7, #0]
 801396c:	8a5a      	ldrh	r2, [r3, #18]
 801396e:	4b0d      	ldr	r3, [pc, #52]	; (80139a4 <udp_new_port+0x68>)
 8013970:	881b      	ldrh	r3, [r3, #0]
 8013972:	429a      	cmp	r2, r3
 8013974:	d108      	bne.n	8013988 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8013976:	88fb      	ldrh	r3, [r7, #6]
 8013978:	3301      	adds	r3, #1
 801397a:	80fb      	strh	r3, [r7, #6]
 801397c:	88fb      	ldrh	r3, [r7, #6]
 801397e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8013982:	d3e0      	bcc.n	8013946 <udp_new_port+0xa>
        return 0;
 8013984:	2300      	movs	r3, #0
 8013986:	e007      	b.n	8013998 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013988:	683b      	ldr	r3, [r7, #0]
 801398a:	68db      	ldr	r3, [r3, #12]
 801398c:	603b      	str	r3, [r7, #0]
 801398e:	683b      	ldr	r3, [r7, #0]
 8013990:	2b00      	cmp	r3, #0
 8013992:	d1ea      	bne.n	801396a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8013994:	4b03      	ldr	r3, [pc, #12]	; (80139a4 <udp_new_port+0x68>)
 8013996:	881b      	ldrh	r3, [r3, #0]
}
 8013998:	4618      	mov	r0, r3
 801399a:	370c      	adds	r7, #12
 801399c:	46bd      	mov	sp, r7
 801399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139a2:	4770      	bx	lr
 80139a4:	2000002c 	.word	0x2000002c
 80139a8:	20010ecc 	.word	0x20010ecc

080139ac <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80139ac:	b580      	push	{r7, lr}
 80139ae:	b084      	sub	sp, #16
 80139b0:	af00      	add	r7, sp, #0
 80139b2:	60f8      	str	r0, [r7, #12]
 80139b4:	60b9      	str	r1, [r7, #8]
 80139b6:	4613      	mov	r3, r2
 80139b8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80139ba:	68fb      	ldr	r3, [r7, #12]
 80139bc:	2b00      	cmp	r3, #0
 80139be:	d105      	bne.n	80139cc <udp_input_local_match+0x20>
 80139c0:	4b27      	ldr	r3, [pc, #156]	; (8013a60 <udp_input_local_match+0xb4>)
 80139c2:	2287      	movs	r2, #135	; 0x87
 80139c4:	4927      	ldr	r1, [pc, #156]	; (8013a64 <udp_input_local_match+0xb8>)
 80139c6:	4828      	ldr	r0, [pc, #160]	; (8013a68 <udp_input_local_match+0xbc>)
 80139c8:	f005 f8e6 	bl	8018b98 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80139cc:	68bb      	ldr	r3, [r7, #8]
 80139ce:	2b00      	cmp	r3, #0
 80139d0:	d105      	bne.n	80139de <udp_input_local_match+0x32>
 80139d2:	4b23      	ldr	r3, [pc, #140]	; (8013a60 <udp_input_local_match+0xb4>)
 80139d4:	2288      	movs	r2, #136	; 0x88
 80139d6:	4925      	ldr	r1, [pc, #148]	; (8013a6c <udp_input_local_match+0xc0>)
 80139d8:	4823      	ldr	r0, [pc, #140]	; (8013a68 <udp_input_local_match+0xbc>)
 80139da:	f005 f8dd 	bl	8018b98 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80139de:	68fb      	ldr	r3, [r7, #12]
 80139e0:	7a1b      	ldrb	r3, [r3, #8]
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	d00b      	beq.n	80139fe <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80139e6:	68fb      	ldr	r3, [r7, #12]
 80139e8:	7a1a      	ldrb	r2, [r3, #8]
 80139ea:	4b21      	ldr	r3, [pc, #132]	; (8013a70 <udp_input_local_match+0xc4>)
 80139ec:	685b      	ldr	r3, [r3, #4]
 80139ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80139f2:	3301      	adds	r3, #1
 80139f4:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80139f6:	429a      	cmp	r2, r3
 80139f8:	d001      	beq.n	80139fe <udp_input_local_match+0x52>
    return 0;
 80139fa:	2300      	movs	r3, #0
 80139fc:	e02b      	b.n	8013a56 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80139fe:	79fb      	ldrb	r3, [r7, #7]
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	d018      	beq.n	8013a36 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013a04:	68fb      	ldr	r3, [r7, #12]
 8013a06:	2b00      	cmp	r3, #0
 8013a08:	d013      	beq.n	8013a32 <udp_input_local_match+0x86>
 8013a0a:	68fb      	ldr	r3, [r7, #12]
 8013a0c:	681b      	ldr	r3, [r3, #0]
 8013a0e:	2b00      	cmp	r3, #0
 8013a10:	d00f      	beq.n	8013a32 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013a12:	4b17      	ldr	r3, [pc, #92]	; (8013a70 <udp_input_local_match+0xc4>)
 8013a14:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a1a:	d00a      	beq.n	8013a32 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8013a1c:	68fb      	ldr	r3, [r7, #12]
 8013a1e:	681a      	ldr	r2, [r3, #0]
 8013a20:	4b13      	ldr	r3, [pc, #76]	; (8013a70 <udp_input_local_match+0xc4>)
 8013a22:	695b      	ldr	r3, [r3, #20]
 8013a24:	405a      	eors	r2, r3
 8013a26:	68bb      	ldr	r3, [r7, #8]
 8013a28:	3308      	adds	r3, #8
 8013a2a:	681b      	ldr	r3, [r3, #0]
 8013a2c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013a2e:	2b00      	cmp	r3, #0
 8013a30:	d110      	bne.n	8013a54 <udp_input_local_match+0xa8>
          return 1;
 8013a32:	2301      	movs	r3, #1
 8013a34:	e00f      	b.n	8013a56 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013a36:	68fb      	ldr	r3, [r7, #12]
 8013a38:	2b00      	cmp	r3, #0
 8013a3a:	d009      	beq.n	8013a50 <udp_input_local_match+0xa4>
 8013a3c:	68fb      	ldr	r3, [r7, #12]
 8013a3e:	681b      	ldr	r3, [r3, #0]
 8013a40:	2b00      	cmp	r3, #0
 8013a42:	d005      	beq.n	8013a50 <udp_input_local_match+0xa4>
 8013a44:	68fb      	ldr	r3, [r7, #12]
 8013a46:	681a      	ldr	r2, [r3, #0]
 8013a48:	4b09      	ldr	r3, [pc, #36]	; (8013a70 <udp_input_local_match+0xc4>)
 8013a4a:	695b      	ldr	r3, [r3, #20]
 8013a4c:	429a      	cmp	r2, r3
 8013a4e:	d101      	bne.n	8013a54 <udp_input_local_match+0xa8>
        return 1;
 8013a50:	2301      	movs	r3, #1
 8013a52:	e000      	b.n	8013a56 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8013a54:	2300      	movs	r3, #0
}
 8013a56:	4618      	mov	r0, r3
 8013a58:	3710      	adds	r7, #16
 8013a5a:	46bd      	mov	sp, r7
 8013a5c:	bd80      	pop	{r7, pc}
 8013a5e:	bf00      	nop
 8013a60:	0801cd8c 	.word	0x0801cd8c
 8013a64:	0801cdbc 	.word	0x0801cdbc
 8013a68:	0801cde0 	.word	0x0801cde0
 8013a6c:	0801ce08 	.word	0x0801ce08
 8013a70:	2000d6fc 	.word	0x2000d6fc

08013a74 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8013a74:	b590      	push	{r4, r7, lr}
 8013a76:	b08d      	sub	sp, #52	; 0x34
 8013a78:	af02      	add	r7, sp, #8
 8013a7a:	6078      	str	r0, [r7, #4]
 8013a7c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8013a7e:	2300      	movs	r3, #0
 8013a80:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	2b00      	cmp	r3, #0
 8013a86:	d105      	bne.n	8013a94 <udp_input+0x20>
 8013a88:	4b7c      	ldr	r3, [pc, #496]	; (8013c7c <udp_input+0x208>)
 8013a8a:	22cf      	movs	r2, #207	; 0xcf
 8013a8c:	497c      	ldr	r1, [pc, #496]	; (8013c80 <udp_input+0x20c>)
 8013a8e:	487d      	ldr	r0, [pc, #500]	; (8013c84 <udp_input+0x210>)
 8013a90:	f005 f882 	bl	8018b98 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8013a94:	683b      	ldr	r3, [r7, #0]
 8013a96:	2b00      	cmp	r3, #0
 8013a98:	d105      	bne.n	8013aa6 <udp_input+0x32>
 8013a9a:	4b78      	ldr	r3, [pc, #480]	; (8013c7c <udp_input+0x208>)
 8013a9c:	22d0      	movs	r2, #208	; 0xd0
 8013a9e:	497a      	ldr	r1, [pc, #488]	; (8013c88 <udp_input+0x214>)
 8013aa0:	4878      	ldr	r0, [pc, #480]	; (8013c84 <udp_input+0x210>)
 8013aa2:	f005 f879 	bl	8018b98 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	895b      	ldrh	r3, [r3, #10]
 8013aaa:	2b07      	cmp	r3, #7
 8013aac:	d803      	bhi.n	8013ab6 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8013aae:	6878      	ldr	r0, [r7, #4]
 8013ab0:	f7f9 f940 	bl	800cd34 <pbuf_free>
    goto end;
 8013ab4:	e0de      	b.n	8013c74 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	685b      	ldr	r3, [r3, #4]
 8013aba:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8013abc:	4b73      	ldr	r3, [pc, #460]	; (8013c8c <udp_input+0x218>)
 8013abe:	695b      	ldr	r3, [r3, #20]
 8013ac0:	4a72      	ldr	r2, [pc, #456]	; (8013c8c <udp_input+0x218>)
 8013ac2:	6812      	ldr	r2, [r2, #0]
 8013ac4:	4611      	mov	r1, r2
 8013ac6:	4618      	mov	r0, r3
 8013ac8:	f003 fe12 	bl	80176f0 <ip4_addr_isbroadcast_u32>
 8013acc:	4603      	mov	r3, r0
 8013ace:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8013ad0:	697b      	ldr	r3, [r7, #20]
 8013ad2:	881b      	ldrh	r3, [r3, #0]
 8013ad4:	b29b      	uxth	r3, r3
 8013ad6:	4618      	mov	r0, r3
 8013ad8:	f7f7 fcf8 	bl	800b4cc <lwip_htons>
 8013adc:	4603      	mov	r3, r0
 8013ade:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8013ae0:	697b      	ldr	r3, [r7, #20]
 8013ae2:	885b      	ldrh	r3, [r3, #2]
 8013ae4:	b29b      	uxth	r3, r3
 8013ae6:	4618      	mov	r0, r3
 8013ae8:	f7f7 fcf0 	bl	800b4cc <lwip_htons>
 8013aec:	4603      	mov	r3, r0
 8013aee:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8013af0:	2300      	movs	r3, #0
 8013af2:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8013af4:	2300      	movs	r3, #0
 8013af6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8013af8:	2300      	movs	r3, #0
 8013afa:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013afc:	4b64      	ldr	r3, [pc, #400]	; (8013c90 <udp_input+0x21c>)
 8013afe:	681b      	ldr	r3, [r3, #0]
 8013b00:	627b      	str	r3, [r7, #36]	; 0x24
 8013b02:	e054      	b.n	8013bae <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8013b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b06:	8a5b      	ldrh	r3, [r3, #18]
 8013b08:	89fa      	ldrh	r2, [r7, #14]
 8013b0a:	429a      	cmp	r2, r3
 8013b0c:	d14a      	bne.n	8013ba4 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8013b0e:	7cfb      	ldrb	r3, [r7, #19]
 8013b10:	461a      	mov	r2, r3
 8013b12:	6839      	ldr	r1, [r7, #0]
 8013b14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013b16:	f7ff ff49 	bl	80139ac <udp_input_local_match>
 8013b1a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8013b1c:	2b00      	cmp	r3, #0
 8013b1e:	d041      	beq.n	8013ba4 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8013b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b22:	7c1b      	ldrb	r3, [r3, #16]
 8013b24:	f003 0304 	and.w	r3, r3, #4
 8013b28:	2b00      	cmp	r3, #0
 8013b2a:	d11d      	bne.n	8013b68 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8013b2c:	69fb      	ldr	r3, [r7, #28]
 8013b2e:	2b00      	cmp	r3, #0
 8013b30:	d102      	bne.n	8013b38 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8013b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b34:	61fb      	str	r3, [r7, #28]
 8013b36:	e017      	b.n	8013b68 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8013b38:	7cfb      	ldrb	r3, [r7, #19]
 8013b3a:	2b00      	cmp	r3, #0
 8013b3c:	d014      	beq.n	8013b68 <udp_input+0xf4>
 8013b3e:	4b53      	ldr	r3, [pc, #332]	; (8013c8c <udp_input+0x218>)
 8013b40:	695b      	ldr	r3, [r3, #20]
 8013b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b46:	d10f      	bne.n	8013b68 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8013b48:	69fb      	ldr	r3, [r7, #28]
 8013b4a:	681a      	ldr	r2, [r3, #0]
 8013b4c:	683b      	ldr	r3, [r7, #0]
 8013b4e:	3304      	adds	r3, #4
 8013b50:	681b      	ldr	r3, [r3, #0]
 8013b52:	429a      	cmp	r2, r3
 8013b54:	d008      	beq.n	8013b68 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8013b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b58:	681a      	ldr	r2, [r3, #0]
 8013b5a:	683b      	ldr	r3, [r7, #0]
 8013b5c:	3304      	adds	r3, #4
 8013b5e:	681b      	ldr	r3, [r3, #0]
 8013b60:	429a      	cmp	r2, r3
 8013b62:	d101      	bne.n	8013b68 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8013b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b66:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8013b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b6a:	8a9b      	ldrh	r3, [r3, #20]
 8013b6c:	8a3a      	ldrh	r2, [r7, #16]
 8013b6e:	429a      	cmp	r2, r3
 8013b70:	d118      	bne.n	8013ba4 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b74:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	d005      	beq.n	8013b86 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8013b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b7c:	685a      	ldr	r2, [r3, #4]
 8013b7e:	4b43      	ldr	r3, [pc, #268]	; (8013c8c <udp_input+0x218>)
 8013b80:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013b82:	429a      	cmp	r2, r3
 8013b84:	d10e      	bne.n	8013ba4 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8013b86:	6a3b      	ldr	r3, [r7, #32]
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	d014      	beq.n	8013bb6 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8013b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b8e:	68da      	ldr	r2, [r3, #12]
 8013b90:	6a3b      	ldr	r3, [r7, #32]
 8013b92:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8013b94:	4b3e      	ldr	r3, [pc, #248]	; (8013c90 <udp_input+0x21c>)
 8013b96:	681a      	ldr	r2, [r3, #0]
 8013b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b9a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8013b9c:	4a3c      	ldr	r2, [pc, #240]	; (8013c90 <udp_input+0x21c>)
 8013b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ba0:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8013ba2:	e008      	b.n	8013bb6 <udp_input+0x142>
      }
    }

    prev = pcb;
 8013ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ba6:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013baa:	68db      	ldr	r3, [r3, #12]
 8013bac:	627b      	str	r3, [r7, #36]	; 0x24
 8013bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bb0:	2b00      	cmp	r3, #0
 8013bb2:	d1a7      	bne.n	8013b04 <udp_input+0x90>
 8013bb4:	e000      	b.n	8013bb8 <udp_input+0x144>
        break;
 8013bb6:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8013bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bba:	2b00      	cmp	r3, #0
 8013bbc:	d101      	bne.n	8013bc2 <udp_input+0x14e>
    pcb = uncon_pcb;
 8013bbe:	69fb      	ldr	r3, [r7, #28]
 8013bc0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8013bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bc4:	2b00      	cmp	r3, #0
 8013bc6:	d002      	beq.n	8013bce <udp_input+0x15a>
    for_us = 1;
 8013bc8:	2301      	movs	r3, #1
 8013bca:	76fb      	strb	r3, [r7, #27]
 8013bcc:	e00a      	b.n	8013be4 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8013bce:	683b      	ldr	r3, [r7, #0]
 8013bd0:	3304      	adds	r3, #4
 8013bd2:	681a      	ldr	r2, [r3, #0]
 8013bd4:	4b2d      	ldr	r3, [pc, #180]	; (8013c8c <udp_input+0x218>)
 8013bd6:	695b      	ldr	r3, [r3, #20]
 8013bd8:	429a      	cmp	r2, r3
 8013bda:	bf0c      	ite	eq
 8013bdc:	2301      	moveq	r3, #1
 8013bde:	2300      	movne	r3, #0
 8013be0:	b2db      	uxtb	r3, r3
 8013be2:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8013be4:	7efb      	ldrb	r3, [r7, #27]
 8013be6:	2b00      	cmp	r3, #0
 8013be8:	d041      	beq.n	8013c6e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8013bea:	2108      	movs	r1, #8
 8013bec:	6878      	ldr	r0, [r7, #4]
 8013bee:	f7f9 f81b 	bl	800cc28 <pbuf_remove_header>
 8013bf2:	4603      	mov	r3, r0
 8013bf4:	2b00      	cmp	r3, #0
 8013bf6:	d00a      	beq.n	8013c0e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8013bf8:	4b20      	ldr	r3, [pc, #128]	; (8013c7c <udp_input+0x208>)
 8013bfa:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8013bfe:	4925      	ldr	r1, [pc, #148]	; (8013c94 <udp_input+0x220>)
 8013c00:	4820      	ldr	r0, [pc, #128]	; (8013c84 <udp_input+0x210>)
 8013c02:	f004 ffc9 	bl	8018b98 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8013c06:	6878      	ldr	r0, [r7, #4]
 8013c08:	f7f9 f894 	bl	800cd34 <pbuf_free>
      goto end;
 8013c0c:	e032      	b.n	8013c74 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8013c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c10:	2b00      	cmp	r3, #0
 8013c12:	d012      	beq.n	8013c3a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8013c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c16:	699b      	ldr	r3, [r3, #24]
 8013c18:	2b00      	cmp	r3, #0
 8013c1a:	d00a      	beq.n	8013c32 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8013c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c1e:	699c      	ldr	r4, [r3, #24]
 8013c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c22:	69d8      	ldr	r0, [r3, #28]
 8013c24:	8a3b      	ldrh	r3, [r7, #16]
 8013c26:	9300      	str	r3, [sp, #0]
 8013c28:	4b1b      	ldr	r3, [pc, #108]	; (8013c98 <udp_input+0x224>)
 8013c2a:	687a      	ldr	r2, [r7, #4]
 8013c2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013c2e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8013c30:	e021      	b.n	8013c76 <udp_input+0x202>
        pbuf_free(p);
 8013c32:	6878      	ldr	r0, [r7, #4]
 8013c34:	f7f9 f87e 	bl	800cd34 <pbuf_free>
        goto end;
 8013c38:	e01c      	b.n	8013c74 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8013c3a:	7cfb      	ldrb	r3, [r7, #19]
 8013c3c:	2b00      	cmp	r3, #0
 8013c3e:	d112      	bne.n	8013c66 <udp_input+0x1f2>
 8013c40:	4b12      	ldr	r3, [pc, #72]	; (8013c8c <udp_input+0x218>)
 8013c42:	695b      	ldr	r3, [r3, #20]
 8013c44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013c48:	2be0      	cmp	r3, #224	; 0xe0
 8013c4a:	d00c      	beq.n	8013c66 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8013c4c:	4b0f      	ldr	r3, [pc, #60]	; (8013c8c <udp_input+0x218>)
 8013c4e:	899b      	ldrh	r3, [r3, #12]
 8013c50:	3308      	adds	r3, #8
 8013c52:	b29b      	uxth	r3, r3
 8013c54:	b21b      	sxth	r3, r3
 8013c56:	4619      	mov	r1, r3
 8013c58:	6878      	ldr	r0, [r7, #4]
 8013c5a:	f7f9 f858 	bl	800cd0e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8013c5e:	2103      	movs	r1, #3
 8013c60:	6878      	ldr	r0, [r7, #4]
 8013c62:	f003 fa07 	bl	8017074 <icmp_dest_unreach>
      pbuf_free(p);
 8013c66:	6878      	ldr	r0, [r7, #4]
 8013c68:	f7f9 f864 	bl	800cd34 <pbuf_free>
  return;
 8013c6c:	e003      	b.n	8013c76 <udp_input+0x202>
    pbuf_free(p);
 8013c6e:	6878      	ldr	r0, [r7, #4]
 8013c70:	f7f9 f860 	bl	800cd34 <pbuf_free>
  return;
 8013c74:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8013c76:	372c      	adds	r7, #44	; 0x2c
 8013c78:	46bd      	mov	sp, r7
 8013c7a:	bd90      	pop	{r4, r7, pc}
 8013c7c:	0801cd8c 	.word	0x0801cd8c
 8013c80:	0801ce30 	.word	0x0801ce30
 8013c84:	0801cde0 	.word	0x0801cde0
 8013c88:	0801ce48 	.word	0x0801ce48
 8013c8c:	2000d6fc 	.word	0x2000d6fc
 8013c90:	20010ecc 	.word	0x20010ecc
 8013c94:	0801ce64 	.word	0x0801ce64
 8013c98:	2000d70c 	.word	0x2000d70c

08013c9c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8013c9c:	b580      	push	{r7, lr}
 8013c9e:	b088      	sub	sp, #32
 8013ca0:	af02      	add	r7, sp, #8
 8013ca2:	60f8      	str	r0, [r7, #12]
 8013ca4:	60b9      	str	r1, [r7, #8]
 8013ca6:	607a      	str	r2, [r7, #4]
 8013ca8:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8013caa:	68fb      	ldr	r3, [r7, #12]
 8013cac:	2b00      	cmp	r3, #0
 8013cae:	d109      	bne.n	8013cc4 <udp_sendto_if+0x28>
 8013cb0:	4b2e      	ldr	r3, [pc, #184]	; (8013d6c <udp_sendto_if+0xd0>)
 8013cb2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013cb6:	492e      	ldr	r1, [pc, #184]	; (8013d70 <udp_sendto_if+0xd4>)
 8013cb8:	482e      	ldr	r0, [pc, #184]	; (8013d74 <udp_sendto_if+0xd8>)
 8013cba:	f004 ff6d 	bl	8018b98 <iprintf>
 8013cbe:	f06f 030f 	mvn.w	r3, #15
 8013cc2:	e04f      	b.n	8013d64 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8013cc4:	68bb      	ldr	r3, [r7, #8]
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	d109      	bne.n	8013cde <udp_sendto_if+0x42>
 8013cca:	4b28      	ldr	r3, [pc, #160]	; (8013d6c <udp_sendto_if+0xd0>)
 8013ccc:	f240 2281 	movw	r2, #641	; 0x281
 8013cd0:	4929      	ldr	r1, [pc, #164]	; (8013d78 <udp_sendto_if+0xdc>)
 8013cd2:	4828      	ldr	r0, [pc, #160]	; (8013d74 <udp_sendto_if+0xd8>)
 8013cd4:	f004 ff60 	bl	8018b98 <iprintf>
 8013cd8:	f06f 030f 	mvn.w	r3, #15
 8013cdc:	e042      	b.n	8013d64 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	2b00      	cmp	r3, #0
 8013ce2:	d109      	bne.n	8013cf8 <udp_sendto_if+0x5c>
 8013ce4:	4b21      	ldr	r3, [pc, #132]	; (8013d6c <udp_sendto_if+0xd0>)
 8013ce6:	f240 2282 	movw	r2, #642	; 0x282
 8013cea:	4924      	ldr	r1, [pc, #144]	; (8013d7c <udp_sendto_if+0xe0>)
 8013cec:	4821      	ldr	r0, [pc, #132]	; (8013d74 <udp_sendto_if+0xd8>)
 8013cee:	f004 ff53 	bl	8018b98 <iprintf>
 8013cf2:	f06f 030f 	mvn.w	r3, #15
 8013cf6:	e035      	b.n	8013d64 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8013cf8:	6a3b      	ldr	r3, [r7, #32]
 8013cfa:	2b00      	cmp	r3, #0
 8013cfc:	d109      	bne.n	8013d12 <udp_sendto_if+0x76>
 8013cfe:	4b1b      	ldr	r3, [pc, #108]	; (8013d6c <udp_sendto_if+0xd0>)
 8013d00:	f240 2283 	movw	r2, #643	; 0x283
 8013d04:	491e      	ldr	r1, [pc, #120]	; (8013d80 <udp_sendto_if+0xe4>)
 8013d06:	481b      	ldr	r0, [pc, #108]	; (8013d74 <udp_sendto_if+0xd8>)
 8013d08:	f004 ff46 	bl	8018b98 <iprintf>
 8013d0c:	f06f 030f 	mvn.w	r3, #15
 8013d10:	e028      	b.n	8013d64 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013d12:	68fb      	ldr	r3, [r7, #12]
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	d009      	beq.n	8013d2c <udp_sendto_if+0x90>
 8013d18:	68fb      	ldr	r3, [r7, #12]
 8013d1a:	681b      	ldr	r3, [r3, #0]
 8013d1c:	2b00      	cmp	r3, #0
 8013d1e:	d005      	beq.n	8013d2c <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8013d20:	68fb      	ldr	r3, [r7, #12]
 8013d22:	681b      	ldr	r3, [r3, #0]
 8013d24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013d28:	2be0      	cmp	r3, #224	; 0xe0
 8013d2a:	d103      	bne.n	8013d34 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8013d2c:	6a3b      	ldr	r3, [r7, #32]
 8013d2e:	3304      	adds	r3, #4
 8013d30:	617b      	str	r3, [r7, #20]
 8013d32:	e00b      	b.n	8013d4c <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8013d34:	68fb      	ldr	r3, [r7, #12]
 8013d36:	681a      	ldr	r2, [r3, #0]
 8013d38:	6a3b      	ldr	r3, [r7, #32]
 8013d3a:	3304      	adds	r3, #4
 8013d3c:	681b      	ldr	r3, [r3, #0]
 8013d3e:	429a      	cmp	r2, r3
 8013d40:	d002      	beq.n	8013d48 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8013d42:	f06f 0303 	mvn.w	r3, #3
 8013d46:	e00d      	b.n	8013d64 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8013d48:	68fb      	ldr	r3, [r7, #12]
 8013d4a:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8013d4c:	887a      	ldrh	r2, [r7, #2]
 8013d4e:	697b      	ldr	r3, [r7, #20]
 8013d50:	9301      	str	r3, [sp, #4]
 8013d52:	6a3b      	ldr	r3, [r7, #32]
 8013d54:	9300      	str	r3, [sp, #0]
 8013d56:	4613      	mov	r3, r2
 8013d58:	687a      	ldr	r2, [r7, #4]
 8013d5a:	68b9      	ldr	r1, [r7, #8]
 8013d5c:	68f8      	ldr	r0, [r7, #12]
 8013d5e:	f000 f811 	bl	8013d84 <udp_sendto_if_src>
 8013d62:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8013d64:	4618      	mov	r0, r3
 8013d66:	3718      	adds	r7, #24
 8013d68:	46bd      	mov	sp, r7
 8013d6a:	bd80      	pop	{r7, pc}
 8013d6c:	0801cd8c 	.word	0x0801cd8c
 8013d70:	0801cf00 	.word	0x0801cf00
 8013d74:	0801cde0 	.word	0x0801cde0
 8013d78:	0801cf1c 	.word	0x0801cf1c
 8013d7c:	0801cf38 	.word	0x0801cf38
 8013d80:	0801cf58 	.word	0x0801cf58

08013d84 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8013d84:	b580      	push	{r7, lr}
 8013d86:	b08c      	sub	sp, #48	; 0x30
 8013d88:	af04      	add	r7, sp, #16
 8013d8a:	60f8      	str	r0, [r7, #12]
 8013d8c:	60b9      	str	r1, [r7, #8]
 8013d8e:	607a      	str	r2, [r7, #4]
 8013d90:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8013d92:	68fb      	ldr	r3, [r7, #12]
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	d109      	bne.n	8013dac <udp_sendto_if_src+0x28>
 8013d98:	4b65      	ldr	r3, [pc, #404]	; (8013f30 <udp_sendto_if_src+0x1ac>)
 8013d9a:	f240 22d1 	movw	r2, #721	; 0x2d1
 8013d9e:	4965      	ldr	r1, [pc, #404]	; (8013f34 <udp_sendto_if_src+0x1b0>)
 8013da0:	4865      	ldr	r0, [pc, #404]	; (8013f38 <udp_sendto_if_src+0x1b4>)
 8013da2:	f004 fef9 	bl	8018b98 <iprintf>
 8013da6:	f06f 030f 	mvn.w	r3, #15
 8013daa:	e0bc      	b.n	8013f26 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8013dac:	68bb      	ldr	r3, [r7, #8]
 8013dae:	2b00      	cmp	r3, #0
 8013db0:	d109      	bne.n	8013dc6 <udp_sendto_if_src+0x42>
 8013db2:	4b5f      	ldr	r3, [pc, #380]	; (8013f30 <udp_sendto_if_src+0x1ac>)
 8013db4:	f240 22d2 	movw	r2, #722	; 0x2d2
 8013db8:	4960      	ldr	r1, [pc, #384]	; (8013f3c <udp_sendto_if_src+0x1b8>)
 8013dba:	485f      	ldr	r0, [pc, #380]	; (8013f38 <udp_sendto_if_src+0x1b4>)
 8013dbc:	f004 feec 	bl	8018b98 <iprintf>
 8013dc0:	f06f 030f 	mvn.w	r3, #15
 8013dc4:	e0af      	b.n	8013f26 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	2b00      	cmp	r3, #0
 8013dca:	d109      	bne.n	8013de0 <udp_sendto_if_src+0x5c>
 8013dcc:	4b58      	ldr	r3, [pc, #352]	; (8013f30 <udp_sendto_if_src+0x1ac>)
 8013dce:	f240 22d3 	movw	r2, #723	; 0x2d3
 8013dd2:	495b      	ldr	r1, [pc, #364]	; (8013f40 <udp_sendto_if_src+0x1bc>)
 8013dd4:	4858      	ldr	r0, [pc, #352]	; (8013f38 <udp_sendto_if_src+0x1b4>)
 8013dd6:	f004 fedf 	bl	8018b98 <iprintf>
 8013dda:	f06f 030f 	mvn.w	r3, #15
 8013dde:	e0a2      	b.n	8013f26 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8013de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013de2:	2b00      	cmp	r3, #0
 8013de4:	d109      	bne.n	8013dfa <udp_sendto_if_src+0x76>
 8013de6:	4b52      	ldr	r3, [pc, #328]	; (8013f30 <udp_sendto_if_src+0x1ac>)
 8013de8:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8013dec:	4955      	ldr	r1, [pc, #340]	; (8013f44 <udp_sendto_if_src+0x1c0>)
 8013dee:	4852      	ldr	r0, [pc, #328]	; (8013f38 <udp_sendto_if_src+0x1b4>)
 8013df0:	f004 fed2 	bl	8018b98 <iprintf>
 8013df4:	f06f 030f 	mvn.w	r3, #15
 8013df8:	e095      	b.n	8013f26 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8013dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013dfc:	2b00      	cmp	r3, #0
 8013dfe:	d109      	bne.n	8013e14 <udp_sendto_if_src+0x90>
 8013e00:	4b4b      	ldr	r3, [pc, #300]	; (8013f30 <udp_sendto_if_src+0x1ac>)
 8013e02:	f240 22d5 	movw	r2, #725	; 0x2d5
 8013e06:	4950      	ldr	r1, [pc, #320]	; (8013f48 <udp_sendto_if_src+0x1c4>)
 8013e08:	484b      	ldr	r0, [pc, #300]	; (8013f38 <udp_sendto_if_src+0x1b4>)
 8013e0a:	f004 fec5 	bl	8018b98 <iprintf>
 8013e0e:	f06f 030f 	mvn.w	r3, #15
 8013e12:	e088      	b.n	8013f26 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8013e14:	68fb      	ldr	r3, [r7, #12]
 8013e16:	8a5b      	ldrh	r3, [r3, #18]
 8013e18:	2b00      	cmp	r3, #0
 8013e1a:	d10f      	bne.n	8013e3c <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8013e1c:	68f9      	ldr	r1, [r7, #12]
 8013e1e:	68fb      	ldr	r3, [r7, #12]
 8013e20:	8a5b      	ldrh	r3, [r3, #18]
 8013e22:	461a      	mov	r2, r3
 8013e24:	68f8      	ldr	r0, [r7, #12]
 8013e26:	f000 f893 	bl	8013f50 <udp_bind>
 8013e2a:	4603      	mov	r3, r0
 8013e2c:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8013e2e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8013e32:	2b00      	cmp	r3, #0
 8013e34:	d002      	beq.n	8013e3c <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8013e36:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8013e3a:	e074      	b.n	8013f26 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8013e3c:	68bb      	ldr	r3, [r7, #8]
 8013e3e:	891b      	ldrh	r3, [r3, #8]
 8013e40:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8013e44:	4293      	cmp	r3, r2
 8013e46:	d902      	bls.n	8013e4e <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8013e48:	f04f 33ff 	mov.w	r3, #4294967295
 8013e4c:	e06b      	b.n	8013f26 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8013e4e:	2108      	movs	r1, #8
 8013e50:	68b8      	ldr	r0, [r7, #8]
 8013e52:	f7f8 fed9 	bl	800cc08 <pbuf_add_header>
 8013e56:	4603      	mov	r3, r0
 8013e58:	2b00      	cmp	r3, #0
 8013e5a:	d015      	beq.n	8013e88 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8013e5c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013e60:	2108      	movs	r1, #8
 8013e62:	2022      	movs	r0, #34	; 0x22
 8013e64:	f7f8 fc82 	bl	800c76c <pbuf_alloc>
 8013e68:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8013e6a:	69fb      	ldr	r3, [r7, #28]
 8013e6c:	2b00      	cmp	r3, #0
 8013e6e:	d102      	bne.n	8013e76 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8013e70:	f04f 33ff 	mov.w	r3, #4294967295
 8013e74:	e057      	b.n	8013f26 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8013e76:	68bb      	ldr	r3, [r7, #8]
 8013e78:	891b      	ldrh	r3, [r3, #8]
 8013e7a:	2b00      	cmp	r3, #0
 8013e7c:	d006      	beq.n	8013e8c <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8013e7e:	68b9      	ldr	r1, [r7, #8]
 8013e80:	69f8      	ldr	r0, [r7, #28]
 8013e82:	f7f9 f87b 	bl	800cf7c <pbuf_chain>
 8013e86:	e001      	b.n	8013e8c <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8013e88:	68bb      	ldr	r3, [r7, #8]
 8013e8a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8013e8c:	69fb      	ldr	r3, [r7, #28]
 8013e8e:	895b      	ldrh	r3, [r3, #10]
 8013e90:	2b07      	cmp	r3, #7
 8013e92:	d806      	bhi.n	8013ea2 <udp_sendto_if_src+0x11e>
 8013e94:	4b26      	ldr	r3, [pc, #152]	; (8013f30 <udp_sendto_if_src+0x1ac>)
 8013e96:	f240 320d 	movw	r2, #781	; 0x30d
 8013e9a:	492c      	ldr	r1, [pc, #176]	; (8013f4c <udp_sendto_if_src+0x1c8>)
 8013e9c:	4826      	ldr	r0, [pc, #152]	; (8013f38 <udp_sendto_if_src+0x1b4>)
 8013e9e:	f004 fe7b 	bl	8018b98 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8013ea2:	69fb      	ldr	r3, [r7, #28]
 8013ea4:	685b      	ldr	r3, [r3, #4]
 8013ea6:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8013ea8:	68fb      	ldr	r3, [r7, #12]
 8013eaa:	8a5b      	ldrh	r3, [r3, #18]
 8013eac:	4618      	mov	r0, r3
 8013eae:	f7f7 fb0d 	bl	800b4cc <lwip_htons>
 8013eb2:	4603      	mov	r3, r0
 8013eb4:	461a      	mov	r2, r3
 8013eb6:	697b      	ldr	r3, [r7, #20]
 8013eb8:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8013eba:	887b      	ldrh	r3, [r7, #2]
 8013ebc:	4618      	mov	r0, r3
 8013ebe:	f7f7 fb05 	bl	800b4cc <lwip_htons>
 8013ec2:	4603      	mov	r3, r0
 8013ec4:	461a      	mov	r2, r3
 8013ec6:	697b      	ldr	r3, [r7, #20]
 8013ec8:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8013eca:	697b      	ldr	r3, [r7, #20]
 8013ecc:	2200      	movs	r2, #0
 8013ece:	719a      	strb	r2, [r3, #6]
 8013ed0:	2200      	movs	r2, #0
 8013ed2:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8013ed4:	69fb      	ldr	r3, [r7, #28]
 8013ed6:	891b      	ldrh	r3, [r3, #8]
 8013ed8:	4618      	mov	r0, r3
 8013eda:	f7f7 faf7 	bl	800b4cc <lwip_htons>
 8013ede:	4603      	mov	r3, r0
 8013ee0:	461a      	mov	r2, r3
 8013ee2:	697b      	ldr	r3, [r7, #20]
 8013ee4:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8013ee6:	2311      	movs	r3, #17
 8013ee8:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8013eea:	68fb      	ldr	r3, [r7, #12]
 8013eec:	7adb      	ldrb	r3, [r3, #11]
 8013eee:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8013ef0:	68fb      	ldr	r3, [r7, #12]
 8013ef2:	7a9b      	ldrb	r3, [r3, #10]
 8013ef4:	7cb9      	ldrb	r1, [r7, #18]
 8013ef6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013ef8:	9202      	str	r2, [sp, #8]
 8013efa:	7cfa      	ldrb	r2, [r7, #19]
 8013efc:	9201      	str	r2, [sp, #4]
 8013efe:	9300      	str	r3, [sp, #0]
 8013f00:	460b      	mov	r3, r1
 8013f02:	687a      	ldr	r2, [r7, #4]
 8013f04:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013f06:	69f8      	ldr	r0, [r7, #28]
 8013f08:	f003 fb44 	bl	8017594 <ip4_output_if_src>
 8013f0c:	4603      	mov	r3, r0
 8013f0e:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8013f10:	69fa      	ldr	r2, [r7, #28]
 8013f12:	68bb      	ldr	r3, [r7, #8]
 8013f14:	429a      	cmp	r2, r3
 8013f16:	d004      	beq.n	8013f22 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8013f18:	69f8      	ldr	r0, [r7, #28]
 8013f1a:	f7f8 ff0b 	bl	800cd34 <pbuf_free>
    q = NULL;
 8013f1e:	2300      	movs	r3, #0
 8013f20:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8013f22:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8013f26:	4618      	mov	r0, r3
 8013f28:	3720      	adds	r7, #32
 8013f2a:	46bd      	mov	sp, r7
 8013f2c:	bd80      	pop	{r7, pc}
 8013f2e:	bf00      	nop
 8013f30:	0801cd8c 	.word	0x0801cd8c
 8013f34:	0801cf78 	.word	0x0801cf78
 8013f38:	0801cde0 	.word	0x0801cde0
 8013f3c:	0801cf98 	.word	0x0801cf98
 8013f40:	0801cfb8 	.word	0x0801cfb8
 8013f44:	0801cfdc 	.word	0x0801cfdc
 8013f48:	0801d000 	.word	0x0801d000
 8013f4c:	0801d024 	.word	0x0801d024

08013f50 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013f50:	b580      	push	{r7, lr}
 8013f52:	b086      	sub	sp, #24
 8013f54:	af00      	add	r7, sp, #0
 8013f56:	60f8      	str	r0, [r7, #12]
 8013f58:	60b9      	str	r1, [r7, #8]
 8013f5a:	4613      	mov	r3, r2
 8013f5c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8013f5e:	68bb      	ldr	r3, [r7, #8]
 8013f60:	2b00      	cmp	r3, #0
 8013f62:	d101      	bne.n	8013f68 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8013f64:	4b39      	ldr	r3, [pc, #228]	; (801404c <udp_bind+0xfc>)
 8013f66:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8013f68:	68fb      	ldr	r3, [r7, #12]
 8013f6a:	2b00      	cmp	r3, #0
 8013f6c:	d109      	bne.n	8013f82 <udp_bind+0x32>
 8013f6e:	4b38      	ldr	r3, [pc, #224]	; (8014050 <udp_bind+0x100>)
 8013f70:	f240 32b7 	movw	r2, #951	; 0x3b7
 8013f74:	4937      	ldr	r1, [pc, #220]	; (8014054 <udp_bind+0x104>)
 8013f76:	4838      	ldr	r0, [pc, #224]	; (8014058 <udp_bind+0x108>)
 8013f78:	f004 fe0e 	bl	8018b98 <iprintf>
 8013f7c:	f06f 030f 	mvn.w	r3, #15
 8013f80:	e060      	b.n	8014044 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8013f82:	2300      	movs	r3, #0
 8013f84:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013f86:	4b35      	ldr	r3, [pc, #212]	; (801405c <udp_bind+0x10c>)
 8013f88:	681b      	ldr	r3, [r3, #0]
 8013f8a:	617b      	str	r3, [r7, #20]
 8013f8c:	e009      	b.n	8013fa2 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8013f8e:	68fa      	ldr	r2, [r7, #12]
 8013f90:	697b      	ldr	r3, [r7, #20]
 8013f92:	429a      	cmp	r2, r3
 8013f94:	d102      	bne.n	8013f9c <udp_bind+0x4c>
      rebind = 1;
 8013f96:	2301      	movs	r3, #1
 8013f98:	74fb      	strb	r3, [r7, #19]
      break;
 8013f9a:	e005      	b.n	8013fa8 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013f9c:	697b      	ldr	r3, [r7, #20]
 8013f9e:	68db      	ldr	r3, [r3, #12]
 8013fa0:	617b      	str	r3, [r7, #20]
 8013fa2:	697b      	ldr	r3, [r7, #20]
 8013fa4:	2b00      	cmp	r3, #0
 8013fa6:	d1f2      	bne.n	8013f8e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8013fa8:	88fb      	ldrh	r3, [r7, #6]
 8013faa:	2b00      	cmp	r3, #0
 8013fac:	d109      	bne.n	8013fc2 <udp_bind+0x72>
    port = udp_new_port();
 8013fae:	f7ff fcc5 	bl	801393c <udp_new_port>
 8013fb2:	4603      	mov	r3, r0
 8013fb4:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8013fb6:	88fb      	ldrh	r3, [r7, #6]
 8013fb8:	2b00      	cmp	r3, #0
 8013fba:	d12c      	bne.n	8014016 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8013fbc:	f06f 0307 	mvn.w	r3, #7
 8013fc0:	e040      	b.n	8014044 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013fc2:	4b26      	ldr	r3, [pc, #152]	; (801405c <udp_bind+0x10c>)
 8013fc4:	681b      	ldr	r3, [r3, #0]
 8013fc6:	617b      	str	r3, [r7, #20]
 8013fc8:	e022      	b.n	8014010 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8013fca:	68fa      	ldr	r2, [r7, #12]
 8013fcc:	697b      	ldr	r3, [r7, #20]
 8013fce:	429a      	cmp	r2, r3
 8013fd0:	d01b      	beq.n	801400a <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8013fd2:	697b      	ldr	r3, [r7, #20]
 8013fd4:	8a5b      	ldrh	r3, [r3, #18]
 8013fd6:	88fa      	ldrh	r2, [r7, #6]
 8013fd8:	429a      	cmp	r2, r3
 8013fda:	d116      	bne.n	801400a <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013fdc:	697b      	ldr	r3, [r7, #20]
 8013fde:	681a      	ldr	r2, [r3, #0]
 8013fe0:	68bb      	ldr	r3, [r7, #8]
 8013fe2:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8013fe4:	429a      	cmp	r2, r3
 8013fe6:	d00d      	beq.n	8014004 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013fe8:	68bb      	ldr	r3, [r7, #8]
 8013fea:	2b00      	cmp	r3, #0
 8013fec:	d00a      	beq.n	8014004 <udp_bind+0xb4>
 8013fee:	68bb      	ldr	r3, [r7, #8]
 8013ff0:	681b      	ldr	r3, [r3, #0]
 8013ff2:	2b00      	cmp	r3, #0
 8013ff4:	d006      	beq.n	8014004 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8013ff6:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013ff8:	2b00      	cmp	r3, #0
 8013ffa:	d003      	beq.n	8014004 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8013ffc:	697b      	ldr	r3, [r7, #20]
 8013ffe:	681b      	ldr	r3, [r3, #0]
 8014000:	2b00      	cmp	r3, #0
 8014002:	d102      	bne.n	801400a <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8014004:	f06f 0307 	mvn.w	r3, #7
 8014008:	e01c      	b.n	8014044 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801400a:	697b      	ldr	r3, [r7, #20]
 801400c:	68db      	ldr	r3, [r3, #12]
 801400e:	617b      	str	r3, [r7, #20]
 8014010:	697b      	ldr	r3, [r7, #20]
 8014012:	2b00      	cmp	r3, #0
 8014014:	d1d9      	bne.n	8013fca <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8014016:	68bb      	ldr	r3, [r7, #8]
 8014018:	2b00      	cmp	r3, #0
 801401a:	d002      	beq.n	8014022 <udp_bind+0xd2>
 801401c:	68bb      	ldr	r3, [r7, #8]
 801401e:	681b      	ldr	r3, [r3, #0]
 8014020:	e000      	b.n	8014024 <udp_bind+0xd4>
 8014022:	2300      	movs	r3, #0
 8014024:	68fa      	ldr	r2, [r7, #12]
 8014026:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8014028:	68fb      	ldr	r3, [r7, #12]
 801402a:	88fa      	ldrh	r2, [r7, #6]
 801402c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801402e:	7cfb      	ldrb	r3, [r7, #19]
 8014030:	2b00      	cmp	r3, #0
 8014032:	d106      	bne.n	8014042 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8014034:	4b09      	ldr	r3, [pc, #36]	; (801405c <udp_bind+0x10c>)
 8014036:	681a      	ldr	r2, [r3, #0]
 8014038:	68fb      	ldr	r3, [r7, #12]
 801403a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801403c:	4a07      	ldr	r2, [pc, #28]	; (801405c <udp_bind+0x10c>)
 801403e:	68fb      	ldr	r3, [r7, #12]
 8014040:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8014042:	2300      	movs	r3, #0
}
 8014044:	4618      	mov	r0, r3
 8014046:	3718      	adds	r7, #24
 8014048:	46bd      	mov	sp, r7
 801404a:	bd80      	pop	{r7, pc}
 801404c:	08027dd4 	.word	0x08027dd4
 8014050:	0801cd8c 	.word	0x0801cd8c
 8014054:	0801d054 	.word	0x0801d054
 8014058:	0801cde0 	.word	0x0801cde0
 801405c:	20010ecc 	.word	0x20010ecc

08014060 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8014060:	b580      	push	{r7, lr}
 8014062:	b086      	sub	sp, #24
 8014064:	af00      	add	r7, sp, #0
 8014066:	60f8      	str	r0, [r7, #12]
 8014068:	60b9      	str	r1, [r7, #8]
 801406a:	4613      	mov	r3, r2
 801406c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801406e:	68fb      	ldr	r3, [r7, #12]
 8014070:	2b00      	cmp	r3, #0
 8014072:	d109      	bne.n	8014088 <udp_connect+0x28>
 8014074:	4b2c      	ldr	r3, [pc, #176]	; (8014128 <udp_connect+0xc8>)
 8014076:	f240 4235 	movw	r2, #1077	; 0x435
 801407a:	492c      	ldr	r1, [pc, #176]	; (801412c <udp_connect+0xcc>)
 801407c:	482c      	ldr	r0, [pc, #176]	; (8014130 <udp_connect+0xd0>)
 801407e:	f004 fd8b 	bl	8018b98 <iprintf>
 8014082:	f06f 030f 	mvn.w	r3, #15
 8014086:	e04b      	b.n	8014120 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8014088:	68bb      	ldr	r3, [r7, #8]
 801408a:	2b00      	cmp	r3, #0
 801408c:	d109      	bne.n	80140a2 <udp_connect+0x42>
 801408e:	4b26      	ldr	r3, [pc, #152]	; (8014128 <udp_connect+0xc8>)
 8014090:	f240 4236 	movw	r2, #1078	; 0x436
 8014094:	4927      	ldr	r1, [pc, #156]	; (8014134 <udp_connect+0xd4>)
 8014096:	4826      	ldr	r0, [pc, #152]	; (8014130 <udp_connect+0xd0>)
 8014098:	f004 fd7e 	bl	8018b98 <iprintf>
 801409c:	f06f 030f 	mvn.w	r3, #15
 80140a0:	e03e      	b.n	8014120 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 80140a2:	68fb      	ldr	r3, [r7, #12]
 80140a4:	8a5b      	ldrh	r3, [r3, #18]
 80140a6:	2b00      	cmp	r3, #0
 80140a8:	d10f      	bne.n	80140ca <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80140aa:	68f9      	ldr	r1, [r7, #12]
 80140ac:	68fb      	ldr	r3, [r7, #12]
 80140ae:	8a5b      	ldrh	r3, [r3, #18]
 80140b0:	461a      	mov	r2, r3
 80140b2:	68f8      	ldr	r0, [r7, #12]
 80140b4:	f7ff ff4c 	bl	8013f50 <udp_bind>
 80140b8:	4603      	mov	r3, r0
 80140ba:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80140bc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	d002      	beq.n	80140ca <udp_connect+0x6a>
      return err;
 80140c4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80140c8:	e02a      	b.n	8014120 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 80140ca:	68bb      	ldr	r3, [r7, #8]
 80140cc:	2b00      	cmp	r3, #0
 80140ce:	d002      	beq.n	80140d6 <udp_connect+0x76>
 80140d0:	68bb      	ldr	r3, [r7, #8]
 80140d2:	681b      	ldr	r3, [r3, #0]
 80140d4:	e000      	b.n	80140d8 <udp_connect+0x78>
 80140d6:	2300      	movs	r3, #0
 80140d8:	68fa      	ldr	r2, [r7, #12]
 80140da:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 80140dc:	68fb      	ldr	r3, [r7, #12]
 80140de:	88fa      	ldrh	r2, [r7, #6]
 80140e0:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 80140e2:	68fb      	ldr	r3, [r7, #12]
 80140e4:	7c1b      	ldrb	r3, [r3, #16]
 80140e6:	f043 0304 	orr.w	r3, r3, #4
 80140ea:	b2da      	uxtb	r2, r3
 80140ec:	68fb      	ldr	r3, [r7, #12]
 80140ee:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80140f0:	4b11      	ldr	r3, [pc, #68]	; (8014138 <udp_connect+0xd8>)
 80140f2:	681b      	ldr	r3, [r3, #0]
 80140f4:	617b      	str	r3, [r7, #20]
 80140f6:	e008      	b.n	801410a <udp_connect+0xaa>
    if (pcb == ipcb) {
 80140f8:	68fa      	ldr	r2, [r7, #12]
 80140fa:	697b      	ldr	r3, [r7, #20]
 80140fc:	429a      	cmp	r2, r3
 80140fe:	d101      	bne.n	8014104 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8014100:	2300      	movs	r3, #0
 8014102:	e00d      	b.n	8014120 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014104:	697b      	ldr	r3, [r7, #20]
 8014106:	68db      	ldr	r3, [r3, #12]
 8014108:	617b      	str	r3, [r7, #20]
 801410a:	697b      	ldr	r3, [r7, #20]
 801410c:	2b00      	cmp	r3, #0
 801410e:	d1f3      	bne.n	80140f8 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8014110:	4b09      	ldr	r3, [pc, #36]	; (8014138 <udp_connect+0xd8>)
 8014112:	681a      	ldr	r2, [r3, #0]
 8014114:	68fb      	ldr	r3, [r7, #12]
 8014116:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8014118:	4a07      	ldr	r2, [pc, #28]	; (8014138 <udp_connect+0xd8>)
 801411a:	68fb      	ldr	r3, [r7, #12]
 801411c:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801411e:	2300      	movs	r3, #0
}
 8014120:	4618      	mov	r0, r3
 8014122:	3718      	adds	r7, #24
 8014124:	46bd      	mov	sp, r7
 8014126:	bd80      	pop	{r7, pc}
 8014128:	0801cd8c 	.word	0x0801cd8c
 801412c:	0801d06c 	.word	0x0801d06c
 8014130:	0801cde0 	.word	0x0801cde0
 8014134:	0801d088 	.word	0x0801d088
 8014138:	20010ecc 	.word	0x20010ecc

0801413c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801413c:	b580      	push	{r7, lr}
 801413e:	b084      	sub	sp, #16
 8014140:	af00      	add	r7, sp, #0
 8014142:	60f8      	str	r0, [r7, #12]
 8014144:	60b9      	str	r1, [r7, #8]
 8014146:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8014148:	68fb      	ldr	r3, [r7, #12]
 801414a:	2b00      	cmp	r3, #0
 801414c:	d107      	bne.n	801415e <udp_recv+0x22>
 801414e:	4b08      	ldr	r3, [pc, #32]	; (8014170 <udp_recv+0x34>)
 8014150:	f240 428a 	movw	r2, #1162	; 0x48a
 8014154:	4907      	ldr	r1, [pc, #28]	; (8014174 <udp_recv+0x38>)
 8014156:	4808      	ldr	r0, [pc, #32]	; (8014178 <udp_recv+0x3c>)
 8014158:	f004 fd1e 	bl	8018b98 <iprintf>
 801415c:	e005      	b.n	801416a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801415e:	68fb      	ldr	r3, [r7, #12]
 8014160:	68ba      	ldr	r2, [r7, #8]
 8014162:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8014164:	68fb      	ldr	r3, [r7, #12]
 8014166:	687a      	ldr	r2, [r7, #4]
 8014168:	61da      	str	r2, [r3, #28]
}
 801416a:	3710      	adds	r7, #16
 801416c:	46bd      	mov	sp, r7
 801416e:	bd80      	pop	{r7, pc}
 8014170:	0801cd8c 	.word	0x0801cd8c
 8014174:	0801d0c0 	.word	0x0801d0c0
 8014178:	0801cde0 	.word	0x0801cde0

0801417c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801417c:	b580      	push	{r7, lr}
 801417e:	b084      	sub	sp, #16
 8014180:	af00      	add	r7, sp, #0
 8014182:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8014184:	687b      	ldr	r3, [r7, #4]
 8014186:	2b00      	cmp	r3, #0
 8014188:	d107      	bne.n	801419a <udp_remove+0x1e>
 801418a:	4b19      	ldr	r3, [pc, #100]	; (80141f0 <udp_remove+0x74>)
 801418c:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8014190:	4918      	ldr	r1, [pc, #96]	; (80141f4 <udp_remove+0x78>)
 8014192:	4819      	ldr	r0, [pc, #100]	; (80141f8 <udp_remove+0x7c>)
 8014194:	f004 fd00 	bl	8018b98 <iprintf>
 8014198:	e026      	b.n	80141e8 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801419a:	4b18      	ldr	r3, [pc, #96]	; (80141fc <udp_remove+0x80>)
 801419c:	681b      	ldr	r3, [r3, #0]
 801419e:	687a      	ldr	r2, [r7, #4]
 80141a0:	429a      	cmp	r2, r3
 80141a2:	d105      	bne.n	80141b0 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 80141a4:	4b15      	ldr	r3, [pc, #84]	; (80141fc <udp_remove+0x80>)
 80141a6:	681b      	ldr	r3, [r3, #0]
 80141a8:	68db      	ldr	r3, [r3, #12]
 80141aa:	4a14      	ldr	r2, [pc, #80]	; (80141fc <udp_remove+0x80>)
 80141ac:	6013      	str	r3, [r2, #0]
 80141ae:	e017      	b.n	80141e0 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80141b0:	4b12      	ldr	r3, [pc, #72]	; (80141fc <udp_remove+0x80>)
 80141b2:	681b      	ldr	r3, [r3, #0]
 80141b4:	60fb      	str	r3, [r7, #12]
 80141b6:	e010      	b.n	80141da <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80141b8:	68fb      	ldr	r3, [r7, #12]
 80141ba:	68db      	ldr	r3, [r3, #12]
 80141bc:	2b00      	cmp	r3, #0
 80141be:	d009      	beq.n	80141d4 <udp_remove+0x58>
 80141c0:	68fb      	ldr	r3, [r7, #12]
 80141c2:	68db      	ldr	r3, [r3, #12]
 80141c4:	687a      	ldr	r2, [r7, #4]
 80141c6:	429a      	cmp	r2, r3
 80141c8:	d104      	bne.n	80141d4 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80141ca:	687b      	ldr	r3, [r7, #4]
 80141cc:	68da      	ldr	r2, [r3, #12]
 80141ce:	68fb      	ldr	r3, [r7, #12]
 80141d0:	60da      	str	r2, [r3, #12]
        break;
 80141d2:	e005      	b.n	80141e0 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80141d4:	68fb      	ldr	r3, [r7, #12]
 80141d6:	68db      	ldr	r3, [r3, #12]
 80141d8:	60fb      	str	r3, [r7, #12]
 80141da:	68fb      	ldr	r3, [r7, #12]
 80141dc:	2b00      	cmp	r3, #0
 80141de:	d1eb      	bne.n	80141b8 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80141e0:	6879      	ldr	r1, [r7, #4]
 80141e2:	2000      	movs	r0, #0
 80141e4:	f7f7 fef6 	bl	800bfd4 <memp_free>
}
 80141e8:	3710      	adds	r7, #16
 80141ea:	46bd      	mov	sp, r7
 80141ec:	bd80      	pop	{r7, pc}
 80141ee:	bf00      	nop
 80141f0:	0801cd8c 	.word	0x0801cd8c
 80141f4:	0801d0d8 	.word	0x0801d0d8
 80141f8:	0801cde0 	.word	0x0801cde0
 80141fc:	20010ecc 	.word	0x20010ecc

08014200 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8014200:	b580      	push	{r7, lr}
 8014202:	b082      	sub	sp, #8
 8014204:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8014206:	2000      	movs	r0, #0
 8014208:	f7f7 fe6e 	bl	800bee8 <memp_malloc>
 801420c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801420e:	687b      	ldr	r3, [r7, #4]
 8014210:	2b00      	cmp	r3, #0
 8014212:	d007      	beq.n	8014224 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8014214:	2220      	movs	r2, #32
 8014216:	2100      	movs	r1, #0
 8014218:	6878      	ldr	r0, [r7, #4]
 801421a:	f004 fd5c 	bl	8018cd6 <memset>
    pcb->ttl = UDP_TTL;
 801421e:	687b      	ldr	r3, [r7, #4]
 8014220:	22ff      	movs	r2, #255	; 0xff
 8014222:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8014224:	687b      	ldr	r3, [r7, #4]
}
 8014226:	4618      	mov	r0, r3
 8014228:	3708      	adds	r7, #8
 801422a:	46bd      	mov	sp, r7
 801422c:	bd80      	pop	{r7, pc}

0801422e <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801422e:	b580      	push	{r7, lr}
 8014230:	b084      	sub	sp, #16
 8014232:	af00      	add	r7, sp, #0
 8014234:	4603      	mov	r3, r0
 8014236:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8014238:	f7ff ffe2 	bl	8014200 <udp_new>
 801423c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801423e:	68fb      	ldr	r3, [r7, #12]
}
 8014240:	4618      	mov	r0, r3
 8014242:	3710      	adds	r7, #16
 8014244:	46bd      	mov	sp, r7
 8014246:	bd80      	pop	{r7, pc}

08014248 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8014248:	b480      	push	{r7}
 801424a:	b085      	sub	sp, #20
 801424c:	af00      	add	r7, sp, #0
 801424e:	6078      	str	r0, [r7, #4]
 8014250:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8014252:	687b      	ldr	r3, [r7, #4]
 8014254:	2b00      	cmp	r3, #0
 8014256:	d01e      	beq.n	8014296 <udp_netif_ip_addr_changed+0x4e>
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	681b      	ldr	r3, [r3, #0]
 801425c:	2b00      	cmp	r3, #0
 801425e:	d01a      	beq.n	8014296 <udp_netif_ip_addr_changed+0x4e>
 8014260:	683b      	ldr	r3, [r7, #0]
 8014262:	2b00      	cmp	r3, #0
 8014264:	d017      	beq.n	8014296 <udp_netif_ip_addr_changed+0x4e>
 8014266:	683b      	ldr	r3, [r7, #0]
 8014268:	681b      	ldr	r3, [r3, #0]
 801426a:	2b00      	cmp	r3, #0
 801426c:	d013      	beq.n	8014296 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801426e:	4b0d      	ldr	r3, [pc, #52]	; (80142a4 <udp_netif_ip_addr_changed+0x5c>)
 8014270:	681b      	ldr	r3, [r3, #0]
 8014272:	60fb      	str	r3, [r7, #12]
 8014274:	e00c      	b.n	8014290 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8014276:	68fb      	ldr	r3, [r7, #12]
 8014278:	681a      	ldr	r2, [r3, #0]
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	681b      	ldr	r3, [r3, #0]
 801427e:	429a      	cmp	r2, r3
 8014280:	d103      	bne.n	801428a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8014282:	683b      	ldr	r3, [r7, #0]
 8014284:	681a      	ldr	r2, [r3, #0]
 8014286:	68fb      	ldr	r3, [r7, #12]
 8014288:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801428a:	68fb      	ldr	r3, [r7, #12]
 801428c:	68db      	ldr	r3, [r3, #12]
 801428e:	60fb      	str	r3, [r7, #12]
 8014290:	68fb      	ldr	r3, [r7, #12]
 8014292:	2b00      	cmp	r3, #0
 8014294:	d1ef      	bne.n	8014276 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8014296:	bf00      	nop
 8014298:	3714      	adds	r7, #20
 801429a:	46bd      	mov	sp, r7
 801429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142a0:	4770      	bx	lr
 80142a2:	bf00      	nop
 80142a4:	20010ecc 	.word	0x20010ecc

080142a8 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 80142a8:	b580      	push	{r7, lr}
 80142aa:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 80142ac:	4b20      	ldr	r3, [pc, #128]	; (8014330 <dhcp_inc_pcb_refcount+0x88>)
 80142ae:	781b      	ldrb	r3, [r3, #0]
 80142b0:	2b00      	cmp	r3, #0
 80142b2:	d133      	bne.n	801431c <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 80142b4:	4b1f      	ldr	r3, [pc, #124]	; (8014334 <dhcp_inc_pcb_refcount+0x8c>)
 80142b6:	681b      	ldr	r3, [r3, #0]
 80142b8:	2b00      	cmp	r3, #0
 80142ba:	d005      	beq.n	80142c8 <dhcp_inc_pcb_refcount+0x20>
 80142bc:	4b1e      	ldr	r3, [pc, #120]	; (8014338 <dhcp_inc_pcb_refcount+0x90>)
 80142be:	22e5      	movs	r2, #229	; 0xe5
 80142c0:	491e      	ldr	r1, [pc, #120]	; (801433c <dhcp_inc_pcb_refcount+0x94>)
 80142c2:	481f      	ldr	r0, [pc, #124]	; (8014340 <dhcp_inc_pcb_refcount+0x98>)
 80142c4:	f004 fc68 	bl	8018b98 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 80142c8:	f7ff ff9a 	bl	8014200 <udp_new>
 80142cc:	4603      	mov	r3, r0
 80142ce:	4a19      	ldr	r2, [pc, #100]	; (8014334 <dhcp_inc_pcb_refcount+0x8c>)
 80142d0:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 80142d2:	4b18      	ldr	r3, [pc, #96]	; (8014334 <dhcp_inc_pcb_refcount+0x8c>)
 80142d4:	681b      	ldr	r3, [r3, #0]
 80142d6:	2b00      	cmp	r3, #0
 80142d8:	d102      	bne.n	80142e0 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 80142da:	f04f 33ff 	mov.w	r3, #4294967295
 80142de:	e024      	b.n	801432a <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 80142e0:	4b14      	ldr	r3, [pc, #80]	; (8014334 <dhcp_inc_pcb_refcount+0x8c>)
 80142e2:	681b      	ldr	r3, [r3, #0]
 80142e4:	7a5a      	ldrb	r2, [r3, #9]
 80142e6:	4b13      	ldr	r3, [pc, #76]	; (8014334 <dhcp_inc_pcb_refcount+0x8c>)
 80142e8:	681b      	ldr	r3, [r3, #0]
 80142ea:	f042 0220 	orr.w	r2, r2, #32
 80142ee:	b2d2      	uxtb	r2, r2
 80142f0:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 80142f2:	4b10      	ldr	r3, [pc, #64]	; (8014334 <dhcp_inc_pcb_refcount+0x8c>)
 80142f4:	681b      	ldr	r3, [r3, #0]
 80142f6:	2244      	movs	r2, #68	; 0x44
 80142f8:	4912      	ldr	r1, [pc, #72]	; (8014344 <dhcp_inc_pcb_refcount+0x9c>)
 80142fa:	4618      	mov	r0, r3
 80142fc:	f7ff fe28 	bl	8013f50 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8014300:	4b0c      	ldr	r3, [pc, #48]	; (8014334 <dhcp_inc_pcb_refcount+0x8c>)
 8014302:	681b      	ldr	r3, [r3, #0]
 8014304:	2243      	movs	r2, #67	; 0x43
 8014306:	490f      	ldr	r1, [pc, #60]	; (8014344 <dhcp_inc_pcb_refcount+0x9c>)
 8014308:	4618      	mov	r0, r3
 801430a:	f7ff fea9 	bl	8014060 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 801430e:	4b09      	ldr	r3, [pc, #36]	; (8014334 <dhcp_inc_pcb_refcount+0x8c>)
 8014310:	681b      	ldr	r3, [r3, #0]
 8014312:	2200      	movs	r2, #0
 8014314:	490c      	ldr	r1, [pc, #48]	; (8014348 <dhcp_inc_pcb_refcount+0xa0>)
 8014316:	4618      	mov	r0, r3
 8014318:	f7ff ff10 	bl	801413c <udp_recv>
  }

  dhcp_pcb_refcount++;
 801431c:	4b04      	ldr	r3, [pc, #16]	; (8014330 <dhcp_inc_pcb_refcount+0x88>)
 801431e:	781b      	ldrb	r3, [r3, #0]
 8014320:	3301      	adds	r3, #1
 8014322:	b2da      	uxtb	r2, r3
 8014324:	4b02      	ldr	r3, [pc, #8]	; (8014330 <dhcp_inc_pcb_refcount+0x88>)
 8014326:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8014328:	2300      	movs	r3, #0
}
 801432a:	4618      	mov	r0, r3
 801432c:	bd80      	pop	{r7, pc}
 801432e:	bf00      	nop
 8014330:	20010efc 	.word	0x20010efc
 8014334:	20010ef8 	.word	0x20010ef8
 8014338:	0801d0f0 	.word	0x0801d0f0
 801433c:	0801d128 	.word	0x0801d128
 8014340:	0801d150 	.word	0x0801d150
 8014344:	08027dd4 	.word	0x08027dd4
 8014348:	08015bdd 	.word	0x08015bdd

0801434c <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 801434c:	b580      	push	{r7, lr}
 801434e:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8014350:	4b0e      	ldr	r3, [pc, #56]	; (801438c <dhcp_dec_pcb_refcount+0x40>)
 8014352:	781b      	ldrb	r3, [r3, #0]
 8014354:	2b00      	cmp	r3, #0
 8014356:	d105      	bne.n	8014364 <dhcp_dec_pcb_refcount+0x18>
 8014358:	4b0d      	ldr	r3, [pc, #52]	; (8014390 <dhcp_dec_pcb_refcount+0x44>)
 801435a:	22ff      	movs	r2, #255	; 0xff
 801435c:	490d      	ldr	r1, [pc, #52]	; (8014394 <dhcp_dec_pcb_refcount+0x48>)
 801435e:	480e      	ldr	r0, [pc, #56]	; (8014398 <dhcp_dec_pcb_refcount+0x4c>)
 8014360:	f004 fc1a 	bl	8018b98 <iprintf>
  dhcp_pcb_refcount--;
 8014364:	4b09      	ldr	r3, [pc, #36]	; (801438c <dhcp_dec_pcb_refcount+0x40>)
 8014366:	781b      	ldrb	r3, [r3, #0]
 8014368:	3b01      	subs	r3, #1
 801436a:	b2da      	uxtb	r2, r3
 801436c:	4b07      	ldr	r3, [pc, #28]	; (801438c <dhcp_dec_pcb_refcount+0x40>)
 801436e:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8014370:	4b06      	ldr	r3, [pc, #24]	; (801438c <dhcp_dec_pcb_refcount+0x40>)
 8014372:	781b      	ldrb	r3, [r3, #0]
 8014374:	2b00      	cmp	r3, #0
 8014376:	d107      	bne.n	8014388 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8014378:	4b08      	ldr	r3, [pc, #32]	; (801439c <dhcp_dec_pcb_refcount+0x50>)
 801437a:	681b      	ldr	r3, [r3, #0]
 801437c:	4618      	mov	r0, r3
 801437e:	f7ff fefd 	bl	801417c <udp_remove>
    dhcp_pcb = NULL;
 8014382:	4b06      	ldr	r3, [pc, #24]	; (801439c <dhcp_dec_pcb_refcount+0x50>)
 8014384:	2200      	movs	r2, #0
 8014386:	601a      	str	r2, [r3, #0]
  }
}
 8014388:	bf00      	nop
 801438a:	bd80      	pop	{r7, pc}
 801438c:	20010efc 	.word	0x20010efc
 8014390:	0801d0f0 	.word	0x0801d0f0
 8014394:	0801d178 	.word	0x0801d178
 8014398:	0801d150 	.word	0x0801d150
 801439c:	20010ef8 	.word	0x20010ef8

080143a0 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 80143a0:	b580      	push	{r7, lr}
 80143a2:	b084      	sub	sp, #16
 80143a4:	af00      	add	r7, sp, #0
 80143a6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80143a8:	687b      	ldr	r3, [r7, #4]
 80143aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80143ac:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80143ae:	210c      	movs	r1, #12
 80143b0:	68f8      	ldr	r0, [r7, #12]
 80143b2:	f001 f855 	bl	8015460 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80143b6:	4b06      	ldr	r3, [pc, #24]	; (80143d0 <dhcp_handle_nak+0x30>)
 80143b8:	4a05      	ldr	r2, [pc, #20]	; (80143d0 <dhcp_handle_nak+0x30>)
 80143ba:	4905      	ldr	r1, [pc, #20]	; (80143d0 <dhcp_handle_nak+0x30>)
 80143bc:	6878      	ldr	r0, [r7, #4]
 80143be:	f7f7 ffab 	bl	800c318 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 80143c2:	6878      	ldr	r0, [r7, #4]
 80143c4:	f000 fc48 	bl	8014c58 <dhcp_discover>
}
 80143c8:	bf00      	nop
 80143ca:	3710      	adds	r7, #16
 80143cc:	46bd      	mov	sp, r7
 80143ce:	bd80      	pop	{r7, pc}
 80143d0:	08027dd4 	.word	0x08027dd4

080143d4 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 80143d4:	b580      	push	{r7, lr}
 80143d6:	b084      	sub	sp, #16
 80143d8:	af00      	add	r7, sp, #0
 80143da:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80143dc:	687b      	ldr	r3, [r7, #4]
 80143de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80143e0:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 80143e2:	2108      	movs	r1, #8
 80143e4:	68f8      	ldr	r0, [r7, #12]
 80143e6:	f001 f83b 	bl	8015460 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 80143ea:	68fb      	ldr	r3, [r7, #12]
 80143ec:	331c      	adds	r3, #28
 80143ee:	2200      	movs	r2, #0
 80143f0:	4619      	mov	r1, r3
 80143f2:	6878      	ldr	r0, [r7, #4]
 80143f4:	f002 fb3c 	bl	8016a70 <etharp_query>
 80143f8:	4603      	mov	r3, r0
 80143fa:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 80143fc:	68fb      	ldr	r3, [r7, #12]
 80143fe:	799b      	ldrb	r3, [r3, #6]
 8014400:	2bff      	cmp	r3, #255	; 0xff
 8014402:	d005      	beq.n	8014410 <dhcp_check+0x3c>
    dhcp->tries++;
 8014404:	68fb      	ldr	r3, [r7, #12]
 8014406:	799b      	ldrb	r3, [r3, #6]
 8014408:	3301      	adds	r3, #1
 801440a:	b2da      	uxtb	r2, r3
 801440c:	68fb      	ldr	r3, [r7, #12]
 801440e:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8014410:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8014414:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014416:	893b      	ldrh	r3, [r7, #8]
 8014418:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801441c:	4a06      	ldr	r2, [pc, #24]	; (8014438 <dhcp_check+0x64>)
 801441e:	fb82 1203 	smull	r1, r2, r2, r3
 8014422:	1152      	asrs	r2, r2, #5
 8014424:	17db      	asrs	r3, r3, #31
 8014426:	1ad3      	subs	r3, r2, r3
 8014428:	b29a      	uxth	r2, r3
 801442a:	68fb      	ldr	r3, [r7, #12]
 801442c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 801442e:	bf00      	nop
 8014430:	3710      	adds	r7, #16
 8014432:	46bd      	mov	sp, r7
 8014434:	bd80      	pop	{r7, pc}
 8014436:	bf00      	nop
 8014438:	10624dd3 	.word	0x10624dd3

0801443c <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 801443c:	b580      	push	{r7, lr}
 801443e:	b084      	sub	sp, #16
 8014440:	af00      	add	r7, sp, #0
 8014442:	6078      	str	r0, [r7, #4]
 8014444:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801444a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 801444c:	4b0c      	ldr	r3, [pc, #48]	; (8014480 <dhcp_handle_offer+0x44>)
 801444e:	789b      	ldrb	r3, [r3, #2]
 8014450:	2b00      	cmp	r3, #0
 8014452:	d011      	beq.n	8014478 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8014454:	68fb      	ldr	r3, [r7, #12]
 8014456:	2200      	movs	r2, #0
 8014458:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 801445a:	4b0a      	ldr	r3, [pc, #40]	; (8014484 <dhcp_handle_offer+0x48>)
 801445c:	689b      	ldr	r3, [r3, #8]
 801445e:	4618      	mov	r0, r3
 8014460:	f7f7 f849 	bl	800b4f6 <lwip_htonl>
 8014464:	4602      	mov	r2, r0
 8014466:	68fb      	ldr	r3, [r7, #12]
 8014468:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801446a:	683b      	ldr	r3, [r7, #0]
 801446c:	691a      	ldr	r2, [r3, #16]
 801446e:	68fb      	ldr	r3, [r7, #12]
 8014470:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8014472:	6878      	ldr	r0, [r7, #4]
 8014474:	f000 f808 	bl	8014488 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8014478:	bf00      	nop
 801447a:	3710      	adds	r7, #16
 801447c:	46bd      	mov	sp, r7
 801447e:	bd80      	pop	{r7, pc}
 8014480:	20010ef0 	.word	0x20010ef0
 8014484:	20010ed0 	.word	0x20010ed0

08014488 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8014488:	b5b0      	push	{r4, r5, r7, lr}
 801448a:	b08a      	sub	sp, #40	; 0x28
 801448c:	af02      	add	r7, sp, #8
 801448e:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	2b00      	cmp	r3, #0
 8014494:	d109      	bne.n	80144aa <dhcp_select+0x22>
 8014496:	4b71      	ldr	r3, [pc, #452]	; (801465c <dhcp_select+0x1d4>)
 8014498:	f240 1277 	movw	r2, #375	; 0x177
 801449c:	4970      	ldr	r1, [pc, #448]	; (8014660 <dhcp_select+0x1d8>)
 801449e:	4871      	ldr	r0, [pc, #452]	; (8014664 <dhcp_select+0x1dc>)
 80144a0:	f004 fb7a 	bl	8018b98 <iprintf>
 80144a4:	f06f 030f 	mvn.w	r3, #15
 80144a8:	e0d3      	b.n	8014652 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 80144aa:	687b      	ldr	r3, [r7, #4]
 80144ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80144ae:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 80144b0:	69bb      	ldr	r3, [r7, #24]
 80144b2:	2b00      	cmp	r3, #0
 80144b4:	d109      	bne.n	80144ca <dhcp_select+0x42>
 80144b6:	4b69      	ldr	r3, [pc, #420]	; (801465c <dhcp_select+0x1d4>)
 80144b8:	f240 1279 	movw	r2, #377	; 0x179
 80144bc:	496a      	ldr	r1, [pc, #424]	; (8014668 <dhcp_select+0x1e0>)
 80144be:	4869      	ldr	r0, [pc, #420]	; (8014664 <dhcp_select+0x1dc>)
 80144c0:	f004 fb6a 	bl	8018b98 <iprintf>
 80144c4:	f06f 0305 	mvn.w	r3, #5
 80144c8:	e0c3      	b.n	8014652 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 80144ca:	2101      	movs	r1, #1
 80144cc:	69b8      	ldr	r0, [r7, #24]
 80144ce:	f000 ffc7 	bl	8015460 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80144d2:	f107 030c 	add.w	r3, r7, #12
 80144d6:	2203      	movs	r2, #3
 80144d8:	69b9      	ldr	r1, [r7, #24]
 80144da:	6878      	ldr	r0, [r7, #4]
 80144dc:	f001 fc4c 	bl	8015d78 <dhcp_create_msg>
 80144e0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80144e2:	697b      	ldr	r3, [r7, #20]
 80144e4:	2b00      	cmp	r3, #0
 80144e6:	f000 8085 	beq.w	80145f4 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80144ea:	697b      	ldr	r3, [r7, #20]
 80144ec:	685b      	ldr	r3, [r3, #4]
 80144ee:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80144f0:	89b8      	ldrh	r0, [r7, #12]
 80144f2:	693b      	ldr	r3, [r7, #16]
 80144f4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80144f8:	2302      	movs	r3, #2
 80144fa:	2239      	movs	r2, #57	; 0x39
 80144fc:	f000 ffca 	bl	8015494 <dhcp_option>
 8014500:	4603      	mov	r3, r0
 8014502:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8014504:	89b8      	ldrh	r0, [r7, #12]
 8014506:	693b      	ldr	r3, [r7, #16]
 8014508:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801450c:	687b      	ldr	r3, [r7, #4]
 801450e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014510:	461a      	mov	r2, r3
 8014512:	f001 f819 	bl	8015548 <dhcp_option_short>
 8014516:	4603      	mov	r3, r0
 8014518:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801451a:	89b8      	ldrh	r0, [r7, #12]
 801451c:	693b      	ldr	r3, [r7, #16]
 801451e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014522:	2304      	movs	r3, #4
 8014524:	2232      	movs	r2, #50	; 0x32
 8014526:	f000 ffb5 	bl	8015494 <dhcp_option>
 801452a:	4603      	mov	r3, r0
 801452c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801452e:	89bc      	ldrh	r4, [r7, #12]
 8014530:	693b      	ldr	r3, [r7, #16]
 8014532:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8014536:	69bb      	ldr	r3, [r7, #24]
 8014538:	69db      	ldr	r3, [r3, #28]
 801453a:	4618      	mov	r0, r3
 801453c:	f7f6 ffdb 	bl	800b4f6 <lwip_htonl>
 8014540:	4603      	mov	r3, r0
 8014542:	461a      	mov	r2, r3
 8014544:	4629      	mov	r1, r5
 8014546:	4620      	mov	r0, r4
 8014548:	f001 f830 	bl	80155ac <dhcp_option_long>
 801454c:	4603      	mov	r3, r0
 801454e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8014550:	89b8      	ldrh	r0, [r7, #12]
 8014552:	693b      	ldr	r3, [r7, #16]
 8014554:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014558:	2304      	movs	r3, #4
 801455a:	2236      	movs	r2, #54	; 0x36
 801455c:	f000 ff9a 	bl	8015494 <dhcp_option>
 8014560:	4603      	mov	r3, r0
 8014562:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8014564:	89bc      	ldrh	r4, [r7, #12]
 8014566:	693b      	ldr	r3, [r7, #16]
 8014568:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801456c:	69bb      	ldr	r3, [r7, #24]
 801456e:	699b      	ldr	r3, [r3, #24]
 8014570:	4618      	mov	r0, r3
 8014572:	f7f6 ffc0 	bl	800b4f6 <lwip_htonl>
 8014576:	4603      	mov	r3, r0
 8014578:	461a      	mov	r2, r3
 801457a:	4629      	mov	r1, r5
 801457c:	4620      	mov	r0, r4
 801457e:	f001 f815 	bl	80155ac <dhcp_option_long>
 8014582:	4603      	mov	r3, r0
 8014584:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014586:	89b8      	ldrh	r0, [r7, #12]
 8014588:	693b      	ldr	r3, [r7, #16]
 801458a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801458e:	2303      	movs	r3, #3
 8014590:	2237      	movs	r2, #55	; 0x37
 8014592:	f000 ff7f 	bl	8015494 <dhcp_option>
 8014596:	4603      	mov	r3, r0
 8014598:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801459a:	2300      	movs	r3, #0
 801459c:	77bb      	strb	r3, [r7, #30]
 801459e:	e00e      	b.n	80145be <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80145a0:	89b8      	ldrh	r0, [r7, #12]
 80145a2:	693b      	ldr	r3, [r7, #16]
 80145a4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80145a8:	7fbb      	ldrb	r3, [r7, #30]
 80145aa:	4a30      	ldr	r2, [pc, #192]	; (801466c <dhcp_select+0x1e4>)
 80145ac:	5cd3      	ldrb	r3, [r2, r3]
 80145ae:	461a      	mov	r2, r3
 80145b0:	f000 ffa4 	bl	80154fc <dhcp_option_byte>
 80145b4:	4603      	mov	r3, r0
 80145b6:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80145b8:	7fbb      	ldrb	r3, [r7, #30]
 80145ba:	3301      	adds	r3, #1
 80145bc:	77bb      	strb	r3, [r7, #30]
 80145be:	7fbb      	ldrb	r3, [r7, #30]
 80145c0:	2b02      	cmp	r3, #2
 80145c2:	d9ed      	bls.n	80145a0 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80145c4:	89b8      	ldrh	r0, [r7, #12]
 80145c6:	693b      	ldr	r3, [r7, #16]
 80145c8:	33f0      	adds	r3, #240	; 0xf0
 80145ca:	697a      	ldr	r2, [r7, #20]
 80145cc:	4619      	mov	r1, r3
 80145ce:	f001 fca9 	bl	8015f24 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80145d2:	4b27      	ldr	r3, [pc, #156]	; (8014670 <dhcp_select+0x1e8>)
 80145d4:	6818      	ldr	r0, [r3, #0]
 80145d6:	4b27      	ldr	r3, [pc, #156]	; (8014674 <dhcp_select+0x1ec>)
 80145d8:	9301      	str	r3, [sp, #4]
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	9300      	str	r3, [sp, #0]
 80145de:	2343      	movs	r3, #67	; 0x43
 80145e0:	4a25      	ldr	r2, [pc, #148]	; (8014678 <dhcp_select+0x1f0>)
 80145e2:	6979      	ldr	r1, [r7, #20]
 80145e4:	f7ff fbce 	bl	8013d84 <udp_sendto_if_src>
 80145e8:	4603      	mov	r3, r0
 80145ea:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80145ec:	6978      	ldr	r0, [r7, #20]
 80145ee:	f7f8 fba1 	bl	800cd34 <pbuf_free>
 80145f2:	e001      	b.n	80145f8 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80145f4:	23ff      	movs	r3, #255	; 0xff
 80145f6:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80145f8:	69bb      	ldr	r3, [r7, #24]
 80145fa:	799b      	ldrb	r3, [r3, #6]
 80145fc:	2bff      	cmp	r3, #255	; 0xff
 80145fe:	d005      	beq.n	801460c <dhcp_select+0x184>
    dhcp->tries++;
 8014600:	69bb      	ldr	r3, [r7, #24]
 8014602:	799b      	ldrb	r3, [r3, #6]
 8014604:	3301      	adds	r3, #1
 8014606:	b2da      	uxtb	r2, r3
 8014608:	69bb      	ldr	r3, [r7, #24]
 801460a:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801460c:	69bb      	ldr	r3, [r7, #24]
 801460e:	799b      	ldrb	r3, [r3, #6]
 8014610:	2b05      	cmp	r3, #5
 8014612:	d80d      	bhi.n	8014630 <dhcp_select+0x1a8>
 8014614:	69bb      	ldr	r3, [r7, #24]
 8014616:	799b      	ldrb	r3, [r3, #6]
 8014618:	461a      	mov	r2, r3
 801461a:	2301      	movs	r3, #1
 801461c:	4093      	lsls	r3, r2
 801461e:	b29b      	uxth	r3, r3
 8014620:	461a      	mov	r2, r3
 8014622:	0152      	lsls	r2, r2, #5
 8014624:	1ad2      	subs	r2, r2, r3
 8014626:	0092      	lsls	r2, r2, #2
 8014628:	4413      	add	r3, r2
 801462a:	00db      	lsls	r3, r3, #3
 801462c:	b29b      	uxth	r3, r3
 801462e:	e001      	b.n	8014634 <dhcp_select+0x1ac>
 8014630:	f64e 2360 	movw	r3, #60000	; 0xea60
 8014634:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014636:	89fb      	ldrh	r3, [r7, #14]
 8014638:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801463c:	4a0f      	ldr	r2, [pc, #60]	; (801467c <dhcp_select+0x1f4>)
 801463e:	fb82 1203 	smull	r1, r2, r2, r3
 8014642:	1152      	asrs	r2, r2, #5
 8014644:	17db      	asrs	r3, r3, #31
 8014646:	1ad3      	subs	r3, r2, r3
 8014648:	b29a      	uxth	r2, r3
 801464a:	69bb      	ldr	r3, [r7, #24]
 801464c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801464e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014652:	4618      	mov	r0, r3
 8014654:	3720      	adds	r7, #32
 8014656:	46bd      	mov	sp, r7
 8014658:	bdb0      	pop	{r4, r5, r7, pc}
 801465a:	bf00      	nop
 801465c:	0801d0f0 	.word	0x0801d0f0
 8014660:	0801d19c 	.word	0x0801d19c
 8014664:	0801d150 	.word	0x0801d150
 8014668:	0801d1b8 	.word	0x0801d1b8
 801466c:	20000030 	.word	0x20000030
 8014670:	20010ef8 	.word	0x20010ef8
 8014674:	08027dd4 	.word	0x08027dd4
 8014678:	08027dd8 	.word	0x08027dd8
 801467c:	10624dd3 	.word	0x10624dd3

08014680 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8014680:	b580      	push	{r7, lr}
 8014682:	b082      	sub	sp, #8
 8014684:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8014686:	4b27      	ldr	r3, [pc, #156]	; (8014724 <dhcp_coarse_tmr+0xa4>)
 8014688:	681b      	ldr	r3, [r3, #0]
 801468a:	607b      	str	r3, [r7, #4]
 801468c:	e042      	b.n	8014714 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801468e:	687b      	ldr	r3, [r7, #4]
 8014690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014692:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8014694:	683b      	ldr	r3, [r7, #0]
 8014696:	2b00      	cmp	r3, #0
 8014698:	d039      	beq.n	801470e <dhcp_coarse_tmr+0x8e>
 801469a:	683b      	ldr	r3, [r7, #0]
 801469c:	795b      	ldrb	r3, [r3, #5]
 801469e:	2b00      	cmp	r3, #0
 80146a0:	d035      	beq.n	801470e <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 80146a2:	683b      	ldr	r3, [r7, #0]
 80146a4:	8a9b      	ldrh	r3, [r3, #20]
 80146a6:	2b00      	cmp	r3, #0
 80146a8:	d012      	beq.n	80146d0 <dhcp_coarse_tmr+0x50>
 80146aa:	683b      	ldr	r3, [r7, #0]
 80146ac:	8a5b      	ldrh	r3, [r3, #18]
 80146ae:	3301      	adds	r3, #1
 80146b0:	b29a      	uxth	r2, r3
 80146b2:	683b      	ldr	r3, [r7, #0]
 80146b4:	825a      	strh	r2, [r3, #18]
 80146b6:	683b      	ldr	r3, [r7, #0]
 80146b8:	8a5a      	ldrh	r2, [r3, #18]
 80146ba:	683b      	ldr	r3, [r7, #0]
 80146bc:	8a9b      	ldrh	r3, [r3, #20]
 80146be:	429a      	cmp	r2, r3
 80146c0:	d106      	bne.n	80146d0 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 80146c2:	6878      	ldr	r0, [r7, #4]
 80146c4:	f000 fe32 	bl	801532c <dhcp_release_and_stop>
        dhcp_start(netif);
 80146c8:	6878      	ldr	r0, [r7, #4]
 80146ca:	f000 f969 	bl	80149a0 <dhcp_start>
 80146ce:	e01e      	b.n	801470e <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 80146d0:	683b      	ldr	r3, [r7, #0]
 80146d2:	8a1b      	ldrh	r3, [r3, #16]
 80146d4:	2b00      	cmp	r3, #0
 80146d6:	d00b      	beq.n	80146f0 <dhcp_coarse_tmr+0x70>
 80146d8:	683b      	ldr	r3, [r7, #0]
 80146da:	8a1b      	ldrh	r3, [r3, #16]
 80146dc:	1e5a      	subs	r2, r3, #1
 80146de:	b291      	uxth	r1, r2
 80146e0:	683a      	ldr	r2, [r7, #0]
 80146e2:	8211      	strh	r1, [r2, #16]
 80146e4:	2b01      	cmp	r3, #1
 80146e6:	d103      	bne.n	80146f0 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 80146e8:	6878      	ldr	r0, [r7, #4]
 80146ea:	f000 f8c6 	bl	801487a <dhcp_t2_timeout>
 80146ee:	e00e      	b.n	801470e <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 80146f0:	683b      	ldr	r3, [r7, #0]
 80146f2:	89db      	ldrh	r3, [r3, #14]
 80146f4:	2b00      	cmp	r3, #0
 80146f6:	d00a      	beq.n	801470e <dhcp_coarse_tmr+0x8e>
 80146f8:	683b      	ldr	r3, [r7, #0]
 80146fa:	89db      	ldrh	r3, [r3, #14]
 80146fc:	1e5a      	subs	r2, r3, #1
 80146fe:	b291      	uxth	r1, r2
 8014700:	683a      	ldr	r2, [r7, #0]
 8014702:	81d1      	strh	r1, [r2, #14]
 8014704:	2b01      	cmp	r3, #1
 8014706:	d102      	bne.n	801470e <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8014708:	6878      	ldr	r0, [r7, #4]
 801470a:	f000 f888 	bl	801481e <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 801470e:	687b      	ldr	r3, [r7, #4]
 8014710:	681b      	ldr	r3, [r3, #0]
 8014712:	607b      	str	r3, [r7, #4]
 8014714:	687b      	ldr	r3, [r7, #4]
 8014716:	2b00      	cmp	r3, #0
 8014718:	d1b9      	bne.n	801468e <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 801471a:	bf00      	nop
 801471c:	bf00      	nop
 801471e:	3708      	adds	r7, #8
 8014720:	46bd      	mov	sp, r7
 8014722:	bd80      	pop	{r7, pc}
 8014724:	20010e64 	.word	0x20010e64

08014728 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8014728:	b580      	push	{r7, lr}
 801472a:	b082      	sub	sp, #8
 801472c:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 801472e:	4b16      	ldr	r3, [pc, #88]	; (8014788 <dhcp_fine_tmr+0x60>)
 8014730:	681b      	ldr	r3, [r3, #0]
 8014732:	607b      	str	r3, [r7, #4]
 8014734:	e020      	b.n	8014778 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8014736:	687b      	ldr	r3, [r7, #4]
 8014738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801473a:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 801473c:	683b      	ldr	r3, [r7, #0]
 801473e:	2b00      	cmp	r3, #0
 8014740:	d017      	beq.n	8014772 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8014742:	683b      	ldr	r3, [r7, #0]
 8014744:	891b      	ldrh	r3, [r3, #8]
 8014746:	2b01      	cmp	r3, #1
 8014748:	d906      	bls.n	8014758 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 801474a:	683b      	ldr	r3, [r7, #0]
 801474c:	891b      	ldrh	r3, [r3, #8]
 801474e:	3b01      	subs	r3, #1
 8014750:	b29a      	uxth	r2, r3
 8014752:	683b      	ldr	r3, [r7, #0]
 8014754:	811a      	strh	r2, [r3, #8]
 8014756:	e00c      	b.n	8014772 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8014758:	683b      	ldr	r3, [r7, #0]
 801475a:	891b      	ldrh	r3, [r3, #8]
 801475c:	2b01      	cmp	r3, #1
 801475e:	d108      	bne.n	8014772 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8014760:	683b      	ldr	r3, [r7, #0]
 8014762:	891b      	ldrh	r3, [r3, #8]
 8014764:	3b01      	subs	r3, #1
 8014766:	b29a      	uxth	r2, r3
 8014768:	683b      	ldr	r3, [r7, #0]
 801476a:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 801476c:	6878      	ldr	r0, [r7, #4]
 801476e:	f000 f80d 	bl	801478c <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8014772:	687b      	ldr	r3, [r7, #4]
 8014774:	681b      	ldr	r3, [r3, #0]
 8014776:	607b      	str	r3, [r7, #4]
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	2b00      	cmp	r3, #0
 801477c:	d1db      	bne.n	8014736 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 801477e:	bf00      	nop
 8014780:	bf00      	nop
 8014782:	3708      	adds	r7, #8
 8014784:	46bd      	mov	sp, r7
 8014786:	bd80      	pop	{r7, pc}
 8014788:	20010e64 	.word	0x20010e64

0801478c <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 801478c:	b580      	push	{r7, lr}
 801478e:	b084      	sub	sp, #16
 8014790:	af00      	add	r7, sp, #0
 8014792:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014798:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 801479a:	68fb      	ldr	r3, [r7, #12]
 801479c:	795b      	ldrb	r3, [r3, #5]
 801479e:	2b0c      	cmp	r3, #12
 80147a0:	d003      	beq.n	80147aa <dhcp_timeout+0x1e>
 80147a2:	68fb      	ldr	r3, [r7, #12]
 80147a4:	795b      	ldrb	r3, [r3, #5]
 80147a6:	2b06      	cmp	r3, #6
 80147a8:	d103      	bne.n	80147b2 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 80147aa:	6878      	ldr	r0, [r7, #4]
 80147ac:	f000 fa54 	bl	8014c58 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 80147b0:	e031      	b.n	8014816 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 80147b2:	68fb      	ldr	r3, [r7, #12]
 80147b4:	795b      	ldrb	r3, [r3, #5]
 80147b6:	2b01      	cmp	r3, #1
 80147b8:	d10e      	bne.n	80147d8 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 80147ba:	68fb      	ldr	r3, [r7, #12]
 80147bc:	799b      	ldrb	r3, [r3, #6]
 80147be:	2b05      	cmp	r3, #5
 80147c0:	d803      	bhi.n	80147ca <dhcp_timeout+0x3e>
      dhcp_select(netif);
 80147c2:	6878      	ldr	r0, [r7, #4]
 80147c4:	f7ff fe60 	bl	8014488 <dhcp_select>
}
 80147c8:	e025      	b.n	8014816 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 80147ca:	6878      	ldr	r0, [r7, #4]
 80147cc:	f000 fdae 	bl	801532c <dhcp_release_and_stop>
      dhcp_start(netif);
 80147d0:	6878      	ldr	r0, [r7, #4]
 80147d2:	f000 f8e5 	bl	80149a0 <dhcp_start>
}
 80147d6:	e01e      	b.n	8014816 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 80147d8:	68fb      	ldr	r3, [r7, #12]
 80147da:	795b      	ldrb	r3, [r3, #5]
 80147dc:	2b08      	cmp	r3, #8
 80147de:	d10b      	bne.n	80147f8 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 80147e0:	68fb      	ldr	r3, [r7, #12]
 80147e2:	799b      	ldrb	r3, [r3, #6]
 80147e4:	2b01      	cmp	r3, #1
 80147e6:	d803      	bhi.n	80147f0 <dhcp_timeout+0x64>
      dhcp_check(netif);
 80147e8:	6878      	ldr	r0, [r7, #4]
 80147ea:	f7ff fdf3 	bl	80143d4 <dhcp_check>
}
 80147ee:	e012      	b.n	8014816 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 80147f0:	6878      	ldr	r0, [r7, #4]
 80147f2:	f000 fad3 	bl	8014d9c <dhcp_bind>
}
 80147f6:	e00e      	b.n	8014816 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 80147f8:	68fb      	ldr	r3, [r7, #12]
 80147fa:	795b      	ldrb	r3, [r3, #5]
 80147fc:	2b03      	cmp	r3, #3
 80147fe:	d10a      	bne.n	8014816 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8014800:	68fb      	ldr	r3, [r7, #12]
 8014802:	799b      	ldrb	r3, [r3, #6]
 8014804:	2b01      	cmp	r3, #1
 8014806:	d803      	bhi.n	8014810 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8014808:	6878      	ldr	r0, [r7, #4]
 801480a:	f000 fcd9 	bl	80151c0 <dhcp_reboot>
}
 801480e:	e002      	b.n	8014816 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8014810:	6878      	ldr	r0, [r7, #4]
 8014812:	f000 fa21 	bl	8014c58 <dhcp_discover>
}
 8014816:	bf00      	nop
 8014818:	3710      	adds	r7, #16
 801481a:	46bd      	mov	sp, r7
 801481c:	bd80      	pop	{r7, pc}

0801481e <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 801481e:	b580      	push	{r7, lr}
 8014820:	b084      	sub	sp, #16
 8014822:	af00      	add	r7, sp, #0
 8014824:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801482a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801482c:	68fb      	ldr	r3, [r7, #12]
 801482e:	795b      	ldrb	r3, [r3, #5]
 8014830:	2b01      	cmp	r3, #1
 8014832:	d007      	beq.n	8014844 <dhcp_t1_timeout+0x26>
 8014834:	68fb      	ldr	r3, [r7, #12]
 8014836:	795b      	ldrb	r3, [r3, #5]
 8014838:	2b0a      	cmp	r3, #10
 801483a:	d003      	beq.n	8014844 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 801483c:	68fb      	ldr	r3, [r7, #12]
 801483e:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8014840:	2b05      	cmp	r3, #5
 8014842:	d116      	bne.n	8014872 <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8014844:	6878      	ldr	r0, [r7, #4]
 8014846:	f000 fb83 	bl	8014f50 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801484a:	68fb      	ldr	r3, [r7, #12]
 801484c:	899b      	ldrh	r3, [r3, #12]
 801484e:	461a      	mov	r2, r3
 8014850:	68fb      	ldr	r3, [r7, #12]
 8014852:	8a5b      	ldrh	r3, [r3, #18]
 8014854:	1ad3      	subs	r3, r2, r3
 8014856:	2b01      	cmp	r3, #1
 8014858:	dd0b      	ble.n	8014872 <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 801485a:	68fb      	ldr	r3, [r7, #12]
 801485c:	899b      	ldrh	r3, [r3, #12]
 801485e:	461a      	mov	r2, r3
 8014860:	68fb      	ldr	r3, [r7, #12]
 8014862:	8a5b      	ldrh	r3, [r3, #18]
 8014864:	1ad3      	subs	r3, r2, r3
 8014866:	0fda      	lsrs	r2, r3, #31
 8014868:	4413      	add	r3, r2
 801486a:	105b      	asrs	r3, r3, #1
 801486c:	b29a      	uxth	r2, r3
 801486e:	68fb      	ldr	r3, [r7, #12]
 8014870:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8014872:	bf00      	nop
 8014874:	3710      	adds	r7, #16
 8014876:	46bd      	mov	sp, r7
 8014878:	bd80      	pop	{r7, pc}

0801487a <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 801487a:	b580      	push	{r7, lr}
 801487c:	b084      	sub	sp, #16
 801487e:	af00      	add	r7, sp, #0
 8014880:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014882:	687b      	ldr	r3, [r7, #4]
 8014884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014886:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8014888:	68fb      	ldr	r3, [r7, #12]
 801488a:	795b      	ldrb	r3, [r3, #5]
 801488c:	2b01      	cmp	r3, #1
 801488e:	d00b      	beq.n	80148a8 <dhcp_t2_timeout+0x2e>
 8014890:	68fb      	ldr	r3, [r7, #12]
 8014892:	795b      	ldrb	r3, [r3, #5]
 8014894:	2b0a      	cmp	r3, #10
 8014896:	d007      	beq.n	80148a8 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8014898:	68fb      	ldr	r3, [r7, #12]
 801489a:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801489c:	2b05      	cmp	r3, #5
 801489e:	d003      	beq.n	80148a8 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 80148a0:	68fb      	ldr	r3, [r7, #12]
 80148a2:	795b      	ldrb	r3, [r3, #5]
 80148a4:	2b04      	cmp	r3, #4
 80148a6:	d116      	bne.n	80148d6 <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 80148a8:	6878      	ldr	r0, [r7, #4]
 80148aa:	f000 fbed 	bl	8015088 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80148ae:	68fb      	ldr	r3, [r7, #12]
 80148b0:	8a9b      	ldrh	r3, [r3, #20]
 80148b2:	461a      	mov	r2, r3
 80148b4:	68fb      	ldr	r3, [r7, #12]
 80148b6:	8a5b      	ldrh	r3, [r3, #18]
 80148b8:	1ad3      	subs	r3, r2, r3
 80148ba:	2b01      	cmp	r3, #1
 80148bc:	dd0b      	ble.n	80148d6 <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 80148be:	68fb      	ldr	r3, [r7, #12]
 80148c0:	8a9b      	ldrh	r3, [r3, #20]
 80148c2:	461a      	mov	r2, r3
 80148c4:	68fb      	ldr	r3, [r7, #12]
 80148c6:	8a5b      	ldrh	r3, [r3, #18]
 80148c8:	1ad3      	subs	r3, r2, r3
 80148ca:	0fda      	lsrs	r2, r3, #31
 80148cc:	4413      	add	r3, r2
 80148ce:	105b      	asrs	r3, r3, #1
 80148d0:	b29a      	uxth	r2, r3
 80148d2:	68fb      	ldr	r3, [r7, #12]
 80148d4:	821a      	strh	r2, [r3, #16]
    }
  }
}
 80148d6:	bf00      	nop
 80148d8:	3710      	adds	r7, #16
 80148da:	46bd      	mov	sp, r7
 80148dc:	bd80      	pop	{r7, pc}
	...

080148e0 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 80148e0:	b580      	push	{r7, lr}
 80148e2:	b084      	sub	sp, #16
 80148e4:	af00      	add	r7, sp, #0
 80148e6:	6078      	str	r0, [r7, #4]
 80148e8:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80148ee:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80148f0:	68fb      	ldr	r3, [r7, #12]
 80148f2:	2200      	movs	r2, #0
 80148f4:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80148f6:	68fb      	ldr	r3, [r7, #12]
 80148f8:	2200      	movs	r2, #0
 80148fa:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 80148fc:	4b26      	ldr	r3, [pc, #152]	; (8014998 <dhcp_handle_ack+0xb8>)
 80148fe:	78db      	ldrb	r3, [r3, #3]
 8014900:	2b00      	cmp	r3, #0
 8014902:	d003      	beq.n	801490c <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8014904:	4b25      	ldr	r3, [pc, #148]	; (801499c <dhcp_handle_ack+0xbc>)
 8014906:	68da      	ldr	r2, [r3, #12]
 8014908:	68fb      	ldr	r3, [r7, #12]
 801490a:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 801490c:	4b22      	ldr	r3, [pc, #136]	; (8014998 <dhcp_handle_ack+0xb8>)
 801490e:	791b      	ldrb	r3, [r3, #4]
 8014910:	2b00      	cmp	r3, #0
 8014912:	d004      	beq.n	801491e <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8014914:	4b21      	ldr	r3, [pc, #132]	; (801499c <dhcp_handle_ack+0xbc>)
 8014916:	691a      	ldr	r2, [r3, #16]
 8014918:	68fb      	ldr	r3, [r7, #12]
 801491a:	62da      	str	r2, [r3, #44]	; 0x2c
 801491c:	e004      	b.n	8014928 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 801491e:	68fb      	ldr	r3, [r7, #12]
 8014920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014922:	085a      	lsrs	r2, r3, #1
 8014924:	68fb      	ldr	r3, [r7, #12]
 8014926:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8014928:	4b1b      	ldr	r3, [pc, #108]	; (8014998 <dhcp_handle_ack+0xb8>)
 801492a:	795b      	ldrb	r3, [r3, #5]
 801492c:	2b00      	cmp	r3, #0
 801492e:	d004      	beq.n	801493a <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8014930:	4b1a      	ldr	r3, [pc, #104]	; (801499c <dhcp_handle_ack+0xbc>)
 8014932:	695a      	ldr	r2, [r3, #20]
 8014934:	68fb      	ldr	r3, [r7, #12]
 8014936:	631a      	str	r2, [r3, #48]	; 0x30
 8014938:	e007      	b.n	801494a <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 801493a:	68fb      	ldr	r3, [r7, #12]
 801493c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801493e:	4613      	mov	r3, r2
 8014940:	00db      	lsls	r3, r3, #3
 8014942:	1a9b      	subs	r3, r3, r2
 8014944:	08da      	lsrs	r2, r3, #3
 8014946:	68fb      	ldr	r3, [r7, #12]
 8014948:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801494a:	683b      	ldr	r3, [r7, #0]
 801494c:	691a      	ldr	r2, [r3, #16]
 801494e:	68fb      	ldr	r3, [r7, #12]
 8014950:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8014952:	4b11      	ldr	r3, [pc, #68]	; (8014998 <dhcp_handle_ack+0xb8>)
 8014954:	799b      	ldrb	r3, [r3, #6]
 8014956:	2b00      	cmp	r3, #0
 8014958:	d00b      	beq.n	8014972 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 801495a:	4b10      	ldr	r3, [pc, #64]	; (801499c <dhcp_handle_ack+0xbc>)
 801495c:	699b      	ldr	r3, [r3, #24]
 801495e:	4618      	mov	r0, r3
 8014960:	f7f6 fdc9 	bl	800b4f6 <lwip_htonl>
 8014964:	4602      	mov	r2, r0
 8014966:	68fb      	ldr	r3, [r7, #12]
 8014968:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 801496a:	68fb      	ldr	r3, [r7, #12]
 801496c:	2201      	movs	r2, #1
 801496e:	71da      	strb	r2, [r3, #7]
 8014970:	e002      	b.n	8014978 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8014972:	68fb      	ldr	r3, [r7, #12]
 8014974:	2200      	movs	r2, #0
 8014976:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8014978:	4b07      	ldr	r3, [pc, #28]	; (8014998 <dhcp_handle_ack+0xb8>)
 801497a:	79db      	ldrb	r3, [r3, #7]
 801497c:	2b00      	cmp	r3, #0
 801497e:	d007      	beq.n	8014990 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8014980:	4b06      	ldr	r3, [pc, #24]	; (801499c <dhcp_handle_ack+0xbc>)
 8014982:	69db      	ldr	r3, [r3, #28]
 8014984:	4618      	mov	r0, r3
 8014986:	f7f6 fdb6 	bl	800b4f6 <lwip_htonl>
 801498a:	4602      	mov	r2, r0
 801498c:	68fb      	ldr	r3, [r7, #12]
 801498e:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8014990:	bf00      	nop
 8014992:	3710      	adds	r7, #16
 8014994:	46bd      	mov	sp, r7
 8014996:	bd80      	pop	{r7, pc}
 8014998:	20010ef0 	.word	0x20010ef0
 801499c:	20010ed0 	.word	0x20010ed0

080149a0 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 80149a0:	b580      	push	{r7, lr}
 80149a2:	b084      	sub	sp, #16
 80149a4:	af00      	add	r7, sp, #0
 80149a6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	2b00      	cmp	r3, #0
 80149ac:	d109      	bne.n	80149c2 <dhcp_start+0x22>
 80149ae:	4b37      	ldr	r3, [pc, #220]	; (8014a8c <dhcp_start+0xec>)
 80149b0:	f240 22e7 	movw	r2, #743	; 0x2e7
 80149b4:	4936      	ldr	r1, [pc, #216]	; (8014a90 <dhcp_start+0xf0>)
 80149b6:	4837      	ldr	r0, [pc, #220]	; (8014a94 <dhcp_start+0xf4>)
 80149b8:	f004 f8ee 	bl	8018b98 <iprintf>
 80149bc:	f06f 030f 	mvn.w	r3, #15
 80149c0:	e060      	b.n	8014a84 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 80149c2:	687b      	ldr	r3, [r7, #4]
 80149c4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80149c8:	f003 0301 	and.w	r3, r3, #1
 80149cc:	2b00      	cmp	r3, #0
 80149ce:	d109      	bne.n	80149e4 <dhcp_start+0x44>
 80149d0:	4b2e      	ldr	r3, [pc, #184]	; (8014a8c <dhcp_start+0xec>)
 80149d2:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 80149d6:	4930      	ldr	r1, [pc, #192]	; (8014a98 <dhcp_start+0xf8>)
 80149d8:	482e      	ldr	r0, [pc, #184]	; (8014a94 <dhcp_start+0xf4>)
 80149da:	f004 f8dd 	bl	8018b98 <iprintf>
 80149de:	f06f 030f 	mvn.w	r3, #15
 80149e2:	e04f      	b.n	8014a84 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 80149e4:	687b      	ldr	r3, [r7, #4]
 80149e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80149e8:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 80149ea:	687b      	ldr	r3, [r7, #4]
 80149ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80149ee:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 80149f2:	d202      	bcs.n	80149fa <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 80149f4:	f04f 33ff 	mov.w	r3, #4294967295
 80149f8:	e044      	b.n	8014a84 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 80149fa:	68fb      	ldr	r3, [r7, #12]
 80149fc:	2b00      	cmp	r3, #0
 80149fe:	d10d      	bne.n	8014a1c <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8014a00:	2034      	movs	r0, #52	; 0x34
 8014a02:	f7f7 f8cd 	bl	800bba0 <mem_malloc>
 8014a06:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8014a08:	68fb      	ldr	r3, [r7, #12]
 8014a0a:	2b00      	cmp	r3, #0
 8014a0c:	d102      	bne.n	8014a14 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8014a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8014a12:	e037      	b.n	8014a84 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8014a14:	687b      	ldr	r3, [r7, #4]
 8014a16:	68fa      	ldr	r2, [r7, #12]
 8014a18:	625a      	str	r2, [r3, #36]	; 0x24
 8014a1a:	e005      	b.n	8014a28 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8014a1c:	68fb      	ldr	r3, [r7, #12]
 8014a1e:	791b      	ldrb	r3, [r3, #4]
 8014a20:	2b00      	cmp	r3, #0
 8014a22:	d001      	beq.n	8014a28 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8014a24:	f7ff fc92 	bl	801434c <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8014a28:	2234      	movs	r2, #52	; 0x34
 8014a2a:	2100      	movs	r1, #0
 8014a2c:	68f8      	ldr	r0, [r7, #12]
 8014a2e:	f004 f952 	bl	8018cd6 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8014a32:	f7ff fc39 	bl	80142a8 <dhcp_inc_pcb_refcount>
 8014a36:	4603      	mov	r3, r0
 8014a38:	2b00      	cmp	r3, #0
 8014a3a:	d002      	beq.n	8014a42 <dhcp_start+0xa2>
    return ERR_MEM;
 8014a3c:	f04f 33ff 	mov.w	r3, #4294967295
 8014a40:	e020      	b.n	8014a84 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 8014a42:	68fb      	ldr	r3, [r7, #12]
 8014a44:	2201      	movs	r2, #1
 8014a46:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014a4e:	f003 0304 	and.w	r3, r3, #4
 8014a52:	2b00      	cmp	r3, #0
 8014a54:	d105      	bne.n	8014a62 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8014a56:	2102      	movs	r1, #2
 8014a58:	68f8      	ldr	r0, [r7, #12]
 8014a5a:	f000 fd01 	bl	8015460 <dhcp_set_state>
    return ERR_OK;
 8014a5e:	2300      	movs	r3, #0
 8014a60:	e010      	b.n	8014a84 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8014a62:	6878      	ldr	r0, [r7, #4]
 8014a64:	f000 f8f8 	bl	8014c58 <dhcp_discover>
 8014a68:	4603      	mov	r3, r0
 8014a6a:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8014a6c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8014a70:	2b00      	cmp	r3, #0
 8014a72:	d005      	beq.n	8014a80 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8014a74:	6878      	ldr	r0, [r7, #4]
 8014a76:	f000 fc59 	bl	801532c <dhcp_release_and_stop>
    return ERR_MEM;
 8014a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8014a7e:	e001      	b.n	8014a84 <dhcp_start+0xe4>
  }
  return result;
 8014a80:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8014a84:	4618      	mov	r0, r3
 8014a86:	3710      	adds	r7, #16
 8014a88:	46bd      	mov	sp, r7
 8014a8a:	bd80      	pop	{r7, pc}
 8014a8c:	0801d0f0 	.word	0x0801d0f0
 8014a90:	0801d1d4 	.word	0x0801d1d4
 8014a94:	0801d150 	.word	0x0801d150
 8014a98:	0801d218 	.word	0x0801d218

08014a9c <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8014a9c:	b580      	push	{r7, lr}
 8014a9e:	b084      	sub	sp, #16
 8014aa0:	af00      	add	r7, sp, #0
 8014aa2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014aa4:	687b      	ldr	r3, [r7, #4]
 8014aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014aa8:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 8014aaa:	68fb      	ldr	r3, [r7, #12]
 8014aac:	2b00      	cmp	r3, #0
 8014aae:	d025      	beq.n	8014afc <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 8014ab0:	68fb      	ldr	r3, [r7, #12]
 8014ab2:	795b      	ldrb	r3, [r3, #5]
 8014ab4:	2b0a      	cmp	r3, #10
 8014ab6:	d008      	beq.n	8014aca <dhcp_network_changed+0x2e>
 8014ab8:	2b0a      	cmp	r3, #10
 8014aba:	dc0d      	bgt.n	8014ad8 <dhcp_network_changed+0x3c>
 8014abc:	2b00      	cmp	r3, #0
 8014abe:	d01f      	beq.n	8014b00 <dhcp_network_changed+0x64>
 8014ac0:	2b00      	cmp	r3, #0
 8014ac2:	db09      	blt.n	8014ad8 <dhcp_network_changed+0x3c>
 8014ac4:	3b03      	subs	r3, #3
 8014ac6:	2b02      	cmp	r3, #2
 8014ac8:	d806      	bhi.n	8014ad8 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 8014aca:	68fb      	ldr	r3, [r7, #12]
 8014acc:	2200      	movs	r2, #0
 8014ace:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8014ad0:	6878      	ldr	r0, [r7, #4]
 8014ad2:	f000 fb75 	bl	80151c0 <dhcp_reboot>
      break;
 8014ad6:	e014      	b.n	8014b02 <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8014ad8:	68fb      	ldr	r3, [r7, #12]
 8014ada:	795b      	ldrb	r3, [r3, #5]
 8014adc:	2b0c      	cmp	r3, #12
 8014ade:	d906      	bls.n	8014aee <dhcp_network_changed+0x52>
 8014ae0:	4b09      	ldr	r3, [pc, #36]	; (8014b08 <dhcp_network_changed+0x6c>)
 8014ae2:	f240 326d 	movw	r2, #877	; 0x36d
 8014ae6:	4909      	ldr	r1, [pc, #36]	; (8014b0c <dhcp_network_changed+0x70>)
 8014ae8:	4809      	ldr	r0, [pc, #36]	; (8014b10 <dhcp_network_changed+0x74>)
 8014aea:	f004 f855 	bl	8018b98 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 8014aee:	68fb      	ldr	r3, [r7, #12]
 8014af0:	2200      	movs	r2, #0
 8014af2:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8014af4:	6878      	ldr	r0, [r7, #4]
 8014af6:	f000 f8af 	bl	8014c58 <dhcp_discover>
      break;
 8014afa:	e002      	b.n	8014b02 <dhcp_network_changed+0x66>
    return;
 8014afc:	bf00      	nop
 8014afe:	e000      	b.n	8014b02 <dhcp_network_changed+0x66>
      break;
 8014b00:	bf00      	nop
  }
}
 8014b02:	3710      	adds	r7, #16
 8014b04:	46bd      	mov	sp, r7
 8014b06:	bd80      	pop	{r7, pc}
 8014b08:	0801d0f0 	.word	0x0801d0f0
 8014b0c:	0801d23c 	.word	0x0801d23c
 8014b10:	0801d150 	.word	0x0801d150

08014b14 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8014b14:	b580      	push	{r7, lr}
 8014b16:	b084      	sub	sp, #16
 8014b18:	af00      	add	r7, sp, #0
 8014b1a:	6078      	str	r0, [r7, #4]
 8014b1c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8014b1e:	687b      	ldr	r3, [r7, #4]
 8014b20:	2b00      	cmp	r3, #0
 8014b22:	d107      	bne.n	8014b34 <dhcp_arp_reply+0x20>
 8014b24:	4b0e      	ldr	r3, [pc, #56]	; (8014b60 <dhcp_arp_reply+0x4c>)
 8014b26:	f240 328b 	movw	r2, #907	; 0x38b
 8014b2a:	490e      	ldr	r1, [pc, #56]	; (8014b64 <dhcp_arp_reply+0x50>)
 8014b2c:	480e      	ldr	r0, [pc, #56]	; (8014b68 <dhcp_arp_reply+0x54>)
 8014b2e:	f004 f833 	bl	8018b98 <iprintf>
 8014b32:	e012      	b.n	8014b5a <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8014b34:	687b      	ldr	r3, [r7, #4]
 8014b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b38:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8014b3a:	68fb      	ldr	r3, [r7, #12]
 8014b3c:	2b00      	cmp	r3, #0
 8014b3e:	d00c      	beq.n	8014b5a <dhcp_arp_reply+0x46>
 8014b40:	68fb      	ldr	r3, [r7, #12]
 8014b42:	795b      	ldrb	r3, [r3, #5]
 8014b44:	2b08      	cmp	r3, #8
 8014b46:	d108      	bne.n	8014b5a <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8014b48:	683b      	ldr	r3, [r7, #0]
 8014b4a:	681a      	ldr	r2, [r3, #0]
 8014b4c:	68fb      	ldr	r3, [r7, #12]
 8014b4e:	69db      	ldr	r3, [r3, #28]
 8014b50:	429a      	cmp	r2, r3
 8014b52:	d102      	bne.n	8014b5a <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8014b54:	6878      	ldr	r0, [r7, #4]
 8014b56:	f000 f809 	bl	8014b6c <dhcp_decline>
    }
  }
}
 8014b5a:	3710      	adds	r7, #16
 8014b5c:	46bd      	mov	sp, r7
 8014b5e:	bd80      	pop	{r7, pc}
 8014b60:	0801d0f0 	.word	0x0801d0f0
 8014b64:	0801d1d4 	.word	0x0801d1d4
 8014b68:	0801d150 	.word	0x0801d150

08014b6c <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8014b6c:	b5b0      	push	{r4, r5, r7, lr}
 8014b6e:	b08a      	sub	sp, #40	; 0x28
 8014b70:	af02      	add	r7, sp, #8
 8014b72:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014b74:	687b      	ldr	r3, [r7, #4]
 8014b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b78:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8014b7a:	210c      	movs	r1, #12
 8014b7c:	69b8      	ldr	r0, [r7, #24]
 8014b7e:	f000 fc6f 	bl	8015460 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8014b82:	f107 030c 	add.w	r3, r7, #12
 8014b86:	2204      	movs	r2, #4
 8014b88:	69b9      	ldr	r1, [r7, #24]
 8014b8a:	6878      	ldr	r0, [r7, #4]
 8014b8c:	f001 f8f4 	bl	8015d78 <dhcp_create_msg>
 8014b90:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8014b92:	697b      	ldr	r3, [r7, #20]
 8014b94:	2b00      	cmp	r3, #0
 8014b96:	d035      	beq.n	8014c04 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014b98:	697b      	ldr	r3, [r7, #20]
 8014b9a:	685b      	ldr	r3, [r3, #4]
 8014b9c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8014b9e:	89b8      	ldrh	r0, [r7, #12]
 8014ba0:	693b      	ldr	r3, [r7, #16]
 8014ba2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014ba6:	2304      	movs	r3, #4
 8014ba8:	2232      	movs	r2, #50	; 0x32
 8014baa:	f000 fc73 	bl	8015494 <dhcp_option>
 8014bae:	4603      	mov	r3, r0
 8014bb0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8014bb2:	89bc      	ldrh	r4, [r7, #12]
 8014bb4:	693b      	ldr	r3, [r7, #16]
 8014bb6:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8014bba:	69bb      	ldr	r3, [r7, #24]
 8014bbc:	69db      	ldr	r3, [r3, #28]
 8014bbe:	4618      	mov	r0, r3
 8014bc0:	f7f6 fc99 	bl	800b4f6 <lwip_htonl>
 8014bc4:	4603      	mov	r3, r0
 8014bc6:	461a      	mov	r2, r3
 8014bc8:	4629      	mov	r1, r5
 8014bca:	4620      	mov	r0, r4
 8014bcc:	f000 fcee 	bl	80155ac <dhcp_option_long>
 8014bd0:	4603      	mov	r3, r0
 8014bd2:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014bd4:	89b8      	ldrh	r0, [r7, #12]
 8014bd6:	693b      	ldr	r3, [r7, #16]
 8014bd8:	33f0      	adds	r3, #240	; 0xf0
 8014bda:	697a      	ldr	r2, [r7, #20]
 8014bdc:	4619      	mov	r1, r3
 8014bde:	f001 f9a1 	bl	8015f24 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8014be2:	4b19      	ldr	r3, [pc, #100]	; (8014c48 <dhcp_decline+0xdc>)
 8014be4:	6818      	ldr	r0, [r3, #0]
 8014be6:	4b19      	ldr	r3, [pc, #100]	; (8014c4c <dhcp_decline+0xe0>)
 8014be8:	9301      	str	r3, [sp, #4]
 8014bea:	687b      	ldr	r3, [r7, #4]
 8014bec:	9300      	str	r3, [sp, #0]
 8014bee:	2343      	movs	r3, #67	; 0x43
 8014bf0:	4a17      	ldr	r2, [pc, #92]	; (8014c50 <dhcp_decline+0xe4>)
 8014bf2:	6979      	ldr	r1, [r7, #20]
 8014bf4:	f7ff f8c6 	bl	8013d84 <udp_sendto_if_src>
 8014bf8:	4603      	mov	r3, r0
 8014bfa:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8014bfc:	6978      	ldr	r0, [r7, #20]
 8014bfe:	f7f8 f899 	bl	800cd34 <pbuf_free>
 8014c02:	e001      	b.n	8014c08 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8014c04:	23ff      	movs	r3, #255	; 0xff
 8014c06:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8014c08:	69bb      	ldr	r3, [r7, #24]
 8014c0a:	799b      	ldrb	r3, [r3, #6]
 8014c0c:	2bff      	cmp	r3, #255	; 0xff
 8014c0e:	d005      	beq.n	8014c1c <dhcp_decline+0xb0>
    dhcp->tries++;
 8014c10:	69bb      	ldr	r3, [r7, #24]
 8014c12:	799b      	ldrb	r3, [r3, #6]
 8014c14:	3301      	adds	r3, #1
 8014c16:	b2da      	uxtb	r2, r3
 8014c18:	69bb      	ldr	r3, [r7, #24]
 8014c1a:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8014c1c:	f242 7310 	movw	r3, #10000	; 0x2710
 8014c20:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014c22:	89fb      	ldrh	r3, [r7, #14]
 8014c24:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014c28:	4a0a      	ldr	r2, [pc, #40]	; (8014c54 <dhcp_decline+0xe8>)
 8014c2a:	fb82 1203 	smull	r1, r2, r2, r3
 8014c2e:	1152      	asrs	r2, r2, #5
 8014c30:	17db      	asrs	r3, r3, #31
 8014c32:	1ad3      	subs	r3, r2, r3
 8014c34:	b29a      	uxth	r2, r3
 8014c36:	69bb      	ldr	r3, [r7, #24]
 8014c38:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014c3a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014c3e:	4618      	mov	r0, r3
 8014c40:	3720      	adds	r7, #32
 8014c42:	46bd      	mov	sp, r7
 8014c44:	bdb0      	pop	{r4, r5, r7, pc}
 8014c46:	bf00      	nop
 8014c48:	20010ef8 	.word	0x20010ef8
 8014c4c:	08027dd4 	.word	0x08027dd4
 8014c50:	08027dd8 	.word	0x08027dd8
 8014c54:	10624dd3 	.word	0x10624dd3

08014c58 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8014c58:	b580      	push	{r7, lr}
 8014c5a:	b08a      	sub	sp, #40	; 0x28
 8014c5c:	af02      	add	r7, sp, #8
 8014c5e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014c60:	687b      	ldr	r3, [r7, #4]
 8014c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c64:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8014c66:	2300      	movs	r3, #0
 8014c68:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8014c6a:	69bb      	ldr	r3, [r7, #24]
 8014c6c:	2200      	movs	r2, #0
 8014c6e:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8014c70:	2106      	movs	r1, #6
 8014c72:	69b8      	ldr	r0, [r7, #24]
 8014c74:	f000 fbf4 	bl	8015460 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8014c78:	f107 0308 	add.w	r3, r7, #8
 8014c7c:	2201      	movs	r2, #1
 8014c7e:	69b9      	ldr	r1, [r7, #24]
 8014c80:	6878      	ldr	r0, [r7, #4]
 8014c82:	f001 f879 	bl	8015d78 <dhcp_create_msg>
 8014c86:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8014c88:	693b      	ldr	r3, [r7, #16]
 8014c8a:	2b00      	cmp	r3, #0
 8014c8c:	d04b      	beq.n	8014d26 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014c8e:	693b      	ldr	r3, [r7, #16]
 8014c90:	685b      	ldr	r3, [r3, #4]
 8014c92:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8014c94:	8938      	ldrh	r0, [r7, #8]
 8014c96:	68fb      	ldr	r3, [r7, #12]
 8014c98:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014c9c:	2302      	movs	r3, #2
 8014c9e:	2239      	movs	r2, #57	; 0x39
 8014ca0:	f000 fbf8 	bl	8015494 <dhcp_option>
 8014ca4:	4603      	mov	r3, r0
 8014ca6:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8014ca8:	8938      	ldrh	r0, [r7, #8]
 8014caa:	68fb      	ldr	r3, [r7, #12]
 8014cac:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014cb4:	461a      	mov	r2, r3
 8014cb6:	f000 fc47 	bl	8015548 <dhcp_option_short>
 8014cba:	4603      	mov	r3, r0
 8014cbc:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014cbe:	8938      	ldrh	r0, [r7, #8]
 8014cc0:	68fb      	ldr	r3, [r7, #12]
 8014cc2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014cc6:	2303      	movs	r3, #3
 8014cc8:	2237      	movs	r2, #55	; 0x37
 8014cca:	f000 fbe3 	bl	8015494 <dhcp_option>
 8014cce:	4603      	mov	r3, r0
 8014cd0:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014cd2:	2300      	movs	r3, #0
 8014cd4:	77fb      	strb	r3, [r7, #31]
 8014cd6:	e00e      	b.n	8014cf6 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8014cd8:	8938      	ldrh	r0, [r7, #8]
 8014cda:	68fb      	ldr	r3, [r7, #12]
 8014cdc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014ce0:	7ffb      	ldrb	r3, [r7, #31]
 8014ce2:	4a29      	ldr	r2, [pc, #164]	; (8014d88 <dhcp_discover+0x130>)
 8014ce4:	5cd3      	ldrb	r3, [r2, r3]
 8014ce6:	461a      	mov	r2, r3
 8014ce8:	f000 fc08 	bl	80154fc <dhcp_option_byte>
 8014cec:	4603      	mov	r3, r0
 8014cee:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014cf0:	7ffb      	ldrb	r3, [r7, #31]
 8014cf2:	3301      	adds	r3, #1
 8014cf4:	77fb      	strb	r3, [r7, #31]
 8014cf6:	7ffb      	ldrb	r3, [r7, #31]
 8014cf8:	2b02      	cmp	r3, #2
 8014cfa:	d9ed      	bls.n	8014cd8 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014cfc:	8938      	ldrh	r0, [r7, #8]
 8014cfe:	68fb      	ldr	r3, [r7, #12]
 8014d00:	33f0      	adds	r3, #240	; 0xf0
 8014d02:	693a      	ldr	r2, [r7, #16]
 8014d04:	4619      	mov	r1, r3
 8014d06:	f001 f90d 	bl	8015f24 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8014d0a:	4b20      	ldr	r3, [pc, #128]	; (8014d8c <dhcp_discover+0x134>)
 8014d0c:	6818      	ldr	r0, [r3, #0]
 8014d0e:	4b20      	ldr	r3, [pc, #128]	; (8014d90 <dhcp_discover+0x138>)
 8014d10:	9301      	str	r3, [sp, #4]
 8014d12:	687b      	ldr	r3, [r7, #4]
 8014d14:	9300      	str	r3, [sp, #0]
 8014d16:	2343      	movs	r3, #67	; 0x43
 8014d18:	4a1e      	ldr	r2, [pc, #120]	; (8014d94 <dhcp_discover+0x13c>)
 8014d1a:	6939      	ldr	r1, [r7, #16]
 8014d1c:	f7ff f832 	bl	8013d84 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8014d20:	6938      	ldr	r0, [r7, #16]
 8014d22:	f7f8 f807 	bl	800cd34 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8014d26:	69bb      	ldr	r3, [r7, #24]
 8014d28:	799b      	ldrb	r3, [r3, #6]
 8014d2a:	2bff      	cmp	r3, #255	; 0xff
 8014d2c:	d005      	beq.n	8014d3a <dhcp_discover+0xe2>
    dhcp->tries++;
 8014d2e:	69bb      	ldr	r3, [r7, #24]
 8014d30:	799b      	ldrb	r3, [r3, #6]
 8014d32:	3301      	adds	r3, #1
 8014d34:	b2da      	uxtb	r2, r3
 8014d36:	69bb      	ldr	r3, [r7, #24]
 8014d38:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8014d3a:	69bb      	ldr	r3, [r7, #24]
 8014d3c:	799b      	ldrb	r3, [r3, #6]
 8014d3e:	2b05      	cmp	r3, #5
 8014d40:	d80d      	bhi.n	8014d5e <dhcp_discover+0x106>
 8014d42:	69bb      	ldr	r3, [r7, #24]
 8014d44:	799b      	ldrb	r3, [r3, #6]
 8014d46:	461a      	mov	r2, r3
 8014d48:	2301      	movs	r3, #1
 8014d4a:	4093      	lsls	r3, r2
 8014d4c:	b29b      	uxth	r3, r3
 8014d4e:	461a      	mov	r2, r3
 8014d50:	0152      	lsls	r2, r2, #5
 8014d52:	1ad2      	subs	r2, r2, r3
 8014d54:	0092      	lsls	r2, r2, #2
 8014d56:	4413      	add	r3, r2
 8014d58:	00db      	lsls	r3, r3, #3
 8014d5a:	b29b      	uxth	r3, r3
 8014d5c:	e001      	b.n	8014d62 <dhcp_discover+0x10a>
 8014d5e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8014d62:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014d64:	897b      	ldrh	r3, [r7, #10]
 8014d66:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014d6a:	4a0b      	ldr	r2, [pc, #44]	; (8014d98 <dhcp_discover+0x140>)
 8014d6c:	fb82 1203 	smull	r1, r2, r2, r3
 8014d70:	1152      	asrs	r2, r2, #5
 8014d72:	17db      	asrs	r3, r3, #31
 8014d74:	1ad3      	subs	r3, r2, r3
 8014d76:	b29a      	uxth	r2, r3
 8014d78:	69bb      	ldr	r3, [r7, #24]
 8014d7a:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014d7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014d80:	4618      	mov	r0, r3
 8014d82:	3720      	adds	r7, #32
 8014d84:	46bd      	mov	sp, r7
 8014d86:	bd80      	pop	{r7, pc}
 8014d88:	20000030 	.word	0x20000030
 8014d8c:	20010ef8 	.word	0x20010ef8
 8014d90:	08027dd4 	.word	0x08027dd4
 8014d94:	08027dd8 	.word	0x08027dd8
 8014d98:	10624dd3 	.word	0x10624dd3

08014d9c <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8014d9c:	b580      	push	{r7, lr}
 8014d9e:	b088      	sub	sp, #32
 8014da0:	af00      	add	r7, sp, #0
 8014da2:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8014da4:	687b      	ldr	r3, [r7, #4]
 8014da6:	2b00      	cmp	r3, #0
 8014da8:	d107      	bne.n	8014dba <dhcp_bind+0x1e>
 8014daa:	4b64      	ldr	r3, [pc, #400]	; (8014f3c <dhcp_bind+0x1a0>)
 8014dac:	f240 4215 	movw	r2, #1045	; 0x415
 8014db0:	4963      	ldr	r1, [pc, #396]	; (8014f40 <dhcp_bind+0x1a4>)
 8014db2:	4864      	ldr	r0, [pc, #400]	; (8014f44 <dhcp_bind+0x1a8>)
 8014db4:	f003 fef0 	bl	8018b98 <iprintf>
 8014db8:	e0bc      	b.n	8014f34 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8014dba:	687b      	ldr	r3, [r7, #4]
 8014dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014dbe:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8014dc0:	69bb      	ldr	r3, [r7, #24]
 8014dc2:	2b00      	cmp	r3, #0
 8014dc4:	d107      	bne.n	8014dd6 <dhcp_bind+0x3a>
 8014dc6:	4b5d      	ldr	r3, [pc, #372]	; (8014f3c <dhcp_bind+0x1a0>)
 8014dc8:	f240 4217 	movw	r2, #1047	; 0x417
 8014dcc:	495e      	ldr	r1, [pc, #376]	; (8014f48 <dhcp_bind+0x1ac>)
 8014dce:	485d      	ldr	r0, [pc, #372]	; (8014f44 <dhcp_bind+0x1a8>)
 8014dd0:	f003 fee2 	bl	8018b98 <iprintf>
 8014dd4:	e0ae      	b.n	8014f34 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8014dd6:	69bb      	ldr	r3, [r7, #24]
 8014dd8:	2200      	movs	r2, #0
 8014dda:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8014ddc:	69bb      	ldr	r3, [r7, #24]
 8014dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014de4:	d019      	beq.n	8014e1a <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8014de6:	69bb      	ldr	r3, [r7, #24]
 8014de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014dea:	331e      	adds	r3, #30
 8014dec:	4a57      	ldr	r2, [pc, #348]	; (8014f4c <dhcp_bind+0x1b0>)
 8014dee:	fba2 2303 	umull	r2, r3, r2, r3
 8014df2:	095b      	lsrs	r3, r3, #5
 8014df4:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8014df6:	69fb      	ldr	r3, [r7, #28]
 8014df8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014dfc:	d302      	bcc.n	8014e04 <dhcp_bind+0x68>
      timeout = 0xffff;
 8014dfe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014e02:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8014e04:	69fb      	ldr	r3, [r7, #28]
 8014e06:	b29a      	uxth	r2, r3
 8014e08:	69bb      	ldr	r3, [r7, #24]
 8014e0a:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8014e0c:	69bb      	ldr	r3, [r7, #24]
 8014e0e:	8a9b      	ldrh	r3, [r3, #20]
 8014e10:	2b00      	cmp	r3, #0
 8014e12:	d102      	bne.n	8014e1a <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8014e14:	69bb      	ldr	r3, [r7, #24]
 8014e16:	2201      	movs	r2, #1
 8014e18:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8014e1a:	69bb      	ldr	r3, [r7, #24]
 8014e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014e22:	d01d      	beq.n	8014e60 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8014e24:	69bb      	ldr	r3, [r7, #24]
 8014e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e28:	331e      	adds	r3, #30
 8014e2a:	4a48      	ldr	r2, [pc, #288]	; (8014f4c <dhcp_bind+0x1b0>)
 8014e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8014e30:	095b      	lsrs	r3, r3, #5
 8014e32:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8014e34:	69fb      	ldr	r3, [r7, #28]
 8014e36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014e3a:	d302      	bcc.n	8014e42 <dhcp_bind+0xa6>
      timeout = 0xffff;
 8014e3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014e40:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8014e42:	69fb      	ldr	r3, [r7, #28]
 8014e44:	b29a      	uxth	r2, r3
 8014e46:	69bb      	ldr	r3, [r7, #24]
 8014e48:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8014e4a:	69bb      	ldr	r3, [r7, #24]
 8014e4c:	895b      	ldrh	r3, [r3, #10]
 8014e4e:	2b00      	cmp	r3, #0
 8014e50:	d102      	bne.n	8014e58 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8014e52:	69bb      	ldr	r3, [r7, #24]
 8014e54:	2201      	movs	r2, #1
 8014e56:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8014e58:	69bb      	ldr	r3, [r7, #24]
 8014e5a:	895a      	ldrh	r2, [r3, #10]
 8014e5c:	69bb      	ldr	r3, [r7, #24]
 8014e5e:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8014e60:	69bb      	ldr	r3, [r7, #24]
 8014e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014e68:	d01d      	beq.n	8014ea6 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8014e6a:	69bb      	ldr	r3, [r7, #24]
 8014e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014e6e:	331e      	adds	r3, #30
 8014e70:	4a36      	ldr	r2, [pc, #216]	; (8014f4c <dhcp_bind+0x1b0>)
 8014e72:	fba2 2303 	umull	r2, r3, r2, r3
 8014e76:	095b      	lsrs	r3, r3, #5
 8014e78:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8014e7a:	69fb      	ldr	r3, [r7, #28]
 8014e7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014e80:	d302      	bcc.n	8014e88 <dhcp_bind+0xec>
      timeout = 0xffff;
 8014e82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014e86:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8014e88:	69fb      	ldr	r3, [r7, #28]
 8014e8a:	b29a      	uxth	r2, r3
 8014e8c:	69bb      	ldr	r3, [r7, #24]
 8014e8e:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8014e90:	69bb      	ldr	r3, [r7, #24]
 8014e92:	899b      	ldrh	r3, [r3, #12]
 8014e94:	2b00      	cmp	r3, #0
 8014e96:	d102      	bne.n	8014e9e <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8014e98:	69bb      	ldr	r3, [r7, #24]
 8014e9a:	2201      	movs	r2, #1
 8014e9c:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8014e9e:	69bb      	ldr	r3, [r7, #24]
 8014ea0:	899a      	ldrh	r2, [r3, #12]
 8014ea2:	69bb      	ldr	r3, [r7, #24]
 8014ea4:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8014ea6:	69bb      	ldr	r3, [r7, #24]
 8014ea8:	895a      	ldrh	r2, [r3, #10]
 8014eaa:	69bb      	ldr	r3, [r7, #24]
 8014eac:	899b      	ldrh	r3, [r3, #12]
 8014eae:	429a      	cmp	r2, r3
 8014eb0:	d306      	bcc.n	8014ec0 <dhcp_bind+0x124>
 8014eb2:	69bb      	ldr	r3, [r7, #24]
 8014eb4:	899b      	ldrh	r3, [r3, #12]
 8014eb6:	2b00      	cmp	r3, #0
 8014eb8:	d002      	beq.n	8014ec0 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8014eba:	69bb      	ldr	r3, [r7, #24]
 8014ebc:	2200      	movs	r2, #0
 8014ebe:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8014ec0:	69bb      	ldr	r3, [r7, #24]
 8014ec2:	79db      	ldrb	r3, [r3, #7]
 8014ec4:	2b00      	cmp	r3, #0
 8014ec6:	d003      	beq.n	8014ed0 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8014ec8:	69bb      	ldr	r3, [r7, #24]
 8014eca:	6a1b      	ldr	r3, [r3, #32]
 8014ecc:	613b      	str	r3, [r7, #16]
 8014ece:	e014      	b.n	8014efa <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8014ed0:	69bb      	ldr	r3, [r7, #24]
 8014ed2:	331c      	adds	r3, #28
 8014ed4:	781b      	ldrb	r3, [r3, #0]
 8014ed6:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8014ed8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014edc:	2b00      	cmp	r3, #0
 8014ede:	db02      	blt.n	8014ee6 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8014ee0:	23ff      	movs	r3, #255	; 0xff
 8014ee2:	613b      	str	r3, [r7, #16]
 8014ee4:	e009      	b.n	8014efa <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 8014ee6:	7dfb      	ldrb	r3, [r7, #23]
 8014ee8:	2bbf      	cmp	r3, #191	; 0xbf
 8014eea:	d903      	bls.n	8014ef4 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8014eec:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8014ef0:	613b      	str	r3, [r7, #16]
 8014ef2:	e002      	b.n	8014efa <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8014ef4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014ef8:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8014efa:	69bb      	ldr	r3, [r7, #24]
 8014efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014efe:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8014f00:	68fb      	ldr	r3, [r7, #12]
 8014f02:	2b00      	cmp	r3, #0
 8014f04:	d108      	bne.n	8014f18 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8014f06:	69bb      	ldr	r3, [r7, #24]
 8014f08:	69da      	ldr	r2, [r3, #28]
 8014f0a:	693b      	ldr	r3, [r7, #16]
 8014f0c:	4013      	ands	r3, r2
 8014f0e:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8014f10:	68fb      	ldr	r3, [r7, #12]
 8014f12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8014f16:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8014f18:	210a      	movs	r1, #10
 8014f1a:	69b8      	ldr	r0, [r7, #24]
 8014f1c:	f000 faa0 	bl	8015460 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8014f20:	69bb      	ldr	r3, [r7, #24]
 8014f22:	f103 011c 	add.w	r1, r3, #28
 8014f26:	f107 030c 	add.w	r3, r7, #12
 8014f2a:	f107 0210 	add.w	r2, r7, #16
 8014f2e:	6878      	ldr	r0, [r7, #4]
 8014f30:	f7f7 f9f2 	bl	800c318 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8014f34:	3720      	adds	r7, #32
 8014f36:	46bd      	mov	sp, r7
 8014f38:	bd80      	pop	{r7, pc}
 8014f3a:	bf00      	nop
 8014f3c:	0801d0f0 	.word	0x0801d0f0
 8014f40:	0801d250 	.word	0x0801d250
 8014f44:	0801d150 	.word	0x0801d150
 8014f48:	0801d26c 	.word	0x0801d26c
 8014f4c:	88888889 	.word	0x88888889

08014f50 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8014f50:	b580      	push	{r7, lr}
 8014f52:	b08a      	sub	sp, #40	; 0x28
 8014f54:	af02      	add	r7, sp, #8
 8014f56:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014f58:	687b      	ldr	r3, [r7, #4]
 8014f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f5c:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8014f5e:	2105      	movs	r1, #5
 8014f60:	69b8      	ldr	r0, [r7, #24]
 8014f62:	f000 fa7d 	bl	8015460 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8014f66:	f107 030c 	add.w	r3, r7, #12
 8014f6a:	2203      	movs	r2, #3
 8014f6c:	69b9      	ldr	r1, [r7, #24]
 8014f6e:	6878      	ldr	r0, [r7, #4]
 8014f70:	f000 ff02 	bl	8015d78 <dhcp_create_msg>
 8014f74:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8014f76:	697b      	ldr	r3, [r7, #20]
 8014f78:	2b00      	cmp	r3, #0
 8014f7a:	d04e      	beq.n	801501a <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014f7c:	697b      	ldr	r3, [r7, #20]
 8014f7e:	685b      	ldr	r3, [r3, #4]
 8014f80:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8014f82:	89b8      	ldrh	r0, [r7, #12]
 8014f84:	693b      	ldr	r3, [r7, #16]
 8014f86:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014f8a:	2302      	movs	r3, #2
 8014f8c:	2239      	movs	r2, #57	; 0x39
 8014f8e:	f000 fa81 	bl	8015494 <dhcp_option>
 8014f92:	4603      	mov	r3, r0
 8014f94:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8014f96:	89b8      	ldrh	r0, [r7, #12]
 8014f98:	693b      	ldr	r3, [r7, #16]
 8014f9a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014f9e:	687b      	ldr	r3, [r7, #4]
 8014fa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014fa2:	461a      	mov	r2, r3
 8014fa4:	f000 fad0 	bl	8015548 <dhcp_option_short>
 8014fa8:	4603      	mov	r3, r0
 8014faa:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014fac:	89b8      	ldrh	r0, [r7, #12]
 8014fae:	693b      	ldr	r3, [r7, #16]
 8014fb0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014fb4:	2303      	movs	r3, #3
 8014fb6:	2237      	movs	r2, #55	; 0x37
 8014fb8:	f000 fa6c 	bl	8015494 <dhcp_option>
 8014fbc:	4603      	mov	r3, r0
 8014fbe:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014fc0:	2300      	movs	r3, #0
 8014fc2:	77bb      	strb	r3, [r7, #30]
 8014fc4:	e00e      	b.n	8014fe4 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8014fc6:	89b8      	ldrh	r0, [r7, #12]
 8014fc8:	693b      	ldr	r3, [r7, #16]
 8014fca:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014fce:	7fbb      	ldrb	r3, [r7, #30]
 8014fd0:	4a2a      	ldr	r2, [pc, #168]	; (801507c <dhcp_renew+0x12c>)
 8014fd2:	5cd3      	ldrb	r3, [r2, r3]
 8014fd4:	461a      	mov	r2, r3
 8014fd6:	f000 fa91 	bl	80154fc <dhcp_option_byte>
 8014fda:	4603      	mov	r3, r0
 8014fdc:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014fde:	7fbb      	ldrb	r3, [r7, #30]
 8014fe0:	3301      	adds	r3, #1
 8014fe2:	77bb      	strb	r3, [r7, #30]
 8014fe4:	7fbb      	ldrb	r3, [r7, #30]
 8014fe6:	2b02      	cmp	r3, #2
 8014fe8:	d9ed      	bls.n	8014fc6 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014fea:	89b8      	ldrh	r0, [r7, #12]
 8014fec:	693b      	ldr	r3, [r7, #16]
 8014fee:	33f0      	adds	r3, #240	; 0xf0
 8014ff0:	697a      	ldr	r2, [r7, #20]
 8014ff2:	4619      	mov	r1, r3
 8014ff4:	f000 ff96 	bl	8015f24 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8014ff8:	4b21      	ldr	r3, [pc, #132]	; (8015080 <dhcp_renew+0x130>)
 8014ffa:	6818      	ldr	r0, [r3, #0]
 8014ffc:	69bb      	ldr	r3, [r7, #24]
 8014ffe:	f103 0218 	add.w	r2, r3, #24
 8015002:	687b      	ldr	r3, [r7, #4]
 8015004:	9300      	str	r3, [sp, #0]
 8015006:	2343      	movs	r3, #67	; 0x43
 8015008:	6979      	ldr	r1, [r7, #20]
 801500a:	f7fe fe47 	bl	8013c9c <udp_sendto_if>
 801500e:	4603      	mov	r3, r0
 8015010:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8015012:	6978      	ldr	r0, [r7, #20]
 8015014:	f7f7 fe8e 	bl	800cd34 <pbuf_free>
 8015018:	e001      	b.n	801501e <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801501a:	23ff      	movs	r3, #255	; 0xff
 801501c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801501e:	69bb      	ldr	r3, [r7, #24]
 8015020:	799b      	ldrb	r3, [r3, #6]
 8015022:	2bff      	cmp	r3, #255	; 0xff
 8015024:	d005      	beq.n	8015032 <dhcp_renew+0xe2>
    dhcp->tries++;
 8015026:	69bb      	ldr	r3, [r7, #24]
 8015028:	799b      	ldrb	r3, [r3, #6]
 801502a:	3301      	adds	r3, #1
 801502c:	b2da      	uxtb	r2, r3
 801502e:	69bb      	ldr	r3, [r7, #24]
 8015030:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8015032:	69bb      	ldr	r3, [r7, #24]
 8015034:	799b      	ldrb	r3, [r3, #6]
 8015036:	2b09      	cmp	r3, #9
 8015038:	d80a      	bhi.n	8015050 <dhcp_renew+0x100>
 801503a:	69bb      	ldr	r3, [r7, #24]
 801503c:	799b      	ldrb	r3, [r3, #6]
 801503e:	b29b      	uxth	r3, r3
 8015040:	461a      	mov	r2, r3
 8015042:	0152      	lsls	r2, r2, #5
 8015044:	1ad2      	subs	r2, r2, r3
 8015046:	0092      	lsls	r2, r2, #2
 8015048:	4413      	add	r3, r2
 801504a:	011b      	lsls	r3, r3, #4
 801504c:	b29b      	uxth	r3, r3
 801504e:	e001      	b.n	8015054 <dhcp_renew+0x104>
 8015050:	f644 6320 	movw	r3, #20000	; 0x4e20
 8015054:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8015056:	89fb      	ldrh	r3, [r7, #14]
 8015058:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801505c:	4a09      	ldr	r2, [pc, #36]	; (8015084 <dhcp_renew+0x134>)
 801505e:	fb82 1203 	smull	r1, r2, r2, r3
 8015062:	1152      	asrs	r2, r2, #5
 8015064:	17db      	asrs	r3, r3, #31
 8015066:	1ad3      	subs	r3, r2, r3
 8015068:	b29a      	uxth	r2, r3
 801506a:	69bb      	ldr	r3, [r7, #24]
 801506c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801506e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015072:	4618      	mov	r0, r3
 8015074:	3720      	adds	r7, #32
 8015076:	46bd      	mov	sp, r7
 8015078:	bd80      	pop	{r7, pc}
 801507a:	bf00      	nop
 801507c:	20000030 	.word	0x20000030
 8015080:	20010ef8 	.word	0x20010ef8
 8015084:	10624dd3 	.word	0x10624dd3

08015088 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8015088:	b580      	push	{r7, lr}
 801508a:	b08a      	sub	sp, #40	; 0x28
 801508c:	af02      	add	r7, sp, #8
 801508e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015090:	687b      	ldr	r3, [r7, #4]
 8015092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015094:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8015096:	2104      	movs	r1, #4
 8015098:	69b8      	ldr	r0, [r7, #24]
 801509a:	f000 f9e1 	bl	8015460 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801509e:	f107 030c 	add.w	r3, r7, #12
 80150a2:	2203      	movs	r2, #3
 80150a4:	69b9      	ldr	r1, [r7, #24]
 80150a6:	6878      	ldr	r0, [r7, #4]
 80150a8:	f000 fe66 	bl	8015d78 <dhcp_create_msg>
 80150ac:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80150ae:	697b      	ldr	r3, [r7, #20]
 80150b0:	2b00      	cmp	r3, #0
 80150b2:	d04c      	beq.n	801514e <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80150b4:	697b      	ldr	r3, [r7, #20]
 80150b6:	685b      	ldr	r3, [r3, #4]
 80150b8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80150ba:	89b8      	ldrh	r0, [r7, #12]
 80150bc:	693b      	ldr	r3, [r7, #16]
 80150be:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80150c2:	2302      	movs	r3, #2
 80150c4:	2239      	movs	r2, #57	; 0x39
 80150c6:	f000 f9e5 	bl	8015494 <dhcp_option>
 80150ca:	4603      	mov	r3, r0
 80150cc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80150ce:	89b8      	ldrh	r0, [r7, #12]
 80150d0:	693b      	ldr	r3, [r7, #16]
 80150d2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80150d6:	687b      	ldr	r3, [r7, #4]
 80150d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80150da:	461a      	mov	r2, r3
 80150dc:	f000 fa34 	bl	8015548 <dhcp_option_short>
 80150e0:	4603      	mov	r3, r0
 80150e2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80150e4:	89b8      	ldrh	r0, [r7, #12]
 80150e6:	693b      	ldr	r3, [r7, #16]
 80150e8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80150ec:	2303      	movs	r3, #3
 80150ee:	2237      	movs	r2, #55	; 0x37
 80150f0:	f000 f9d0 	bl	8015494 <dhcp_option>
 80150f4:	4603      	mov	r3, r0
 80150f6:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80150f8:	2300      	movs	r3, #0
 80150fa:	77bb      	strb	r3, [r7, #30]
 80150fc:	e00e      	b.n	801511c <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80150fe:	89b8      	ldrh	r0, [r7, #12]
 8015100:	693b      	ldr	r3, [r7, #16]
 8015102:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015106:	7fbb      	ldrb	r3, [r7, #30]
 8015108:	4a29      	ldr	r2, [pc, #164]	; (80151b0 <dhcp_rebind+0x128>)
 801510a:	5cd3      	ldrb	r3, [r2, r3]
 801510c:	461a      	mov	r2, r3
 801510e:	f000 f9f5 	bl	80154fc <dhcp_option_byte>
 8015112:	4603      	mov	r3, r0
 8015114:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015116:	7fbb      	ldrb	r3, [r7, #30]
 8015118:	3301      	adds	r3, #1
 801511a:	77bb      	strb	r3, [r7, #30]
 801511c:	7fbb      	ldrb	r3, [r7, #30]
 801511e:	2b02      	cmp	r3, #2
 8015120:	d9ed      	bls.n	80150fe <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015122:	89b8      	ldrh	r0, [r7, #12]
 8015124:	693b      	ldr	r3, [r7, #16]
 8015126:	33f0      	adds	r3, #240	; 0xf0
 8015128:	697a      	ldr	r2, [r7, #20]
 801512a:	4619      	mov	r1, r3
 801512c:	f000 fefa 	bl	8015f24 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8015130:	4b20      	ldr	r3, [pc, #128]	; (80151b4 <dhcp_rebind+0x12c>)
 8015132:	6818      	ldr	r0, [r3, #0]
 8015134:	687b      	ldr	r3, [r7, #4]
 8015136:	9300      	str	r3, [sp, #0]
 8015138:	2343      	movs	r3, #67	; 0x43
 801513a:	4a1f      	ldr	r2, [pc, #124]	; (80151b8 <dhcp_rebind+0x130>)
 801513c:	6979      	ldr	r1, [r7, #20]
 801513e:	f7fe fdad 	bl	8013c9c <udp_sendto_if>
 8015142:	4603      	mov	r3, r0
 8015144:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8015146:	6978      	ldr	r0, [r7, #20]
 8015148:	f7f7 fdf4 	bl	800cd34 <pbuf_free>
 801514c:	e001      	b.n	8015152 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801514e:	23ff      	movs	r3, #255	; 0xff
 8015150:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8015152:	69bb      	ldr	r3, [r7, #24]
 8015154:	799b      	ldrb	r3, [r3, #6]
 8015156:	2bff      	cmp	r3, #255	; 0xff
 8015158:	d005      	beq.n	8015166 <dhcp_rebind+0xde>
    dhcp->tries++;
 801515a:	69bb      	ldr	r3, [r7, #24]
 801515c:	799b      	ldrb	r3, [r3, #6]
 801515e:	3301      	adds	r3, #1
 8015160:	b2da      	uxtb	r2, r3
 8015162:	69bb      	ldr	r3, [r7, #24]
 8015164:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8015166:	69bb      	ldr	r3, [r7, #24]
 8015168:	799b      	ldrb	r3, [r3, #6]
 801516a:	2b09      	cmp	r3, #9
 801516c:	d80a      	bhi.n	8015184 <dhcp_rebind+0xfc>
 801516e:	69bb      	ldr	r3, [r7, #24]
 8015170:	799b      	ldrb	r3, [r3, #6]
 8015172:	b29b      	uxth	r3, r3
 8015174:	461a      	mov	r2, r3
 8015176:	0152      	lsls	r2, r2, #5
 8015178:	1ad2      	subs	r2, r2, r3
 801517a:	0092      	lsls	r2, r2, #2
 801517c:	4413      	add	r3, r2
 801517e:	00db      	lsls	r3, r3, #3
 8015180:	b29b      	uxth	r3, r3
 8015182:	e001      	b.n	8015188 <dhcp_rebind+0x100>
 8015184:	f242 7310 	movw	r3, #10000	; 0x2710
 8015188:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801518a:	89fb      	ldrh	r3, [r7, #14]
 801518c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015190:	4a0a      	ldr	r2, [pc, #40]	; (80151bc <dhcp_rebind+0x134>)
 8015192:	fb82 1203 	smull	r1, r2, r2, r3
 8015196:	1152      	asrs	r2, r2, #5
 8015198:	17db      	asrs	r3, r3, #31
 801519a:	1ad3      	subs	r3, r2, r3
 801519c:	b29a      	uxth	r2, r3
 801519e:	69bb      	ldr	r3, [r7, #24]
 80151a0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80151a2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80151a6:	4618      	mov	r0, r3
 80151a8:	3720      	adds	r7, #32
 80151aa:	46bd      	mov	sp, r7
 80151ac:	bd80      	pop	{r7, pc}
 80151ae:	bf00      	nop
 80151b0:	20000030 	.word	0x20000030
 80151b4:	20010ef8 	.word	0x20010ef8
 80151b8:	08027dd8 	.word	0x08027dd8
 80151bc:	10624dd3 	.word	0x10624dd3

080151c0 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 80151c0:	b5b0      	push	{r4, r5, r7, lr}
 80151c2:	b08a      	sub	sp, #40	; 0x28
 80151c4:	af02      	add	r7, sp, #8
 80151c6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80151c8:	687b      	ldr	r3, [r7, #4]
 80151ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80151cc:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 80151ce:	2103      	movs	r1, #3
 80151d0:	69b8      	ldr	r0, [r7, #24]
 80151d2:	f000 f945 	bl	8015460 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80151d6:	f107 030c 	add.w	r3, r7, #12
 80151da:	2203      	movs	r2, #3
 80151dc:	69b9      	ldr	r1, [r7, #24]
 80151de:	6878      	ldr	r0, [r7, #4]
 80151e0:	f000 fdca 	bl	8015d78 <dhcp_create_msg>
 80151e4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80151e6:	697b      	ldr	r3, [r7, #20]
 80151e8:	2b00      	cmp	r3, #0
 80151ea:	d066      	beq.n	80152ba <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80151ec:	697b      	ldr	r3, [r7, #20]
 80151ee:	685b      	ldr	r3, [r3, #4]
 80151f0:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80151f2:	89b8      	ldrh	r0, [r7, #12]
 80151f4:	693b      	ldr	r3, [r7, #16]
 80151f6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80151fa:	2302      	movs	r3, #2
 80151fc:	2239      	movs	r2, #57	; 0x39
 80151fe:	f000 f949 	bl	8015494 <dhcp_option>
 8015202:	4603      	mov	r3, r0
 8015204:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8015206:	89b8      	ldrh	r0, [r7, #12]
 8015208:	693b      	ldr	r3, [r7, #16]
 801520a:	33f0      	adds	r3, #240	; 0xf0
 801520c:	f44f 7210 	mov.w	r2, #576	; 0x240
 8015210:	4619      	mov	r1, r3
 8015212:	f000 f999 	bl	8015548 <dhcp_option_short>
 8015216:	4603      	mov	r3, r0
 8015218:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801521a:	89b8      	ldrh	r0, [r7, #12]
 801521c:	693b      	ldr	r3, [r7, #16]
 801521e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015222:	2304      	movs	r3, #4
 8015224:	2232      	movs	r2, #50	; 0x32
 8015226:	f000 f935 	bl	8015494 <dhcp_option>
 801522a:	4603      	mov	r3, r0
 801522c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801522e:	89bc      	ldrh	r4, [r7, #12]
 8015230:	693b      	ldr	r3, [r7, #16]
 8015232:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8015236:	69bb      	ldr	r3, [r7, #24]
 8015238:	69db      	ldr	r3, [r3, #28]
 801523a:	4618      	mov	r0, r3
 801523c:	f7f6 f95b 	bl	800b4f6 <lwip_htonl>
 8015240:	4603      	mov	r3, r0
 8015242:	461a      	mov	r2, r3
 8015244:	4629      	mov	r1, r5
 8015246:	4620      	mov	r0, r4
 8015248:	f000 f9b0 	bl	80155ac <dhcp_option_long>
 801524c:	4603      	mov	r3, r0
 801524e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8015250:	89b8      	ldrh	r0, [r7, #12]
 8015252:	693b      	ldr	r3, [r7, #16]
 8015254:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015258:	2303      	movs	r3, #3
 801525a:	2237      	movs	r2, #55	; 0x37
 801525c:	f000 f91a 	bl	8015494 <dhcp_option>
 8015260:	4603      	mov	r3, r0
 8015262:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015264:	2300      	movs	r3, #0
 8015266:	77bb      	strb	r3, [r7, #30]
 8015268:	e00e      	b.n	8015288 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801526a:	89b8      	ldrh	r0, [r7, #12]
 801526c:	693b      	ldr	r3, [r7, #16]
 801526e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015272:	7fbb      	ldrb	r3, [r7, #30]
 8015274:	4a29      	ldr	r2, [pc, #164]	; (801531c <dhcp_reboot+0x15c>)
 8015276:	5cd3      	ldrb	r3, [r2, r3]
 8015278:	461a      	mov	r2, r3
 801527a:	f000 f93f 	bl	80154fc <dhcp_option_byte>
 801527e:	4603      	mov	r3, r0
 8015280:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015282:	7fbb      	ldrb	r3, [r7, #30]
 8015284:	3301      	adds	r3, #1
 8015286:	77bb      	strb	r3, [r7, #30]
 8015288:	7fbb      	ldrb	r3, [r7, #30]
 801528a:	2b02      	cmp	r3, #2
 801528c:	d9ed      	bls.n	801526a <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801528e:	89b8      	ldrh	r0, [r7, #12]
 8015290:	693b      	ldr	r3, [r7, #16]
 8015292:	33f0      	adds	r3, #240	; 0xf0
 8015294:	697a      	ldr	r2, [r7, #20]
 8015296:	4619      	mov	r1, r3
 8015298:	f000 fe44 	bl	8015f24 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801529c:	4b20      	ldr	r3, [pc, #128]	; (8015320 <dhcp_reboot+0x160>)
 801529e:	6818      	ldr	r0, [r3, #0]
 80152a0:	687b      	ldr	r3, [r7, #4]
 80152a2:	9300      	str	r3, [sp, #0]
 80152a4:	2343      	movs	r3, #67	; 0x43
 80152a6:	4a1f      	ldr	r2, [pc, #124]	; (8015324 <dhcp_reboot+0x164>)
 80152a8:	6979      	ldr	r1, [r7, #20]
 80152aa:	f7fe fcf7 	bl	8013c9c <udp_sendto_if>
 80152ae:	4603      	mov	r3, r0
 80152b0:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80152b2:	6978      	ldr	r0, [r7, #20]
 80152b4:	f7f7 fd3e 	bl	800cd34 <pbuf_free>
 80152b8:	e001      	b.n	80152be <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80152ba:	23ff      	movs	r3, #255	; 0xff
 80152bc:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80152be:	69bb      	ldr	r3, [r7, #24]
 80152c0:	799b      	ldrb	r3, [r3, #6]
 80152c2:	2bff      	cmp	r3, #255	; 0xff
 80152c4:	d005      	beq.n	80152d2 <dhcp_reboot+0x112>
    dhcp->tries++;
 80152c6:	69bb      	ldr	r3, [r7, #24]
 80152c8:	799b      	ldrb	r3, [r3, #6]
 80152ca:	3301      	adds	r3, #1
 80152cc:	b2da      	uxtb	r2, r3
 80152ce:	69bb      	ldr	r3, [r7, #24]
 80152d0:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80152d2:	69bb      	ldr	r3, [r7, #24]
 80152d4:	799b      	ldrb	r3, [r3, #6]
 80152d6:	2b09      	cmp	r3, #9
 80152d8:	d80a      	bhi.n	80152f0 <dhcp_reboot+0x130>
 80152da:	69bb      	ldr	r3, [r7, #24]
 80152dc:	799b      	ldrb	r3, [r3, #6]
 80152de:	b29b      	uxth	r3, r3
 80152e0:	461a      	mov	r2, r3
 80152e2:	0152      	lsls	r2, r2, #5
 80152e4:	1ad2      	subs	r2, r2, r3
 80152e6:	0092      	lsls	r2, r2, #2
 80152e8:	4413      	add	r3, r2
 80152ea:	00db      	lsls	r3, r3, #3
 80152ec:	b29b      	uxth	r3, r3
 80152ee:	e001      	b.n	80152f4 <dhcp_reboot+0x134>
 80152f0:	f242 7310 	movw	r3, #10000	; 0x2710
 80152f4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80152f6:	89fb      	ldrh	r3, [r7, #14]
 80152f8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80152fc:	4a0a      	ldr	r2, [pc, #40]	; (8015328 <dhcp_reboot+0x168>)
 80152fe:	fb82 1203 	smull	r1, r2, r2, r3
 8015302:	1152      	asrs	r2, r2, #5
 8015304:	17db      	asrs	r3, r3, #31
 8015306:	1ad3      	subs	r3, r2, r3
 8015308:	b29a      	uxth	r2, r3
 801530a:	69bb      	ldr	r3, [r7, #24]
 801530c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801530e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015312:	4618      	mov	r0, r3
 8015314:	3720      	adds	r7, #32
 8015316:	46bd      	mov	sp, r7
 8015318:	bdb0      	pop	{r4, r5, r7, pc}
 801531a:	bf00      	nop
 801531c:	20000030 	.word	0x20000030
 8015320:	20010ef8 	.word	0x20010ef8
 8015324:	08027dd8 	.word	0x08027dd8
 8015328:	10624dd3 	.word	0x10624dd3

0801532c <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 801532c:	b5b0      	push	{r4, r5, r7, lr}
 801532e:	b08a      	sub	sp, #40	; 0x28
 8015330:	af02      	add	r7, sp, #8
 8015332:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015334:	687b      	ldr	r3, [r7, #4]
 8015336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015338:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 801533a:	69fb      	ldr	r3, [r7, #28]
 801533c:	2b00      	cmp	r3, #0
 801533e:	f000 8084 	beq.w	801544a <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8015342:	69fb      	ldr	r3, [r7, #28]
 8015344:	795b      	ldrb	r3, [r3, #5]
 8015346:	2b00      	cmp	r3, #0
 8015348:	f000 8081 	beq.w	801544e <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 801534c:	69fb      	ldr	r3, [r7, #28]
 801534e:	699b      	ldr	r3, [r3, #24]
 8015350:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8015352:	69fb      	ldr	r3, [r7, #28]
 8015354:	2200      	movs	r2, #0
 8015356:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8015358:	69fb      	ldr	r3, [r7, #28]
 801535a:	2200      	movs	r2, #0
 801535c:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801535e:	69fb      	ldr	r3, [r7, #28]
 8015360:	2200      	movs	r2, #0
 8015362:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8015364:	69fb      	ldr	r3, [r7, #28]
 8015366:	2200      	movs	r2, #0
 8015368:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 801536a:	69fb      	ldr	r3, [r7, #28]
 801536c:	2200      	movs	r2, #0
 801536e:	631a      	str	r2, [r3, #48]	; 0x30
 8015370:	69fb      	ldr	r3, [r7, #28]
 8015372:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015374:	69fb      	ldr	r3, [r7, #28]
 8015376:	62da      	str	r2, [r3, #44]	; 0x2c
 8015378:	69fb      	ldr	r3, [r7, #28]
 801537a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801537c:	69fb      	ldr	r3, [r7, #28]
 801537e:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8015380:	69fb      	ldr	r3, [r7, #28]
 8015382:	2200      	movs	r2, #0
 8015384:	829a      	strh	r2, [r3, #20]
 8015386:	69fb      	ldr	r3, [r7, #28]
 8015388:	8a9a      	ldrh	r2, [r3, #20]
 801538a:	69fb      	ldr	r3, [r7, #28]
 801538c:	825a      	strh	r2, [r3, #18]
 801538e:	69fb      	ldr	r3, [r7, #28]
 8015390:	8a5a      	ldrh	r2, [r3, #18]
 8015392:	69fb      	ldr	r3, [r7, #28]
 8015394:	821a      	strh	r2, [r3, #16]
 8015396:	69fb      	ldr	r3, [r7, #28]
 8015398:	8a1a      	ldrh	r2, [r3, #16]
 801539a:	69fb      	ldr	r3, [r7, #28]
 801539c:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 801539e:	6878      	ldr	r0, [r7, #4]
 80153a0:	f000 fdee 	bl	8015f80 <dhcp_supplied_address>
 80153a4:	4603      	mov	r3, r0
 80153a6:	2b00      	cmp	r3, #0
 80153a8:	d03b      	beq.n	8015422 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 80153aa:	f107 030e 	add.w	r3, r7, #14
 80153ae:	2207      	movs	r2, #7
 80153b0:	69f9      	ldr	r1, [r7, #28]
 80153b2:	6878      	ldr	r0, [r7, #4]
 80153b4:	f000 fce0 	bl	8015d78 <dhcp_create_msg>
 80153b8:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 80153ba:	69bb      	ldr	r3, [r7, #24]
 80153bc:	2b00      	cmp	r3, #0
 80153be:	d030      	beq.n	8015422 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80153c0:	69bb      	ldr	r3, [r7, #24]
 80153c2:	685b      	ldr	r3, [r3, #4]
 80153c4:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80153c6:	89f8      	ldrh	r0, [r7, #14]
 80153c8:	697b      	ldr	r3, [r7, #20]
 80153ca:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80153ce:	2304      	movs	r3, #4
 80153d0:	2236      	movs	r2, #54	; 0x36
 80153d2:	f000 f85f 	bl	8015494 <dhcp_option>
 80153d6:	4603      	mov	r3, r0
 80153d8:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 80153da:	89fc      	ldrh	r4, [r7, #14]
 80153dc:	697b      	ldr	r3, [r7, #20]
 80153de:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80153e2:	693b      	ldr	r3, [r7, #16]
 80153e4:	4618      	mov	r0, r3
 80153e6:	f7f6 f886 	bl	800b4f6 <lwip_htonl>
 80153ea:	4603      	mov	r3, r0
 80153ec:	461a      	mov	r2, r3
 80153ee:	4629      	mov	r1, r5
 80153f0:	4620      	mov	r0, r4
 80153f2:	f000 f8db 	bl	80155ac <dhcp_option_long>
 80153f6:	4603      	mov	r3, r0
 80153f8:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80153fa:	89f8      	ldrh	r0, [r7, #14]
 80153fc:	697b      	ldr	r3, [r7, #20]
 80153fe:	33f0      	adds	r3, #240	; 0xf0
 8015400:	69ba      	ldr	r2, [r7, #24]
 8015402:	4619      	mov	r1, r3
 8015404:	f000 fd8e 	bl	8015f24 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8015408:	4b13      	ldr	r3, [pc, #76]	; (8015458 <dhcp_release_and_stop+0x12c>)
 801540a:	6818      	ldr	r0, [r3, #0]
 801540c:	f107 0210 	add.w	r2, r7, #16
 8015410:	687b      	ldr	r3, [r7, #4]
 8015412:	9300      	str	r3, [sp, #0]
 8015414:	2343      	movs	r3, #67	; 0x43
 8015416:	69b9      	ldr	r1, [r7, #24]
 8015418:	f7fe fc40 	bl	8013c9c <udp_sendto_if>
      pbuf_free(p_out);
 801541c:	69b8      	ldr	r0, [r7, #24]
 801541e:	f7f7 fc89 	bl	800cd34 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8015422:	4b0e      	ldr	r3, [pc, #56]	; (801545c <dhcp_release_and_stop+0x130>)
 8015424:	4a0d      	ldr	r2, [pc, #52]	; (801545c <dhcp_release_and_stop+0x130>)
 8015426:	490d      	ldr	r1, [pc, #52]	; (801545c <dhcp_release_and_stop+0x130>)
 8015428:	6878      	ldr	r0, [r7, #4]
 801542a:	f7f6 ff75 	bl	800c318 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 801542e:	2100      	movs	r1, #0
 8015430:	69f8      	ldr	r0, [r7, #28]
 8015432:	f000 f815 	bl	8015460 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8015436:	69fb      	ldr	r3, [r7, #28]
 8015438:	791b      	ldrb	r3, [r3, #4]
 801543a:	2b00      	cmp	r3, #0
 801543c:	d008      	beq.n	8015450 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801543e:	f7fe ff85 	bl	801434c <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8015442:	69fb      	ldr	r3, [r7, #28]
 8015444:	2200      	movs	r2, #0
 8015446:	711a      	strb	r2, [r3, #4]
 8015448:	e002      	b.n	8015450 <dhcp_release_and_stop+0x124>
    return;
 801544a:	bf00      	nop
 801544c:	e000      	b.n	8015450 <dhcp_release_and_stop+0x124>
    return;
 801544e:	bf00      	nop
  }
}
 8015450:	3720      	adds	r7, #32
 8015452:	46bd      	mov	sp, r7
 8015454:	bdb0      	pop	{r4, r5, r7, pc}
 8015456:	bf00      	nop
 8015458:	20010ef8 	.word	0x20010ef8
 801545c:	08027dd4 	.word	0x08027dd4

08015460 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8015460:	b480      	push	{r7}
 8015462:	b083      	sub	sp, #12
 8015464:	af00      	add	r7, sp, #0
 8015466:	6078      	str	r0, [r7, #4]
 8015468:	460b      	mov	r3, r1
 801546a:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 801546c:	687b      	ldr	r3, [r7, #4]
 801546e:	795b      	ldrb	r3, [r3, #5]
 8015470:	78fa      	ldrb	r2, [r7, #3]
 8015472:	429a      	cmp	r2, r3
 8015474:	d008      	beq.n	8015488 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8015476:	687b      	ldr	r3, [r7, #4]
 8015478:	78fa      	ldrb	r2, [r7, #3]
 801547a:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 801547c:	687b      	ldr	r3, [r7, #4]
 801547e:	2200      	movs	r2, #0
 8015480:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8015482:	687b      	ldr	r3, [r7, #4]
 8015484:	2200      	movs	r2, #0
 8015486:	811a      	strh	r2, [r3, #8]
  }
}
 8015488:	bf00      	nop
 801548a:	370c      	adds	r7, #12
 801548c:	46bd      	mov	sp, r7
 801548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015492:	4770      	bx	lr

08015494 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8015494:	b580      	push	{r7, lr}
 8015496:	b082      	sub	sp, #8
 8015498:	af00      	add	r7, sp, #0
 801549a:	6039      	str	r1, [r7, #0]
 801549c:	4611      	mov	r1, r2
 801549e:	461a      	mov	r2, r3
 80154a0:	4603      	mov	r3, r0
 80154a2:	80fb      	strh	r3, [r7, #6]
 80154a4:	460b      	mov	r3, r1
 80154a6:	717b      	strb	r3, [r7, #5]
 80154a8:	4613      	mov	r3, r2
 80154aa:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80154ac:	88fa      	ldrh	r2, [r7, #6]
 80154ae:	793b      	ldrb	r3, [r7, #4]
 80154b0:	4413      	add	r3, r2
 80154b2:	3302      	adds	r3, #2
 80154b4:	2b44      	cmp	r3, #68	; 0x44
 80154b6:	d906      	bls.n	80154c6 <dhcp_option+0x32>
 80154b8:	4b0d      	ldr	r3, [pc, #52]	; (80154f0 <dhcp_option+0x5c>)
 80154ba:	f240 529a 	movw	r2, #1434	; 0x59a
 80154be:	490d      	ldr	r1, [pc, #52]	; (80154f4 <dhcp_option+0x60>)
 80154c0:	480d      	ldr	r0, [pc, #52]	; (80154f8 <dhcp_option+0x64>)
 80154c2:	f003 fb69 	bl	8018b98 <iprintf>
  options[options_out_len++] = option_type;
 80154c6:	88fb      	ldrh	r3, [r7, #6]
 80154c8:	1c5a      	adds	r2, r3, #1
 80154ca:	80fa      	strh	r2, [r7, #6]
 80154cc:	461a      	mov	r2, r3
 80154ce:	683b      	ldr	r3, [r7, #0]
 80154d0:	4413      	add	r3, r2
 80154d2:	797a      	ldrb	r2, [r7, #5]
 80154d4:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 80154d6:	88fb      	ldrh	r3, [r7, #6]
 80154d8:	1c5a      	adds	r2, r3, #1
 80154da:	80fa      	strh	r2, [r7, #6]
 80154dc:	461a      	mov	r2, r3
 80154de:	683b      	ldr	r3, [r7, #0]
 80154e0:	4413      	add	r3, r2
 80154e2:	793a      	ldrb	r2, [r7, #4]
 80154e4:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80154e6:	88fb      	ldrh	r3, [r7, #6]
}
 80154e8:	4618      	mov	r0, r3
 80154ea:	3708      	adds	r7, #8
 80154ec:	46bd      	mov	sp, r7
 80154ee:	bd80      	pop	{r7, pc}
 80154f0:	0801d0f0 	.word	0x0801d0f0
 80154f4:	0801d284 	.word	0x0801d284
 80154f8:	0801d150 	.word	0x0801d150

080154fc <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 80154fc:	b580      	push	{r7, lr}
 80154fe:	b082      	sub	sp, #8
 8015500:	af00      	add	r7, sp, #0
 8015502:	4603      	mov	r3, r0
 8015504:	6039      	str	r1, [r7, #0]
 8015506:	80fb      	strh	r3, [r7, #6]
 8015508:	4613      	mov	r3, r2
 801550a:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801550c:	88fb      	ldrh	r3, [r7, #6]
 801550e:	2b43      	cmp	r3, #67	; 0x43
 8015510:	d906      	bls.n	8015520 <dhcp_option_byte+0x24>
 8015512:	4b0a      	ldr	r3, [pc, #40]	; (801553c <dhcp_option_byte+0x40>)
 8015514:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8015518:	4909      	ldr	r1, [pc, #36]	; (8015540 <dhcp_option_byte+0x44>)
 801551a:	480a      	ldr	r0, [pc, #40]	; (8015544 <dhcp_option_byte+0x48>)
 801551c:	f003 fb3c 	bl	8018b98 <iprintf>
  options[options_out_len++] = value;
 8015520:	88fb      	ldrh	r3, [r7, #6]
 8015522:	1c5a      	adds	r2, r3, #1
 8015524:	80fa      	strh	r2, [r7, #6]
 8015526:	461a      	mov	r2, r3
 8015528:	683b      	ldr	r3, [r7, #0]
 801552a:	4413      	add	r3, r2
 801552c:	797a      	ldrb	r2, [r7, #5]
 801552e:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8015530:	88fb      	ldrh	r3, [r7, #6]
}
 8015532:	4618      	mov	r0, r3
 8015534:	3708      	adds	r7, #8
 8015536:	46bd      	mov	sp, r7
 8015538:	bd80      	pop	{r7, pc}
 801553a:	bf00      	nop
 801553c:	0801d0f0 	.word	0x0801d0f0
 8015540:	0801d2c8 	.word	0x0801d2c8
 8015544:	0801d150 	.word	0x0801d150

08015548 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8015548:	b580      	push	{r7, lr}
 801554a:	b082      	sub	sp, #8
 801554c:	af00      	add	r7, sp, #0
 801554e:	4603      	mov	r3, r0
 8015550:	6039      	str	r1, [r7, #0]
 8015552:	80fb      	strh	r3, [r7, #6]
 8015554:	4613      	mov	r3, r2
 8015556:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8015558:	88fb      	ldrh	r3, [r7, #6]
 801555a:	3302      	adds	r3, #2
 801555c:	2b44      	cmp	r3, #68	; 0x44
 801555e:	d906      	bls.n	801556e <dhcp_option_short+0x26>
 8015560:	4b0f      	ldr	r3, [pc, #60]	; (80155a0 <dhcp_option_short+0x58>)
 8015562:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8015566:	490f      	ldr	r1, [pc, #60]	; (80155a4 <dhcp_option_short+0x5c>)
 8015568:	480f      	ldr	r0, [pc, #60]	; (80155a8 <dhcp_option_short+0x60>)
 801556a:	f003 fb15 	bl	8018b98 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 801556e:	88bb      	ldrh	r3, [r7, #4]
 8015570:	0a1b      	lsrs	r3, r3, #8
 8015572:	b29a      	uxth	r2, r3
 8015574:	88fb      	ldrh	r3, [r7, #6]
 8015576:	1c59      	adds	r1, r3, #1
 8015578:	80f9      	strh	r1, [r7, #6]
 801557a:	4619      	mov	r1, r3
 801557c:	683b      	ldr	r3, [r7, #0]
 801557e:	440b      	add	r3, r1
 8015580:	b2d2      	uxtb	r2, r2
 8015582:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8015584:	88fb      	ldrh	r3, [r7, #6]
 8015586:	1c5a      	adds	r2, r3, #1
 8015588:	80fa      	strh	r2, [r7, #6]
 801558a:	461a      	mov	r2, r3
 801558c:	683b      	ldr	r3, [r7, #0]
 801558e:	4413      	add	r3, r2
 8015590:	88ba      	ldrh	r2, [r7, #4]
 8015592:	b2d2      	uxtb	r2, r2
 8015594:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8015596:	88fb      	ldrh	r3, [r7, #6]
}
 8015598:	4618      	mov	r0, r3
 801559a:	3708      	adds	r7, #8
 801559c:	46bd      	mov	sp, r7
 801559e:	bd80      	pop	{r7, pc}
 80155a0:	0801d0f0 	.word	0x0801d0f0
 80155a4:	0801d300 	.word	0x0801d300
 80155a8:	0801d150 	.word	0x0801d150

080155ac <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 80155ac:	b580      	push	{r7, lr}
 80155ae:	b084      	sub	sp, #16
 80155b0:	af00      	add	r7, sp, #0
 80155b2:	4603      	mov	r3, r0
 80155b4:	60b9      	str	r1, [r7, #8]
 80155b6:	607a      	str	r2, [r7, #4]
 80155b8:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 80155ba:	89fb      	ldrh	r3, [r7, #14]
 80155bc:	3304      	adds	r3, #4
 80155be:	2b44      	cmp	r3, #68	; 0x44
 80155c0:	d906      	bls.n	80155d0 <dhcp_option_long+0x24>
 80155c2:	4b19      	ldr	r3, [pc, #100]	; (8015628 <dhcp_option_long+0x7c>)
 80155c4:	f240 52b7 	movw	r2, #1463	; 0x5b7
 80155c8:	4918      	ldr	r1, [pc, #96]	; (801562c <dhcp_option_long+0x80>)
 80155ca:	4819      	ldr	r0, [pc, #100]	; (8015630 <dhcp_option_long+0x84>)
 80155cc:	f003 fae4 	bl	8018b98 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 80155d0:	687b      	ldr	r3, [r7, #4]
 80155d2:	0e1a      	lsrs	r2, r3, #24
 80155d4:	89fb      	ldrh	r3, [r7, #14]
 80155d6:	1c59      	adds	r1, r3, #1
 80155d8:	81f9      	strh	r1, [r7, #14]
 80155da:	4619      	mov	r1, r3
 80155dc:	68bb      	ldr	r3, [r7, #8]
 80155de:	440b      	add	r3, r1
 80155e0:	b2d2      	uxtb	r2, r2
 80155e2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	0c1a      	lsrs	r2, r3, #16
 80155e8:	89fb      	ldrh	r3, [r7, #14]
 80155ea:	1c59      	adds	r1, r3, #1
 80155ec:	81f9      	strh	r1, [r7, #14]
 80155ee:	4619      	mov	r1, r3
 80155f0:	68bb      	ldr	r3, [r7, #8]
 80155f2:	440b      	add	r3, r1
 80155f4:	b2d2      	uxtb	r2, r2
 80155f6:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 80155f8:	687b      	ldr	r3, [r7, #4]
 80155fa:	0a1a      	lsrs	r2, r3, #8
 80155fc:	89fb      	ldrh	r3, [r7, #14]
 80155fe:	1c59      	adds	r1, r3, #1
 8015600:	81f9      	strh	r1, [r7, #14]
 8015602:	4619      	mov	r1, r3
 8015604:	68bb      	ldr	r3, [r7, #8]
 8015606:	440b      	add	r3, r1
 8015608:	b2d2      	uxtb	r2, r2
 801560a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 801560c:	89fb      	ldrh	r3, [r7, #14]
 801560e:	1c5a      	adds	r2, r3, #1
 8015610:	81fa      	strh	r2, [r7, #14]
 8015612:	461a      	mov	r2, r3
 8015614:	68bb      	ldr	r3, [r7, #8]
 8015616:	4413      	add	r3, r2
 8015618:	687a      	ldr	r2, [r7, #4]
 801561a:	b2d2      	uxtb	r2, r2
 801561c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801561e:	89fb      	ldrh	r3, [r7, #14]
}
 8015620:	4618      	mov	r0, r3
 8015622:	3710      	adds	r7, #16
 8015624:	46bd      	mov	sp, r7
 8015626:	bd80      	pop	{r7, pc}
 8015628:	0801d0f0 	.word	0x0801d0f0
 801562c:	0801d33c 	.word	0x0801d33c
 8015630:	0801d150 	.word	0x0801d150

08015634 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8015634:	b580      	push	{r7, lr}
 8015636:	b090      	sub	sp, #64	; 0x40
 8015638:	af00      	add	r7, sp, #0
 801563a:	6078      	str	r0, [r7, #4]
 801563c:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 801563e:	2300      	movs	r3, #0
 8015640:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 8015642:	2300      	movs	r3, #0
 8015644:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8015646:	2208      	movs	r2, #8
 8015648:	2100      	movs	r1, #0
 801564a:	48b5      	ldr	r0, [pc, #724]	; (8015920 <dhcp_parse_reply+0x2ec>)
 801564c:	f003 fb43 	bl	8018cd6 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8015650:	687b      	ldr	r3, [r7, #4]
 8015652:	895b      	ldrh	r3, [r3, #10]
 8015654:	2b2b      	cmp	r3, #43	; 0x2b
 8015656:	d802      	bhi.n	801565e <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8015658:	f06f 0301 	mvn.w	r3, #1
 801565c:	e2a7      	b.n	8015bae <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 801565e:	687b      	ldr	r3, [r7, #4]
 8015660:	685b      	ldr	r3, [r3, #4]
 8015662:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8015664:	23f0      	movs	r3, #240	; 0xf0
 8015666:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8015668:	687b      	ldr	r3, [r7, #4]
 801566a:	891b      	ldrh	r3, [r3, #8]
 801566c:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 801566e:	687b      	ldr	r3, [r7, #4]
 8015670:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8015672:	e00c      	b.n	801568e <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8015674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015676:	895b      	ldrh	r3, [r3, #10]
 8015678:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801567a:	1ad3      	subs	r3, r2, r3
 801567c:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 801567e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015680:	895b      	ldrh	r3, [r3, #10]
 8015682:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8015684:	1ad3      	subs	r3, r2, r3
 8015686:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8015688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801568a:	681b      	ldr	r3, [r3, #0]
 801568c:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801568e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015690:	2b00      	cmp	r3, #0
 8015692:	d004      	beq.n	801569e <dhcp_parse_reply+0x6a>
 8015694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015696:	895b      	ldrh	r3, [r3, #10]
 8015698:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801569a:	429a      	cmp	r2, r3
 801569c:	d2ea      	bcs.n	8015674 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 801569e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156a0:	2b00      	cmp	r3, #0
 80156a2:	d102      	bne.n	80156aa <dhcp_parse_reply+0x76>
    return ERR_BUF;
 80156a4:	f06f 0301 	mvn.w	r3, #1
 80156a8:	e281      	b.n	8015bae <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 80156aa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80156ac:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 80156ae:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80156b0:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 80156b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156b4:	685b      	ldr	r3, [r3, #4]
 80156b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80156b8:	e239      	b.n	8015b2e <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 80156ba:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80156bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80156be:	4413      	add	r3, r2
 80156c0:	781b      	ldrb	r3, [r3, #0]
 80156c2:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 80156c4:	2300      	movs	r3, #0
 80156c6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 80156ca:	f04f 33ff 	mov.w	r3, #4294967295
 80156ce:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 80156d0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80156d2:	3302      	adds	r3, #2
 80156d4:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 80156d6:	8bfa      	ldrh	r2, [r7, #30]
 80156d8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80156da:	429a      	cmp	r2, r3
 80156dc:	d202      	bcs.n	80156e4 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 80156de:	f06f 0301 	mvn.w	r3, #1
 80156e2:	e264      	b.n	8015bae <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 80156e4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80156e6:	3301      	adds	r3, #1
 80156e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80156ea:	8952      	ldrh	r2, [r2, #10]
 80156ec:	4293      	cmp	r3, r2
 80156ee:	da07      	bge.n	8015700 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 80156f0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80156f2:	3301      	adds	r3, #1
 80156f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80156f6:	4413      	add	r3, r2
 80156f8:	781b      	ldrb	r3, [r3, #0]
 80156fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80156fe:	e00b      	b.n	8015718 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8015700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015702:	681b      	ldr	r3, [r3, #0]
 8015704:	2b00      	cmp	r3, #0
 8015706:	d004      	beq.n	8015712 <dhcp_parse_reply+0xde>
 8015708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801570a:	681b      	ldr	r3, [r3, #0]
 801570c:	685b      	ldr	r3, [r3, #4]
 801570e:	781b      	ldrb	r3, [r3, #0]
 8015710:	e000      	b.n	8015714 <dhcp_parse_reply+0xe0>
 8015712:	2300      	movs	r3, #0
 8015714:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8015718:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801571c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8015720:	7dfb      	ldrb	r3, [r7, #23]
 8015722:	2b3b      	cmp	r3, #59	; 0x3b
 8015724:	f200 812c 	bhi.w	8015980 <dhcp_parse_reply+0x34c>
 8015728:	a201      	add	r2, pc, #4	; (adr r2, 8015730 <dhcp_parse_reply+0xfc>)
 801572a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801572e:	bf00      	nop
 8015730:	08015821 	.word	0x08015821
 8015734:	08015831 	.word	0x08015831
 8015738:	08015981 	.word	0x08015981
 801573c:	08015853 	.word	0x08015853
 8015740:	08015981 	.word	0x08015981
 8015744:	08015981 	.word	0x08015981
 8015748:	08015981 	.word	0x08015981
 801574c:	08015981 	.word	0x08015981
 8015750:	08015981 	.word	0x08015981
 8015754:	08015981 	.word	0x08015981
 8015758:	08015981 	.word	0x08015981
 801575c:	08015981 	.word	0x08015981
 8015760:	08015981 	.word	0x08015981
 8015764:	08015981 	.word	0x08015981
 8015768:	08015981 	.word	0x08015981
 801576c:	08015981 	.word	0x08015981
 8015770:	08015981 	.word	0x08015981
 8015774:	08015981 	.word	0x08015981
 8015778:	08015981 	.word	0x08015981
 801577c:	08015981 	.word	0x08015981
 8015780:	08015981 	.word	0x08015981
 8015784:	08015981 	.word	0x08015981
 8015788:	08015981 	.word	0x08015981
 801578c:	08015981 	.word	0x08015981
 8015790:	08015981 	.word	0x08015981
 8015794:	08015981 	.word	0x08015981
 8015798:	08015981 	.word	0x08015981
 801579c:	08015981 	.word	0x08015981
 80157a0:	08015981 	.word	0x08015981
 80157a4:	08015981 	.word	0x08015981
 80157a8:	08015981 	.word	0x08015981
 80157ac:	08015981 	.word	0x08015981
 80157b0:	08015981 	.word	0x08015981
 80157b4:	08015981 	.word	0x08015981
 80157b8:	08015981 	.word	0x08015981
 80157bc:	08015981 	.word	0x08015981
 80157c0:	08015981 	.word	0x08015981
 80157c4:	08015981 	.word	0x08015981
 80157c8:	08015981 	.word	0x08015981
 80157cc:	08015981 	.word	0x08015981
 80157d0:	08015981 	.word	0x08015981
 80157d4:	08015981 	.word	0x08015981
 80157d8:	08015981 	.word	0x08015981
 80157dc:	08015981 	.word	0x08015981
 80157e0:	08015981 	.word	0x08015981
 80157e4:	08015981 	.word	0x08015981
 80157e8:	08015981 	.word	0x08015981
 80157ec:	08015981 	.word	0x08015981
 80157f0:	08015981 	.word	0x08015981
 80157f4:	08015981 	.word	0x08015981
 80157f8:	08015981 	.word	0x08015981
 80157fc:	0801587f 	.word	0x0801587f
 8015800:	080158a1 	.word	0x080158a1
 8015804:	080158dd 	.word	0x080158dd
 8015808:	080158ff 	.word	0x080158ff
 801580c:	08015981 	.word	0x08015981
 8015810:	08015981 	.word	0x08015981
 8015814:	08015981 	.word	0x08015981
 8015818:	0801593d 	.word	0x0801593d
 801581c:	0801595f 	.word	0x0801595f
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8015820:	2300      	movs	r3, #0
 8015822:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015826:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801582a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 801582e:	e0ab      	b.n	8015988 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015830:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015834:	2b04      	cmp	r3, #4
 8015836:	d009      	beq.n	801584c <dhcp_parse_reply+0x218>
 8015838:	4b3a      	ldr	r3, [pc, #232]	; (8015924 <dhcp_parse_reply+0x2f0>)
 801583a:	f240 622e 	movw	r2, #1582	; 0x62e
 801583e:	493a      	ldr	r1, [pc, #232]	; (8015928 <dhcp_parse_reply+0x2f4>)
 8015840:	483a      	ldr	r0, [pc, #232]	; (801592c <dhcp_parse_reply+0x2f8>)
 8015842:	f003 f9a9 	bl	8018b98 <iprintf>
 8015846:	f06f 0305 	mvn.w	r3, #5
 801584a:	e1b0      	b.n	8015bae <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 801584c:	2306      	movs	r3, #6
 801584e:	623b      	str	r3, [r7, #32]
        break;
 8015850:	e09a      	b.n	8015988 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8015852:	2304      	movs	r3, #4
 8015854:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8015858:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801585c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015860:	429a      	cmp	r2, r3
 8015862:	d209      	bcs.n	8015878 <dhcp_parse_reply+0x244>
 8015864:	4b2f      	ldr	r3, [pc, #188]	; (8015924 <dhcp_parse_reply+0x2f0>)
 8015866:	f240 6233 	movw	r2, #1587	; 0x633
 801586a:	4931      	ldr	r1, [pc, #196]	; (8015930 <dhcp_parse_reply+0x2fc>)
 801586c:	482f      	ldr	r0, [pc, #188]	; (801592c <dhcp_parse_reply+0x2f8>)
 801586e:	f003 f993 	bl	8018b98 <iprintf>
 8015872:	f06f 0305 	mvn.w	r3, #5
 8015876:	e19a      	b.n	8015bae <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8015878:	2307      	movs	r3, #7
 801587a:	623b      	str	r3, [r7, #32]
        break;
 801587c:	e084      	b.n	8015988 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801587e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015882:	2b04      	cmp	r3, #4
 8015884:	d009      	beq.n	801589a <dhcp_parse_reply+0x266>
 8015886:	4b27      	ldr	r3, [pc, #156]	; (8015924 <dhcp_parse_reply+0x2f0>)
 8015888:	f240 6241 	movw	r2, #1601	; 0x641
 801588c:	4926      	ldr	r1, [pc, #152]	; (8015928 <dhcp_parse_reply+0x2f4>)
 801588e:	4827      	ldr	r0, [pc, #156]	; (801592c <dhcp_parse_reply+0x2f8>)
 8015890:	f003 f982 	bl	8018b98 <iprintf>
 8015894:	f06f 0305 	mvn.w	r3, #5
 8015898:	e189      	b.n	8015bae <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 801589a:	2303      	movs	r3, #3
 801589c:	623b      	str	r3, [r7, #32]
        break;
 801589e:	e073      	b.n	8015988 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80158a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80158a4:	2b01      	cmp	r3, #1
 80158a6:	d009      	beq.n	80158bc <dhcp_parse_reply+0x288>
 80158a8:	4b1e      	ldr	r3, [pc, #120]	; (8015924 <dhcp_parse_reply+0x2f0>)
 80158aa:	f240 624f 	movw	r2, #1615	; 0x64f
 80158ae:	4921      	ldr	r1, [pc, #132]	; (8015934 <dhcp_parse_reply+0x300>)
 80158b0:	481e      	ldr	r0, [pc, #120]	; (801592c <dhcp_parse_reply+0x2f8>)
 80158b2:	f003 f971 	bl	8018b98 <iprintf>
 80158b6:	f06f 0305 	mvn.w	r3, #5
 80158ba:	e178      	b.n	8015bae <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 80158bc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80158be:	2bf0      	cmp	r3, #240	; 0xf0
 80158c0:	d009      	beq.n	80158d6 <dhcp_parse_reply+0x2a2>
 80158c2:	4b18      	ldr	r3, [pc, #96]	; (8015924 <dhcp_parse_reply+0x2f0>)
 80158c4:	f240 6251 	movw	r2, #1617	; 0x651
 80158c8:	491b      	ldr	r1, [pc, #108]	; (8015938 <dhcp_parse_reply+0x304>)
 80158ca:	4818      	ldr	r0, [pc, #96]	; (801592c <dhcp_parse_reply+0x2f8>)
 80158cc:	f003 f964 	bl	8018b98 <iprintf>
 80158d0:	f06f 0305 	mvn.w	r3, #5
 80158d4:	e16b      	b.n	8015bae <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 80158d6:	2300      	movs	r3, #0
 80158d8:	623b      	str	r3, [r7, #32]
        break;
 80158da:	e055      	b.n	8015988 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80158dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80158e0:	2b01      	cmp	r3, #1
 80158e2:	d009      	beq.n	80158f8 <dhcp_parse_reply+0x2c4>
 80158e4:	4b0f      	ldr	r3, [pc, #60]	; (8015924 <dhcp_parse_reply+0x2f0>)
 80158e6:	f240 6255 	movw	r2, #1621	; 0x655
 80158ea:	4912      	ldr	r1, [pc, #72]	; (8015934 <dhcp_parse_reply+0x300>)
 80158ec:	480f      	ldr	r0, [pc, #60]	; (801592c <dhcp_parse_reply+0x2f8>)
 80158ee:	f003 f953 	bl	8018b98 <iprintf>
 80158f2:	f06f 0305 	mvn.w	r3, #5
 80158f6:	e15a      	b.n	8015bae <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 80158f8:	2301      	movs	r3, #1
 80158fa:	623b      	str	r3, [r7, #32]
        break;
 80158fc:	e044      	b.n	8015988 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80158fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015902:	2b04      	cmp	r3, #4
 8015904:	d009      	beq.n	801591a <dhcp_parse_reply+0x2e6>
 8015906:	4b07      	ldr	r3, [pc, #28]	; (8015924 <dhcp_parse_reply+0x2f0>)
 8015908:	f240 6259 	movw	r2, #1625	; 0x659
 801590c:	4906      	ldr	r1, [pc, #24]	; (8015928 <dhcp_parse_reply+0x2f4>)
 801590e:	4807      	ldr	r0, [pc, #28]	; (801592c <dhcp_parse_reply+0x2f8>)
 8015910:	f003 f942 	bl	8018b98 <iprintf>
 8015914:	f06f 0305 	mvn.w	r3, #5
 8015918:	e149      	b.n	8015bae <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 801591a:	2302      	movs	r3, #2
 801591c:	623b      	str	r3, [r7, #32]
        break;
 801591e:	e033      	b.n	8015988 <dhcp_parse_reply+0x354>
 8015920:	20010ef0 	.word	0x20010ef0
 8015924:	0801d0f0 	.word	0x0801d0f0
 8015928:	0801d378 	.word	0x0801d378
 801592c:	0801d150 	.word	0x0801d150
 8015930:	0801d384 	.word	0x0801d384
 8015934:	0801d398 	.word	0x0801d398
 8015938:	0801d3a4 	.word	0x0801d3a4
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801593c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015940:	2b04      	cmp	r3, #4
 8015942:	d009      	beq.n	8015958 <dhcp_parse_reply+0x324>
 8015944:	4b9c      	ldr	r3, [pc, #624]	; (8015bb8 <dhcp_parse_reply+0x584>)
 8015946:	f240 625d 	movw	r2, #1629	; 0x65d
 801594a:	499c      	ldr	r1, [pc, #624]	; (8015bbc <dhcp_parse_reply+0x588>)
 801594c:	489c      	ldr	r0, [pc, #624]	; (8015bc0 <dhcp_parse_reply+0x58c>)
 801594e:	f003 f923 	bl	8018b98 <iprintf>
 8015952:	f06f 0305 	mvn.w	r3, #5
 8015956:	e12a      	b.n	8015bae <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 8015958:	2304      	movs	r3, #4
 801595a:	623b      	str	r3, [r7, #32]
        break;
 801595c:	e014      	b.n	8015988 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801595e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015962:	2b04      	cmp	r3, #4
 8015964:	d009      	beq.n	801597a <dhcp_parse_reply+0x346>
 8015966:	4b94      	ldr	r3, [pc, #592]	; (8015bb8 <dhcp_parse_reply+0x584>)
 8015968:	f240 6261 	movw	r2, #1633	; 0x661
 801596c:	4993      	ldr	r1, [pc, #588]	; (8015bbc <dhcp_parse_reply+0x588>)
 801596e:	4894      	ldr	r0, [pc, #592]	; (8015bc0 <dhcp_parse_reply+0x58c>)
 8015970:	f003 f912 	bl	8018b98 <iprintf>
 8015974:	f06f 0305 	mvn.w	r3, #5
 8015978:	e119      	b.n	8015bae <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 801597a:	2305      	movs	r3, #5
 801597c:	623b      	str	r3, [r7, #32]
        break;
 801597e:	e003      	b.n	8015988 <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 8015980:	2300      	movs	r3, #0
 8015982:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8015986:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8015988:	7dfb      	ldrb	r3, [r7, #23]
 801598a:	2b00      	cmp	r3, #0
 801598c:	d103      	bne.n	8015996 <dhcp_parse_reply+0x362>
      offset++;
 801598e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015990:	3301      	adds	r3, #1
 8015992:	877b      	strh	r3, [r7, #58]	; 0x3a
 8015994:	e0a1      	b.n	8015ada <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8015996:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015998:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801599c:	4413      	add	r3, r2
 801599e:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 80159a2:	4293      	cmp	r3, r2
 80159a4:	dd02      	ble.n	80159ac <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 80159a6:	f06f 0301 	mvn.w	r3, #1
 80159aa:	e100      	b.n	8015bae <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 80159ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80159b0:	b29a      	uxth	r2, r3
 80159b2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80159b4:	4413      	add	r3, r2
 80159b6:	b29b      	uxth	r3, r3
 80159b8:	3302      	adds	r3, #2
 80159ba:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 80159bc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80159c0:	2b00      	cmp	r3, #0
 80159c2:	f000 808a 	beq.w	8015ada <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 80159c6:	2300      	movs	r3, #0
 80159c8:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 80159ca:	6a3b      	ldr	r3, [r7, #32]
 80159cc:	2b00      	cmp	r3, #0
 80159ce:	db02      	blt.n	80159d6 <dhcp_parse_reply+0x3a2>
 80159d0:	6a3b      	ldr	r3, [r7, #32]
 80159d2:	2b07      	cmp	r3, #7
 80159d4:	dd06      	ble.n	80159e4 <dhcp_parse_reply+0x3b0>
 80159d6:	4b78      	ldr	r3, [pc, #480]	; (8015bb8 <dhcp_parse_reply+0x584>)
 80159d8:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 80159dc:	4979      	ldr	r1, [pc, #484]	; (8015bc4 <dhcp_parse_reply+0x590>)
 80159de:	4878      	ldr	r0, [pc, #480]	; (8015bc0 <dhcp_parse_reply+0x58c>)
 80159e0:	f003 f8da 	bl	8018b98 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 80159e4:	4a78      	ldr	r2, [pc, #480]	; (8015bc8 <dhcp_parse_reply+0x594>)
 80159e6:	6a3b      	ldr	r3, [r7, #32]
 80159e8:	4413      	add	r3, r2
 80159ea:	781b      	ldrb	r3, [r3, #0]
 80159ec:	2b00      	cmp	r3, #0
 80159ee:	d174      	bne.n	8015ada <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 80159f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80159f4:	2b04      	cmp	r3, #4
 80159f6:	bf28      	it	cs
 80159f8:	2304      	movcs	r3, #4
 80159fa:	b2db      	uxtb	r3, r3
 80159fc:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 80159fe:	8bfb      	ldrh	r3, [r7, #30]
 8015a00:	8aba      	ldrh	r2, [r7, #20]
 8015a02:	f107 0108 	add.w	r1, r7, #8
 8015a06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015a08:	f7f7 fb9a 	bl	800d140 <pbuf_copy_partial>
 8015a0c:	4603      	mov	r3, r0
 8015a0e:	461a      	mov	r2, r3
 8015a10:	8abb      	ldrh	r3, [r7, #20]
 8015a12:	4293      	cmp	r3, r2
 8015a14:	d002      	beq.n	8015a1c <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 8015a16:	f06f 0301 	mvn.w	r3, #1
 8015a1a:	e0c8      	b.n	8015bae <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 8015a1c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015a20:	2b04      	cmp	r3, #4
 8015a22:	d933      	bls.n	8015a8c <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8015a24:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015a28:	f003 0303 	and.w	r3, r3, #3
 8015a2c:	b2db      	uxtb	r3, r3
 8015a2e:	2b00      	cmp	r3, #0
 8015a30:	d009      	beq.n	8015a46 <dhcp_parse_reply+0x412>
 8015a32:	4b61      	ldr	r3, [pc, #388]	; (8015bb8 <dhcp_parse_reply+0x584>)
 8015a34:	f240 6281 	movw	r2, #1665	; 0x681
 8015a38:	4964      	ldr	r1, [pc, #400]	; (8015bcc <dhcp_parse_reply+0x598>)
 8015a3a:	4861      	ldr	r0, [pc, #388]	; (8015bc0 <dhcp_parse_reply+0x58c>)
 8015a3c:	f003 f8ac 	bl	8018b98 <iprintf>
 8015a40:	f06f 0305 	mvn.w	r3, #5
 8015a44:	e0b3      	b.n	8015bae <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 8015a46:	4a60      	ldr	r2, [pc, #384]	; (8015bc8 <dhcp_parse_reply+0x594>)
 8015a48:	6a3b      	ldr	r3, [r7, #32]
 8015a4a:	4413      	add	r3, r2
 8015a4c:	2201      	movs	r2, #1
 8015a4e:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8015a50:	68bb      	ldr	r3, [r7, #8]
 8015a52:	4618      	mov	r0, r3
 8015a54:	f7f5 fd4f 	bl	800b4f6 <lwip_htonl>
 8015a58:	4602      	mov	r2, r0
 8015a5a:	495d      	ldr	r1, [pc, #372]	; (8015bd0 <dhcp_parse_reply+0x59c>)
 8015a5c:	6a3b      	ldr	r3, [r7, #32]
 8015a5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8015a62:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015a66:	3b04      	subs	r3, #4
 8015a68:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8015a6c:	8bfb      	ldrh	r3, [r7, #30]
 8015a6e:	3304      	adds	r3, #4
 8015a70:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8015a72:	8a7a      	ldrh	r2, [r7, #18]
 8015a74:	8bfb      	ldrh	r3, [r7, #30]
 8015a76:	429a      	cmp	r2, r3
 8015a78:	d202      	bcs.n	8015a80 <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 8015a7a:	f06f 0301 	mvn.w	r3, #1
 8015a7e:	e096      	b.n	8015bae <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 8015a80:	8a7b      	ldrh	r3, [r7, #18]
 8015a82:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8015a84:	6a3b      	ldr	r3, [r7, #32]
 8015a86:	3301      	adds	r3, #1
 8015a88:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8015a8a:	e79e      	b.n	80159ca <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 8015a8c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015a90:	2b04      	cmp	r3, #4
 8015a92:	d106      	bne.n	8015aa2 <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 8015a94:	68bb      	ldr	r3, [r7, #8]
 8015a96:	4618      	mov	r0, r3
 8015a98:	f7f5 fd2d 	bl	800b4f6 <lwip_htonl>
 8015a9c:	4603      	mov	r3, r0
 8015a9e:	60bb      	str	r3, [r7, #8]
 8015aa0:	e011      	b.n	8015ac6 <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8015aa2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015aa6:	2b01      	cmp	r3, #1
 8015aa8:	d009      	beq.n	8015abe <dhcp_parse_reply+0x48a>
 8015aaa:	4b43      	ldr	r3, [pc, #268]	; (8015bb8 <dhcp_parse_reply+0x584>)
 8015aac:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8015ab0:	4948      	ldr	r1, [pc, #288]	; (8015bd4 <dhcp_parse_reply+0x5a0>)
 8015ab2:	4843      	ldr	r0, [pc, #268]	; (8015bc0 <dhcp_parse_reply+0x58c>)
 8015ab4:	f003 f870 	bl	8018b98 <iprintf>
 8015ab8:	f06f 0305 	mvn.w	r3, #5
 8015abc:	e077      	b.n	8015bae <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 8015abe:	f107 0308 	add.w	r3, r7, #8
 8015ac2:	781b      	ldrb	r3, [r3, #0]
 8015ac4:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8015ac6:	4a40      	ldr	r2, [pc, #256]	; (8015bc8 <dhcp_parse_reply+0x594>)
 8015ac8:	6a3b      	ldr	r3, [r7, #32]
 8015aca:	4413      	add	r3, r2
 8015acc:	2201      	movs	r2, #1
 8015ace:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8015ad0:	68ba      	ldr	r2, [r7, #8]
 8015ad2:	493f      	ldr	r1, [pc, #252]	; (8015bd0 <dhcp_parse_reply+0x59c>)
 8015ad4:	6a3b      	ldr	r3, [r7, #32]
 8015ad6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8015ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015adc:	895b      	ldrh	r3, [r3, #10]
 8015ade:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015ae0:	429a      	cmp	r2, r3
 8015ae2:	d324      	bcc.n	8015b2e <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 8015ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ae6:	895b      	ldrh	r3, [r3, #10]
 8015ae8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015aea:	1ad3      	subs	r3, r2, r3
 8015aec:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8015aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015af0:	895b      	ldrh	r3, [r3, #10]
 8015af2:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8015af4:	1ad3      	subs	r3, r2, r3
 8015af6:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 8015af8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015afa:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8015afc:	429a      	cmp	r2, r3
 8015afe:	d213      	bcs.n	8015b28 <dhcp_parse_reply+0x4f4>
        q = q->next;
 8015b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b02:	681b      	ldr	r3, [r3, #0]
 8015b04:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8015b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b08:	2b00      	cmp	r3, #0
 8015b0a:	d109      	bne.n	8015b20 <dhcp_parse_reply+0x4ec>
 8015b0c:	4b2a      	ldr	r3, [pc, #168]	; (8015bb8 <dhcp_parse_reply+0x584>)
 8015b0e:	f240 629d 	movw	r2, #1693	; 0x69d
 8015b12:	4931      	ldr	r1, [pc, #196]	; (8015bd8 <dhcp_parse_reply+0x5a4>)
 8015b14:	482a      	ldr	r0, [pc, #168]	; (8015bc0 <dhcp_parse_reply+0x58c>)
 8015b16:	f003 f83f 	bl	8018b98 <iprintf>
 8015b1a:	f06f 0305 	mvn.w	r3, #5
 8015b1e:	e046      	b.n	8015bae <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 8015b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b22:	685b      	ldr	r3, [r3, #4]
 8015b24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8015b26:	e002      	b.n	8015b2e <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8015b28:	f06f 0301 	mvn.w	r3, #1
 8015b2c:	e03f      	b.n	8015bae <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8015b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b30:	2b00      	cmp	r3, #0
 8015b32:	d00a      	beq.n	8015b4a <dhcp_parse_reply+0x516>
 8015b34:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015b36:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8015b38:	429a      	cmp	r2, r3
 8015b3a:	d206      	bcs.n	8015b4a <dhcp_parse_reply+0x516>
 8015b3c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015b3e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015b40:	4413      	add	r3, r2
 8015b42:	781b      	ldrb	r3, [r3, #0]
 8015b44:	2bff      	cmp	r3, #255	; 0xff
 8015b46:	f47f adb8 	bne.w	80156ba <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8015b4a:	4b1f      	ldr	r3, [pc, #124]	; (8015bc8 <dhcp_parse_reply+0x594>)
 8015b4c:	781b      	ldrb	r3, [r3, #0]
 8015b4e:	2b00      	cmp	r3, #0
 8015b50:	d018      	beq.n	8015b84 <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8015b52:	4b1f      	ldr	r3, [pc, #124]	; (8015bd0 <dhcp_parse_reply+0x59c>)
 8015b54:	681b      	ldr	r3, [r3, #0]
 8015b56:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8015b58:	4b1b      	ldr	r3, [pc, #108]	; (8015bc8 <dhcp_parse_reply+0x594>)
 8015b5a:	2200      	movs	r2, #0
 8015b5c:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8015b5e:	68fb      	ldr	r3, [r7, #12]
 8015b60:	2b01      	cmp	r3, #1
 8015b62:	d102      	bne.n	8015b6a <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 8015b64:	2301      	movs	r3, #1
 8015b66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015b68:	e00c      	b.n	8015b84 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8015b6a:	68fb      	ldr	r3, [r7, #12]
 8015b6c:	2b02      	cmp	r3, #2
 8015b6e:	d102      	bne.n	8015b76 <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 8015b70:	2301      	movs	r3, #1
 8015b72:	62bb      	str	r3, [r7, #40]	; 0x28
 8015b74:	e006      	b.n	8015b84 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8015b76:	68fb      	ldr	r3, [r7, #12]
 8015b78:	2b03      	cmp	r3, #3
 8015b7a:	d103      	bne.n	8015b84 <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 8015b7c:	2301      	movs	r3, #1
 8015b7e:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 8015b80:	2301      	movs	r3, #1
 8015b82:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8015b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b86:	2b00      	cmp	r3, #0
 8015b88:	d006      	beq.n	8015b98 <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8015b8a:	2300      	movs	r3, #0
 8015b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 8015b8e:	236c      	movs	r3, #108	; 0x6c
 8015b90:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8015b92:	23ec      	movs	r3, #236	; 0xec
 8015b94:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8015b96:	e56a      	b.n	801566e <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8015b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b9a:	2b00      	cmp	r3, #0
 8015b9c:	d006      	beq.n	8015bac <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 8015b9e:	2300      	movs	r3, #0
 8015ba0:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 8015ba2:	232c      	movs	r3, #44	; 0x2c
 8015ba4:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8015ba6:	236c      	movs	r3, #108	; 0x6c
 8015ba8:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 8015baa:	e560      	b.n	801566e <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8015bac:	2300      	movs	r3, #0
}
 8015bae:	4618      	mov	r0, r3
 8015bb0:	3740      	adds	r7, #64	; 0x40
 8015bb2:	46bd      	mov	sp, r7
 8015bb4:	bd80      	pop	{r7, pc}
 8015bb6:	bf00      	nop
 8015bb8:	0801d0f0 	.word	0x0801d0f0
 8015bbc:	0801d378 	.word	0x0801d378
 8015bc0:	0801d150 	.word	0x0801d150
 8015bc4:	0801d3bc 	.word	0x0801d3bc
 8015bc8:	20010ef0 	.word	0x20010ef0
 8015bcc:	0801d3d0 	.word	0x0801d3d0
 8015bd0:	20010ed0 	.word	0x20010ed0
 8015bd4:	0801d3e8 	.word	0x0801d3e8
 8015bd8:	0801d3fc 	.word	0x0801d3fc

08015bdc <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8015bdc:	b580      	push	{r7, lr}
 8015bde:	b08a      	sub	sp, #40	; 0x28
 8015be0:	af00      	add	r7, sp, #0
 8015be2:	60f8      	str	r0, [r7, #12]
 8015be4:	60b9      	str	r1, [r7, #8]
 8015be6:	607a      	str	r2, [r7, #4]
 8015be8:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8015bea:	4b60      	ldr	r3, [pc, #384]	; (8015d6c <dhcp_recv+0x190>)
 8015bec:	685b      	ldr	r3, [r3, #4]
 8015bee:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015bf0:	6a3b      	ldr	r3, [r7, #32]
 8015bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015bf4:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8015bf6:	687b      	ldr	r3, [r7, #4]
 8015bf8:	685b      	ldr	r3, [r3, #4]
 8015bfa:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8015bfc:	69fb      	ldr	r3, [r7, #28]
 8015bfe:	2b00      	cmp	r3, #0
 8015c00:	f000 809d 	beq.w	8015d3e <dhcp_recv+0x162>
 8015c04:	69fb      	ldr	r3, [r7, #28]
 8015c06:	791b      	ldrb	r3, [r3, #4]
 8015c08:	2b00      	cmp	r3, #0
 8015c0a:	f000 8098 	beq.w	8015d3e <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8015c0e:	687b      	ldr	r3, [r7, #4]
 8015c10:	895b      	ldrh	r3, [r3, #10]
 8015c12:	2b2b      	cmp	r3, #43	; 0x2b
 8015c14:	f240 8095 	bls.w	8015d42 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8015c18:	69bb      	ldr	r3, [r7, #24]
 8015c1a:	781b      	ldrb	r3, [r3, #0]
 8015c1c:	2b02      	cmp	r3, #2
 8015c1e:	f040 8092 	bne.w	8015d46 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8015c22:	2300      	movs	r3, #0
 8015c24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015c28:	e012      	b.n	8015c50 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8015c2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015c2e:	6a3a      	ldr	r2, [r7, #32]
 8015c30:	4413      	add	r3, r2
 8015c32:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8015c36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015c3a:	69b9      	ldr	r1, [r7, #24]
 8015c3c:	440b      	add	r3, r1
 8015c3e:	7f1b      	ldrb	r3, [r3, #28]
 8015c40:	429a      	cmp	r2, r3
 8015c42:	f040 8082 	bne.w	8015d4a <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8015c46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015c4a:	3301      	adds	r3, #1
 8015c4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015c50:	6a3b      	ldr	r3, [r7, #32]
 8015c52:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015c56:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8015c5a:	429a      	cmp	r2, r3
 8015c5c:	d203      	bcs.n	8015c66 <dhcp_recv+0x8a>
 8015c5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015c62:	2b05      	cmp	r3, #5
 8015c64:	d9e1      	bls.n	8015c2a <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8015c66:	69bb      	ldr	r3, [r7, #24]
 8015c68:	685b      	ldr	r3, [r3, #4]
 8015c6a:	4618      	mov	r0, r3
 8015c6c:	f7f5 fc43 	bl	800b4f6 <lwip_htonl>
 8015c70:	4602      	mov	r2, r0
 8015c72:	69fb      	ldr	r3, [r7, #28]
 8015c74:	681b      	ldr	r3, [r3, #0]
 8015c76:	429a      	cmp	r2, r3
 8015c78:	d169      	bne.n	8015d4e <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8015c7a:	69f9      	ldr	r1, [r7, #28]
 8015c7c:	6878      	ldr	r0, [r7, #4]
 8015c7e:	f7ff fcd9 	bl	8015634 <dhcp_parse_reply>
 8015c82:	4603      	mov	r3, r0
 8015c84:	2b00      	cmp	r3, #0
 8015c86:	d164      	bne.n	8015d52 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8015c88:	4b39      	ldr	r3, [pc, #228]	; (8015d70 <dhcp_recv+0x194>)
 8015c8a:	785b      	ldrb	r3, [r3, #1]
 8015c8c:	2b00      	cmp	r3, #0
 8015c8e:	d062      	beq.n	8015d56 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8015c90:	687b      	ldr	r3, [r7, #4]
 8015c92:	685b      	ldr	r3, [r3, #4]
 8015c94:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8015c96:	4b37      	ldr	r3, [pc, #220]	; (8015d74 <dhcp_recv+0x198>)
 8015c98:	685b      	ldr	r3, [r3, #4]
 8015c9a:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8015c9c:	7cfb      	ldrb	r3, [r7, #19]
 8015c9e:	2b05      	cmp	r3, #5
 8015ca0:	d12a      	bne.n	8015cf8 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8015ca2:	69fb      	ldr	r3, [r7, #28]
 8015ca4:	795b      	ldrb	r3, [r3, #5]
 8015ca6:	2b01      	cmp	r3, #1
 8015ca8:	d112      	bne.n	8015cd0 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8015caa:	6979      	ldr	r1, [r7, #20]
 8015cac:	6a38      	ldr	r0, [r7, #32]
 8015cae:	f7fe fe17 	bl	80148e0 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8015cb2:	6a3b      	ldr	r3, [r7, #32]
 8015cb4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015cb8:	f003 0308 	and.w	r3, r3, #8
 8015cbc:	2b00      	cmp	r3, #0
 8015cbe:	d003      	beq.n	8015cc8 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8015cc0:	6a38      	ldr	r0, [r7, #32]
 8015cc2:	f7fe fb87 	bl	80143d4 <dhcp_check>
 8015cc6:	e049      	b.n	8015d5c <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8015cc8:	6a38      	ldr	r0, [r7, #32]
 8015cca:	f7ff f867 	bl	8014d9c <dhcp_bind>
 8015cce:	e045      	b.n	8015d5c <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8015cd0:	69fb      	ldr	r3, [r7, #28]
 8015cd2:	795b      	ldrb	r3, [r3, #5]
 8015cd4:	2b03      	cmp	r3, #3
 8015cd6:	d007      	beq.n	8015ce8 <dhcp_recv+0x10c>
 8015cd8:	69fb      	ldr	r3, [r7, #28]
 8015cda:	795b      	ldrb	r3, [r3, #5]
 8015cdc:	2b04      	cmp	r3, #4
 8015cde:	d003      	beq.n	8015ce8 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8015ce0:	69fb      	ldr	r3, [r7, #28]
 8015ce2:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8015ce4:	2b05      	cmp	r3, #5
 8015ce6:	d139      	bne.n	8015d5c <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 8015ce8:	6979      	ldr	r1, [r7, #20]
 8015cea:	6a38      	ldr	r0, [r7, #32]
 8015cec:	f7fe fdf8 	bl	80148e0 <dhcp_handle_ack>
      dhcp_bind(netif);
 8015cf0:	6a38      	ldr	r0, [r7, #32]
 8015cf2:	f7ff f853 	bl	8014d9c <dhcp_bind>
 8015cf6:	e031      	b.n	8015d5c <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8015cf8:	7cfb      	ldrb	r3, [r7, #19]
 8015cfa:	2b06      	cmp	r3, #6
 8015cfc:	d113      	bne.n	8015d26 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8015cfe:	69fb      	ldr	r3, [r7, #28]
 8015d00:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8015d02:	2b03      	cmp	r3, #3
 8015d04:	d00b      	beq.n	8015d1e <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8015d06:	69fb      	ldr	r3, [r7, #28]
 8015d08:	795b      	ldrb	r3, [r3, #5]
 8015d0a:	2b01      	cmp	r3, #1
 8015d0c:	d007      	beq.n	8015d1e <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8015d0e:	69fb      	ldr	r3, [r7, #28]
 8015d10:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8015d12:	2b04      	cmp	r3, #4
 8015d14:	d003      	beq.n	8015d1e <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8015d16:	69fb      	ldr	r3, [r7, #28]
 8015d18:	795b      	ldrb	r3, [r3, #5]
 8015d1a:	2b05      	cmp	r3, #5
 8015d1c:	d103      	bne.n	8015d26 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8015d1e:	6a38      	ldr	r0, [r7, #32]
 8015d20:	f7fe fb3e 	bl	80143a0 <dhcp_handle_nak>
 8015d24:	e01a      	b.n	8015d5c <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8015d26:	7cfb      	ldrb	r3, [r7, #19]
 8015d28:	2b02      	cmp	r3, #2
 8015d2a:	d116      	bne.n	8015d5a <dhcp_recv+0x17e>
 8015d2c:	69fb      	ldr	r3, [r7, #28]
 8015d2e:	795b      	ldrb	r3, [r3, #5]
 8015d30:	2b06      	cmp	r3, #6
 8015d32:	d112      	bne.n	8015d5a <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8015d34:	6979      	ldr	r1, [r7, #20]
 8015d36:	6a38      	ldr	r0, [r7, #32]
 8015d38:	f7fe fb80 	bl	801443c <dhcp_handle_offer>
 8015d3c:	e00e      	b.n	8015d5c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015d3e:	bf00      	nop
 8015d40:	e00c      	b.n	8015d5c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015d42:	bf00      	nop
 8015d44:	e00a      	b.n	8015d5c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015d46:	bf00      	nop
 8015d48:	e008      	b.n	8015d5c <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 8015d4a:	bf00      	nop
 8015d4c:	e006      	b.n	8015d5c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015d4e:	bf00      	nop
 8015d50:	e004      	b.n	8015d5c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015d52:	bf00      	nop
 8015d54:	e002      	b.n	8015d5c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015d56:	bf00      	nop
 8015d58:	e000      	b.n	8015d5c <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 8015d5a:	bf00      	nop
  pbuf_free(p);
 8015d5c:	6878      	ldr	r0, [r7, #4]
 8015d5e:	f7f6 ffe9 	bl	800cd34 <pbuf_free>
}
 8015d62:	bf00      	nop
 8015d64:	3728      	adds	r7, #40	; 0x28
 8015d66:	46bd      	mov	sp, r7
 8015d68:	bd80      	pop	{r7, pc}
 8015d6a:	bf00      	nop
 8015d6c:	2000d6fc 	.word	0x2000d6fc
 8015d70:	20010ef0 	.word	0x20010ef0
 8015d74:	20010ed0 	.word	0x20010ed0

08015d78 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8015d78:	b580      	push	{r7, lr}
 8015d7a:	b088      	sub	sp, #32
 8015d7c:	af00      	add	r7, sp, #0
 8015d7e:	60f8      	str	r0, [r7, #12]
 8015d80:	60b9      	str	r1, [r7, #8]
 8015d82:	603b      	str	r3, [r7, #0]
 8015d84:	4613      	mov	r3, r2
 8015d86:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8015d88:	68fb      	ldr	r3, [r7, #12]
 8015d8a:	2b00      	cmp	r3, #0
 8015d8c:	d108      	bne.n	8015da0 <dhcp_create_msg+0x28>
 8015d8e:	4b5f      	ldr	r3, [pc, #380]	; (8015f0c <dhcp_create_msg+0x194>)
 8015d90:	f240 7269 	movw	r2, #1897	; 0x769
 8015d94:	495e      	ldr	r1, [pc, #376]	; (8015f10 <dhcp_create_msg+0x198>)
 8015d96:	485f      	ldr	r0, [pc, #380]	; (8015f14 <dhcp_create_msg+0x19c>)
 8015d98:	f002 fefe 	bl	8018b98 <iprintf>
 8015d9c:	2300      	movs	r3, #0
 8015d9e:	e0b1      	b.n	8015f04 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8015da0:	68bb      	ldr	r3, [r7, #8]
 8015da2:	2b00      	cmp	r3, #0
 8015da4:	d108      	bne.n	8015db8 <dhcp_create_msg+0x40>
 8015da6:	4b59      	ldr	r3, [pc, #356]	; (8015f0c <dhcp_create_msg+0x194>)
 8015da8:	f240 726a 	movw	r2, #1898	; 0x76a
 8015dac:	495a      	ldr	r1, [pc, #360]	; (8015f18 <dhcp_create_msg+0x1a0>)
 8015dae:	4859      	ldr	r0, [pc, #356]	; (8015f14 <dhcp_create_msg+0x19c>)
 8015db0:	f002 fef2 	bl	8018b98 <iprintf>
 8015db4:	2300      	movs	r3, #0
 8015db6:	e0a5      	b.n	8015f04 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8015db8:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015dbc:	f44f 719a 	mov.w	r1, #308	; 0x134
 8015dc0:	2036      	movs	r0, #54	; 0x36
 8015dc2:	f7f6 fcd3 	bl	800c76c <pbuf_alloc>
 8015dc6:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8015dc8:	69bb      	ldr	r3, [r7, #24]
 8015dca:	2b00      	cmp	r3, #0
 8015dcc:	d101      	bne.n	8015dd2 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8015dce:	2300      	movs	r3, #0
 8015dd0:	e098      	b.n	8015f04 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8015dd2:	69bb      	ldr	r3, [r7, #24]
 8015dd4:	895b      	ldrh	r3, [r3, #10]
 8015dd6:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8015dda:	d206      	bcs.n	8015dea <dhcp_create_msg+0x72>
 8015ddc:	4b4b      	ldr	r3, [pc, #300]	; (8015f0c <dhcp_create_msg+0x194>)
 8015dde:	f240 7271 	movw	r2, #1905	; 0x771
 8015de2:	494e      	ldr	r1, [pc, #312]	; (8015f1c <dhcp_create_msg+0x1a4>)
 8015de4:	484b      	ldr	r0, [pc, #300]	; (8015f14 <dhcp_create_msg+0x19c>)
 8015de6:	f002 fed7 	bl	8018b98 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8015dea:	79fb      	ldrb	r3, [r7, #7]
 8015dec:	2b03      	cmp	r3, #3
 8015dee:	d103      	bne.n	8015df8 <dhcp_create_msg+0x80>
 8015df0:	68bb      	ldr	r3, [r7, #8]
 8015df2:	795b      	ldrb	r3, [r3, #5]
 8015df4:	2b03      	cmp	r3, #3
 8015df6:	d10d      	bne.n	8015e14 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8015df8:	68bb      	ldr	r3, [r7, #8]
 8015dfa:	799b      	ldrb	r3, [r3, #6]
 8015dfc:	2b00      	cmp	r3, #0
 8015dfe:	d105      	bne.n	8015e0c <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8015e00:	f002 fddc 	bl	80189bc <rand>
 8015e04:	4603      	mov	r3, r0
 8015e06:	461a      	mov	r2, r3
 8015e08:	4b45      	ldr	r3, [pc, #276]	; (8015f20 <dhcp_create_msg+0x1a8>)
 8015e0a:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8015e0c:	4b44      	ldr	r3, [pc, #272]	; (8015f20 <dhcp_create_msg+0x1a8>)
 8015e0e:	681a      	ldr	r2, [r3, #0]
 8015e10:	68bb      	ldr	r3, [r7, #8]
 8015e12:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8015e14:	69bb      	ldr	r3, [r7, #24]
 8015e16:	685b      	ldr	r3, [r3, #4]
 8015e18:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8015e1a:	f44f 729a 	mov.w	r2, #308	; 0x134
 8015e1e:	2100      	movs	r1, #0
 8015e20:	6978      	ldr	r0, [r7, #20]
 8015e22:	f002 ff58 	bl	8018cd6 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8015e26:	697b      	ldr	r3, [r7, #20]
 8015e28:	2201      	movs	r2, #1
 8015e2a:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8015e2c:	697b      	ldr	r3, [r7, #20]
 8015e2e:	2201      	movs	r2, #1
 8015e30:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8015e32:	68fb      	ldr	r3, [r7, #12]
 8015e34:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8015e38:	697b      	ldr	r3, [r7, #20]
 8015e3a:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8015e3c:	68bb      	ldr	r3, [r7, #8]
 8015e3e:	681b      	ldr	r3, [r3, #0]
 8015e40:	4618      	mov	r0, r3
 8015e42:	f7f5 fb58 	bl	800b4f6 <lwip_htonl>
 8015e46:	4602      	mov	r2, r0
 8015e48:	697b      	ldr	r3, [r7, #20]
 8015e4a:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8015e4c:	79fb      	ldrb	r3, [r7, #7]
 8015e4e:	2b08      	cmp	r3, #8
 8015e50:	d010      	beq.n	8015e74 <dhcp_create_msg+0xfc>
 8015e52:	79fb      	ldrb	r3, [r7, #7]
 8015e54:	2b04      	cmp	r3, #4
 8015e56:	d00d      	beq.n	8015e74 <dhcp_create_msg+0xfc>
 8015e58:	79fb      	ldrb	r3, [r7, #7]
 8015e5a:	2b07      	cmp	r3, #7
 8015e5c:	d00a      	beq.n	8015e74 <dhcp_create_msg+0xfc>
 8015e5e:	79fb      	ldrb	r3, [r7, #7]
 8015e60:	2b03      	cmp	r3, #3
 8015e62:	d10c      	bne.n	8015e7e <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8015e64:	68bb      	ldr	r3, [r7, #8]
 8015e66:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8015e68:	2b05      	cmp	r3, #5
 8015e6a:	d003      	beq.n	8015e74 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8015e6c:	68bb      	ldr	r3, [r7, #8]
 8015e6e:	795b      	ldrb	r3, [r3, #5]
 8015e70:	2b04      	cmp	r3, #4
 8015e72:	d104      	bne.n	8015e7e <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8015e74:	68fb      	ldr	r3, [r7, #12]
 8015e76:	3304      	adds	r3, #4
 8015e78:	681a      	ldr	r2, [r3, #0]
 8015e7a:	697b      	ldr	r3, [r7, #20]
 8015e7c:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8015e7e:	2300      	movs	r3, #0
 8015e80:	83fb      	strh	r3, [r7, #30]
 8015e82:	e00c      	b.n	8015e9e <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8015e84:	8bfa      	ldrh	r2, [r7, #30]
 8015e86:	8bfb      	ldrh	r3, [r7, #30]
 8015e88:	68f9      	ldr	r1, [r7, #12]
 8015e8a:	440a      	add	r2, r1
 8015e8c:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8015e90:	697a      	ldr	r2, [r7, #20]
 8015e92:	4413      	add	r3, r2
 8015e94:	460a      	mov	r2, r1
 8015e96:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8015e98:	8bfb      	ldrh	r3, [r7, #30]
 8015e9a:	3301      	adds	r3, #1
 8015e9c:	83fb      	strh	r3, [r7, #30]
 8015e9e:	8bfb      	ldrh	r3, [r7, #30]
 8015ea0:	2b05      	cmp	r3, #5
 8015ea2:	d9ef      	bls.n	8015e84 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8015ea4:	697b      	ldr	r3, [r7, #20]
 8015ea6:	2200      	movs	r2, #0
 8015ea8:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8015eac:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8015eb0:	2200      	movs	r2, #0
 8015eb2:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8015eb6:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 8015eba:	2200      	movs	r2, #0
 8015ebc:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8015ec0:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8015ec4:	2200      	movs	r2, #0
 8015ec6:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8015eca:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8015ece:	697b      	ldr	r3, [r7, #20]
 8015ed0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015ed4:	2301      	movs	r3, #1
 8015ed6:	2235      	movs	r2, #53	; 0x35
 8015ed8:	2000      	movs	r0, #0
 8015eda:	f7ff fadb 	bl	8015494 <dhcp_option>
 8015ede:	4603      	mov	r3, r0
 8015ee0:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8015ee2:	697b      	ldr	r3, [r7, #20]
 8015ee4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015ee8:	79fa      	ldrb	r2, [r7, #7]
 8015eea:	8a7b      	ldrh	r3, [r7, #18]
 8015eec:	4618      	mov	r0, r3
 8015eee:	f7ff fb05 	bl	80154fc <dhcp_option_byte>
 8015ef2:	4603      	mov	r3, r0
 8015ef4:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 8015ef6:	683b      	ldr	r3, [r7, #0]
 8015ef8:	2b00      	cmp	r3, #0
 8015efa:	d002      	beq.n	8015f02 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8015efc:	683b      	ldr	r3, [r7, #0]
 8015efe:	8a7a      	ldrh	r2, [r7, #18]
 8015f00:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 8015f02:	69bb      	ldr	r3, [r7, #24]
}
 8015f04:	4618      	mov	r0, r3
 8015f06:	3720      	adds	r7, #32
 8015f08:	46bd      	mov	sp, r7
 8015f0a:	bd80      	pop	{r7, pc}
 8015f0c:	0801d0f0 	.word	0x0801d0f0
 8015f10:	0801d410 	.word	0x0801d410
 8015f14:	0801d150 	.word	0x0801d150
 8015f18:	0801d430 	.word	0x0801d430
 8015f1c:	0801d450 	.word	0x0801d450
 8015f20:	20010f00 	.word	0x20010f00

08015f24 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8015f24:	b580      	push	{r7, lr}
 8015f26:	b084      	sub	sp, #16
 8015f28:	af00      	add	r7, sp, #0
 8015f2a:	4603      	mov	r3, r0
 8015f2c:	60b9      	str	r1, [r7, #8]
 8015f2e:	607a      	str	r2, [r7, #4]
 8015f30:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 8015f32:	89fb      	ldrh	r3, [r7, #14]
 8015f34:	1c5a      	adds	r2, r3, #1
 8015f36:	81fa      	strh	r2, [r7, #14]
 8015f38:	461a      	mov	r2, r3
 8015f3a:	68bb      	ldr	r3, [r7, #8]
 8015f3c:	4413      	add	r3, r2
 8015f3e:	22ff      	movs	r2, #255	; 0xff
 8015f40:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8015f42:	e007      	b.n	8015f54 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8015f44:	89fb      	ldrh	r3, [r7, #14]
 8015f46:	1c5a      	adds	r2, r3, #1
 8015f48:	81fa      	strh	r2, [r7, #14]
 8015f4a:	461a      	mov	r2, r3
 8015f4c:	68bb      	ldr	r3, [r7, #8]
 8015f4e:	4413      	add	r3, r2
 8015f50:	2200      	movs	r2, #0
 8015f52:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8015f54:	89fb      	ldrh	r3, [r7, #14]
 8015f56:	2b43      	cmp	r3, #67	; 0x43
 8015f58:	d904      	bls.n	8015f64 <dhcp_option_trailer+0x40>
 8015f5a:	89fb      	ldrh	r3, [r7, #14]
 8015f5c:	f003 0303 	and.w	r3, r3, #3
 8015f60:	2b00      	cmp	r3, #0
 8015f62:	d002      	beq.n	8015f6a <dhcp_option_trailer+0x46>
 8015f64:	89fb      	ldrh	r3, [r7, #14]
 8015f66:	2b43      	cmp	r3, #67	; 0x43
 8015f68:	d9ec      	bls.n	8015f44 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8015f6a:	89fb      	ldrh	r3, [r7, #14]
 8015f6c:	33f0      	adds	r3, #240	; 0xf0
 8015f6e:	b29b      	uxth	r3, r3
 8015f70:	4619      	mov	r1, r3
 8015f72:	6878      	ldr	r0, [r7, #4]
 8015f74:	f7f6 fd58 	bl	800ca28 <pbuf_realloc>
}
 8015f78:	bf00      	nop
 8015f7a:	3710      	adds	r7, #16
 8015f7c:	46bd      	mov	sp, r7
 8015f7e:	bd80      	pop	{r7, pc}

08015f80 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8015f80:	b480      	push	{r7}
 8015f82:	b085      	sub	sp, #20
 8015f84:	af00      	add	r7, sp, #0
 8015f86:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8015f88:	687b      	ldr	r3, [r7, #4]
 8015f8a:	2b00      	cmp	r3, #0
 8015f8c:	d017      	beq.n	8015fbe <dhcp_supplied_address+0x3e>
 8015f8e:	687b      	ldr	r3, [r7, #4]
 8015f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015f92:	2b00      	cmp	r3, #0
 8015f94:	d013      	beq.n	8015fbe <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8015f96:	687b      	ldr	r3, [r7, #4]
 8015f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015f9a:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8015f9c:	68fb      	ldr	r3, [r7, #12]
 8015f9e:	795b      	ldrb	r3, [r3, #5]
 8015fa0:	2b0a      	cmp	r3, #10
 8015fa2:	d007      	beq.n	8015fb4 <dhcp_supplied_address+0x34>
 8015fa4:	68fb      	ldr	r3, [r7, #12]
 8015fa6:	795b      	ldrb	r3, [r3, #5]
 8015fa8:	2b05      	cmp	r3, #5
 8015faa:	d003      	beq.n	8015fb4 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8015fac:	68fb      	ldr	r3, [r7, #12]
 8015fae:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8015fb0:	2b04      	cmp	r3, #4
 8015fb2:	d101      	bne.n	8015fb8 <dhcp_supplied_address+0x38>
 8015fb4:	2301      	movs	r3, #1
 8015fb6:	e000      	b.n	8015fba <dhcp_supplied_address+0x3a>
 8015fb8:	2300      	movs	r3, #0
 8015fba:	b2db      	uxtb	r3, r3
 8015fbc:	e000      	b.n	8015fc0 <dhcp_supplied_address+0x40>
  }
  return 0;
 8015fbe:	2300      	movs	r3, #0
}
 8015fc0:	4618      	mov	r0, r3
 8015fc2:	3714      	adds	r7, #20
 8015fc4:	46bd      	mov	sp, r7
 8015fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fca:	4770      	bx	lr

08015fcc <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8015fcc:	b580      	push	{r7, lr}
 8015fce:	b082      	sub	sp, #8
 8015fd0:	af00      	add	r7, sp, #0
 8015fd2:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8015fd4:	4915      	ldr	r1, [pc, #84]	; (801602c <etharp_free_entry+0x60>)
 8015fd6:	687a      	ldr	r2, [r7, #4]
 8015fd8:	4613      	mov	r3, r2
 8015fda:	005b      	lsls	r3, r3, #1
 8015fdc:	4413      	add	r3, r2
 8015fde:	00db      	lsls	r3, r3, #3
 8015fe0:	440b      	add	r3, r1
 8015fe2:	681b      	ldr	r3, [r3, #0]
 8015fe4:	2b00      	cmp	r3, #0
 8015fe6:	d013      	beq.n	8016010 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8015fe8:	4910      	ldr	r1, [pc, #64]	; (801602c <etharp_free_entry+0x60>)
 8015fea:	687a      	ldr	r2, [r7, #4]
 8015fec:	4613      	mov	r3, r2
 8015fee:	005b      	lsls	r3, r3, #1
 8015ff0:	4413      	add	r3, r2
 8015ff2:	00db      	lsls	r3, r3, #3
 8015ff4:	440b      	add	r3, r1
 8015ff6:	681b      	ldr	r3, [r3, #0]
 8015ff8:	4618      	mov	r0, r3
 8015ffa:	f7f6 fe9b 	bl	800cd34 <pbuf_free>
    arp_table[i].q = NULL;
 8015ffe:	490b      	ldr	r1, [pc, #44]	; (801602c <etharp_free_entry+0x60>)
 8016000:	687a      	ldr	r2, [r7, #4]
 8016002:	4613      	mov	r3, r2
 8016004:	005b      	lsls	r3, r3, #1
 8016006:	4413      	add	r3, r2
 8016008:	00db      	lsls	r3, r3, #3
 801600a:	440b      	add	r3, r1
 801600c:	2200      	movs	r2, #0
 801600e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8016010:	4906      	ldr	r1, [pc, #24]	; (801602c <etharp_free_entry+0x60>)
 8016012:	687a      	ldr	r2, [r7, #4]
 8016014:	4613      	mov	r3, r2
 8016016:	005b      	lsls	r3, r3, #1
 8016018:	4413      	add	r3, r2
 801601a:	00db      	lsls	r3, r3, #3
 801601c:	440b      	add	r3, r1
 801601e:	3314      	adds	r3, #20
 8016020:	2200      	movs	r2, #0
 8016022:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8016024:	bf00      	nop
 8016026:	3708      	adds	r7, #8
 8016028:	46bd      	mov	sp, r7
 801602a:	bd80      	pop	{r7, pc}
 801602c:	20010f04 	.word	0x20010f04

08016030 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8016030:	b580      	push	{r7, lr}
 8016032:	b082      	sub	sp, #8
 8016034:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016036:	2300      	movs	r3, #0
 8016038:	607b      	str	r3, [r7, #4]
 801603a:	e096      	b.n	801616a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801603c:	494f      	ldr	r1, [pc, #316]	; (801617c <etharp_tmr+0x14c>)
 801603e:	687a      	ldr	r2, [r7, #4]
 8016040:	4613      	mov	r3, r2
 8016042:	005b      	lsls	r3, r3, #1
 8016044:	4413      	add	r3, r2
 8016046:	00db      	lsls	r3, r3, #3
 8016048:	440b      	add	r3, r1
 801604a:	3314      	adds	r3, #20
 801604c:	781b      	ldrb	r3, [r3, #0]
 801604e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8016050:	78fb      	ldrb	r3, [r7, #3]
 8016052:	2b00      	cmp	r3, #0
 8016054:	f000 8086 	beq.w	8016164 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8016058:	4948      	ldr	r1, [pc, #288]	; (801617c <etharp_tmr+0x14c>)
 801605a:	687a      	ldr	r2, [r7, #4]
 801605c:	4613      	mov	r3, r2
 801605e:	005b      	lsls	r3, r3, #1
 8016060:	4413      	add	r3, r2
 8016062:	00db      	lsls	r3, r3, #3
 8016064:	440b      	add	r3, r1
 8016066:	3312      	adds	r3, #18
 8016068:	881b      	ldrh	r3, [r3, #0]
 801606a:	3301      	adds	r3, #1
 801606c:	b298      	uxth	r0, r3
 801606e:	4943      	ldr	r1, [pc, #268]	; (801617c <etharp_tmr+0x14c>)
 8016070:	687a      	ldr	r2, [r7, #4]
 8016072:	4613      	mov	r3, r2
 8016074:	005b      	lsls	r3, r3, #1
 8016076:	4413      	add	r3, r2
 8016078:	00db      	lsls	r3, r3, #3
 801607a:	440b      	add	r3, r1
 801607c:	3312      	adds	r3, #18
 801607e:	4602      	mov	r2, r0
 8016080:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8016082:	493e      	ldr	r1, [pc, #248]	; (801617c <etharp_tmr+0x14c>)
 8016084:	687a      	ldr	r2, [r7, #4]
 8016086:	4613      	mov	r3, r2
 8016088:	005b      	lsls	r3, r3, #1
 801608a:	4413      	add	r3, r2
 801608c:	00db      	lsls	r3, r3, #3
 801608e:	440b      	add	r3, r1
 8016090:	3312      	adds	r3, #18
 8016092:	881b      	ldrh	r3, [r3, #0]
 8016094:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8016098:	d215      	bcs.n	80160c6 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801609a:	4938      	ldr	r1, [pc, #224]	; (801617c <etharp_tmr+0x14c>)
 801609c:	687a      	ldr	r2, [r7, #4]
 801609e:	4613      	mov	r3, r2
 80160a0:	005b      	lsls	r3, r3, #1
 80160a2:	4413      	add	r3, r2
 80160a4:	00db      	lsls	r3, r3, #3
 80160a6:	440b      	add	r3, r1
 80160a8:	3314      	adds	r3, #20
 80160aa:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80160ac:	2b01      	cmp	r3, #1
 80160ae:	d10e      	bne.n	80160ce <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80160b0:	4932      	ldr	r1, [pc, #200]	; (801617c <etharp_tmr+0x14c>)
 80160b2:	687a      	ldr	r2, [r7, #4]
 80160b4:	4613      	mov	r3, r2
 80160b6:	005b      	lsls	r3, r3, #1
 80160b8:	4413      	add	r3, r2
 80160ba:	00db      	lsls	r3, r3, #3
 80160bc:	440b      	add	r3, r1
 80160be:	3312      	adds	r3, #18
 80160c0:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80160c2:	2b04      	cmp	r3, #4
 80160c4:	d903      	bls.n	80160ce <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80160c6:	6878      	ldr	r0, [r7, #4]
 80160c8:	f7ff ff80 	bl	8015fcc <etharp_free_entry>
 80160cc:	e04a      	b.n	8016164 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80160ce:	492b      	ldr	r1, [pc, #172]	; (801617c <etharp_tmr+0x14c>)
 80160d0:	687a      	ldr	r2, [r7, #4]
 80160d2:	4613      	mov	r3, r2
 80160d4:	005b      	lsls	r3, r3, #1
 80160d6:	4413      	add	r3, r2
 80160d8:	00db      	lsls	r3, r3, #3
 80160da:	440b      	add	r3, r1
 80160dc:	3314      	adds	r3, #20
 80160de:	781b      	ldrb	r3, [r3, #0]
 80160e0:	2b03      	cmp	r3, #3
 80160e2:	d10a      	bne.n	80160fa <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80160e4:	4925      	ldr	r1, [pc, #148]	; (801617c <etharp_tmr+0x14c>)
 80160e6:	687a      	ldr	r2, [r7, #4]
 80160e8:	4613      	mov	r3, r2
 80160ea:	005b      	lsls	r3, r3, #1
 80160ec:	4413      	add	r3, r2
 80160ee:	00db      	lsls	r3, r3, #3
 80160f0:	440b      	add	r3, r1
 80160f2:	3314      	adds	r3, #20
 80160f4:	2204      	movs	r2, #4
 80160f6:	701a      	strb	r2, [r3, #0]
 80160f8:	e034      	b.n	8016164 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80160fa:	4920      	ldr	r1, [pc, #128]	; (801617c <etharp_tmr+0x14c>)
 80160fc:	687a      	ldr	r2, [r7, #4]
 80160fe:	4613      	mov	r3, r2
 8016100:	005b      	lsls	r3, r3, #1
 8016102:	4413      	add	r3, r2
 8016104:	00db      	lsls	r3, r3, #3
 8016106:	440b      	add	r3, r1
 8016108:	3314      	adds	r3, #20
 801610a:	781b      	ldrb	r3, [r3, #0]
 801610c:	2b04      	cmp	r3, #4
 801610e:	d10a      	bne.n	8016126 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8016110:	491a      	ldr	r1, [pc, #104]	; (801617c <etharp_tmr+0x14c>)
 8016112:	687a      	ldr	r2, [r7, #4]
 8016114:	4613      	mov	r3, r2
 8016116:	005b      	lsls	r3, r3, #1
 8016118:	4413      	add	r3, r2
 801611a:	00db      	lsls	r3, r3, #3
 801611c:	440b      	add	r3, r1
 801611e:	3314      	adds	r3, #20
 8016120:	2202      	movs	r2, #2
 8016122:	701a      	strb	r2, [r3, #0]
 8016124:	e01e      	b.n	8016164 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8016126:	4915      	ldr	r1, [pc, #84]	; (801617c <etharp_tmr+0x14c>)
 8016128:	687a      	ldr	r2, [r7, #4]
 801612a:	4613      	mov	r3, r2
 801612c:	005b      	lsls	r3, r3, #1
 801612e:	4413      	add	r3, r2
 8016130:	00db      	lsls	r3, r3, #3
 8016132:	440b      	add	r3, r1
 8016134:	3314      	adds	r3, #20
 8016136:	781b      	ldrb	r3, [r3, #0]
 8016138:	2b01      	cmp	r3, #1
 801613a:	d113      	bne.n	8016164 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801613c:	490f      	ldr	r1, [pc, #60]	; (801617c <etharp_tmr+0x14c>)
 801613e:	687a      	ldr	r2, [r7, #4]
 8016140:	4613      	mov	r3, r2
 8016142:	005b      	lsls	r3, r3, #1
 8016144:	4413      	add	r3, r2
 8016146:	00db      	lsls	r3, r3, #3
 8016148:	440b      	add	r3, r1
 801614a:	3308      	adds	r3, #8
 801614c:	6818      	ldr	r0, [r3, #0]
 801614e:	687a      	ldr	r2, [r7, #4]
 8016150:	4613      	mov	r3, r2
 8016152:	005b      	lsls	r3, r3, #1
 8016154:	4413      	add	r3, r2
 8016156:	00db      	lsls	r3, r3, #3
 8016158:	4a08      	ldr	r2, [pc, #32]	; (801617c <etharp_tmr+0x14c>)
 801615a:	4413      	add	r3, r2
 801615c:	3304      	adds	r3, #4
 801615e:	4619      	mov	r1, r3
 8016160:	f000 fe72 	bl	8016e48 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016164:	687b      	ldr	r3, [r7, #4]
 8016166:	3301      	adds	r3, #1
 8016168:	607b      	str	r3, [r7, #4]
 801616a:	687b      	ldr	r3, [r7, #4]
 801616c:	2b09      	cmp	r3, #9
 801616e:	f77f af65 	ble.w	801603c <etharp_tmr+0xc>
      }
    }
  }
}
 8016172:	bf00      	nop
 8016174:	bf00      	nop
 8016176:	3708      	adds	r7, #8
 8016178:	46bd      	mov	sp, r7
 801617a:	bd80      	pop	{r7, pc}
 801617c:	20010f04 	.word	0x20010f04

08016180 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8016180:	b580      	push	{r7, lr}
 8016182:	b08a      	sub	sp, #40	; 0x28
 8016184:	af00      	add	r7, sp, #0
 8016186:	60f8      	str	r0, [r7, #12]
 8016188:	460b      	mov	r3, r1
 801618a:	607a      	str	r2, [r7, #4]
 801618c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801618e:	230a      	movs	r3, #10
 8016190:	84fb      	strh	r3, [r7, #38]	; 0x26
 8016192:	230a      	movs	r3, #10
 8016194:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8016196:	230a      	movs	r3, #10
 8016198:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801619a:	2300      	movs	r3, #0
 801619c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801619e:	230a      	movs	r3, #10
 80161a0:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80161a2:	2300      	movs	r3, #0
 80161a4:	83bb      	strh	r3, [r7, #28]
 80161a6:	2300      	movs	r3, #0
 80161a8:	837b      	strh	r3, [r7, #26]
 80161aa:	2300      	movs	r3, #0
 80161ac:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80161ae:	2300      	movs	r3, #0
 80161b0:	843b      	strh	r3, [r7, #32]
 80161b2:	e0ae      	b.n	8016312 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80161b4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80161b8:	49a6      	ldr	r1, [pc, #664]	; (8016454 <etharp_find_entry+0x2d4>)
 80161ba:	4613      	mov	r3, r2
 80161bc:	005b      	lsls	r3, r3, #1
 80161be:	4413      	add	r3, r2
 80161c0:	00db      	lsls	r3, r3, #3
 80161c2:	440b      	add	r3, r1
 80161c4:	3314      	adds	r3, #20
 80161c6:	781b      	ldrb	r3, [r3, #0]
 80161c8:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80161ca:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80161ce:	2b0a      	cmp	r3, #10
 80161d0:	d105      	bne.n	80161de <etharp_find_entry+0x5e>
 80161d2:	7dfb      	ldrb	r3, [r7, #23]
 80161d4:	2b00      	cmp	r3, #0
 80161d6:	d102      	bne.n	80161de <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80161d8:	8c3b      	ldrh	r3, [r7, #32]
 80161da:	847b      	strh	r3, [r7, #34]	; 0x22
 80161dc:	e095      	b.n	801630a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80161de:	7dfb      	ldrb	r3, [r7, #23]
 80161e0:	2b00      	cmp	r3, #0
 80161e2:	f000 8092 	beq.w	801630a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80161e6:	7dfb      	ldrb	r3, [r7, #23]
 80161e8:	2b01      	cmp	r3, #1
 80161ea:	d009      	beq.n	8016200 <etharp_find_entry+0x80>
 80161ec:	7dfb      	ldrb	r3, [r7, #23]
 80161ee:	2b01      	cmp	r3, #1
 80161f0:	d806      	bhi.n	8016200 <etharp_find_entry+0x80>
 80161f2:	4b99      	ldr	r3, [pc, #612]	; (8016458 <etharp_find_entry+0x2d8>)
 80161f4:	f240 1223 	movw	r2, #291	; 0x123
 80161f8:	4998      	ldr	r1, [pc, #608]	; (801645c <etharp_find_entry+0x2dc>)
 80161fa:	4899      	ldr	r0, [pc, #612]	; (8016460 <etharp_find_entry+0x2e0>)
 80161fc:	f002 fccc 	bl	8018b98 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8016200:	68fb      	ldr	r3, [r7, #12]
 8016202:	2b00      	cmp	r3, #0
 8016204:	d020      	beq.n	8016248 <etharp_find_entry+0xc8>
 8016206:	68fb      	ldr	r3, [r7, #12]
 8016208:	6819      	ldr	r1, [r3, #0]
 801620a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801620e:	4891      	ldr	r0, [pc, #580]	; (8016454 <etharp_find_entry+0x2d4>)
 8016210:	4613      	mov	r3, r2
 8016212:	005b      	lsls	r3, r3, #1
 8016214:	4413      	add	r3, r2
 8016216:	00db      	lsls	r3, r3, #3
 8016218:	4403      	add	r3, r0
 801621a:	3304      	adds	r3, #4
 801621c:	681b      	ldr	r3, [r3, #0]
 801621e:	4299      	cmp	r1, r3
 8016220:	d112      	bne.n	8016248 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8016222:	687b      	ldr	r3, [r7, #4]
 8016224:	2b00      	cmp	r3, #0
 8016226:	d00c      	beq.n	8016242 <etharp_find_entry+0xc2>
 8016228:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801622c:	4989      	ldr	r1, [pc, #548]	; (8016454 <etharp_find_entry+0x2d4>)
 801622e:	4613      	mov	r3, r2
 8016230:	005b      	lsls	r3, r3, #1
 8016232:	4413      	add	r3, r2
 8016234:	00db      	lsls	r3, r3, #3
 8016236:	440b      	add	r3, r1
 8016238:	3308      	adds	r3, #8
 801623a:	681b      	ldr	r3, [r3, #0]
 801623c:	687a      	ldr	r2, [r7, #4]
 801623e:	429a      	cmp	r2, r3
 8016240:	d102      	bne.n	8016248 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8016242:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016246:	e100      	b.n	801644a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8016248:	7dfb      	ldrb	r3, [r7, #23]
 801624a:	2b01      	cmp	r3, #1
 801624c:	d140      	bne.n	80162d0 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801624e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016252:	4980      	ldr	r1, [pc, #512]	; (8016454 <etharp_find_entry+0x2d4>)
 8016254:	4613      	mov	r3, r2
 8016256:	005b      	lsls	r3, r3, #1
 8016258:	4413      	add	r3, r2
 801625a:	00db      	lsls	r3, r3, #3
 801625c:	440b      	add	r3, r1
 801625e:	681b      	ldr	r3, [r3, #0]
 8016260:	2b00      	cmp	r3, #0
 8016262:	d01a      	beq.n	801629a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8016264:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016268:	497a      	ldr	r1, [pc, #488]	; (8016454 <etharp_find_entry+0x2d4>)
 801626a:	4613      	mov	r3, r2
 801626c:	005b      	lsls	r3, r3, #1
 801626e:	4413      	add	r3, r2
 8016270:	00db      	lsls	r3, r3, #3
 8016272:	440b      	add	r3, r1
 8016274:	3312      	adds	r3, #18
 8016276:	881b      	ldrh	r3, [r3, #0]
 8016278:	8bba      	ldrh	r2, [r7, #28]
 801627a:	429a      	cmp	r2, r3
 801627c:	d845      	bhi.n	801630a <etharp_find_entry+0x18a>
            old_queue = i;
 801627e:	8c3b      	ldrh	r3, [r7, #32]
 8016280:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8016282:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016286:	4973      	ldr	r1, [pc, #460]	; (8016454 <etharp_find_entry+0x2d4>)
 8016288:	4613      	mov	r3, r2
 801628a:	005b      	lsls	r3, r3, #1
 801628c:	4413      	add	r3, r2
 801628e:	00db      	lsls	r3, r3, #3
 8016290:	440b      	add	r3, r1
 8016292:	3312      	adds	r3, #18
 8016294:	881b      	ldrh	r3, [r3, #0]
 8016296:	83bb      	strh	r3, [r7, #28]
 8016298:	e037      	b.n	801630a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801629a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801629e:	496d      	ldr	r1, [pc, #436]	; (8016454 <etharp_find_entry+0x2d4>)
 80162a0:	4613      	mov	r3, r2
 80162a2:	005b      	lsls	r3, r3, #1
 80162a4:	4413      	add	r3, r2
 80162a6:	00db      	lsls	r3, r3, #3
 80162a8:	440b      	add	r3, r1
 80162aa:	3312      	adds	r3, #18
 80162ac:	881b      	ldrh	r3, [r3, #0]
 80162ae:	8b7a      	ldrh	r2, [r7, #26]
 80162b0:	429a      	cmp	r2, r3
 80162b2:	d82a      	bhi.n	801630a <etharp_find_entry+0x18a>
            old_pending = i;
 80162b4:	8c3b      	ldrh	r3, [r7, #32]
 80162b6:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80162b8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80162bc:	4965      	ldr	r1, [pc, #404]	; (8016454 <etharp_find_entry+0x2d4>)
 80162be:	4613      	mov	r3, r2
 80162c0:	005b      	lsls	r3, r3, #1
 80162c2:	4413      	add	r3, r2
 80162c4:	00db      	lsls	r3, r3, #3
 80162c6:	440b      	add	r3, r1
 80162c8:	3312      	adds	r3, #18
 80162ca:	881b      	ldrh	r3, [r3, #0]
 80162cc:	837b      	strh	r3, [r7, #26]
 80162ce:	e01c      	b.n	801630a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80162d0:	7dfb      	ldrb	r3, [r7, #23]
 80162d2:	2b01      	cmp	r3, #1
 80162d4:	d919      	bls.n	801630a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80162d6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80162da:	495e      	ldr	r1, [pc, #376]	; (8016454 <etharp_find_entry+0x2d4>)
 80162dc:	4613      	mov	r3, r2
 80162de:	005b      	lsls	r3, r3, #1
 80162e0:	4413      	add	r3, r2
 80162e2:	00db      	lsls	r3, r3, #3
 80162e4:	440b      	add	r3, r1
 80162e6:	3312      	adds	r3, #18
 80162e8:	881b      	ldrh	r3, [r3, #0]
 80162ea:	8b3a      	ldrh	r2, [r7, #24]
 80162ec:	429a      	cmp	r2, r3
 80162ee:	d80c      	bhi.n	801630a <etharp_find_entry+0x18a>
            old_stable = i;
 80162f0:	8c3b      	ldrh	r3, [r7, #32]
 80162f2:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80162f4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80162f8:	4956      	ldr	r1, [pc, #344]	; (8016454 <etharp_find_entry+0x2d4>)
 80162fa:	4613      	mov	r3, r2
 80162fc:	005b      	lsls	r3, r3, #1
 80162fe:	4413      	add	r3, r2
 8016300:	00db      	lsls	r3, r3, #3
 8016302:	440b      	add	r3, r1
 8016304:	3312      	adds	r3, #18
 8016306:	881b      	ldrh	r3, [r3, #0]
 8016308:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801630a:	8c3b      	ldrh	r3, [r7, #32]
 801630c:	3301      	adds	r3, #1
 801630e:	b29b      	uxth	r3, r3
 8016310:	843b      	strh	r3, [r7, #32]
 8016312:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016316:	2b09      	cmp	r3, #9
 8016318:	f77f af4c 	ble.w	80161b4 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801631c:	7afb      	ldrb	r3, [r7, #11]
 801631e:	f003 0302 	and.w	r3, r3, #2
 8016322:	2b00      	cmp	r3, #0
 8016324:	d108      	bne.n	8016338 <etharp_find_entry+0x1b8>
 8016326:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801632a:	2b0a      	cmp	r3, #10
 801632c:	d107      	bne.n	801633e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801632e:	7afb      	ldrb	r3, [r7, #11]
 8016330:	f003 0301 	and.w	r3, r3, #1
 8016334:	2b00      	cmp	r3, #0
 8016336:	d102      	bne.n	801633e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8016338:	f04f 33ff 	mov.w	r3, #4294967295
 801633c:	e085      	b.n	801644a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801633e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8016342:	2b09      	cmp	r3, #9
 8016344:	dc02      	bgt.n	801634c <etharp_find_entry+0x1cc>
    i = empty;
 8016346:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016348:	843b      	strh	r3, [r7, #32]
 801634a:	e039      	b.n	80163c0 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801634c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8016350:	2b09      	cmp	r3, #9
 8016352:	dc14      	bgt.n	801637e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8016354:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016356:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8016358:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801635c:	493d      	ldr	r1, [pc, #244]	; (8016454 <etharp_find_entry+0x2d4>)
 801635e:	4613      	mov	r3, r2
 8016360:	005b      	lsls	r3, r3, #1
 8016362:	4413      	add	r3, r2
 8016364:	00db      	lsls	r3, r3, #3
 8016366:	440b      	add	r3, r1
 8016368:	681b      	ldr	r3, [r3, #0]
 801636a:	2b00      	cmp	r3, #0
 801636c:	d018      	beq.n	80163a0 <etharp_find_entry+0x220>
 801636e:	4b3a      	ldr	r3, [pc, #232]	; (8016458 <etharp_find_entry+0x2d8>)
 8016370:	f240 126d 	movw	r2, #365	; 0x16d
 8016374:	493b      	ldr	r1, [pc, #236]	; (8016464 <etharp_find_entry+0x2e4>)
 8016376:	483a      	ldr	r0, [pc, #232]	; (8016460 <etharp_find_entry+0x2e0>)
 8016378:	f002 fc0e 	bl	8018b98 <iprintf>
 801637c:	e010      	b.n	80163a0 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801637e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8016382:	2b09      	cmp	r3, #9
 8016384:	dc02      	bgt.n	801638c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8016386:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8016388:	843b      	strh	r3, [r7, #32]
 801638a:	e009      	b.n	80163a0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801638c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8016390:	2b09      	cmp	r3, #9
 8016392:	dc02      	bgt.n	801639a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8016394:	8bfb      	ldrh	r3, [r7, #30]
 8016396:	843b      	strh	r3, [r7, #32]
 8016398:	e002      	b.n	80163a0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801639a:	f04f 33ff 	mov.w	r3, #4294967295
 801639e:	e054      	b.n	801644a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80163a0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80163a4:	2b09      	cmp	r3, #9
 80163a6:	dd06      	ble.n	80163b6 <etharp_find_entry+0x236>
 80163a8:	4b2b      	ldr	r3, [pc, #172]	; (8016458 <etharp_find_entry+0x2d8>)
 80163aa:	f240 127f 	movw	r2, #383	; 0x17f
 80163ae:	492e      	ldr	r1, [pc, #184]	; (8016468 <etharp_find_entry+0x2e8>)
 80163b0:	482b      	ldr	r0, [pc, #172]	; (8016460 <etharp_find_entry+0x2e0>)
 80163b2:	f002 fbf1 	bl	8018b98 <iprintf>
    etharp_free_entry(i);
 80163b6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80163ba:	4618      	mov	r0, r3
 80163bc:	f7ff fe06 	bl	8015fcc <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80163c0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80163c4:	2b09      	cmp	r3, #9
 80163c6:	dd06      	ble.n	80163d6 <etharp_find_entry+0x256>
 80163c8:	4b23      	ldr	r3, [pc, #140]	; (8016458 <etharp_find_entry+0x2d8>)
 80163ca:	f240 1283 	movw	r2, #387	; 0x183
 80163ce:	4926      	ldr	r1, [pc, #152]	; (8016468 <etharp_find_entry+0x2e8>)
 80163d0:	4823      	ldr	r0, [pc, #140]	; (8016460 <etharp_find_entry+0x2e0>)
 80163d2:	f002 fbe1 	bl	8018b98 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80163d6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80163da:	491e      	ldr	r1, [pc, #120]	; (8016454 <etharp_find_entry+0x2d4>)
 80163dc:	4613      	mov	r3, r2
 80163de:	005b      	lsls	r3, r3, #1
 80163e0:	4413      	add	r3, r2
 80163e2:	00db      	lsls	r3, r3, #3
 80163e4:	440b      	add	r3, r1
 80163e6:	3314      	adds	r3, #20
 80163e8:	781b      	ldrb	r3, [r3, #0]
 80163ea:	2b00      	cmp	r3, #0
 80163ec:	d006      	beq.n	80163fc <etharp_find_entry+0x27c>
 80163ee:	4b1a      	ldr	r3, [pc, #104]	; (8016458 <etharp_find_entry+0x2d8>)
 80163f0:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80163f4:	491d      	ldr	r1, [pc, #116]	; (801646c <etharp_find_entry+0x2ec>)
 80163f6:	481a      	ldr	r0, [pc, #104]	; (8016460 <etharp_find_entry+0x2e0>)
 80163f8:	f002 fbce 	bl	8018b98 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80163fc:	68fb      	ldr	r3, [r7, #12]
 80163fe:	2b00      	cmp	r3, #0
 8016400:	d00b      	beq.n	801641a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8016402:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016406:	68fb      	ldr	r3, [r7, #12]
 8016408:	6819      	ldr	r1, [r3, #0]
 801640a:	4812      	ldr	r0, [pc, #72]	; (8016454 <etharp_find_entry+0x2d4>)
 801640c:	4613      	mov	r3, r2
 801640e:	005b      	lsls	r3, r3, #1
 8016410:	4413      	add	r3, r2
 8016412:	00db      	lsls	r3, r3, #3
 8016414:	4403      	add	r3, r0
 8016416:	3304      	adds	r3, #4
 8016418:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801641a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801641e:	490d      	ldr	r1, [pc, #52]	; (8016454 <etharp_find_entry+0x2d4>)
 8016420:	4613      	mov	r3, r2
 8016422:	005b      	lsls	r3, r3, #1
 8016424:	4413      	add	r3, r2
 8016426:	00db      	lsls	r3, r3, #3
 8016428:	440b      	add	r3, r1
 801642a:	3312      	adds	r3, #18
 801642c:	2200      	movs	r2, #0
 801642e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8016430:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016434:	4907      	ldr	r1, [pc, #28]	; (8016454 <etharp_find_entry+0x2d4>)
 8016436:	4613      	mov	r3, r2
 8016438:	005b      	lsls	r3, r3, #1
 801643a:	4413      	add	r3, r2
 801643c:	00db      	lsls	r3, r3, #3
 801643e:	440b      	add	r3, r1
 8016440:	3308      	adds	r3, #8
 8016442:	687a      	ldr	r2, [r7, #4]
 8016444:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8016446:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801644a:	4618      	mov	r0, r3
 801644c:	3728      	adds	r7, #40	; 0x28
 801644e:	46bd      	mov	sp, r7
 8016450:	bd80      	pop	{r7, pc}
 8016452:	bf00      	nop
 8016454:	20010f04 	.word	0x20010f04
 8016458:	0801d490 	.word	0x0801d490
 801645c:	0801d4c8 	.word	0x0801d4c8
 8016460:	0801d508 	.word	0x0801d508
 8016464:	0801d530 	.word	0x0801d530
 8016468:	0801d548 	.word	0x0801d548
 801646c:	0801d55c 	.word	0x0801d55c

08016470 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8016470:	b580      	push	{r7, lr}
 8016472:	b088      	sub	sp, #32
 8016474:	af02      	add	r7, sp, #8
 8016476:	60f8      	str	r0, [r7, #12]
 8016478:	60b9      	str	r1, [r7, #8]
 801647a:	607a      	str	r2, [r7, #4]
 801647c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801647e:	68fb      	ldr	r3, [r7, #12]
 8016480:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016484:	2b06      	cmp	r3, #6
 8016486:	d006      	beq.n	8016496 <etharp_update_arp_entry+0x26>
 8016488:	4b48      	ldr	r3, [pc, #288]	; (80165ac <etharp_update_arp_entry+0x13c>)
 801648a:	f240 12a9 	movw	r2, #425	; 0x1a9
 801648e:	4948      	ldr	r1, [pc, #288]	; (80165b0 <etharp_update_arp_entry+0x140>)
 8016490:	4848      	ldr	r0, [pc, #288]	; (80165b4 <etharp_update_arp_entry+0x144>)
 8016492:	f002 fb81 	bl	8018b98 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8016496:	68bb      	ldr	r3, [r7, #8]
 8016498:	2b00      	cmp	r3, #0
 801649a:	d012      	beq.n	80164c2 <etharp_update_arp_entry+0x52>
 801649c:	68bb      	ldr	r3, [r7, #8]
 801649e:	681b      	ldr	r3, [r3, #0]
 80164a0:	2b00      	cmp	r3, #0
 80164a2:	d00e      	beq.n	80164c2 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80164a4:	68bb      	ldr	r3, [r7, #8]
 80164a6:	681b      	ldr	r3, [r3, #0]
 80164a8:	68f9      	ldr	r1, [r7, #12]
 80164aa:	4618      	mov	r0, r3
 80164ac:	f001 f920 	bl	80176f0 <ip4_addr_isbroadcast_u32>
 80164b0:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80164b2:	2b00      	cmp	r3, #0
 80164b4:	d105      	bne.n	80164c2 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80164b6:	68bb      	ldr	r3, [r7, #8]
 80164b8:	681b      	ldr	r3, [r3, #0]
 80164ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80164be:	2be0      	cmp	r3, #224	; 0xe0
 80164c0:	d102      	bne.n	80164c8 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80164c2:	f06f 030f 	mvn.w	r3, #15
 80164c6:	e06c      	b.n	80165a2 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80164c8:	78fb      	ldrb	r3, [r7, #3]
 80164ca:	68fa      	ldr	r2, [r7, #12]
 80164cc:	4619      	mov	r1, r3
 80164ce:	68b8      	ldr	r0, [r7, #8]
 80164d0:	f7ff fe56 	bl	8016180 <etharp_find_entry>
 80164d4:	4603      	mov	r3, r0
 80164d6:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80164d8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80164dc:	2b00      	cmp	r3, #0
 80164de:	da02      	bge.n	80164e6 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80164e0:	8afb      	ldrh	r3, [r7, #22]
 80164e2:	b25b      	sxtb	r3, r3
 80164e4:	e05d      	b.n	80165a2 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80164e6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80164ea:	4933      	ldr	r1, [pc, #204]	; (80165b8 <etharp_update_arp_entry+0x148>)
 80164ec:	4613      	mov	r3, r2
 80164ee:	005b      	lsls	r3, r3, #1
 80164f0:	4413      	add	r3, r2
 80164f2:	00db      	lsls	r3, r3, #3
 80164f4:	440b      	add	r3, r1
 80164f6:	3314      	adds	r3, #20
 80164f8:	2202      	movs	r2, #2
 80164fa:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80164fc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016500:	492d      	ldr	r1, [pc, #180]	; (80165b8 <etharp_update_arp_entry+0x148>)
 8016502:	4613      	mov	r3, r2
 8016504:	005b      	lsls	r3, r3, #1
 8016506:	4413      	add	r3, r2
 8016508:	00db      	lsls	r3, r3, #3
 801650a:	440b      	add	r3, r1
 801650c:	3308      	adds	r3, #8
 801650e:	68fa      	ldr	r2, [r7, #12]
 8016510:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8016512:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016516:	4613      	mov	r3, r2
 8016518:	005b      	lsls	r3, r3, #1
 801651a:	4413      	add	r3, r2
 801651c:	00db      	lsls	r3, r3, #3
 801651e:	3308      	adds	r3, #8
 8016520:	4a25      	ldr	r2, [pc, #148]	; (80165b8 <etharp_update_arp_entry+0x148>)
 8016522:	4413      	add	r3, r2
 8016524:	3304      	adds	r3, #4
 8016526:	2206      	movs	r2, #6
 8016528:	6879      	ldr	r1, [r7, #4]
 801652a:	4618      	mov	r0, r3
 801652c:	f002 fd34 	bl	8018f98 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8016530:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016534:	4920      	ldr	r1, [pc, #128]	; (80165b8 <etharp_update_arp_entry+0x148>)
 8016536:	4613      	mov	r3, r2
 8016538:	005b      	lsls	r3, r3, #1
 801653a:	4413      	add	r3, r2
 801653c:	00db      	lsls	r3, r3, #3
 801653e:	440b      	add	r3, r1
 8016540:	3312      	adds	r3, #18
 8016542:	2200      	movs	r2, #0
 8016544:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8016546:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801654a:	491b      	ldr	r1, [pc, #108]	; (80165b8 <etharp_update_arp_entry+0x148>)
 801654c:	4613      	mov	r3, r2
 801654e:	005b      	lsls	r3, r3, #1
 8016550:	4413      	add	r3, r2
 8016552:	00db      	lsls	r3, r3, #3
 8016554:	440b      	add	r3, r1
 8016556:	681b      	ldr	r3, [r3, #0]
 8016558:	2b00      	cmp	r3, #0
 801655a:	d021      	beq.n	80165a0 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801655c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016560:	4915      	ldr	r1, [pc, #84]	; (80165b8 <etharp_update_arp_entry+0x148>)
 8016562:	4613      	mov	r3, r2
 8016564:	005b      	lsls	r3, r3, #1
 8016566:	4413      	add	r3, r2
 8016568:	00db      	lsls	r3, r3, #3
 801656a:	440b      	add	r3, r1
 801656c:	681b      	ldr	r3, [r3, #0]
 801656e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8016570:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016574:	4910      	ldr	r1, [pc, #64]	; (80165b8 <etharp_update_arp_entry+0x148>)
 8016576:	4613      	mov	r3, r2
 8016578:	005b      	lsls	r3, r3, #1
 801657a:	4413      	add	r3, r2
 801657c:	00db      	lsls	r3, r3, #3
 801657e:	440b      	add	r3, r1
 8016580:	2200      	movs	r2, #0
 8016582:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8016584:	68fb      	ldr	r3, [r7, #12]
 8016586:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801658a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801658e:	9300      	str	r3, [sp, #0]
 8016590:	687b      	ldr	r3, [r7, #4]
 8016592:	6939      	ldr	r1, [r7, #16]
 8016594:	68f8      	ldr	r0, [r7, #12]
 8016596:	f001 ffb9 	bl	801850c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801659a:	6938      	ldr	r0, [r7, #16]
 801659c:	f7f6 fbca 	bl	800cd34 <pbuf_free>
  }
  return ERR_OK;
 80165a0:	2300      	movs	r3, #0
}
 80165a2:	4618      	mov	r0, r3
 80165a4:	3718      	adds	r7, #24
 80165a6:	46bd      	mov	sp, r7
 80165a8:	bd80      	pop	{r7, pc}
 80165aa:	bf00      	nop
 80165ac:	0801d490 	.word	0x0801d490
 80165b0:	0801d588 	.word	0x0801d588
 80165b4:	0801d508 	.word	0x0801d508
 80165b8:	20010f04 	.word	0x20010f04

080165bc <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80165bc:	b580      	push	{r7, lr}
 80165be:	b084      	sub	sp, #16
 80165c0:	af00      	add	r7, sp, #0
 80165c2:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80165c4:	2300      	movs	r3, #0
 80165c6:	60fb      	str	r3, [r7, #12]
 80165c8:	e01e      	b.n	8016608 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80165ca:	4913      	ldr	r1, [pc, #76]	; (8016618 <etharp_cleanup_netif+0x5c>)
 80165cc:	68fa      	ldr	r2, [r7, #12]
 80165ce:	4613      	mov	r3, r2
 80165d0:	005b      	lsls	r3, r3, #1
 80165d2:	4413      	add	r3, r2
 80165d4:	00db      	lsls	r3, r3, #3
 80165d6:	440b      	add	r3, r1
 80165d8:	3314      	adds	r3, #20
 80165da:	781b      	ldrb	r3, [r3, #0]
 80165dc:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80165de:	7afb      	ldrb	r3, [r7, #11]
 80165e0:	2b00      	cmp	r3, #0
 80165e2:	d00e      	beq.n	8016602 <etharp_cleanup_netif+0x46>
 80165e4:	490c      	ldr	r1, [pc, #48]	; (8016618 <etharp_cleanup_netif+0x5c>)
 80165e6:	68fa      	ldr	r2, [r7, #12]
 80165e8:	4613      	mov	r3, r2
 80165ea:	005b      	lsls	r3, r3, #1
 80165ec:	4413      	add	r3, r2
 80165ee:	00db      	lsls	r3, r3, #3
 80165f0:	440b      	add	r3, r1
 80165f2:	3308      	adds	r3, #8
 80165f4:	681b      	ldr	r3, [r3, #0]
 80165f6:	687a      	ldr	r2, [r7, #4]
 80165f8:	429a      	cmp	r2, r3
 80165fa:	d102      	bne.n	8016602 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80165fc:	68f8      	ldr	r0, [r7, #12]
 80165fe:	f7ff fce5 	bl	8015fcc <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016602:	68fb      	ldr	r3, [r7, #12]
 8016604:	3301      	adds	r3, #1
 8016606:	60fb      	str	r3, [r7, #12]
 8016608:	68fb      	ldr	r3, [r7, #12]
 801660a:	2b09      	cmp	r3, #9
 801660c:	dddd      	ble.n	80165ca <etharp_cleanup_netif+0xe>
    }
  }
}
 801660e:	bf00      	nop
 8016610:	bf00      	nop
 8016612:	3710      	adds	r7, #16
 8016614:	46bd      	mov	sp, r7
 8016616:	bd80      	pop	{r7, pc}
 8016618:	20010f04 	.word	0x20010f04

0801661c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801661c:	b5b0      	push	{r4, r5, r7, lr}
 801661e:	b08a      	sub	sp, #40	; 0x28
 8016620:	af04      	add	r7, sp, #16
 8016622:	6078      	str	r0, [r7, #4]
 8016624:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8016626:	683b      	ldr	r3, [r7, #0]
 8016628:	2b00      	cmp	r3, #0
 801662a:	d107      	bne.n	801663c <etharp_input+0x20>
 801662c:	4b3f      	ldr	r3, [pc, #252]	; (801672c <etharp_input+0x110>)
 801662e:	f240 228a 	movw	r2, #650	; 0x28a
 8016632:	493f      	ldr	r1, [pc, #252]	; (8016730 <etharp_input+0x114>)
 8016634:	483f      	ldr	r0, [pc, #252]	; (8016734 <etharp_input+0x118>)
 8016636:	f002 faaf 	bl	8018b98 <iprintf>
 801663a:	e074      	b.n	8016726 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 801663c:	687b      	ldr	r3, [r7, #4]
 801663e:	685b      	ldr	r3, [r3, #4]
 8016640:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8016642:	693b      	ldr	r3, [r7, #16]
 8016644:	881b      	ldrh	r3, [r3, #0]
 8016646:	b29b      	uxth	r3, r3
 8016648:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801664c:	d10c      	bne.n	8016668 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801664e:	693b      	ldr	r3, [r7, #16]
 8016650:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8016652:	2b06      	cmp	r3, #6
 8016654:	d108      	bne.n	8016668 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016656:	693b      	ldr	r3, [r7, #16]
 8016658:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801665a:	2b04      	cmp	r3, #4
 801665c:	d104      	bne.n	8016668 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801665e:	693b      	ldr	r3, [r7, #16]
 8016660:	885b      	ldrh	r3, [r3, #2]
 8016662:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016664:	2b08      	cmp	r3, #8
 8016666:	d003      	beq.n	8016670 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8016668:	6878      	ldr	r0, [r7, #4]
 801666a:	f7f6 fb63 	bl	800cd34 <pbuf_free>
    return;
 801666e:	e05a      	b.n	8016726 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8016670:	693b      	ldr	r3, [r7, #16]
 8016672:	330e      	adds	r3, #14
 8016674:	681b      	ldr	r3, [r3, #0]
 8016676:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8016678:	693b      	ldr	r3, [r7, #16]
 801667a:	3318      	adds	r3, #24
 801667c:	681b      	ldr	r3, [r3, #0]
 801667e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016680:	683b      	ldr	r3, [r7, #0]
 8016682:	3304      	adds	r3, #4
 8016684:	681b      	ldr	r3, [r3, #0]
 8016686:	2b00      	cmp	r3, #0
 8016688:	d102      	bne.n	8016690 <etharp_input+0x74>
    for_us = 0;
 801668a:	2300      	movs	r3, #0
 801668c:	75fb      	strb	r3, [r7, #23]
 801668e:	e009      	b.n	80166a4 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8016690:	68ba      	ldr	r2, [r7, #8]
 8016692:	683b      	ldr	r3, [r7, #0]
 8016694:	3304      	adds	r3, #4
 8016696:	681b      	ldr	r3, [r3, #0]
 8016698:	429a      	cmp	r2, r3
 801669a:	bf0c      	ite	eq
 801669c:	2301      	moveq	r3, #1
 801669e:	2300      	movne	r3, #0
 80166a0:	b2db      	uxtb	r3, r3
 80166a2:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80166a4:	693b      	ldr	r3, [r7, #16]
 80166a6:	f103 0208 	add.w	r2, r3, #8
 80166aa:	7dfb      	ldrb	r3, [r7, #23]
 80166ac:	2b00      	cmp	r3, #0
 80166ae:	d001      	beq.n	80166b4 <etharp_input+0x98>
 80166b0:	2301      	movs	r3, #1
 80166b2:	e000      	b.n	80166b6 <etharp_input+0x9a>
 80166b4:	2302      	movs	r3, #2
 80166b6:	f107 010c 	add.w	r1, r7, #12
 80166ba:	6838      	ldr	r0, [r7, #0]
 80166bc:	f7ff fed8 	bl	8016470 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80166c0:	693b      	ldr	r3, [r7, #16]
 80166c2:	88db      	ldrh	r3, [r3, #6]
 80166c4:	b29b      	uxth	r3, r3
 80166c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80166ca:	d003      	beq.n	80166d4 <etharp_input+0xb8>
 80166cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80166d0:	d01e      	beq.n	8016710 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80166d2:	e025      	b.n	8016720 <etharp_input+0x104>
      if (for_us) {
 80166d4:	7dfb      	ldrb	r3, [r7, #23]
 80166d6:	2b00      	cmp	r3, #0
 80166d8:	d021      	beq.n	801671e <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80166da:	683b      	ldr	r3, [r7, #0]
 80166dc:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 80166e0:	693b      	ldr	r3, [r7, #16]
 80166e2:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80166e6:	683b      	ldr	r3, [r7, #0]
 80166e8:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 80166ec:	683b      	ldr	r3, [r7, #0]
 80166ee:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80166f0:	693a      	ldr	r2, [r7, #16]
 80166f2:	3208      	adds	r2, #8
        etharp_raw(netif,
 80166f4:	2102      	movs	r1, #2
 80166f6:	9103      	str	r1, [sp, #12]
 80166f8:	f107 010c 	add.w	r1, r7, #12
 80166fc:	9102      	str	r1, [sp, #8]
 80166fe:	9201      	str	r2, [sp, #4]
 8016700:	9300      	str	r3, [sp, #0]
 8016702:	462b      	mov	r3, r5
 8016704:	4622      	mov	r2, r4
 8016706:	4601      	mov	r1, r0
 8016708:	6838      	ldr	r0, [r7, #0]
 801670a:	f000 faef 	bl	8016cec <etharp_raw>
      break;
 801670e:	e006      	b.n	801671e <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8016710:	f107 030c 	add.w	r3, r7, #12
 8016714:	4619      	mov	r1, r3
 8016716:	6838      	ldr	r0, [r7, #0]
 8016718:	f7fe f9fc 	bl	8014b14 <dhcp_arp_reply>
      break;
 801671c:	e000      	b.n	8016720 <etharp_input+0x104>
      break;
 801671e:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8016720:	6878      	ldr	r0, [r7, #4]
 8016722:	f7f6 fb07 	bl	800cd34 <pbuf_free>
}
 8016726:	3718      	adds	r7, #24
 8016728:	46bd      	mov	sp, r7
 801672a:	bdb0      	pop	{r4, r5, r7, pc}
 801672c:	0801d490 	.word	0x0801d490
 8016730:	0801d5e0 	.word	0x0801d5e0
 8016734:	0801d508 	.word	0x0801d508

08016738 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8016738:	b580      	push	{r7, lr}
 801673a:	b086      	sub	sp, #24
 801673c:	af02      	add	r7, sp, #8
 801673e:	60f8      	str	r0, [r7, #12]
 8016740:	60b9      	str	r1, [r7, #8]
 8016742:	4613      	mov	r3, r2
 8016744:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8016746:	79fa      	ldrb	r2, [r7, #7]
 8016748:	4944      	ldr	r1, [pc, #272]	; (801685c <etharp_output_to_arp_index+0x124>)
 801674a:	4613      	mov	r3, r2
 801674c:	005b      	lsls	r3, r3, #1
 801674e:	4413      	add	r3, r2
 8016750:	00db      	lsls	r3, r3, #3
 8016752:	440b      	add	r3, r1
 8016754:	3314      	adds	r3, #20
 8016756:	781b      	ldrb	r3, [r3, #0]
 8016758:	2b01      	cmp	r3, #1
 801675a:	d806      	bhi.n	801676a <etharp_output_to_arp_index+0x32>
 801675c:	4b40      	ldr	r3, [pc, #256]	; (8016860 <etharp_output_to_arp_index+0x128>)
 801675e:	f240 22ee 	movw	r2, #750	; 0x2ee
 8016762:	4940      	ldr	r1, [pc, #256]	; (8016864 <etharp_output_to_arp_index+0x12c>)
 8016764:	4840      	ldr	r0, [pc, #256]	; (8016868 <etharp_output_to_arp_index+0x130>)
 8016766:	f002 fa17 	bl	8018b98 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801676a:	79fa      	ldrb	r2, [r7, #7]
 801676c:	493b      	ldr	r1, [pc, #236]	; (801685c <etharp_output_to_arp_index+0x124>)
 801676e:	4613      	mov	r3, r2
 8016770:	005b      	lsls	r3, r3, #1
 8016772:	4413      	add	r3, r2
 8016774:	00db      	lsls	r3, r3, #3
 8016776:	440b      	add	r3, r1
 8016778:	3314      	adds	r3, #20
 801677a:	781b      	ldrb	r3, [r3, #0]
 801677c:	2b02      	cmp	r3, #2
 801677e:	d153      	bne.n	8016828 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8016780:	79fa      	ldrb	r2, [r7, #7]
 8016782:	4936      	ldr	r1, [pc, #216]	; (801685c <etharp_output_to_arp_index+0x124>)
 8016784:	4613      	mov	r3, r2
 8016786:	005b      	lsls	r3, r3, #1
 8016788:	4413      	add	r3, r2
 801678a:	00db      	lsls	r3, r3, #3
 801678c:	440b      	add	r3, r1
 801678e:	3312      	adds	r3, #18
 8016790:	881b      	ldrh	r3, [r3, #0]
 8016792:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8016796:	d919      	bls.n	80167cc <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8016798:	79fa      	ldrb	r2, [r7, #7]
 801679a:	4613      	mov	r3, r2
 801679c:	005b      	lsls	r3, r3, #1
 801679e:	4413      	add	r3, r2
 80167a0:	00db      	lsls	r3, r3, #3
 80167a2:	4a2e      	ldr	r2, [pc, #184]	; (801685c <etharp_output_to_arp_index+0x124>)
 80167a4:	4413      	add	r3, r2
 80167a6:	3304      	adds	r3, #4
 80167a8:	4619      	mov	r1, r3
 80167aa:	68f8      	ldr	r0, [r7, #12]
 80167ac:	f000 fb4c 	bl	8016e48 <etharp_request>
 80167b0:	4603      	mov	r3, r0
 80167b2:	2b00      	cmp	r3, #0
 80167b4:	d138      	bne.n	8016828 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80167b6:	79fa      	ldrb	r2, [r7, #7]
 80167b8:	4928      	ldr	r1, [pc, #160]	; (801685c <etharp_output_to_arp_index+0x124>)
 80167ba:	4613      	mov	r3, r2
 80167bc:	005b      	lsls	r3, r3, #1
 80167be:	4413      	add	r3, r2
 80167c0:	00db      	lsls	r3, r3, #3
 80167c2:	440b      	add	r3, r1
 80167c4:	3314      	adds	r3, #20
 80167c6:	2203      	movs	r2, #3
 80167c8:	701a      	strb	r2, [r3, #0]
 80167ca:	e02d      	b.n	8016828 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80167cc:	79fa      	ldrb	r2, [r7, #7]
 80167ce:	4923      	ldr	r1, [pc, #140]	; (801685c <etharp_output_to_arp_index+0x124>)
 80167d0:	4613      	mov	r3, r2
 80167d2:	005b      	lsls	r3, r3, #1
 80167d4:	4413      	add	r3, r2
 80167d6:	00db      	lsls	r3, r3, #3
 80167d8:	440b      	add	r3, r1
 80167da:	3312      	adds	r3, #18
 80167dc:	881b      	ldrh	r3, [r3, #0]
 80167de:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80167e2:	d321      	bcc.n	8016828 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80167e4:	79fa      	ldrb	r2, [r7, #7]
 80167e6:	4613      	mov	r3, r2
 80167e8:	005b      	lsls	r3, r3, #1
 80167ea:	4413      	add	r3, r2
 80167ec:	00db      	lsls	r3, r3, #3
 80167ee:	4a1b      	ldr	r2, [pc, #108]	; (801685c <etharp_output_to_arp_index+0x124>)
 80167f0:	4413      	add	r3, r2
 80167f2:	1d19      	adds	r1, r3, #4
 80167f4:	79fa      	ldrb	r2, [r7, #7]
 80167f6:	4613      	mov	r3, r2
 80167f8:	005b      	lsls	r3, r3, #1
 80167fa:	4413      	add	r3, r2
 80167fc:	00db      	lsls	r3, r3, #3
 80167fe:	3308      	adds	r3, #8
 8016800:	4a16      	ldr	r2, [pc, #88]	; (801685c <etharp_output_to_arp_index+0x124>)
 8016802:	4413      	add	r3, r2
 8016804:	3304      	adds	r3, #4
 8016806:	461a      	mov	r2, r3
 8016808:	68f8      	ldr	r0, [r7, #12]
 801680a:	f000 fafb 	bl	8016e04 <etharp_request_dst>
 801680e:	4603      	mov	r3, r0
 8016810:	2b00      	cmp	r3, #0
 8016812:	d109      	bne.n	8016828 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8016814:	79fa      	ldrb	r2, [r7, #7]
 8016816:	4911      	ldr	r1, [pc, #68]	; (801685c <etharp_output_to_arp_index+0x124>)
 8016818:	4613      	mov	r3, r2
 801681a:	005b      	lsls	r3, r3, #1
 801681c:	4413      	add	r3, r2
 801681e:	00db      	lsls	r3, r3, #3
 8016820:	440b      	add	r3, r1
 8016822:	3314      	adds	r3, #20
 8016824:	2203      	movs	r2, #3
 8016826:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8016828:	68fb      	ldr	r3, [r7, #12]
 801682a:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 801682e:	79fa      	ldrb	r2, [r7, #7]
 8016830:	4613      	mov	r3, r2
 8016832:	005b      	lsls	r3, r3, #1
 8016834:	4413      	add	r3, r2
 8016836:	00db      	lsls	r3, r3, #3
 8016838:	3308      	adds	r3, #8
 801683a:	4a08      	ldr	r2, [pc, #32]	; (801685c <etharp_output_to_arp_index+0x124>)
 801683c:	4413      	add	r3, r2
 801683e:	3304      	adds	r3, #4
 8016840:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016844:	9200      	str	r2, [sp, #0]
 8016846:	460a      	mov	r2, r1
 8016848:	68b9      	ldr	r1, [r7, #8]
 801684a:	68f8      	ldr	r0, [r7, #12]
 801684c:	f001 fe5e 	bl	801850c <ethernet_output>
 8016850:	4603      	mov	r3, r0
}
 8016852:	4618      	mov	r0, r3
 8016854:	3710      	adds	r7, #16
 8016856:	46bd      	mov	sp, r7
 8016858:	bd80      	pop	{r7, pc}
 801685a:	bf00      	nop
 801685c:	20010f04 	.word	0x20010f04
 8016860:	0801d490 	.word	0x0801d490
 8016864:	0801d600 	.word	0x0801d600
 8016868:	0801d508 	.word	0x0801d508

0801686c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801686c:	b580      	push	{r7, lr}
 801686e:	b08a      	sub	sp, #40	; 0x28
 8016870:	af02      	add	r7, sp, #8
 8016872:	60f8      	str	r0, [r7, #12]
 8016874:	60b9      	str	r1, [r7, #8]
 8016876:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8016878:	687b      	ldr	r3, [r7, #4]
 801687a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801687c:	68fb      	ldr	r3, [r7, #12]
 801687e:	2b00      	cmp	r3, #0
 8016880:	d106      	bne.n	8016890 <etharp_output+0x24>
 8016882:	4b73      	ldr	r3, [pc, #460]	; (8016a50 <etharp_output+0x1e4>)
 8016884:	f240 321e 	movw	r2, #798	; 0x31e
 8016888:	4972      	ldr	r1, [pc, #456]	; (8016a54 <etharp_output+0x1e8>)
 801688a:	4873      	ldr	r0, [pc, #460]	; (8016a58 <etharp_output+0x1ec>)
 801688c:	f002 f984 	bl	8018b98 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8016890:	68bb      	ldr	r3, [r7, #8]
 8016892:	2b00      	cmp	r3, #0
 8016894:	d106      	bne.n	80168a4 <etharp_output+0x38>
 8016896:	4b6e      	ldr	r3, [pc, #440]	; (8016a50 <etharp_output+0x1e4>)
 8016898:	f240 321f 	movw	r2, #799	; 0x31f
 801689c:	496f      	ldr	r1, [pc, #444]	; (8016a5c <etharp_output+0x1f0>)
 801689e:	486e      	ldr	r0, [pc, #440]	; (8016a58 <etharp_output+0x1ec>)
 80168a0:	f002 f97a 	bl	8018b98 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80168a4:	687b      	ldr	r3, [r7, #4]
 80168a6:	2b00      	cmp	r3, #0
 80168a8:	d106      	bne.n	80168b8 <etharp_output+0x4c>
 80168aa:	4b69      	ldr	r3, [pc, #420]	; (8016a50 <etharp_output+0x1e4>)
 80168ac:	f44f 7248 	mov.w	r2, #800	; 0x320
 80168b0:	496b      	ldr	r1, [pc, #428]	; (8016a60 <etharp_output+0x1f4>)
 80168b2:	4869      	ldr	r0, [pc, #420]	; (8016a58 <etharp_output+0x1ec>)
 80168b4:	f002 f970 	bl	8018b98 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80168b8:	687b      	ldr	r3, [r7, #4]
 80168ba:	681b      	ldr	r3, [r3, #0]
 80168bc:	68f9      	ldr	r1, [r7, #12]
 80168be:	4618      	mov	r0, r3
 80168c0:	f000 ff16 	bl	80176f0 <ip4_addr_isbroadcast_u32>
 80168c4:	4603      	mov	r3, r0
 80168c6:	2b00      	cmp	r3, #0
 80168c8:	d002      	beq.n	80168d0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80168ca:	4b66      	ldr	r3, [pc, #408]	; (8016a64 <etharp_output+0x1f8>)
 80168cc:	61fb      	str	r3, [r7, #28]
 80168ce:	e0af      	b.n	8016a30 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80168d0:	687b      	ldr	r3, [r7, #4]
 80168d2:	681b      	ldr	r3, [r3, #0]
 80168d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80168d8:	2be0      	cmp	r3, #224	; 0xe0
 80168da:	d118      	bne.n	801690e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80168dc:	2301      	movs	r3, #1
 80168de:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80168e0:	2300      	movs	r3, #0
 80168e2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80168e4:	235e      	movs	r3, #94	; 0x5e
 80168e6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80168e8:	687b      	ldr	r3, [r7, #4]
 80168ea:	3301      	adds	r3, #1
 80168ec:	781b      	ldrb	r3, [r3, #0]
 80168ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80168f2:	b2db      	uxtb	r3, r3
 80168f4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80168f6:	687b      	ldr	r3, [r7, #4]
 80168f8:	3302      	adds	r3, #2
 80168fa:	781b      	ldrb	r3, [r3, #0]
 80168fc:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80168fe:	687b      	ldr	r3, [r7, #4]
 8016900:	3303      	adds	r3, #3
 8016902:	781b      	ldrb	r3, [r3, #0]
 8016904:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8016906:	f107 0310 	add.w	r3, r7, #16
 801690a:	61fb      	str	r3, [r7, #28]
 801690c:	e090      	b.n	8016a30 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801690e:	687b      	ldr	r3, [r7, #4]
 8016910:	681a      	ldr	r2, [r3, #0]
 8016912:	68fb      	ldr	r3, [r7, #12]
 8016914:	3304      	adds	r3, #4
 8016916:	681b      	ldr	r3, [r3, #0]
 8016918:	405a      	eors	r2, r3
 801691a:	68fb      	ldr	r3, [r7, #12]
 801691c:	3308      	adds	r3, #8
 801691e:	681b      	ldr	r3, [r3, #0]
 8016920:	4013      	ands	r3, r2
 8016922:	2b00      	cmp	r3, #0
 8016924:	d012      	beq.n	801694c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8016926:	687b      	ldr	r3, [r7, #4]
 8016928:	681b      	ldr	r3, [r3, #0]
 801692a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801692c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8016930:	4293      	cmp	r3, r2
 8016932:	d00b      	beq.n	801694c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8016934:	68fb      	ldr	r3, [r7, #12]
 8016936:	330c      	adds	r3, #12
 8016938:	681b      	ldr	r3, [r3, #0]
 801693a:	2b00      	cmp	r3, #0
 801693c:	d003      	beq.n	8016946 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801693e:	68fb      	ldr	r3, [r7, #12]
 8016940:	330c      	adds	r3, #12
 8016942:	61bb      	str	r3, [r7, #24]
 8016944:	e002      	b.n	801694c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8016946:	f06f 0303 	mvn.w	r3, #3
 801694a:	e07d      	b.n	8016a48 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801694c:	4b46      	ldr	r3, [pc, #280]	; (8016a68 <etharp_output+0x1fc>)
 801694e:	781b      	ldrb	r3, [r3, #0]
 8016950:	4619      	mov	r1, r3
 8016952:	4a46      	ldr	r2, [pc, #280]	; (8016a6c <etharp_output+0x200>)
 8016954:	460b      	mov	r3, r1
 8016956:	005b      	lsls	r3, r3, #1
 8016958:	440b      	add	r3, r1
 801695a:	00db      	lsls	r3, r3, #3
 801695c:	4413      	add	r3, r2
 801695e:	3314      	adds	r3, #20
 8016960:	781b      	ldrb	r3, [r3, #0]
 8016962:	2b01      	cmp	r3, #1
 8016964:	d925      	bls.n	80169b2 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8016966:	4b40      	ldr	r3, [pc, #256]	; (8016a68 <etharp_output+0x1fc>)
 8016968:	781b      	ldrb	r3, [r3, #0]
 801696a:	4619      	mov	r1, r3
 801696c:	4a3f      	ldr	r2, [pc, #252]	; (8016a6c <etharp_output+0x200>)
 801696e:	460b      	mov	r3, r1
 8016970:	005b      	lsls	r3, r3, #1
 8016972:	440b      	add	r3, r1
 8016974:	00db      	lsls	r3, r3, #3
 8016976:	4413      	add	r3, r2
 8016978:	3308      	adds	r3, #8
 801697a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801697c:	68fa      	ldr	r2, [r7, #12]
 801697e:	429a      	cmp	r2, r3
 8016980:	d117      	bne.n	80169b2 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8016982:	69bb      	ldr	r3, [r7, #24]
 8016984:	681a      	ldr	r2, [r3, #0]
 8016986:	4b38      	ldr	r3, [pc, #224]	; (8016a68 <etharp_output+0x1fc>)
 8016988:	781b      	ldrb	r3, [r3, #0]
 801698a:	4618      	mov	r0, r3
 801698c:	4937      	ldr	r1, [pc, #220]	; (8016a6c <etharp_output+0x200>)
 801698e:	4603      	mov	r3, r0
 8016990:	005b      	lsls	r3, r3, #1
 8016992:	4403      	add	r3, r0
 8016994:	00db      	lsls	r3, r3, #3
 8016996:	440b      	add	r3, r1
 8016998:	3304      	adds	r3, #4
 801699a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801699c:	429a      	cmp	r2, r3
 801699e:	d108      	bne.n	80169b2 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80169a0:	4b31      	ldr	r3, [pc, #196]	; (8016a68 <etharp_output+0x1fc>)
 80169a2:	781b      	ldrb	r3, [r3, #0]
 80169a4:	461a      	mov	r2, r3
 80169a6:	68b9      	ldr	r1, [r7, #8]
 80169a8:	68f8      	ldr	r0, [r7, #12]
 80169aa:	f7ff fec5 	bl	8016738 <etharp_output_to_arp_index>
 80169ae:	4603      	mov	r3, r0
 80169b0:	e04a      	b.n	8016a48 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80169b2:	2300      	movs	r3, #0
 80169b4:	75fb      	strb	r3, [r7, #23]
 80169b6:	e031      	b.n	8016a1c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80169b8:	7dfa      	ldrb	r2, [r7, #23]
 80169ba:	492c      	ldr	r1, [pc, #176]	; (8016a6c <etharp_output+0x200>)
 80169bc:	4613      	mov	r3, r2
 80169be:	005b      	lsls	r3, r3, #1
 80169c0:	4413      	add	r3, r2
 80169c2:	00db      	lsls	r3, r3, #3
 80169c4:	440b      	add	r3, r1
 80169c6:	3314      	adds	r3, #20
 80169c8:	781b      	ldrb	r3, [r3, #0]
 80169ca:	2b01      	cmp	r3, #1
 80169cc:	d923      	bls.n	8016a16 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80169ce:	7dfa      	ldrb	r2, [r7, #23]
 80169d0:	4926      	ldr	r1, [pc, #152]	; (8016a6c <etharp_output+0x200>)
 80169d2:	4613      	mov	r3, r2
 80169d4:	005b      	lsls	r3, r3, #1
 80169d6:	4413      	add	r3, r2
 80169d8:	00db      	lsls	r3, r3, #3
 80169da:	440b      	add	r3, r1
 80169dc:	3308      	adds	r3, #8
 80169de:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80169e0:	68fa      	ldr	r2, [r7, #12]
 80169e2:	429a      	cmp	r2, r3
 80169e4:	d117      	bne.n	8016a16 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80169e6:	69bb      	ldr	r3, [r7, #24]
 80169e8:	6819      	ldr	r1, [r3, #0]
 80169ea:	7dfa      	ldrb	r2, [r7, #23]
 80169ec:	481f      	ldr	r0, [pc, #124]	; (8016a6c <etharp_output+0x200>)
 80169ee:	4613      	mov	r3, r2
 80169f0:	005b      	lsls	r3, r3, #1
 80169f2:	4413      	add	r3, r2
 80169f4:	00db      	lsls	r3, r3, #3
 80169f6:	4403      	add	r3, r0
 80169f8:	3304      	adds	r3, #4
 80169fa:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80169fc:	4299      	cmp	r1, r3
 80169fe:	d10a      	bne.n	8016a16 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8016a00:	4a19      	ldr	r2, [pc, #100]	; (8016a68 <etharp_output+0x1fc>)
 8016a02:	7dfb      	ldrb	r3, [r7, #23]
 8016a04:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8016a06:	7dfb      	ldrb	r3, [r7, #23]
 8016a08:	461a      	mov	r2, r3
 8016a0a:	68b9      	ldr	r1, [r7, #8]
 8016a0c:	68f8      	ldr	r0, [r7, #12]
 8016a0e:	f7ff fe93 	bl	8016738 <etharp_output_to_arp_index>
 8016a12:	4603      	mov	r3, r0
 8016a14:	e018      	b.n	8016a48 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8016a16:	7dfb      	ldrb	r3, [r7, #23]
 8016a18:	3301      	adds	r3, #1
 8016a1a:	75fb      	strb	r3, [r7, #23]
 8016a1c:	7dfb      	ldrb	r3, [r7, #23]
 8016a1e:	2b09      	cmp	r3, #9
 8016a20:	d9ca      	bls.n	80169b8 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8016a22:	68ba      	ldr	r2, [r7, #8]
 8016a24:	69b9      	ldr	r1, [r7, #24]
 8016a26:	68f8      	ldr	r0, [r7, #12]
 8016a28:	f000 f822 	bl	8016a70 <etharp_query>
 8016a2c:	4603      	mov	r3, r0
 8016a2e:	e00b      	b.n	8016a48 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8016a30:	68fb      	ldr	r3, [r7, #12]
 8016a32:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8016a36:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016a3a:	9300      	str	r3, [sp, #0]
 8016a3c:	69fb      	ldr	r3, [r7, #28]
 8016a3e:	68b9      	ldr	r1, [r7, #8]
 8016a40:	68f8      	ldr	r0, [r7, #12]
 8016a42:	f001 fd63 	bl	801850c <ethernet_output>
 8016a46:	4603      	mov	r3, r0
}
 8016a48:	4618      	mov	r0, r3
 8016a4a:	3720      	adds	r7, #32
 8016a4c:	46bd      	mov	sp, r7
 8016a4e:	bd80      	pop	{r7, pc}
 8016a50:	0801d490 	.word	0x0801d490
 8016a54:	0801d5e0 	.word	0x0801d5e0
 8016a58:	0801d508 	.word	0x0801d508
 8016a5c:	0801d630 	.word	0x0801d630
 8016a60:	0801d5d0 	.word	0x0801d5d0
 8016a64:	08027ddc 	.word	0x08027ddc
 8016a68:	20010ff4 	.word	0x20010ff4
 8016a6c:	20010f04 	.word	0x20010f04

08016a70 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8016a70:	b580      	push	{r7, lr}
 8016a72:	b08c      	sub	sp, #48	; 0x30
 8016a74:	af02      	add	r7, sp, #8
 8016a76:	60f8      	str	r0, [r7, #12]
 8016a78:	60b9      	str	r1, [r7, #8]
 8016a7a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8016a7c:	68fb      	ldr	r3, [r7, #12]
 8016a7e:	332a      	adds	r3, #42	; 0x2a
 8016a80:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8016a82:	23ff      	movs	r3, #255	; 0xff
 8016a84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8016a88:	2300      	movs	r3, #0
 8016a8a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8016a8c:	68bb      	ldr	r3, [r7, #8]
 8016a8e:	681b      	ldr	r3, [r3, #0]
 8016a90:	68f9      	ldr	r1, [r7, #12]
 8016a92:	4618      	mov	r0, r3
 8016a94:	f000 fe2c 	bl	80176f0 <ip4_addr_isbroadcast_u32>
 8016a98:	4603      	mov	r3, r0
 8016a9a:	2b00      	cmp	r3, #0
 8016a9c:	d10c      	bne.n	8016ab8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8016a9e:	68bb      	ldr	r3, [r7, #8]
 8016aa0:	681b      	ldr	r3, [r3, #0]
 8016aa2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8016aa6:	2be0      	cmp	r3, #224	; 0xe0
 8016aa8:	d006      	beq.n	8016ab8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8016aaa:	68bb      	ldr	r3, [r7, #8]
 8016aac:	2b00      	cmp	r3, #0
 8016aae:	d003      	beq.n	8016ab8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8016ab0:	68bb      	ldr	r3, [r7, #8]
 8016ab2:	681b      	ldr	r3, [r3, #0]
 8016ab4:	2b00      	cmp	r3, #0
 8016ab6:	d102      	bne.n	8016abe <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8016ab8:	f06f 030f 	mvn.w	r3, #15
 8016abc:	e101      	b.n	8016cc2 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8016abe:	68fa      	ldr	r2, [r7, #12]
 8016ac0:	2101      	movs	r1, #1
 8016ac2:	68b8      	ldr	r0, [r7, #8]
 8016ac4:	f7ff fb5c 	bl	8016180 <etharp_find_entry>
 8016ac8:	4603      	mov	r3, r0
 8016aca:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8016acc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016ad0:	2b00      	cmp	r3, #0
 8016ad2:	da02      	bge.n	8016ada <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8016ad4:	8a7b      	ldrh	r3, [r7, #18]
 8016ad6:	b25b      	sxtb	r3, r3
 8016ad8:	e0f3      	b.n	8016cc2 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8016ada:	8a7b      	ldrh	r3, [r7, #18]
 8016adc:	2b7e      	cmp	r3, #126	; 0x7e
 8016ade:	d906      	bls.n	8016aee <etharp_query+0x7e>
 8016ae0:	4b7a      	ldr	r3, [pc, #488]	; (8016ccc <etharp_query+0x25c>)
 8016ae2:	f240 32c1 	movw	r2, #961	; 0x3c1
 8016ae6:	497a      	ldr	r1, [pc, #488]	; (8016cd0 <etharp_query+0x260>)
 8016ae8:	487a      	ldr	r0, [pc, #488]	; (8016cd4 <etharp_query+0x264>)
 8016aea:	f002 f855 	bl	8018b98 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8016aee:	8a7b      	ldrh	r3, [r7, #18]
 8016af0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8016af2:	7c7a      	ldrb	r2, [r7, #17]
 8016af4:	4978      	ldr	r1, [pc, #480]	; (8016cd8 <etharp_query+0x268>)
 8016af6:	4613      	mov	r3, r2
 8016af8:	005b      	lsls	r3, r3, #1
 8016afa:	4413      	add	r3, r2
 8016afc:	00db      	lsls	r3, r3, #3
 8016afe:	440b      	add	r3, r1
 8016b00:	3314      	adds	r3, #20
 8016b02:	781b      	ldrb	r3, [r3, #0]
 8016b04:	2b00      	cmp	r3, #0
 8016b06:	d115      	bne.n	8016b34 <etharp_query+0xc4>
    is_new_entry = 1;
 8016b08:	2301      	movs	r3, #1
 8016b0a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8016b0c:	7c7a      	ldrb	r2, [r7, #17]
 8016b0e:	4972      	ldr	r1, [pc, #456]	; (8016cd8 <etharp_query+0x268>)
 8016b10:	4613      	mov	r3, r2
 8016b12:	005b      	lsls	r3, r3, #1
 8016b14:	4413      	add	r3, r2
 8016b16:	00db      	lsls	r3, r3, #3
 8016b18:	440b      	add	r3, r1
 8016b1a:	3314      	adds	r3, #20
 8016b1c:	2201      	movs	r2, #1
 8016b1e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8016b20:	7c7a      	ldrb	r2, [r7, #17]
 8016b22:	496d      	ldr	r1, [pc, #436]	; (8016cd8 <etharp_query+0x268>)
 8016b24:	4613      	mov	r3, r2
 8016b26:	005b      	lsls	r3, r3, #1
 8016b28:	4413      	add	r3, r2
 8016b2a:	00db      	lsls	r3, r3, #3
 8016b2c:	440b      	add	r3, r1
 8016b2e:	3308      	adds	r3, #8
 8016b30:	68fa      	ldr	r2, [r7, #12]
 8016b32:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8016b34:	7c7a      	ldrb	r2, [r7, #17]
 8016b36:	4968      	ldr	r1, [pc, #416]	; (8016cd8 <etharp_query+0x268>)
 8016b38:	4613      	mov	r3, r2
 8016b3a:	005b      	lsls	r3, r3, #1
 8016b3c:	4413      	add	r3, r2
 8016b3e:	00db      	lsls	r3, r3, #3
 8016b40:	440b      	add	r3, r1
 8016b42:	3314      	adds	r3, #20
 8016b44:	781b      	ldrb	r3, [r3, #0]
 8016b46:	2b01      	cmp	r3, #1
 8016b48:	d011      	beq.n	8016b6e <etharp_query+0xfe>
 8016b4a:	7c7a      	ldrb	r2, [r7, #17]
 8016b4c:	4962      	ldr	r1, [pc, #392]	; (8016cd8 <etharp_query+0x268>)
 8016b4e:	4613      	mov	r3, r2
 8016b50:	005b      	lsls	r3, r3, #1
 8016b52:	4413      	add	r3, r2
 8016b54:	00db      	lsls	r3, r3, #3
 8016b56:	440b      	add	r3, r1
 8016b58:	3314      	adds	r3, #20
 8016b5a:	781b      	ldrb	r3, [r3, #0]
 8016b5c:	2b01      	cmp	r3, #1
 8016b5e:	d806      	bhi.n	8016b6e <etharp_query+0xfe>
 8016b60:	4b5a      	ldr	r3, [pc, #360]	; (8016ccc <etharp_query+0x25c>)
 8016b62:	f240 32cd 	movw	r2, #973	; 0x3cd
 8016b66:	495d      	ldr	r1, [pc, #372]	; (8016cdc <etharp_query+0x26c>)
 8016b68:	485a      	ldr	r0, [pc, #360]	; (8016cd4 <etharp_query+0x264>)
 8016b6a:	f002 f815 	bl	8018b98 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8016b6e:	6a3b      	ldr	r3, [r7, #32]
 8016b70:	2b00      	cmp	r3, #0
 8016b72:	d102      	bne.n	8016b7a <etharp_query+0x10a>
 8016b74:	687b      	ldr	r3, [r7, #4]
 8016b76:	2b00      	cmp	r3, #0
 8016b78:	d10c      	bne.n	8016b94 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8016b7a:	68b9      	ldr	r1, [r7, #8]
 8016b7c:	68f8      	ldr	r0, [r7, #12]
 8016b7e:	f000 f963 	bl	8016e48 <etharp_request>
 8016b82:	4603      	mov	r3, r0
 8016b84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8016b88:	687b      	ldr	r3, [r7, #4]
 8016b8a:	2b00      	cmp	r3, #0
 8016b8c:	d102      	bne.n	8016b94 <etharp_query+0x124>
      return result;
 8016b8e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8016b92:	e096      	b.n	8016cc2 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8016b94:	687b      	ldr	r3, [r7, #4]
 8016b96:	2b00      	cmp	r3, #0
 8016b98:	d106      	bne.n	8016ba8 <etharp_query+0x138>
 8016b9a:	4b4c      	ldr	r3, [pc, #304]	; (8016ccc <etharp_query+0x25c>)
 8016b9c:	f240 32e1 	movw	r2, #993	; 0x3e1
 8016ba0:	494f      	ldr	r1, [pc, #316]	; (8016ce0 <etharp_query+0x270>)
 8016ba2:	484c      	ldr	r0, [pc, #304]	; (8016cd4 <etharp_query+0x264>)
 8016ba4:	f001 fff8 	bl	8018b98 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8016ba8:	7c7a      	ldrb	r2, [r7, #17]
 8016baa:	494b      	ldr	r1, [pc, #300]	; (8016cd8 <etharp_query+0x268>)
 8016bac:	4613      	mov	r3, r2
 8016bae:	005b      	lsls	r3, r3, #1
 8016bb0:	4413      	add	r3, r2
 8016bb2:	00db      	lsls	r3, r3, #3
 8016bb4:	440b      	add	r3, r1
 8016bb6:	3314      	adds	r3, #20
 8016bb8:	781b      	ldrb	r3, [r3, #0]
 8016bba:	2b01      	cmp	r3, #1
 8016bbc:	d917      	bls.n	8016bee <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8016bbe:	4a49      	ldr	r2, [pc, #292]	; (8016ce4 <etharp_query+0x274>)
 8016bc0:	7c7b      	ldrb	r3, [r7, #17]
 8016bc2:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8016bc4:	7c7a      	ldrb	r2, [r7, #17]
 8016bc6:	4613      	mov	r3, r2
 8016bc8:	005b      	lsls	r3, r3, #1
 8016bca:	4413      	add	r3, r2
 8016bcc:	00db      	lsls	r3, r3, #3
 8016bce:	3308      	adds	r3, #8
 8016bd0:	4a41      	ldr	r2, [pc, #260]	; (8016cd8 <etharp_query+0x268>)
 8016bd2:	4413      	add	r3, r2
 8016bd4:	3304      	adds	r3, #4
 8016bd6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016bda:	9200      	str	r2, [sp, #0]
 8016bdc:	697a      	ldr	r2, [r7, #20]
 8016bde:	6879      	ldr	r1, [r7, #4]
 8016be0:	68f8      	ldr	r0, [r7, #12]
 8016be2:	f001 fc93 	bl	801850c <ethernet_output>
 8016be6:	4603      	mov	r3, r0
 8016be8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016bec:	e067      	b.n	8016cbe <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8016bee:	7c7a      	ldrb	r2, [r7, #17]
 8016bf0:	4939      	ldr	r1, [pc, #228]	; (8016cd8 <etharp_query+0x268>)
 8016bf2:	4613      	mov	r3, r2
 8016bf4:	005b      	lsls	r3, r3, #1
 8016bf6:	4413      	add	r3, r2
 8016bf8:	00db      	lsls	r3, r3, #3
 8016bfa:	440b      	add	r3, r1
 8016bfc:	3314      	adds	r3, #20
 8016bfe:	781b      	ldrb	r3, [r3, #0]
 8016c00:	2b01      	cmp	r3, #1
 8016c02:	d15c      	bne.n	8016cbe <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8016c04:	2300      	movs	r3, #0
 8016c06:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8016c08:	687b      	ldr	r3, [r7, #4]
 8016c0a:	61fb      	str	r3, [r7, #28]
    while (p) {
 8016c0c:	e01c      	b.n	8016c48 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8016c0e:	69fb      	ldr	r3, [r7, #28]
 8016c10:	895a      	ldrh	r2, [r3, #10]
 8016c12:	69fb      	ldr	r3, [r7, #28]
 8016c14:	891b      	ldrh	r3, [r3, #8]
 8016c16:	429a      	cmp	r2, r3
 8016c18:	d10a      	bne.n	8016c30 <etharp_query+0x1c0>
 8016c1a:	69fb      	ldr	r3, [r7, #28]
 8016c1c:	681b      	ldr	r3, [r3, #0]
 8016c1e:	2b00      	cmp	r3, #0
 8016c20:	d006      	beq.n	8016c30 <etharp_query+0x1c0>
 8016c22:	4b2a      	ldr	r3, [pc, #168]	; (8016ccc <etharp_query+0x25c>)
 8016c24:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8016c28:	492f      	ldr	r1, [pc, #188]	; (8016ce8 <etharp_query+0x278>)
 8016c2a:	482a      	ldr	r0, [pc, #168]	; (8016cd4 <etharp_query+0x264>)
 8016c2c:	f001 ffb4 	bl	8018b98 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8016c30:	69fb      	ldr	r3, [r7, #28]
 8016c32:	7b1b      	ldrb	r3, [r3, #12]
 8016c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016c38:	2b00      	cmp	r3, #0
 8016c3a:	d002      	beq.n	8016c42 <etharp_query+0x1d2>
        copy_needed = 1;
 8016c3c:	2301      	movs	r3, #1
 8016c3e:	61bb      	str	r3, [r7, #24]
        break;
 8016c40:	e005      	b.n	8016c4e <etharp_query+0x1de>
      }
      p = p->next;
 8016c42:	69fb      	ldr	r3, [r7, #28]
 8016c44:	681b      	ldr	r3, [r3, #0]
 8016c46:	61fb      	str	r3, [r7, #28]
    while (p) {
 8016c48:	69fb      	ldr	r3, [r7, #28]
 8016c4a:	2b00      	cmp	r3, #0
 8016c4c:	d1df      	bne.n	8016c0e <etharp_query+0x19e>
    }
    if (copy_needed) {
 8016c4e:	69bb      	ldr	r3, [r7, #24]
 8016c50:	2b00      	cmp	r3, #0
 8016c52:	d007      	beq.n	8016c64 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8016c54:	687a      	ldr	r2, [r7, #4]
 8016c56:	f44f 7120 	mov.w	r1, #640	; 0x280
 8016c5a:	200e      	movs	r0, #14
 8016c5c:	f7f6 fae2 	bl	800d224 <pbuf_clone>
 8016c60:	61f8      	str	r0, [r7, #28]
 8016c62:	e004      	b.n	8016c6e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8016c64:	687b      	ldr	r3, [r7, #4]
 8016c66:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8016c68:	69f8      	ldr	r0, [r7, #28]
 8016c6a:	f7f6 f909 	bl	800ce80 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8016c6e:	69fb      	ldr	r3, [r7, #28]
 8016c70:	2b00      	cmp	r3, #0
 8016c72:	d021      	beq.n	8016cb8 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8016c74:	7c7a      	ldrb	r2, [r7, #17]
 8016c76:	4918      	ldr	r1, [pc, #96]	; (8016cd8 <etharp_query+0x268>)
 8016c78:	4613      	mov	r3, r2
 8016c7a:	005b      	lsls	r3, r3, #1
 8016c7c:	4413      	add	r3, r2
 8016c7e:	00db      	lsls	r3, r3, #3
 8016c80:	440b      	add	r3, r1
 8016c82:	681b      	ldr	r3, [r3, #0]
 8016c84:	2b00      	cmp	r3, #0
 8016c86:	d00a      	beq.n	8016c9e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8016c88:	7c7a      	ldrb	r2, [r7, #17]
 8016c8a:	4913      	ldr	r1, [pc, #76]	; (8016cd8 <etharp_query+0x268>)
 8016c8c:	4613      	mov	r3, r2
 8016c8e:	005b      	lsls	r3, r3, #1
 8016c90:	4413      	add	r3, r2
 8016c92:	00db      	lsls	r3, r3, #3
 8016c94:	440b      	add	r3, r1
 8016c96:	681b      	ldr	r3, [r3, #0]
 8016c98:	4618      	mov	r0, r3
 8016c9a:	f7f6 f84b 	bl	800cd34 <pbuf_free>
      }
      arp_table[i].q = p;
 8016c9e:	7c7a      	ldrb	r2, [r7, #17]
 8016ca0:	490d      	ldr	r1, [pc, #52]	; (8016cd8 <etharp_query+0x268>)
 8016ca2:	4613      	mov	r3, r2
 8016ca4:	005b      	lsls	r3, r3, #1
 8016ca6:	4413      	add	r3, r2
 8016ca8:	00db      	lsls	r3, r3, #3
 8016caa:	440b      	add	r3, r1
 8016cac:	69fa      	ldr	r2, [r7, #28]
 8016cae:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8016cb0:	2300      	movs	r3, #0
 8016cb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016cb6:	e002      	b.n	8016cbe <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8016cb8:	23ff      	movs	r3, #255	; 0xff
 8016cba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8016cbe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8016cc2:	4618      	mov	r0, r3
 8016cc4:	3728      	adds	r7, #40	; 0x28
 8016cc6:	46bd      	mov	sp, r7
 8016cc8:	bd80      	pop	{r7, pc}
 8016cca:	bf00      	nop
 8016ccc:	0801d490 	.word	0x0801d490
 8016cd0:	0801d63c 	.word	0x0801d63c
 8016cd4:	0801d508 	.word	0x0801d508
 8016cd8:	20010f04 	.word	0x20010f04
 8016cdc:	0801d64c 	.word	0x0801d64c
 8016ce0:	0801d630 	.word	0x0801d630
 8016ce4:	20010ff4 	.word	0x20010ff4
 8016ce8:	0801d674 	.word	0x0801d674

08016cec <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8016cec:	b580      	push	{r7, lr}
 8016cee:	b08a      	sub	sp, #40	; 0x28
 8016cf0:	af02      	add	r7, sp, #8
 8016cf2:	60f8      	str	r0, [r7, #12]
 8016cf4:	60b9      	str	r1, [r7, #8]
 8016cf6:	607a      	str	r2, [r7, #4]
 8016cf8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8016cfa:	2300      	movs	r3, #0
 8016cfc:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016cfe:	68fb      	ldr	r3, [r7, #12]
 8016d00:	2b00      	cmp	r3, #0
 8016d02:	d106      	bne.n	8016d12 <etharp_raw+0x26>
 8016d04:	4b3a      	ldr	r3, [pc, #232]	; (8016df0 <etharp_raw+0x104>)
 8016d06:	f240 4257 	movw	r2, #1111	; 0x457
 8016d0a:	493a      	ldr	r1, [pc, #232]	; (8016df4 <etharp_raw+0x108>)
 8016d0c:	483a      	ldr	r0, [pc, #232]	; (8016df8 <etharp_raw+0x10c>)
 8016d0e:	f001 ff43 	bl	8018b98 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8016d12:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016d16:	211c      	movs	r1, #28
 8016d18:	200e      	movs	r0, #14
 8016d1a:	f7f5 fd27 	bl	800c76c <pbuf_alloc>
 8016d1e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8016d20:	69bb      	ldr	r3, [r7, #24]
 8016d22:	2b00      	cmp	r3, #0
 8016d24:	d102      	bne.n	8016d2c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8016d26:	f04f 33ff 	mov.w	r3, #4294967295
 8016d2a:	e05d      	b.n	8016de8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8016d2c:	69bb      	ldr	r3, [r7, #24]
 8016d2e:	895b      	ldrh	r3, [r3, #10]
 8016d30:	2b1b      	cmp	r3, #27
 8016d32:	d806      	bhi.n	8016d42 <etharp_raw+0x56>
 8016d34:	4b2e      	ldr	r3, [pc, #184]	; (8016df0 <etharp_raw+0x104>)
 8016d36:	f240 4262 	movw	r2, #1122	; 0x462
 8016d3a:	4930      	ldr	r1, [pc, #192]	; (8016dfc <etharp_raw+0x110>)
 8016d3c:	482e      	ldr	r0, [pc, #184]	; (8016df8 <etharp_raw+0x10c>)
 8016d3e:	f001 ff2b 	bl	8018b98 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8016d42:	69bb      	ldr	r3, [r7, #24]
 8016d44:	685b      	ldr	r3, [r3, #4]
 8016d46:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8016d48:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016d4a:	4618      	mov	r0, r3
 8016d4c:	f7f4 fbbe 	bl	800b4cc <lwip_htons>
 8016d50:	4603      	mov	r3, r0
 8016d52:	461a      	mov	r2, r3
 8016d54:	697b      	ldr	r3, [r7, #20]
 8016d56:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8016d58:	68fb      	ldr	r3, [r7, #12]
 8016d5a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016d5e:	2b06      	cmp	r3, #6
 8016d60:	d006      	beq.n	8016d70 <etharp_raw+0x84>
 8016d62:	4b23      	ldr	r3, [pc, #140]	; (8016df0 <etharp_raw+0x104>)
 8016d64:	f240 4269 	movw	r2, #1129	; 0x469
 8016d68:	4925      	ldr	r1, [pc, #148]	; (8016e00 <etharp_raw+0x114>)
 8016d6a:	4823      	ldr	r0, [pc, #140]	; (8016df8 <etharp_raw+0x10c>)
 8016d6c:	f001 ff14 	bl	8018b98 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8016d70:	697b      	ldr	r3, [r7, #20]
 8016d72:	3308      	adds	r3, #8
 8016d74:	2206      	movs	r2, #6
 8016d76:	6839      	ldr	r1, [r7, #0]
 8016d78:	4618      	mov	r0, r3
 8016d7a:	f002 f90d 	bl	8018f98 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8016d7e:	697b      	ldr	r3, [r7, #20]
 8016d80:	3312      	adds	r3, #18
 8016d82:	2206      	movs	r2, #6
 8016d84:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016d86:	4618      	mov	r0, r3
 8016d88:	f002 f906 	bl	8018f98 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8016d8c:	697b      	ldr	r3, [r7, #20]
 8016d8e:	330e      	adds	r3, #14
 8016d90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016d92:	6812      	ldr	r2, [r2, #0]
 8016d94:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8016d96:	697b      	ldr	r3, [r7, #20]
 8016d98:	3318      	adds	r3, #24
 8016d9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016d9c:	6812      	ldr	r2, [r2, #0]
 8016d9e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8016da0:	697b      	ldr	r3, [r7, #20]
 8016da2:	2200      	movs	r2, #0
 8016da4:	701a      	strb	r2, [r3, #0]
 8016da6:	2200      	movs	r2, #0
 8016da8:	f042 0201 	orr.w	r2, r2, #1
 8016dac:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8016dae:	697b      	ldr	r3, [r7, #20]
 8016db0:	2200      	movs	r2, #0
 8016db2:	f042 0208 	orr.w	r2, r2, #8
 8016db6:	709a      	strb	r2, [r3, #2]
 8016db8:	2200      	movs	r2, #0
 8016dba:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8016dbc:	697b      	ldr	r3, [r7, #20]
 8016dbe:	2206      	movs	r2, #6
 8016dc0:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8016dc2:	697b      	ldr	r3, [r7, #20]
 8016dc4:	2204      	movs	r2, #4
 8016dc6:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8016dc8:	f640 0306 	movw	r3, #2054	; 0x806
 8016dcc:	9300      	str	r3, [sp, #0]
 8016dce:	687b      	ldr	r3, [r7, #4]
 8016dd0:	68ba      	ldr	r2, [r7, #8]
 8016dd2:	69b9      	ldr	r1, [r7, #24]
 8016dd4:	68f8      	ldr	r0, [r7, #12]
 8016dd6:	f001 fb99 	bl	801850c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8016dda:	69b8      	ldr	r0, [r7, #24]
 8016ddc:	f7f5 ffaa 	bl	800cd34 <pbuf_free>
  p = NULL;
 8016de0:	2300      	movs	r3, #0
 8016de2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8016de4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016de8:	4618      	mov	r0, r3
 8016dea:	3720      	adds	r7, #32
 8016dec:	46bd      	mov	sp, r7
 8016dee:	bd80      	pop	{r7, pc}
 8016df0:	0801d490 	.word	0x0801d490
 8016df4:	0801d5e0 	.word	0x0801d5e0
 8016df8:	0801d508 	.word	0x0801d508
 8016dfc:	0801d690 	.word	0x0801d690
 8016e00:	0801d6c4 	.word	0x0801d6c4

08016e04 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8016e04:	b580      	push	{r7, lr}
 8016e06:	b088      	sub	sp, #32
 8016e08:	af04      	add	r7, sp, #16
 8016e0a:	60f8      	str	r0, [r7, #12]
 8016e0c:	60b9      	str	r1, [r7, #8]
 8016e0e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8016e10:	68fb      	ldr	r3, [r7, #12]
 8016e12:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8016e16:	68fb      	ldr	r3, [r7, #12]
 8016e18:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8016e1c:	68fb      	ldr	r3, [r7, #12]
 8016e1e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8016e20:	2201      	movs	r2, #1
 8016e22:	9203      	str	r2, [sp, #12]
 8016e24:	68ba      	ldr	r2, [r7, #8]
 8016e26:	9202      	str	r2, [sp, #8]
 8016e28:	4a06      	ldr	r2, [pc, #24]	; (8016e44 <etharp_request_dst+0x40>)
 8016e2a:	9201      	str	r2, [sp, #4]
 8016e2c:	9300      	str	r3, [sp, #0]
 8016e2e:	4603      	mov	r3, r0
 8016e30:	687a      	ldr	r2, [r7, #4]
 8016e32:	68f8      	ldr	r0, [r7, #12]
 8016e34:	f7ff ff5a 	bl	8016cec <etharp_raw>
 8016e38:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8016e3a:	4618      	mov	r0, r3
 8016e3c:	3710      	adds	r7, #16
 8016e3e:	46bd      	mov	sp, r7
 8016e40:	bd80      	pop	{r7, pc}
 8016e42:	bf00      	nop
 8016e44:	08027de4 	.word	0x08027de4

08016e48 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8016e48:	b580      	push	{r7, lr}
 8016e4a:	b082      	sub	sp, #8
 8016e4c:	af00      	add	r7, sp, #0
 8016e4e:	6078      	str	r0, [r7, #4]
 8016e50:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8016e52:	4a05      	ldr	r2, [pc, #20]	; (8016e68 <etharp_request+0x20>)
 8016e54:	6839      	ldr	r1, [r7, #0]
 8016e56:	6878      	ldr	r0, [r7, #4]
 8016e58:	f7ff ffd4 	bl	8016e04 <etharp_request_dst>
 8016e5c:	4603      	mov	r3, r0
}
 8016e5e:	4618      	mov	r0, r3
 8016e60:	3708      	adds	r7, #8
 8016e62:	46bd      	mov	sp, r7
 8016e64:	bd80      	pop	{r7, pc}
 8016e66:	bf00      	nop
 8016e68:	08027ddc 	.word	0x08027ddc

08016e6c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8016e6c:	b580      	push	{r7, lr}
 8016e6e:	b08e      	sub	sp, #56	; 0x38
 8016e70:	af04      	add	r7, sp, #16
 8016e72:	6078      	str	r0, [r7, #4]
 8016e74:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8016e76:	4b79      	ldr	r3, [pc, #484]	; (801705c <icmp_input+0x1f0>)
 8016e78:	689b      	ldr	r3, [r3, #8]
 8016e7a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8016e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e7e:	781b      	ldrb	r3, [r3, #0]
 8016e80:	f003 030f 	and.w	r3, r3, #15
 8016e84:	b2db      	uxtb	r3, r3
 8016e86:	009b      	lsls	r3, r3, #2
 8016e88:	b2db      	uxtb	r3, r3
 8016e8a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8016e8c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016e8e:	2b13      	cmp	r3, #19
 8016e90:	f240 80cd 	bls.w	801702e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8016e94:	687b      	ldr	r3, [r7, #4]
 8016e96:	895b      	ldrh	r3, [r3, #10]
 8016e98:	2b03      	cmp	r3, #3
 8016e9a:	f240 80ca 	bls.w	8017032 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8016e9e:	687b      	ldr	r3, [r7, #4]
 8016ea0:	685b      	ldr	r3, [r3, #4]
 8016ea2:	781b      	ldrb	r3, [r3, #0]
 8016ea4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8016ea8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8016eac:	2b00      	cmp	r3, #0
 8016eae:	f000 80b7 	beq.w	8017020 <icmp_input+0x1b4>
 8016eb2:	2b08      	cmp	r3, #8
 8016eb4:	f040 80b7 	bne.w	8017026 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8016eb8:	4b69      	ldr	r3, [pc, #420]	; (8017060 <icmp_input+0x1f4>)
 8016eba:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016ebc:	4b67      	ldr	r3, [pc, #412]	; (801705c <icmp_input+0x1f0>)
 8016ebe:	695b      	ldr	r3, [r3, #20]
 8016ec0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016ec4:	2be0      	cmp	r3, #224	; 0xe0
 8016ec6:	f000 80bb 	beq.w	8017040 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8016eca:	4b64      	ldr	r3, [pc, #400]	; (801705c <icmp_input+0x1f0>)
 8016ecc:	695b      	ldr	r3, [r3, #20]
 8016ece:	4a63      	ldr	r2, [pc, #396]	; (801705c <icmp_input+0x1f0>)
 8016ed0:	6812      	ldr	r2, [r2, #0]
 8016ed2:	4611      	mov	r1, r2
 8016ed4:	4618      	mov	r0, r3
 8016ed6:	f000 fc0b 	bl	80176f0 <ip4_addr_isbroadcast_u32>
 8016eda:	4603      	mov	r3, r0
 8016edc:	2b00      	cmp	r3, #0
 8016ede:	f040 80b1 	bne.w	8017044 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8016ee2:	687b      	ldr	r3, [r7, #4]
 8016ee4:	891b      	ldrh	r3, [r3, #8]
 8016ee6:	2b07      	cmp	r3, #7
 8016ee8:	f240 80a5 	bls.w	8017036 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8016eec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016eee:	330e      	adds	r3, #14
 8016ef0:	4619      	mov	r1, r3
 8016ef2:	6878      	ldr	r0, [r7, #4]
 8016ef4:	f7f5 fe88 	bl	800cc08 <pbuf_add_header>
 8016ef8:	4603      	mov	r3, r0
 8016efa:	2b00      	cmp	r3, #0
 8016efc:	d04b      	beq.n	8016f96 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8016efe:	687b      	ldr	r3, [r7, #4]
 8016f00:	891a      	ldrh	r2, [r3, #8]
 8016f02:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016f04:	4413      	add	r3, r2
 8016f06:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8016f08:	687b      	ldr	r3, [r7, #4]
 8016f0a:	891b      	ldrh	r3, [r3, #8]
 8016f0c:	8b7a      	ldrh	r2, [r7, #26]
 8016f0e:	429a      	cmp	r2, r3
 8016f10:	f0c0 809a 	bcc.w	8017048 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8016f14:	8b7b      	ldrh	r3, [r7, #26]
 8016f16:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016f1a:	4619      	mov	r1, r3
 8016f1c:	200e      	movs	r0, #14
 8016f1e:	f7f5 fc25 	bl	800c76c <pbuf_alloc>
 8016f22:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8016f24:	697b      	ldr	r3, [r7, #20]
 8016f26:	2b00      	cmp	r3, #0
 8016f28:	f000 8090 	beq.w	801704c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8016f2c:	697b      	ldr	r3, [r7, #20]
 8016f2e:	895b      	ldrh	r3, [r3, #10]
 8016f30:	461a      	mov	r2, r3
 8016f32:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016f34:	3308      	adds	r3, #8
 8016f36:	429a      	cmp	r2, r3
 8016f38:	d203      	bcs.n	8016f42 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8016f3a:	6978      	ldr	r0, [r7, #20]
 8016f3c:	f7f5 fefa 	bl	800cd34 <pbuf_free>
          goto icmperr;
 8016f40:	e085      	b.n	801704e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8016f42:	697b      	ldr	r3, [r7, #20]
 8016f44:	685b      	ldr	r3, [r3, #4]
 8016f46:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8016f48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016f4a:	4618      	mov	r0, r3
 8016f4c:	f002 f824 	bl	8018f98 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8016f50:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016f52:	4619      	mov	r1, r3
 8016f54:	6978      	ldr	r0, [r7, #20]
 8016f56:	f7f5 fe67 	bl	800cc28 <pbuf_remove_header>
 8016f5a:	4603      	mov	r3, r0
 8016f5c:	2b00      	cmp	r3, #0
 8016f5e:	d009      	beq.n	8016f74 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8016f60:	4b40      	ldr	r3, [pc, #256]	; (8017064 <icmp_input+0x1f8>)
 8016f62:	22b6      	movs	r2, #182	; 0xb6
 8016f64:	4940      	ldr	r1, [pc, #256]	; (8017068 <icmp_input+0x1fc>)
 8016f66:	4841      	ldr	r0, [pc, #260]	; (801706c <icmp_input+0x200>)
 8016f68:	f001 fe16 	bl	8018b98 <iprintf>
          pbuf_free(r);
 8016f6c:	6978      	ldr	r0, [r7, #20]
 8016f6e:	f7f5 fee1 	bl	800cd34 <pbuf_free>
          goto icmperr;
 8016f72:	e06c      	b.n	801704e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8016f74:	6879      	ldr	r1, [r7, #4]
 8016f76:	6978      	ldr	r0, [r7, #20]
 8016f78:	f7f6 f810 	bl	800cf9c <pbuf_copy>
 8016f7c:	4603      	mov	r3, r0
 8016f7e:	2b00      	cmp	r3, #0
 8016f80:	d003      	beq.n	8016f8a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8016f82:	6978      	ldr	r0, [r7, #20]
 8016f84:	f7f5 fed6 	bl	800cd34 <pbuf_free>
          goto icmperr;
 8016f88:	e061      	b.n	801704e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8016f8a:	6878      	ldr	r0, [r7, #4]
 8016f8c:	f7f5 fed2 	bl	800cd34 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8016f90:	697b      	ldr	r3, [r7, #20]
 8016f92:	607b      	str	r3, [r7, #4]
 8016f94:	e00f      	b.n	8016fb6 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8016f96:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016f98:	330e      	adds	r3, #14
 8016f9a:	4619      	mov	r1, r3
 8016f9c:	6878      	ldr	r0, [r7, #4]
 8016f9e:	f7f5 fe43 	bl	800cc28 <pbuf_remove_header>
 8016fa2:	4603      	mov	r3, r0
 8016fa4:	2b00      	cmp	r3, #0
 8016fa6:	d006      	beq.n	8016fb6 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8016fa8:	4b2e      	ldr	r3, [pc, #184]	; (8017064 <icmp_input+0x1f8>)
 8016faa:	22c7      	movs	r2, #199	; 0xc7
 8016fac:	4930      	ldr	r1, [pc, #192]	; (8017070 <icmp_input+0x204>)
 8016fae:	482f      	ldr	r0, [pc, #188]	; (801706c <icmp_input+0x200>)
 8016fb0:	f001 fdf2 	bl	8018b98 <iprintf>
          goto icmperr;
 8016fb4:	e04b      	b.n	801704e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8016fb6:	687b      	ldr	r3, [r7, #4]
 8016fb8:	685b      	ldr	r3, [r3, #4]
 8016fba:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8016fbc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016fbe:	4619      	mov	r1, r3
 8016fc0:	6878      	ldr	r0, [r7, #4]
 8016fc2:	f7f5 fe21 	bl	800cc08 <pbuf_add_header>
 8016fc6:	4603      	mov	r3, r0
 8016fc8:	2b00      	cmp	r3, #0
 8016fca:	d12b      	bne.n	8017024 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8016fcc:	687b      	ldr	r3, [r7, #4]
 8016fce:	685b      	ldr	r3, [r3, #4]
 8016fd0:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8016fd2:	69fb      	ldr	r3, [r7, #28]
 8016fd4:	681a      	ldr	r2, [r3, #0]
 8016fd6:	68fb      	ldr	r3, [r7, #12]
 8016fd8:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8016fda:	4b20      	ldr	r3, [pc, #128]	; (801705c <icmp_input+0x1f0>)
 8016fdc:	691a      	ldr	r2, [r3, #16]
 8016fde:	68fb      	ldr	r3, [r7, #12]
 8016fe0:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8016fe2:	693b      	ldr	r3, [r7, #16]
 8016fe4:	2200      	movs	r2, #0
 8016fe6:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8016fe8:	693b      	ldr	r3, [r7, #16]
 8016fea:	2200      	movs	r2, #0
 8016fec:	709a      	strb	r2, [r3, #2]
 8016fee:	2200      	movs	r2, #0
 8016ff0:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8016ff2:	68fb      	ldr	r3, [r7, #12]
 8016ff4:	22ff      	movs	r2, #255	; 0xff
 8016ff6:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8016ff8:	68fb      	ldr	r3, [r7, #12]
 8016ffa:	2200      	movs	r2, #0
 8016ffc:	729a      	strb	r2, [r3, #10]
 8016ffe:	2200      	movs	r2, #0
 8017000:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8017002:	683b      	ldr	r3, [r7, #0]
 8017004:	9302      	str	r3, [sp, #8]
 8017006:	2301      	movs	r3, #1
 8017008:	9301      	str	r3, [sp, #4]
 801700a:	2300      	movs	r3, #0
 801700c:	9300      	str	r3, [sp, #0]
 801700e:	23ff      	movs	r3, #255	; 0xff
 8017010:	2200      	movs	r2, #0
 8017012:	69f9      	ldr	r1, [r7, #28]
 8017014:	6878      	ldr	r0, [r7, #4]
 8017016:	f000 fa93 	bl	8017540 <ip4_output_if>
 801701a:	4603      	mov	r3, r0
 801701c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801701e:	e001      	b.n	8017024 <icmp_input+0x1b8>
      break;
 8017020:	bf00      	nop
 8017022:	e000      	b.n	8017026 <icmp_input+0x1ba>
      break;
 8017024:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8017026:	6878      	ldr	r0, [r7, #4]
 8017028:	f7f5 fe84 	bl	800cd34 <pbuf_free>
  return;
 801702c:	e013      	b.n	8017056 <icmp_input+0x1ea>
    goto lenerr;
 801702e:	bf00      	nop
 8017030:	e002      	b.n	8017038 <icmp_input+0x1cc>
    goto lenerr;
 8017032:	bf00      	nop
 8017034:	e000      	b.n	8017038 <icmp_input+0x1cc>
        goto lenerr;
 8017036:	bf00      	nop
lenerr:
  pbuf_free(p);
 8017038:	6878      	ldr	r0, [r7, #4]
 801703a:	f7f5 fe7b 	bl	800cd34 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801703e:	e00a      	b.n	8017056 <icmp_input+0x1ea>
        goto icmperr;
 8017040:	bf00      	nop
 8017042:	e004      	b.n	801704e <icmp_input+0x1e2>
        goto icmperr;
 8017044:	bf00      	nop
 8017046:	e002      	b.n	801704e <icmp_input+0x1e2>
          goto icmperr;
 8017048:	bf00      	nop
 801704a:	e000      	b.n	801704e <icmp_input+0x1e2>
          goto icmperr;
 801704c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801704e:	6878      	ldr	r0, [r7, #4]
 8017050:	f7f5 fe70 	bl	800cd34 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8017054:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8017056:	3728      	adds	r7, #40	; 0x28
 8017058:	46bd      	mov	sp, r7
 801705a:	bd80      	pop	{r7, pc}
 801705c:	2000d6fc 	.word	0x2000d6fc
 8017060:	2000d710 	.word	0x2000d710
 8017064:	0801d708 	.word	0x0801d708
 8017068:	0801d740 	.word	0x0801d740
 801706c:	0801d778 	.word	0x0801d778
 8017070:	0801d7a0 	.word	0x0801d7a0

08017074 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8017074:	b580      	push	{r7, lr}
 8017076:	b082      	sub	sp, #8
 8017078:	af00      	add	r7, sp, #0
 801707a:	6078      	str	r0, [r7, #4]
 801707c:	460b      	mov	r3, r1
 801707e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8017080:	78fb      	ldrb	r3, [r7, #3]
 8017082:	461a      	mov	r2, r3
 8017084:	2103      	movs	r1, #3
 8017086:	6878      	ldr	r0, [r7, #4]
 8017088:	f000 f814 	bl	80170b4 <icmp_send_response>
}
 801708c:	bf00      	nop
 801708e:	3708      	adds	r7, #8
 8017090:	46bd      	mov	sp, r7
 8017092:	bd80      	pop	{r7, pc}

08017094 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8017094:	b580      	push	{r7, lr}
 8017096:	b082      	sub	sp, #8
 8017098:	af00      	add	r7, sp, #0
 801709a:	6078      	str	r0, [r7, #4]
 801709c:	460b      	mov	r3, r1
 801709e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80170a0:	78fb      	ldrb	r3, [r7, #3]
 80170a2:	461a      	mov	r2, r3
 80170a4:	210b      	movs	r1, #11
 80170a6:	6878      	ldr	r0, [r7, #4]
 80170a8:	f000 f804 	bl	80170b4 <icmp_send_response>
}
 80170ac:	bf00      	nop
 80170ae:	3708      	adds	r7, #8
 80170b0:	46bd      	mov	sp, r7
 80170b2:	bd80      	pop	{r7, pc}

080170b4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80170b4:	b580      	push	{r7, lr}
 80170b6:	b08c      	sub	sp, #48	; 0x30
 80170b8:	af04      	add	r7, sp, #16
 80170ba:	6078      	str	r0, [r7, #4]
 80170bc:	460b      	mov	r3, r1
 80170be:	70fb      	strb	r3, [r7, #3]
 80170c0:	4613      	mov	r3, r2
 80170c2:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80170c4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80170c8:	2124      	movs	r1, #36	; 0x24
 80170ca:	2022      	movs	r0, #34	; 0x22
 80170cc:	f7f5 fb4e 	bl	800c76c <pbuf_alloc>
 80170d0:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80170d2:	69fb      	ldr	r3, [r7, #28]
 80170d4:	2b00      	cmp	r3, #0
 80170d6:	d04c      	beq.n	8017172 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80170d8:	69fb      	ldr	r3, [r7, #28]
 80170da:	895b      	ldrh	r3, [r3, #10]
 80170dc:	2b23      	cmp	r3, #35	; 0x23
 80170de:	d806      	bhi.n	80170ee <icmp_send_response+0x3a>
 80170e0:	4b26      	ldr	r3, [pc, #152]	; (801717c <icmp_send_response+0xc8>)
 80170e2:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80170e6:	4926      	ldr	r1, [pc, #152]	; (8017180 <icmp_send_response+0xcc>)
 80170e8:	4826      	ldr	r0, [pc, #152]	; (8017184 <icmp_send_response+0xd0>)
 80170ea:	f001 fd55 	bl	8018b98 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80170ee:	687b      	ldr	r3, [r7, #4]
 80170f0:	685b      	ldr	r3, [r3, #4]
 80170f2:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80170f4:	69fb      	ldr	r3, [r7, #28]
 80170f6:	685b      	ldr	r3, [r3, #4]
 80170f8:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80170fa:	697b      	ldr	r3, [r7, #20]
 80170fc:	78fa      	ldrb	r2, [r7, #3]
 80170fe:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8017100:	697b      	ldr	r3, [r7, #20]
 8017102:	78ba      	ldrb	r2, [r7, #2]
 8017104:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8017106:	697b      	ldr	r3, [r7, #20]
 8017108:	2200      	movs	r2, #0
 801710a:	711a      	strb	r2, [r3, #4]
 801710c:	2200      	movs	r2, #0
 801710e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8017110:	697b      	ldr	r3, [r7, #20]
 8017112:	2200      	movs	r2, #0
 8017114:	719a      	strb	r2, [r3, #6]
 8017116:	2200      	movs	r2, #0
 8017118:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801711a:	69fb      	ldr	r3, [r7, #28]
 801711c:	685b      	ldr	r3, [r3, #4]
 801711e:	f103 0008 	add.w	r0, r3, #8
 8017122:	687b      	ldr	r3, [r7, #4]
 8017124:	685b      	ldr	r3, [r3, #4]
 8017126:	221c      	movs	r2, #28
 8017128:	4619      	mov	r1, r3
 801712a:	f001 ff35 	bl	8018f98 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801712e:	69bb      	ldr	r3, [r7, #24]
 8017130:	68db      	ldr	r3, [r3, #12]
 8017132:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8017134:	f107 030c 	add.w	r3, r7, #12
 8017138:	4618      	mov	r0, r3
 801713a:	f000 f825 	bl	8017188 <ip4_route>
 801713e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8017140:	693b      	ldr	r3, [r7, #16]
 8017142:	2b00      	cmp	r3, #0
 8017144:	d011      	beq.n	801716a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8017146:	697b      	ldr	r3, [r7, #20]
 8017148:	2200      	movs	r2, #0
 801714a:	709a      	strb	r2, [r3, #2]
 801714c:	2200      	movs	r2, #0
 801714e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8017150:	f107 020c 	add.w	r2, r7, #12
 8017154:	693b      	ldr	r3, [r7, #16]
 8017156:	9302      	str	r3, [sp, #8]
 8017158:	2301      	movs	r3, #1
 801715a:	9301      	str	r3, [sp, #4]
 801715c:	2300      	movs	r3, #0
 801715e:	9300      	str	r3, [sp, #0]
 8017160:	23ff      	movs	r3, #255	; 0xff
 8017162:	2100      	movs	r1, #0
 8017164:	69f8      	ldr	r0, [r7, #28]
 8017166:	f000 f9eb 	bl	8017540 <ip4_output_if>
  }
  pbuf_free(q);
 801716a:	69f8      	ldr	r0, [r7, #28]
 801716c:	f7f5 fde2 	bl	800cd34 <pbuf_free>
 8017170:	e000      	b.n	8017174 <icmp_send_response+0xc0>
    return;
 8017172:	bf00      	nop
}
 8017174:	3720      	adds	r7, #32
 8017176:	46bd      	mov	sp, r7
 8017178:	bd80      	pop	{r7, pc}
 801717a:	bf00      	nop
 801717c:	0801d708 	.word	0x0801d708
 8017180:	0801d7d4 	.word	0x0801d7d4
 8017184:	0801d778 	.word	0x0801d778

08017188 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8017188:	b480      	push	{r7}
 801718a:	b085      	sub	sp, #20
 801718c:	af00      	add	r7, sp, #0
 801718e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8017190:	4b33      	ldr	r3, [pc, #204]	; (8017260 <ip4_route+0xd8>)
 8017192:	681b      	ldr	r3, [r3, #0]
 8017194:	60fb      	str	r3, [r7, #12]
 8017196:	e036      	b.n	8017206 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017198:	68fb      	ldr	r3, [r7, #12]
 801719a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801719e:	f003 0301 	and.w	r3, r3, #1
 80171a2:	b2db      	uxtb	r3, r3
 80171a4:	2b00      	cmp	r3, #0
 80171a6:	d02b      	beq.n	8017200 <ip4_route+0x78>
 80171a8:	68fb      	ldr	r3, [r7, #12]
 80171aa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80171ae:	089b      	lsrs	r3, r3, #2
 80171b0:	f003 0301 	and.w	r3, r3, #1
 80171b4:	b2db      	uxtb	r3, r3
 80171b6:	2b00      	cmp	r3, #0
 80171b8:	d022      	beq.n	8017200 <ip4_route+0x78>
 80171ba:	68fb      	ldr	r3, [r7, #12]
 80171bc:	3304      	adds	r3, #4
 80171be:	681b      	ldr	r3, [r3, #0]
 80171c0:	2b00      	cmp	r3, #0
 80171c2:	d01d      	beq.n	8017200 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80171c4:	687b      	ldr	r3, [r7, #4]
 80171c6:	681a      	ldr	r2, [r3, #0]
 80171c8:	68fb      	ldr	r3, [r7, #12]
 80171ca:	3304      	adds	r3, #4
 80171cc:	681b      	ldr	r3, [r3, #0]
 80171ce:	405a      	eors	r2, r3
 80171d0:	68fb      	ldr	r3, [r7, #12]
 80171d2:	3308      	adds	r3, #8
 80171d4:	681b      	ldr	r3, [r3, #0]
 80171d6:	4013      	ands	r3, r2
 80171d8:	2b00      	cmp	r3, #0
 80171da:	d101      	bne.n	80171e0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80171dc:	68fb      	ldr	r3, [r7, #12]
 80171de:	e038      	b.n	8017252 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80171e0:	68fb      	ldr	r3, [r7, #12]
 80171e2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80171e6:	f003 0302 	and.w	r3, r3, #2
 80171ea:	2b00      	cmp	r3, #0
 80171ec:	d108      	bne.n	8017200 <ip4_route+0x78>
 80171ee:	687b      	ldr	r3, [r7, #4]
 80171f0:	681a      	ldr	r2, [r3, #0]
 80171f2:	68fb      	ldr	r3, [r7, #12]
 80171f4:	330c      	adds	r3, #12
 80171f6:	681b      	ldr	r3, [r3, #0]
 80171f8:	429a      	cmp	r2, r3
 80171fa:	d101      	bne.n	8017200 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80171fc:	68fb      	ldr	r3, [r7, #12]
 80171fe:	e028      	b.n	8017252 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8017200:	68fb      	ldr	r3, [r7, #12]
 8017202:	681b      	ldr	r3, [r3, #0]
 8017204:	60fb      	str	r3, [r7, #12]
 8017206:	68fb      	ldr	r3, [r7, #12]
 8017208:	2b00      	cmp	r3, #0
 801720a:	d1c5      	bne.n	8017198 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801720c:	4b15      	ldr	r3, [pc, #84]	; (8017264 <ip4_route+0xdc>)
 801720e:	681b      	ldr	r3, [r3, #0]
 8017210:	2b00      	cmp	r3, #0
 8017212:	d01a      	beq.n	801724a <ip4_route+0xc2>
 8017214:	4b13      	ldr	r3, [pc, #76]	; (8017264 <ip4_route+0xdc>)
 8017216:	681b      	ldr	r3, [r3, #0]
 8017218:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801721c:	f003 0301 	and.w	r3, r3, #1
 8017220:	2b00      	cmp	r3, #0
 8017222:	d012      	beq.n	801724a <ip4_route+0xc2>
 8017224:	4b0f      	ldr	r3, [pc, #60]	; (8017264 <ip4_route+0xdc>)
 8017226:	681b      	ldr	r3, [r3, #0]
 8017228:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801722c:	f003 0304 	and.w	r3, r3, #4
 8017230:	2b00      	cmp	r3, #0
 8017232:	d00a      	beq.n	801724a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8017234:	4b0b      	ldr	r3, [pc, #44]	; (8017264 <ip4_route+0xdc>)
 8017236:	681b      	ldr	r3, [r3, #0]
 8017238:	3304      	adds	r3, #4
 801723a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801723c:	2b00      	cmp	r3, #0
 801723e:	d004      	beq.n	801724a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8017240:	687b      	ldr	r3, [r7, #4]
 8017242:	681b      	ldr	r3, [r3, #0]
 8017244:	b2db      	uxtb	r3, r3
 8017246:	2b7f      	cmp	r3, #127	; 0x7f
 8017248:	d101      	bne.n	801724e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801724a:	2300      	movs	r3, #0
 801724c:	e001      	b.n	8017252 <ip4_route+0xca>
  }

  return netif_default;
 801724e:	4b05      	ldr	r3, [pc, #20]	; (8017264 <ip4_route+0xdc>)
 8017250:	681b      	ldr	r3, [r3, #0]
}
 8017252:	4618      	mov	r0, r3
 8017254:	3714      	adds	r7, #20
 8017256:	46bd      	mov	sp, r7
 8017258:	f85d 7b04 	ldr.w	r7, [sp], #4
 801725c:	4770      	bx	lr
 801725e:	bf00      	nop
 8017260:	20010e64 	.word	0x20010e64
 8017264:	20010e68 	.word	0x20010e68

08017268 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8017268:	b580      	push	{r7, lr}
 801726a:	b082      	sub	sp, #8
 801726c:	af00      	add	r7, sp, #0
 801726e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8017270:	687b      	ldr	r3, [r7, #4]
 8017272:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017276:	f003 0301 	and.w	r3, r3, #1
 801727a:	b2db      	uxtb	r3, r3
 801727c:	2b00      	cmp	r3, #0
 801727e:	d016      	beq.n	80172ae <ip4_input_accept+0x46>
 8017280:	687b      	ldr	r3, [r7, #4]
 8017282:	3304      	adds	r3, #4
 8017284:	681b      	ldr	r3, [r3, #0]
 8017286:	2b00      	cmp	r3, #0
 8017288:	d011      	beq.n	80172ae <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801728a:	4b0b      	ldr	r3, [pc, #44]	; (80172b8 <ip4_input_accept+0x50>)
 801728c:	695a      	ldr	r2, [r3, #20]
 801728e:	687b      	ldr	r3, [r7, #4]
 8017290:	3304      	adds	r3, #4
 8017292:	681b      	ldr	r3, [r3, #0]
 8017294:	429a      	cmp	r2, r3
 8017296:	d008      	beq.n	80172aa <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8017298:	4b07      	ldr	r3, [pc, #28]	; (80172b8 <ip4_input_accept+0x50>)
 801729a:	695b      	ldr	r3, [r3, #20]
 801729c:	6879      	ldr	r1, [r7, #4]
 801729e:	4618      	mov	r0, r3
 80172a0:	f000 fa26 	bl	80176f0 <ip4_addr_isbroadcast_u32>
 80172a4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80172a6:	2b00      	cmp	r3, #0
 80172a8:	d001      	beq.n	80172ae <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80172aa:	2301      	movs	r3, #1
 80172ac:	e000      	b.n	80172b0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80172ae:	2300      	movs	r3, #0
}
 80172b0:	4618      	mov	r0, r3
 80172b2:	3708      	adds	r7, #8
 80172b4:	46bd      	mov	sp, r7
 80172b6:	bd80      	pop	{r7, pc}
 80172b8:	2000d6fc 	.word	0x2000d6fc

080172bc <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80172bc:	b580      	push	{r7, lr}
 80172be:	b088      	sub	sp, #32
 80172c0:	af00      	add	r7, sp, #0
 80172c2:	6078      	str	r0, [r7, #4]
 80172c4:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 80172c6:	2301      	movs	r3, #1
 80172c8:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80172ca:	687b      	ldr	r3, [r7, #4]
 80172cc:	685b      	ldr	r3, [r3, #4]
 80172ce:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 80172d0:	69fb      	ldr	r3, [r7, #28]
 80172d2:	781b      	ldrb	r3, [r3, #0]
 80172d4:	091b      	lsrs	r3, r3, #4
 80172d6:	b2db      	uxtb	r3, r3
 80172d8:	2b04      	cmp	r3, #4
 80172da:	d004      	beq.n	80172e6 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80172dc:	6878      	ldr	r0, [r7, #4]
 80172de:	f7f5 fd29 	bl	800cd34 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80172e2:	2300      	movs	r3, #0
 80172e4:	e123      	b.n	801752e <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80172e6:	69fb      	ldr	r3, [r7, #28]
 80172e8:	781b      	ldrb	r3, [r3, #0]
 80172ea:	f003 030f 	and.w	r3, r3, #15
 80172ee:	b2db      	uxtb	r3, r3
 80172f0:	009b      	lsls	r3, r3, #2
 80172f2:	b2db      	uxtb	r3, r3
 80172f4:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80172f6:	69fb      	ldr	r3, [r7, #28]
 80172f8:	885b      	ldrh	r3, [r3, #2]
 80172fa:	b29b      	uxth	r3, r3
 80172fc:	4618      	mov	r0, r3
 80172fe:	f7f4 f8e5 	bl	800b4cc <lwip_htons>
 8017302:	4603      	mov	r3, r0
 8017304:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8017306:	687b      	ldr	r3, [r7, #4]
 8017308:	891b      	ldrh	r3, [r3, #8]
 801730a:	8a3a      	ldrh	r2, [r7, #16]
 801730c:	429a      	cmp	r2, r3
 801730e:	d204      	bcs.n	801731a <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8017310:	8a3b      	ldrh	r3, [r7, #16]
 8017312:	4619      	mov	r1, r3
 8017314:	6878      	ldr	r0, [r7, #4]
 8017316:	f7f5 fb87 	bl	800ca28 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801731a:	687b      	ldr	r3, [r7, #4]
 801731c:	895b      	ldrh	r3, [r3, #10]
 801731e:	8a7a      	ldrh	r2, [r7, #18]
 8017320:	429a      	cmp	r2, r3
 8017322:	d807      	bhi.n	8017334 <ip4_input+0x78>
 8017324:	687b      	ldr	r3, [r7, #4]
 8017326:	891b      	ldrh	r3, [r3, #8]
 8017328:	8a3a      	ldrh	r2, [r7, #16]
 801732a:	429a      	cmp	r2, r3
 801732c:	d802      	bhi.n	8017334 <ip4_input+0x78>
 801732e:	8a7b      	ldrh	r3, [r7, #18]
 8017330:	2b13      	cmp	r3, #19
 8017332:	d804      	bhi.n	801733e <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8017334:	6878      	ldr	r0, [r7, #4]
 8017336:	f7f5 fcfd 	bl	800cd34 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801733a:	2300      	movs	r3, #0
 801733c:	e0f7      	b.n	801752e <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801733e:	69fb      	ldr	r3, [r7, #28]
 8017340:	691b      	ldr	r3, [r3, #16]
 8017342:	4a7d      	ldr	r2, [pc, #500]	; (8017538 <ip4_input+0x27c>)
 8017344:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8017346:	69fb      	ldr	r3, [r7, #28]
 8017348:	68db      	ldr	r3, [r3, #12]
 801734a:	4a7b      	ldr	r2, [pc, #492]	; (8017538 <ip4_input+0x27c>)
 801734c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801734e:	4b7a      	ldr	r3, [pc, #488]	; (8017538 <ip4_input+0x27c>)
 8017350:	695b      	ldr	r3, [r3, #20]
 8017352:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017356:	2be0      	cmp	r3, #224	; 0xe0
 8017358:	d112      	bne.n	8017380 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801735a:	683b      	ldr	r3, [r7, #0]
 801735c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017360:	f003 0301 	and.w	r3, r3, #1
 8017364:	b2db      	uxtb	r3, r3
 8017366:	2b00      	cmp	r3, #0
 8017368:	d007      	beq.n	801737a <ip4_input+0xbe>
 801736a:	683b      	ldr	r3, [r7, #0]
 801736c:	3304      	adds	r3, #4
 801736e:	681b      	ldr	r3, [r3, #0]
 8017370:	2b00      	cmp	r3, #0
 8017372:	d002      	beq.n	801737a <ip4_input+0xbe>
      netif = inp;
 8017374:	683b      	ldr	r3, [r7, #0]
 8017376:	61bb      	str	r3, [r7, #24]
 8017378:	e02a      	b.n	80173d0 <ip4_input+0x114>
    } else {
      netif = NULL;
 801737a:	2300      	movs	r3, #0
 801737c:	61bb      	str	r3, [r7, #24]
 801737e:	e027      	b.n	80173d0 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8017380:	6838      	ldr	r0, [r7, #0]
 8017382:	f7ff ff71 	bl	8017268 <ip4_input_accept>
 8017386:	4603      	mov	r3, r0
 8017388:	2b00      	cmp	r3, #0
 801738a:	d002      	beq.n	8017392 <ip4_input+0xd6>
      netif = inp;
 801738c:	683b      	ldr	r3, [r7, #0]
 801738e:	61bb      	str	r3, [r7, #24]
 8017390:	e01e      	b.n	80173d0 <ip4_input+0x114>
    } else {
      netif = NULL;
 8017392:	2300      	movs	r3, #0
 8017394:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8017396:	4b68      	ldr	r3, [pc, #416]	; (8017538 <ip4_input+0x27c>)
 8017398:	695b      	ldr	r3, [r3, #20]
 801739a:	b2db      	uxtb	r3, r3
 801739c:	2b7f      	cmp	r3, #127	; 0x7f
 801739e:	d017      	beq.n	80173d0 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80173a0:	4b66      	ldr	r3, [pc, #408]	; (801753c <ip4_input+0x280>)
 80173a2:	681b      	ldr	r3, [r3, #0]
 80173a4:	61bb      	str	r3, [r7, #24]
 80173a6:	e00e      	b.n	80173c6 <ip4_input+0x10a>
          if (netif == inp) {
 80173a8:	69ba      	ldr	r2, [r7, #24]
 80173aa:	683b      	ldr	r3, [r7, #0]
 80173ac:	429a      	cmp	r2, r3
 80173ae:	d006      	beq.n	80173be <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80173b0:	69b8      	ldr	r0, [r7, #24]
 80173b2:	f7ff ff59 	bl	8017268 <ip4_input_accept>
 80173b6:	4603      	mov	r3, r0
 80173b8:	2b00      	cmp	r3, #0
 80173ba:	d108      	bne.n	80173ce <ip4_input+0x112>
 80173bc:	e000      	b.n	80173c0 <ip4_input+0x104>
            continue;
 80173be:	bf00      	nop
        NETIF_FOREACH(netif) {
 80173c0:	69bb      	ldr	r3, [r7, #24]
 80173c2:	681b      	ldr	r3, [r3, #0]
 80173c4:	61bb      	str	r3, [r7, #24]
 80173c6:	69bb      	ldr	r3, [r7, #24]
 80173c8:	2b00      	cmp	r3, #0
 80173ca:	d1ed      	bne.n	80173a8 <ip4_input+0xec>
 80173cc:	e000      	b.n	80173d0 <ip4_input+0x114>
            break;
 80173ce:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 80173d0:	69bb      	ldr	r3, [r7, #24]
 80173d2:	2b00      	cmp	r3, #0
 80173d4:	d111      	bne.n	80173fa <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 80173d6:	69fb      	ldr	r3, [r7, #28]
 80173d8:	7a5b      	ldrb	r3, [r3, #9]
 80173da:	2b11      	cmp	r3, #17
 80173dc:	d10d      	bne.n	80173fa <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 80173de:	8a7b      	ldrh	r3, [r7, #18]
 80173e0:	69fa      	ldr	r2, [r7, #28]
 80173e2:	4413      	add	r3, r2
 80173e4:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 80173e6:	68fb      	ldr	r3, [r7, #12]
 80173e8:	885b      	ldrh	r3, [r3, #2]
 80173ea:	b29b      	uxth	r3, r3
 80173ec:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 80173f0:	d103      	bne.n	80173fa <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 80173f2:	683b      	ldr	r3, [r7, #0]
 80173f4:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 80173f6:	2300      	movs	r3, #0
 80173f8:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 80173fa:	697b      	ldr	r3, [r7, #20]
 80173fc:	2b00      	cmp	r3, #0
 80173fe:	d017      	beq.n	8017430 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8017400:	4b4d      	ldr	r3, [pc, #308]	; (8017538 <ip4_input+0x27c>)
 8017402:	691b      	ldr	r3, [r3, #16]
 8017404:	2b00      	cmp	r3, #0
 8017406:	d013      	beq.n	8017430 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017408:	4b4b      	ldr	r3, [pc, #300]	; (8017538 <ip4_input+0x27c>)
 801740a:	691b      	ldr	r3, [r3, #16]
 801740c:	6839      	ldr	r1, [r7, #0]
 801740e:	4618      	mov	r0, r3
 8017410:	f000 f96e 	bl	80176f0 <ip4_addr_isbroadcast_u32>
 8017414:	4603      	mov	r3, r0
 8017416:	2b00      	cmp	r3, #0
 8017418:	d105      	bne.n	8017426 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801741a:	4b47      	ldr	r3, [pc, #284]	; (8017538 <ip4_input+0x27c>)
 801741c:	691b      	ldr	r3, [r3, #16]
 801741e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017422:	2be0      	cmp	r3, #224	; 0xe0
 8017424:	d104      	bne.n	8017430 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8017426:	6878      	ldr	r0, [r7, #4]
 8017428:	f7f5 fc84 	bl	800cd34 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801742c:	2300      	movs	r3, #0
 801742e:	e07e      	b.n	801752e <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8017430:	69bb      	ldr	r3, [r7, #24]
 8017432:	2b00      	cmp	r3, #0
 8017434:	d104      	bne.n	8017440 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8017436:	6878      	ldr	r0, [r7, #4]
 8017438:	f7f5 fc7c 	bl	800cd34 <pbuf_free>
    return ERR_OK;
 801743c:	2300      	movs	r3, #0
 801743e:	e076      	b.n	801752e <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8017440:	69fb      	ldr	r3, [r7, #28]
 8017442:	88db      	ldrh	r3, [r3, #6]
 8017444:	b29b      	uxth	r3, r3
 8017446:	461a      	mov	r2, r3
 8017448:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801744c:	4013      	ands	r3, r2
 801744e:	2b00      	cmp	r3, #0
 8017450:	d00b      	beq.n	801746a <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8017452:	6878      	ldr	r0, [r7, #4]
 8017454:	f000 fc92 	bl	8017d7c <ip4_reass>
 8017458:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801745a:	687b      	ldr	r3, [r7, #4]
 801745c:	2b00      	cmp	r3, #0
 801745e:	d101      	bne.n	8017464 <ip4_input+0x1a8>
      return ERR_OK;
 8017460:	2300      	movs	r3, #0
 8017462:	e064      	b.n	801752e <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8017464:	687b      	ldr	r3, [r7, #4]
 8017466:	685b      	ldr	r3, [r3, #4]
 8017468:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801746a:	4a33      	ldr	r2, [pc, #204]	; (8017538 <ip4_input+0x27c>)
 801746c:	69bb      	ldr	r3, [r7, #24]
 801746e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8017470:	4a31      	ldr	r2, [pc, #196]	; (8017538 <ip4_input+0x27c>)
 8017472:	683b      	ldr	r3, [r7, #0]
 8017474:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8017476:	4a30      	ldr	r2, [pc, #192]	; (8017538 <ip4_input+0x27c>)
 8017478:	69fb      	ldr	r3, [r7, #28]
 801747a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801747c:	69fb      	ldr	r3, [r7, #28]
 801747e:	781b      	ldrb	r3, [r3, #0]
 8017480:	f003 030f 	and.w	r3, r3, #15
 8017484:	b2db      	uxtb	r3, r3
 8017486:	009b      	lsls	r3, r3, #2
 8017488:	b2db      	uxtb	r3, r3
 801748a:	b29a      	uxth	r2, r3
 801748c:	4b2a      	ldr	r3, [pc, #168]	; (8017538 <ip4_input+0x27c>)
 801748e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8017490:	8a7b      	ldrh	r3, [r7, #18]
 8017492:	4619      	mov	r1, r3
 8017494:	6878      	ldr	r0, [r7, #4]
 8017496:	f7f5 fbc7 	bl	800cc28 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801749a:	69fb      	ldr	r3, [r7, #28]
 801749c:	7a5b      	ldrb	r3, [r3, #9]
 801749e:	2b11      	cmp	r3, #17
 80174a0:	d006      	beq.n	80174b0 <ip4_input+0x1f4>
 80174a2:	2b11      	cmp	r3, #17
 80174a4:	dc13      	bgt.n	80174ce <ip4_input+0x212>
 80174a6:	2b01      	cmp	r3, #1
 80174a8:	d00c      	beq.n	80174c4 <ip4_input+0x208>
 80174aa:	2b06      	cmp	r3, #6
 80174ac:	d005      	beq.n	80174ba <ip4_input+0x1fe>
 80174ae:	e00e      	b.n	80174ce <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80174b0:	6839      	ldr	r1, [r7, #0]
 80174b2:	6878      	ldr	r0, [r7, #4]
 80174b4:	f7fc fade 	bl	8013a74 <udp_input>
        break;
 80174b8:	e026      	b.n	8017508 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80174ba:	6839      	ldr	r1, [r7, #0]
 80174bc:	6878      	ldr	r0, [r7, #4]
 80174be:	f7f7 fe97 	bl	800f1f0 <tcp_input>
        break;
 80174c2:	e021      	b.n	8017508 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80174c4:	6839      	ldr	r1, [r7, #0]
 80174c6:	6878      	ldr	r0, [r7, #4]
 80174c8:	f7ff fcd0 	bl	8016e6c <icmp_input>
        break;
 80174cc:	e01c      	b.n	8017508 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80174ce:	4b1a      	ldr	r3, [pc, #104]	; (8017538 <ip4_input+0x27c>)
 80174d0:	695b      	ldr	r3, [r3, #20]
 80174d2:	69b9      	ldr	r1, [r7, #24]
 80174d4:	4618      	mov	r0, r3
 80174d6:	f000 f90b 	bl	80176f0 <ip4_addr_isbroadcast_u32>
 80174da:	4603      	mov	r3, r0
 80174dc:	2b00      	cmp	r3, #0
 80174de:	d10f      	bne.n	8017500 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80174e0:	4b15      	ldr	r3, [pc, #84]	; (8017538 <ip4_input+0x27c>)
 80174e2:	695b      	ldr	r3, [r3, #20]
 80174e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80174e8:	2be0      	cmp	r3, #224	; 0xe0
 80174ea:	d009      	beq.n	8017500 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80174ec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80174f0:	4619      	mov	r1, r3
 80174f2:	6878      	ldr	r0, [r7, #4]
 80174f4:	f7f5 fc0b 	bl	800cd0e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80174f8:	2102      	movs	r1, #2
 80174fa:	6878      	ldr	r0, [r7, #4]
 80174fc:	f7ff fdba 	bl	8017074 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8017500:	6878      	ldr	r0, [r7, #4]
 8017502:	f7f5 fc17 	bl	800cd34 <pbuf_free>
        break;
 8017506:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8017508:	4b0b      	ldr	r3, [pc, #44]	; (8017538 <ip4_input+0x27c>)
 801750a:	2200      	movs	r2, #0
 801750c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801750e:	4b0a      	ldr	r3, [pc, #40]	; (8017538 <ip4_input+0x27c>)
 8017510:	2200      	movs	r2, #0
 8017512:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8017514:	4b08      	ldr	r3, [pc, #32]	; (8017538 <ip4_input+0x27c>)
 8017516:	2200      	movs	r2, #0
 8017518:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801751a:	4b07      	ldr	r3, [pc, #28]	; (8017538 <ip4_input+0x27c>)
 801751c:	2200      	movs	r2, #0
 801751e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8017520:	4b05      	ldr	r3, [pc, #20]	; (8017538 <ip4_input+0x27c>)
 8017522:	2200      	movs	r2, #0
 8017524:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8017526:	4b04      	ldr	r3, [pc, #16]	; (8017538 <ip4_input+0x27c>)
 8017528:	2200      	movs	r2, #0
 801752a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801752c:	2300      	movs	r3, #0
}
 801752e:	4618      	mov	r0, r3
 8017530:	3720      	adds	r7, #32
 8017532:	46bd      	mov	sp, r7
 8017534:	bd80      	pop	{r7, pc}
 8017536:	bf00      	nop
 8017538:	2000d6fc 	.word	0x2000d6fc
 801753c:	20010e64 	.word	0x20010e64

08017540 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8017540:	b580      	push	{r7, lr}
 8017542:	b08a      	sub	sp, #40	; 0x28
 8017544:	af04      	add	r7, sp, #16
 8017546:	60f8      	str	r0, [r7, #12]
 8017548:	60b9      	str	r1, [r7, #8]
 801754a:	607a      	str	r2, [r7, #4]
 801754c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801754e:	68bb      	ldr	r3, [r7, #8]
 8017550:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8017552:	687b      	ldr	r3, [r7, #4]
 8017554:	2b00      	cmp	r3, #0
 8017556:	d009      	beq.n	801756c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8017558:	68bb      	ldr	r3, [r7, #8]
 801755a:	2b00      	cmp	r3, #0
 801755c:	d003      	beq.n	8017566 <ip4_output_if+0x26>
 801755e:	68bb      	ldr	r3, [r7, #8]
 8017560:	681b      	ldr	r3, [r3, #0]
 8017562:	2b00      	cmp	r3, #0
 8017564:	d102      	bne.n	801756c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8017566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017568:	3304      	adds	r3, #4
 801756a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801756c:	78fa      	ldrb	r2, [r7, #3]
 801756e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017570:	9302      	str	r3, [sp, #8]
 8017572:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8017576:	9301      	str	r3, [sp, #4]
 8017578:	f897 3020 	ldrb.w	r3, [r7, #32]
 801757c:	9300      	str	r3, [sp, #0]
 801757e:	4613      	mov	r3, r2
 8017580:	687a      	ldr	r2, [r7, #4]
 8017582:	6979      	ldr	r1, [r7, #20]
 8017584:	68f8      	ldr	r0, [r7, #12]
 8017586:	f000 f805 	bl	8017594 <ip4_output_if_src>
 801758a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801758c:	4618      	mov	r0, r3
 801758e:	3718      	adds	r7, #24
 8017590:	46bd      	mov	sp, r7
 8017592:	bd80      	pop	{r7, pc}

08017594 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8017594:	b580      	push	{r7, lr}
 8017596:	b088      	sub	sp, #32
 8017598:	af00      	add	r7, sp, #0
 801759a:	60f8      	str	r0, [r7, #12]
 801759c:	60b9      	str	r1, [r7, #8]
 801759e:	607a      	str	r2, [r7, #4]
 80175a0:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80175a2:	68fb      	ldr	r3, [r7, #12]
 80175a4:	7b9b      	ldrb	r3, [r3, #14]
 80175a6:	2b01      	cmp	r3, #1
 80175a8:	d006      	beq.n	80175b8 <ip4_output_if_src+0x24>
 80175aa:	4b4b      	ldr	r3, [pc, #300]	; (80176d8 <ip4_output_if_src+0x144>)
 80175ac:	f44f 7255 	mov.w	r2, #852	; 0x354
 80175b0:	494a      	ldr	r1, [pc, #296]	; (80176dc <ip4_output_if_src+0x148>)
 80175b2:	484b      	ldr	r0, [pc, #300]	; (80176e0 <ip4_output_if_src+0x14c>)
 80175b4:	f001 faf0 	bl	8018b98 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80175b8:	687b      	ldr	r3, [r7, #4]
 80175ba:	2b00      	cmp	r3, #0
 80175bc:	d060      	beq.n	8017680 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80175be:	2314      	movs	r3, #20
 80175c0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80175c2:	2114      	movs	r1, #20
 80175c4:	68f8      	ldr	r0, [r7, #12]
 80175c6:	f7f5 fb1f 	bl	800cc08 <pbuf_add_header>
 80175ca:	4603      	mov	r3, r0
 80175cc:	2b00      	cmp	r3, #0
 80175ce:	d002      	beq.n	80175d6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80175d0:	f06f 0301 	mvn.w	r3, #1
 80175d4:	e07c      	b.n	80176d0 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80175d6:	68fb      	ldr	r3, [r7, #12]
 80175d8:	685b      	ldr	r3, [r3, #4]
 80175da:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80175dc:	68fb      	ldr	r3, [r7, #12]
 80175de:	895b      	ldrh	r3, [r3, #10]
 80175e0:	2b13      	cmp	r3, #19
 80175e2:	d806      	bhi.n	80175f2 <ip4_output_if_src+0x5e>
 80175e4:	4b3c      	ldr	r3, [pc, #240]	; (80176d8 <ip4_output_if_src+0x144>)
 80175e6:	f44f 7262 	mov.w	r2, #904	; 0x388
 80175ea:	493e      	ldr	r1, [pc, #248]	; (80176e4 <ip4_output_if_src+0x150>)
 80175ec:	483c      	ldr	r0, [pc, #240]	; (80176e0 <ip4_output_if_src+0x14c>)
 80175ee:	f001 fad3 	bl	8018b98 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80175f2:	69fb      	ldr	r3, [r7, #28]
 80175f4:	78fa      	ldrb	r2, [r7, #3]
 80175f6:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80175f8:	69fb      	ldr	r3, [r7, #28]
 80175fa:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80175fe:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8017600:	687b      	ldr	r3, [r7, #4]
 8017602:	681a      	ldr	r2, [r3, #0]
 8017604:	69fb      	ldr	r3, [r7, #28]
 8017606:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8017608:	8b7b      	ldrh	r3, [r7, #26]
 801760a:	089b      	lsrs	r3, r3, #2
 801760c:	b29b      	uxth	r3, r3
 801760e:	b2db      	uxtb	r3, r3
 8017610:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017614:	b2da      	uxtb	r2, r3
 8017616:	69fb      	ldr	r3, [r7, #28]
 8017618:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801761a:	69fb      	ldr	r3, [r7, #28]
 801761c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8017620:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8017622:	68fb      	ldr	r3, [r7, #12]
 8017624:	891b      	ldrh	r3, [r3, #8]
 8017626:	4618      	mov	r0, r3
 8017628:	f7f3 ff50 	bl	800b4cc <lwip_htons>
 801762c:	4603      	mov	r3, r0
 801762e:	461a      	mov	r2, r3
 8017630:	69fb      	ldr	r3, [r7, #28]
 8017632:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8017634:	69fb      	ldr	r3, [r7, #28]
 8017636:	2200      	movs	r2, #0
 8017638:	719a      	strb	r2, [r3, #6]
 801763a:	2200      	movs	r2, #0
 801763c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801763e:	4b2a      	ldr	r3, [pc, #168]	; (80176e8 <ip4_output_if_src+0x154>)
 8017640:	881b      	ldrh	r3, [r3, #0]
 8017642:	4618      	mov	r0, r3
 8017644:	f7f3 ff42 	bl	800b4cc <lwip_htons>
 8017648:	4603      	mov	r3, r0
 801764a:	461a      	mov	r2, r3
 801764c:	69fb      	ldr	r3, [r7, #28]
 801764e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8017650:	4b25      	ldr	r3, [pc, #148]	; (80176e8 <ip4_output_if_src+0x154>)
 8017652:	881b      	ldrh	r3, [r3, #0]
 8017654:	3301      	adds	r3, #1
 8017656:	b29a      	uxth	r2, r3
 8017658:	4b23      	ldr	r3, [pc, #140]	; (80176e8 <ip4_output_if_src+0x154>)
 801765a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801765c:	68bb      	ldr	r3, [r7, #8]
 801765e:	2b00      	cmp	r3, #0
 8017660:	d104      	bne.n	801766c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8017662:	4b22      	ldr	r3, [pc, #136]	; (80176ec <ip4_output_if_src+0x158>)
 8017664:	681a      	ldr	r2, [r3, #0]
 8017666:	69fb      	ldr	r3, [r7, #28]
 8017668:	60da      	str	r2, [r3, #12]
 801766a:	e003      	b.n	8017674 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801766c:	68bb      	ldr	r3, [r7, #8]
 801766e:	681a      	ldr	r2, [r3, #0]
 8017670:	69fb      	ldr	r3, [r7, #28]
 8017672:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8017674:	69fb      	ldr	r3, [r7, #28]
 8017676:	2200      	movs	r2, #0
 8017678:	729a      	strb	r2, [r3, #10]
 801767a:	2200      	movs	r2, #0
 801767c:	72da      	strb	r2, [r3, #11]
 801767e:	e00f      	b.n	80176a0 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8017680:	68fb      	ldr	r3, [r7, #12]
 8017682:	895b      	ldrh	r3, [r3, #10]
 8017684:	2b13      	cmp	r3, #19
 8017686:	d802      	bhi.n	801768e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8017688:	f06f 0301 	mvn.w	r3, #1
 801768c:	e020      	b.n	80176d0 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801768e:	68fb      	ldr	r3, [r7, #12]
 8017690:	685b      	ldr	r3, [r3, #4]
 8017692:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8017694:	69fb      	ldr	r3, [r7, #28]
 8017696:	691b      	ldr	r3, [r3, #16]
 8017698:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801769a:	f107 0314 	add.w	r3, r7, #20
 801769e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80176a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80176a4:	2b00      	cmp	r3, #0
 80176a6:	d00c      	beq.n	80176c2 <ip4_output_if_src+0x12e>
 80176a8:	68fb      	ldr	r3, [r7, #12]
 80176aa:	891a      	ldrh	r2, [r3, #8]
 80176ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80176b0:	429a      	cmp	r2, r3
 80176b2:	d906      	bls.n	80176c2 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80176b4:	687a      	ldr	r2, [r7, #4]
 80176b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80176b8:	68f8      	ldr	r0, [r7, #12]
 80176ba:	f000 fd53 	bl	8018164 <ip4_frag>
 80176be:	4603      	mov	r3, r0
 80176c0:	e006      	b.n	80176d0 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80176c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176c4:	695b      	ldr	r3, [r3, #20]
 80176c6:	687a      	ldr	r2, [r7, #4]
 80176c8:	68f9      	ldr	r1, [r7, #12]
 80176ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80176cc:	4798      	blx	r3
 80176ce:	4603      	mov	r3, r0
}
 80176d0:	4618      	mov	r0, r3
 80176d2:	3720      	adds	r7, #32
 80176d4:	46bd      	mov	sp, r7
 80176d6:	bd80      	pop	{r7, pc}
 80176d8:	0801d800 	.word	0x0801d800
 80176dc:	0801d834 	.word	0x0801d834
 80176e0:	0801d840 	.word	0x0801d840
 80176e4:	0801d868 	.word	0x0801d868
 80176e8:	20010ff6 	.word	0x20010ff6
 80176ec:	08027dd4 	.word	0x08027dd4

080176f0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80176f0:	b480      	push	{r7}
 80176f2:	b085      	sub	sp, #20
 80176f4:	af00      	add	r7, sp, #0
 80176f6:	6078      	str	r0, [r7, #4]
 80176f8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80176fa:	687b      	ldr	r3, [r7, #4]
 80176fc:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80176fe:	687b      	ldr	r3, [r7, #4]
 8017700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017704:	d002      	beq.n	801770c <ip4_addr_isbroadcast_u32+0x1c>
 8017706:	687b      	ldr	r3, [r7, #4]
 8017708:	2b00      	cmp	r3, #0
 801770a:	d101      	bne.n	8017710 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801770c:	2301      	movs	r3, #1
 801770e:	e02a      	b.n	8017766 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8017710:	683b      	ldr	r3, [r7, #0]
 8017712:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017716:	f003 0302 	and.w	r3, r3, #2
 801771a:	2b00      	cmp	r3, #0
 801771c:	d101      	bne.n	8017722 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801771e:	2300      	movs	r3, #0
 8017720:	e021      	b.n	8017766 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8017722:	683b      	ldr	r3, [r7, #0]
 8017724:	3304      	adds	r3, #4
 8017726:	681b      	ldr	r3, [r3, #0]
 8017728:	687a      	ldr	r2, [r7, #4]
 801772a:	429a      	cmp	r2, r3
 801772c:	d101      	bne.n	8017732 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801772e:	2300      	movs	r3, #0
 8017730:	e019      	b.n	8017766 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8017732:	68fa      	ldr	r2, [r7, #12]
 8017734:	683b      	ldr	r3, [r7, #0]
 8017736:	3304      	adds	r3, #4
 8017738:	681b      	ldr	r3, [r3, #0]
 801773a:	405a      	eors	r2, r3
 801773c:	683b      	ldr	r3, [r7, #0]
 801773e:	3308      	adds	r3, #8
 8017740:	681b      	ldr	r3, [r3, #0]
 8017742:	4013      	ands	r3, r2
 8017744:	2b00      	cmp	r3, #0
 8017746:	d10d      	bne.n	8017764 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017748:	683b      	ldr	r3, [r7, #0]
 801774a:	3308      	adds	r3, #8
 801774c:	681b      	ldr	r3, [r3, #0]
 801774e:	43da      	mvns	r2, r3
 8017750:	687b      	ldr	r3, [r7, #4]
 8017752:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8017754:	683b      	ldr	r3, [r7, #0]
 8017756:	3308      	adds	r3, #8
 8017758:	681b      	ldr	r3, [r3, #0]
 801775a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801775c:	429a      	cmp	r2, r3
 801775e:	d101      	bne.n	8017764 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8017760:	2301      	movs	r3, #1
 8017762:	e000      	b.n	8017766 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8017764:	2300      	movs	r3, #0
  }
}
 8017766:	4618      	mov	r0, r3
 8017768:	3714      	adds	r7, #20
 801776a:	46bd      	mov	sp, r7
 801776c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017770:	4770      	bx	lr
	...

08017774 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8017774:	b580      	push	{r7, lr}
 8017776:	b084      	sub	sp, #16
 8017778:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801777a:	2300      	movs	r3, #0
 801777c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801777e:	4b12      	ldr	r3, [pc, #72]	; (80177c8 <ip_reass_tmr+0x54>)
 8017780:	681b      	ldr	r3, [r3, #0]
 8017782:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8017784:	e018      	b.n	80177b8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8017786:	68fb      	ldr	r3, [r7, #12]
 8017788:	7fdb      	ldrb	r3, [r3, #31]
 801778a:	2b00      	cmp	r3, #0
 801778c:	d00b      	beq.n	80177a6 <ip_reass_tmr+0x32>
      r->timer--;
 801778e:	68fb      	ldr	r3, [r7, #12]
 8017790:	7fdb      	ldrb	r3, [r3, #31]
 8017792:	3b01      	subs	r3, #1
 8017794:	b2da      	uxtb	r2, r3
 8017796:	68fb      	ldr	r3, [r7, #12]
 8017798:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801779a:	68fb      	ldr	r3, [r7, #12]
 801779c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801779e:	68fb      	ldr	r3, [r7, #12]
 80177a0:	681b      	ldr	r3, [r3, #0]
 80177a2:	60fb      	str	r3, [r7, #12]
 80177a4:	e008      	b.n	80177b8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80177a6:	68fb      	ldr	r3, [r7, #12]
 80177a8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80177aa:	68fb      	ldr	r3, [r7, #12]
 80177ac:	681b      	ldr	r3, [r3, #0]
 80177ae:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80177b0:	68b9      	ldr	r1, [r7, #8]
 80177b2:	6878      	ldr	r0, [r7, #4]
 80177b4:	f000 f80a 	bl	80177cc <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80177b8:	68fb      	ldr	r3, [r7, #12]
 80177ba:	2b00      	cmp	r3, #0
 80177bc:	d1e3      	bne.n	8017786 <ip_reass_tmr+0x12>
    }
  }
}
 80177be:	bf00      	nop
 80177c0:	bf00      	nop
 80177c2:	3710      	adds	r7, #16
 80177c4:	46bd      	mov	sp, r7
 80177c6:	bd80      	pop	{r7, pc}
 80177c8:	20010ff8 	.word	0x20010ff8

080177cc <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80177cc:	b580      	push	{r7, lr}
 80177ce:	b088      	sub	sp, #32
 80177d0:	af00      	add	r7, sp, #0
 80177d2:	6078      	str	r0, [r7, #4]
 80177d4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80177d6:	2300      	movs	r3, #0
 80177d8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80177da:	683a      	ldr	r2, [r7, #0]
 80177dc:	687b      	ldr	r3, [r7, #4]
 80177de:	429a      	cmp	r2, r3
 80177e0:	d105      	bne.n	80177ee <ip_reass_free_complete_datagram+0x22>
 80177e2:	4b45      	ldr	r3, [pc, #276]	; (80178f8 <ip_reass_free_complete_datagram+0x12c>)
 80177e4:	22ab      	movs	r2, #171	; 0xab
 80177e6:	4945      	ldr	r1, [pc, #276]	; (80178fc <ip_reass_free_complete_datagram+0x130>)
 80177e8:	4845      	ldr	r0, [pc, #276]	; (8017900 <ip_reass_free_complete_datagram+0x134>)
 80177ea:	f001 f9d5 	bl	8018b98 <iprintf>
  if (prev != NULL) {
 80177ee:	683b      	ldr	r3, [r7, #0]
 80177f0:	2b00      	cmp	r3, #0
 80177f2:	d00a      	beq.n	801780a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80177f4:	683b      	ldr	r3, [r7, #0]
 80177f6:	681b      	ldr	r3, [r3, #0]
 80177f8:	687a      	ldr	r2, [r7, #4]
 80177fa:	429a      	cmp	r2, r3
 80177fc:	d005      	beq.n	801780a <ip_reass_free_complete_datagram+0x3e>
 80177fe:	4b3e      	ldr	r3, [pc, #248]	; (80178f8 <ip_reass_free_complete_datagram+0x12c>)
 8017800:	22ad      	movs	r2, #173	; 0xad
 8017802:	4940      	ldr	r1, [pc, #256]	; (8017904 <ip_reass_free_complete_datagram+0x138>)
 8017804:	483e      	ldr	r0, [pc, #248]	; (8017900 <ip_reass_free_complete_datagram+0x134>)
 8017806:	f001 f9c7 	bl	8018b98 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801780a:	687b      	ldr	r3, [r7, #4]
 801780c:	685b      	ldr	r3, [r3, #4]
 801780e:	685b      	ldr	r3, [r3, #4]
 8017810:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8017812:	697b      	ldr	r3, [r7, #20]
 8017814:	889b      	ldrh	r3, [r3, #4]
 8017816:	b29b      	uxth	r3, r3
 8017818:	2b00      	cmp	r3, #0
 801781a:	d12a      	bne.n	8017872 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801781c:	687b      	ldr	r3, [r7, #4]
 801781e:	685b      	ldr	r3, [r3, #4]
 8017820:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8017822:	697b      	ldr	r3, [r7, #20]
 8017824:	681a      	ldr	r2, [r3, #0]
 8017826:	687b      	ldr	r3, [r7, #4]
 8017828:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801782a:	69bb      	ldr	r3, [r7, #24]
 801782c:	6858      	ldr	r0, [r3, #4]
 801782e:	687b      	ldr	r3, [r7, #4]
 8017830:	3308      	adds	r3, #8
 8017832:	2214      	movs	r2, #20
 8017834:	4619      	mov	r1, r3
 8017836:	f001 fbaf 	bl	8018f98 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801783a:	2101      	movs	r1, #1
 801783c:	69b8      	ldr	r0, [r7, #24]
 801783e:	f7ff fc29 	bl	8017094 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8017842:	69b8      	ldr	r0, [r7, #24]
 8017844:	f7f5 fb04 	bl	800ce50 <pbuf_clen>
 8017848:	4603      	mov	r3, r0
 801784a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801784c:	8bfa      	ldrh	r2, [r7, #30]
 801784e:	8a7b      	ldrh	r3, [r7, #18]
 8017850:	4413      	add	r3, r2
 8017852:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017856:	db05      	blt.n	8017864 <ip_reass_free_complete_datagram+0x98>
 8017858:	4b27      	ldr	r3, [pc, #156]	; (80178f8 <ip_reass_free_complete_datagram+0x12c>)
 801785a:	22bc      	movs	r2, #188	; 0xbc
 801785c:	492a      	ldr	r1, [pc, #168]	; (8017908 <ip_reass_free_complete_datagram+0x13c>)
 801785e:	4828      	ldr	r0, [pc, #160]	; (8017900 <ip_reass_free_complete_datagram+0x134>)
 8017860:	f001 f99a 	bl	8018b98 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8017864:	8bfa      	ldrh	r2, [r7, #30]
 8017866:	8a7b      	ldrh	r3, [r7, #18]
 8017868:	4413      	add	r3, r2
 801786a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801786c:	69b8      	ldr	r0, [r7, #24]
 801786e:	f7f5 fa61 	bl	800cd34 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8017872:	687b      	ldr	r3, [r7, #4]
 8017874:	685b      	ldr	r3, [r3, #4]
 8017876:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8017878:	e01f      	b.n	80178ba <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801787a:	69bb      	ldr	r3, [r7, #24]
 801787c:	685b      	ldr	r3, [r3, #4]
 801787e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8017880:	69bb      	ldr	r3, [r7, #24]
 8017882:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8017884:	697b      	ldr	r3, [r7, #20]
 8017886:	681b      	ldr	r3, [r3, #0]
 8017888:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801788a:	68f8      	ldr	r0, [r7, #12]
 801788c:	f7f5 fae0 	bl	800ce50 <pbuf_clen>
 8017890:	4603      	mov	r3, r0
 8017892:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8017894:	8bfa      	ldrh	r2, [r7, #30]
 8017896:	8a7b      	ldrh	r3, [r7, #18]
 8017898:	4413      	add	r3, r2
 801789a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801789e:	db05      	blt.n	80178ac <ip_reass_free_complete_datagram+0xe0>
 80178a0:	4b15      	ldr	r3, [pc, #84]	; (80178f8 <ip_reass_free_complete_datagram+0x12c>)
 80178a2:	22cc      	movs	r2, #204	; 0xcc
 80178a4:	4918      	ldr	r1, [pc, #96]	; (8017908 <ip_reass_free_complete_datagram+0x13c>)
 80178a6:	4816      	ldr	r0, [pc, #88]	; (8017900 <ip_reass_free_complete_datagram+0x134>)
 80178a8:	f001 f976 	bl	8018b98 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80178ac:	8bfa      	ldrh	r2, [r7, #30]
 80178ae:	8a7b      	ldrh	r3, [r7, #18]
 80178b0:	4413      	add	r3, r2
 80178b2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80178b4:	68f8      	ldr	r0, [r7, #12]
 80178b6:	f7f5 fa3d 	bl	800cd34 <pbuf_free>
  while (p != NULL) {
 80178ba:	69bb      	ldr	r3, [r7, #24]
 80178bc:	2b00      	cmp	r3, #0
 80178be:	d1dc      	bne.n	801787a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80178c0:	6839      	ldr	r1, [r7, #0]
 80178c2:	6878      	ldr	r0, [r7, #4]
 80178c4:	f000 f8c2 	bl	8017a4c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80178c8:	4b10      	ldr	r3, [pc, #64]	; (801790c <ip_reass_free_complete_datagram+0x140>)
 80178ca:	881b      	ldrh	r3, [r3, #0]
 80178cc:	8bfa      	ldrh	r2, [r7, #30]
 80178ce:	429a      	cmp	r2, r3
 80178d0:	d905      	bls.n	80178de <ip_reass_free_complete_datagram+0x112>
 80178d2:	4b09      	ldr	r3, [pc, #36]	; (80178f8 <ip_reass_free_complete_datagram+0x12c>)
 80178d4:	22d2      	movs	r2, #210	; 0xd2
 80178d6:	490e      	ldr	r1, [pc, #56]	; (8017910 <ip_reass_free_complete_datagram+0x144>)
 80178d8:	4809      	ldr	r0, [pc, #36]	; (8017900 <ip_reass_free_complete_datagram+0x134>)
 80178da:	f001 f95d 	bl	8018b98 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80178de:	4b0b      	ldr	r3, [pc, #44]	; (801790c <ip_reass_free_complete_datagram+0x140>)
 80178e0:	881a      	ldrh	r2, [r3, #0]
 80178e2:	8bfb      	ldrh	r3, [r7, #30]
 80178e4:	1ad3      	subs	r3, r2, r3
 80178e6:	b29a      	uxth	r2, r3
 80178e8:	4b08      	ldr	r3, [pc, #32]	; (801790c <ip_reass_free_complete_datagram+0x140>)
 80178ea:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80178ec:	8bfb      	ldrh	r3, [r7, #30]
}
 80178ee:	4618      	mov	r0, r3
 80178f0:	3720      	adds	r7, #32
 80178f2:	46bd      	mov	sp, r7
 80178f4:	bd80      	pop	{r7, pc}
 80178f6:	bf00      	nop
 80178f8:	0801d898 	.word	0x0801d898
 80178fc:	0801d8d4 	.word	0x0801d8d4
 8017900:	0801d8e0 	.word	0x0801d8e0
 8017904:	0801d908 	.word	0x0801d908
 8017908:	0801d91c 	.word	0x0801d91c
 801790c:	20010ffc 	.word	0x20010ffc
 8017910:	0801d93c 	.word	0x0801d93c

08017914 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8017914:	b580      	push	{r7, lr}
 8017916:	b08a      	sub	sp, #40	; 0x28
 8017918:	af00      	add	r7, sp, #0
 801791a:	6078      	str	r0, [r7, #4]
 801791c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801791e:	2300      	movs	r3, #0
 8017920:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8017922:	2300      	movs	r3, #0
 8017924:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8017926:	2300      	movs	r3, #0
 8017928:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801792a:	2300      	movs	r3, #0
 801792c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801792e:	2300      	movs	r3, #0
 8017930:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8017932:	4b28      	ldr	r3, [pc, #160]	; (80179d4 <ip_reass_remove_oldest_datagram+0xc0>)
 8017934:	681b      	ldr	r3, [r3, #0]
 8017936:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8017938:	e030      	b.n	801799c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801793a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801793c:	695a      	ldr	r2, [r3, #20]
 801793e:	687b      	ldr	r3, [r7, #4]
 8017940:	68db      	ldr	r3, [r3, #12]
 8017942:	429a      	cmp	r2, r3
 8017944:	d10c      	bne.n	8017960 <ip_reass_remove_oldest_datagram+0x4c>
 8017946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017948:	699a      	ldr	r2, [r3, #24]
 801794a:	687b      	ldr	r3, [r7, #4]
 801794c:	691b      	ldr	r3, [r3, #16]
 801794e:	429a      	cmp	r2, r3
 8017950:	d106      	bne.n	8017960 <ip_reass_remove_oldest_datagram+0x4c>
 8017952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017954:	899a      	ldrh	r2, [r3, #12]
 8017956:	687b      	ldr	r3, [r7, #4]
 8017958:	889b      	ldrh	r3, [r3, #4]
 801795a:	b29b      	uxth	r3, r3
 801795c:	429a      	cmp	r2, r3
 801795e:	d014      	beq.n	801798a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8017960:	693b      	ldr	r3, [r7, #16]
 8017962:	3301      	adds	r3, #1
 8017964:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8017966:	6a3b      	ldr	r3, [r7, #32]
 8017968:	2b00      	cmp	r3, #0
 801796a:	d104      	bne.n	8017976 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801796c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801796e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8017970:	69fb      	ldr	r3, [r7, #28]
 8017972:	61bb      	str	r3, [r7, #24]
 8017974:	e009      	b.n	801798a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8017976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017978:	7fda      	ldrb	r2, [r3, #31]
 801797a:	6a3b      	ldr	r3, [r7, #32]
 801797c:	7fdb      	ldrb	r3, [r3, #31]
 801797e:	429a      	cmp	r2, r3
 8017980:	d803      	bhi.n	801798a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8017982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017984:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8017986:	69fb      	ldr	r3, [r7, #28]
 8017988:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801798a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801798c:	681b      	ldr	r3, [r3, #0]
 801798e:	2b00      	cmp	r3, #0
 8017990:	d001      	beq.n	8017996 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8017992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017994:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8017996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017998:	681b      	ldr	r3, [r3, #0]
 801799a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801799c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801799e:	2b00      	cmp	r3, #0
 80179a0:	d1cb      	bne.n	801793a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80179a2:	6a3b      	ldr	r3, [r7, #32]
 80179a4:	2b00      	cmp	r3, #0
 80179a6:	d008      	beq.n	80179ba <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80179a8:	69b9      	ldr	r1, [r7, #24]
 80179aa:	6a38      	ldr	r0, [r7, #32]
 80179ac:	f7ff ff0e 	bl	80177cc <ip_reass_free_complete_datagram>
 80179b0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80179b2:	697a      	ldr	r2, [r7, #20]
 80179b4:	68fb      	ldr	r3, [r7, #12]
 80179b6:	4413      	add	r3, r2
 80179b8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80179ba:	697a      	ldr	r2, [r7, #20]
 80179bc:	683b      	ldr	r3, [r7, #0]
 80179be:	429a      	cmp	r2, r3
 80179c0:	da02      	bge.n	80179c8 <ip_reass_remove_oldest_datagram+0xb4>
 80179c2:	693b      	ldr	r3, [r7, #16]
 80179c4:	2b01      	cmp	r3, #1
 80179c6:	dcac      	bgt.n	8017922 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80179c8:	697b      	ldr	r3, [r7, #20]
}
 80179ca:	4618      	mov	r0, r3
 80179cc:	3728      	adds	r7, #40	; 0x28
 80179ce:	46bd      	mov	sp, r7
 80179d0:	bd80      	pop	{r7, pc}
 80179d2:	bf00      	nop
 80179d4:	20010ff8 	.word	0x20010ff8

080179d8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80179d8:	b580      	push	{r7, lr}
 80179da:	b084      	sub	sp, #16
 80179dc:	af00      	add	r7, sp, #0
 80179de:	6078      	str	r0, [r7, #4]
 80179e0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80179e2:	2004      	movs	r0, #4
 80179e4:	f7f4 fa80 	bl	800bee8 <memp_malloc>
 80179e8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80179ea:	68fb      	ldr	r3, [r7, #12]
 80179ec:	2b00      	cmp	r3, #0
 80179ee:	d110      	bne.n	8017a12 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80179f0:	6839      	ldr	r1, [r7, #0]
 80179f2:	6878      	ldr	r0, [r7, #4]
 80179f4:	f7ff ff8e 	bl	8017914 <ip_reass_remove_oldest_datagram>
 80179f8:	4602      	mov	r2, r0
 80179fa:	683b      	ldr	r3, [r7, #0]
 80179fc:	4293      	cmp	r3, r2
 80179fe:	dc03      	bgt.n	8017a08 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017a00:	2004      	movs	r0, #4
 8017a02:	f7f4 fa71 	bl	800bee8 <memp_malloc>
 8017a06:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8017a08:	68fb      	ldr	r3, [r7, #12]
 8017a0a:	2b00      	cmp	r3, #0
 8017a0c:	d101      	bne.n	8017a12 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8017a0e:	2300      	movs	r3, #0
 8017a10:	e016      	b.n	8017a40 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8017a12:	2220      	movs	r2, #32
 8017a14:	2100      	movs	r1, #0
 8017a16:	68f8      	ldr	r0, [r7, #12]
 8017a18:	f001 f95d 	bl	8018cd6 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8017a1c:	68fb      	ldr	r3, [r7, #12]
 8017a1e:	220f      	movs	r2, #15
 8017a20:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8017a22:	4b09      	ldr	r3, [pc, #36]	; (8017a48 <ip_reass_enqueue_new_datagram+0x70>)
 8017a24:	681a      	ldr	r2, [r3, #0]
 8017a26:	68fb      	ldr	r3, [r7, #12]
 8017a28:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8017a2a:	4a07      	ldr	r2, [pc, #28]	; (8017a48 <ip_reass_enqueue_new_datagram+0x70>)
 8017a2c:	68fb      	ldr	r3, [r7, #12]
 8017a2e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8017a30:	68fb      	ldr	r3, [r7, #12]
 8017a32:	3308      	adds	r3, #8
 8017a34:	2214      	movs	r2, #20
 8017a36:	6879      	ldr	r1, [r7, #4]
 8017a38:	4618      	mov	r0, r3
 8017a3a:	f001 faad 	bl	8018f98 <memcpy>
  return ipr;
 8017a3e:	68fb      	ldr	r3, [r7, #12]
}
 8017a40:	4618      	mov	r0, r3
 8017a42:	3710      	adds	r7, #16
 8017a44:	46bd      	mov	sp, r7
 8017a46:	bd80      	pop	{r7, pc}
 8017a48:	20010ff8 	.word	0x20010ff8

08017a4c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8017a4c:	b580      	push	{r7, lr}
 8017a4e:	b082      	sub	sp, #8
 8017a50:	af00      	add	r7, sp, #0
 8017a52:	6078      	str	r0, [r7, #4]
 8017a54:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8017a56:	4b10      	ldr	r3, [pc, #64]	; (8017a98 <ip_reass_dequeue_datagram+0x4c>)
 8017a58:	681b      	ldr	r3, [r3, #0]
 8017a5a:	687a      	ldr	r2, [r7, #4]
 8017a5c:	429a      	cmp	r2, r3
 8017a5e:	d104      	bne.n	8017a6a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8017a60:	687b      	ldr	r3, [r7, #4]
 8017a62:	681b      	ldr	r3, [r3, #0]
 8017a64:	4a0c      	ldr	r2, [pc, #48]	; (8017a98 <ip_reass_dequeue_datagram+0x4c>)
 8017a66:	6013      	str	r3, [r2, #0]
 8017a68:	e00d      	b.n	8017a86 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8017a6a:	683b      	ldr	r3, [r7, #0]
 8017a6c:	2b00      	cmp	r3, #0
 8017a6e:	d106      	bne.n	8017a7e <ip_reass_dequeue_datagram+0x32>
 8017a70:	4b0a      	ldr	r3, [pc, #40]	; (8017a9c <ip_reass_dequeue_datagram+0x50>)
 8017a72:	f240 1245 	movw	r2, #325	; 0x145
 8017a76:	490a      	ldr	r1, [pc, #40]	; (8017aa0 <ip_reass_dequeue_datagram+0x54>)
 8017a78:	480a      	ldr	r0, [pc, #40]	; (8017aa4 <ip_reass_dequeue_datagram+0x58>)
 8017a7a:	f001 f88d 	bl	8018b98 <iprintf>
    prev->next = ipr->next;
 8017a7e:	687b      	ldr	r3, [r7, #4]
 8017a80:	681a      	ldr	r2, [r3, #0]
 8017a82:	683b      	ldr	r3, [r7, #0]
 8017a84:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8017a86:	6879      	ldr	r1, [r7, #4]
 8017a88:	2004      	movs	r0, #4
 8017a8a:	f7f4 faa3 	bl	800bfd4 <memp_free>
}
 8017a8e:	bf00      	nop
 8017a90:	3708      	adds	r7, #8
 8017a92:	46bd      	mov	sp, r7
 8017a94:	bd80      	pop	{r7, pc}
 8017a96:	bf00      	nop
 8017a98:	20010ff8 	.word	0x20010ff8
 8017a9c:	0801d898 	.word	0x0801d898
 8017aa0:	0801d960 	.word	0x0801d960
 8017aa4:	0801d8e0 	.word	0x0801d8e0

08017aa8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8017aa8:	b580      	push	{r7, lr}
 8017aaa:	b08c      	sub	sp, #48	; 0x30
 8017aac:	af00      	add	r7, sp, #0
 8017aae:	60f8      	str	r0, [r7, #12]
 8017ab0:	60b9      	str	r1, [r7, #8]
 8017ab2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8017ab4:	2300      	movs	r3, #0
 8017ab6:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8017ab8:	2301      	movs	r3, #1
 8017aba:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8017abc:	68bb      	ldr	r3, [r7, #8]
 8017abe:	685b      	ldr	r3, [r3, #4]
 8017ac0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8017ac2:	69fb      	ldr	r3, [r7, #28]
 8017ac4:	885b      	ldrh	r3, [r3, #2]
 8017ac6:	b29b      	uxth	r3, r3
 8017ac8:	4618      	mov	r0, r3
 8017aca:	f7f3 fcff 	bl	800b4cc <lwip_htons>
 8017ace:	4603      	mov	r3, r0
 8017ad0:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8017ad2:	69fb      	ldr	r3, [r7, #28]
 8017ad4:	781b      	ldrb	r3, [r3, #0]
 8017ad6:	f003 030f 	and.w	r3, r3, #15
 8017ada:	b2db      	uxtb	r3, r3
 8017adc:	009b      	lsls	r3, r3, #2
 8017ade:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8017ae0:	7e7b      	ldrb	r3, [r7, #25]
 8017ae2:	b29b      	uxth	r3, r3
 8017ae4:	8b7a      	ldrh	r2, [r7, #26]
 8017ae6:	429a      	cmp	r2, r3
 8017ae8:	d202      	bcs.n	8017af0 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017aea:	f04f 33ff 	mov.w	r3, #4294967295
 8017aee:	e135      	b.n	8017d5c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8017af0:	7e7b      	ldrb	r3, [r7, #25]
 8017af2:	b29b      	uxth	r3, r3
 8017af4:	8b7a      	ldrh	r2, [r7, #26]
 8017af6:	1ad3      	subs	r3, r2, r3
 8017af8:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8017afa:	69fb      	ldr	r3, [r7, #28]
 8017afc:	88db      	ldrh	r3, [r3, #6]
 8017afe:	b29b      	uxth	r3, r3
 8017b00:	4618      	mov	r0, r3
 8017b02:	f7f3 fce3 	bl	800b4cc <lwip_htons>
 8017b06:	4603      	mov	r3, r0
 8017b08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017b0c:	b29b      	uxth	r3, r3
 8017b0e:	00db      	lsls	r3, r3, #3
 8017b10:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8017b12:	68bb      	ldr	r3, [r7, #8]
 8017b14:	685b      	ldr	r3, [r3, #4]
 8017b16:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8017b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b1a:	2200      	movs	r2, #0
 8017b1c:	701a      	strb	r2, [r3, #0]
 8017b1e:	2200      	movs	r2, #0
 8017b20:	705a      	strb	r2, [r3, #1]
 8017b22:	2200      	movs	r2, #0
 8017b24:	709a      	strb	r2, [r3, #2]
 8017b26:	2200      	movs	r2, #0
 8017b28:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8017b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b2c:	8afa      	ldrh	r2, [r7, #22]
 8017b2e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8017b30:	8afa      	ldrh	r2, [r7, #22]
 8017b32:	8b7b      	ldrh	r3, [r7, #26]
 8017b34:	4413      	add	r3, r2
 8017b36:	b29a      	uxth	r2, r3
 8017b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b3a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8017b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b3e:	88db      	ldrh	r3, [r3, #6]
 8017b40:	b29b      	uxth	r3, r3
 8017b42:	8afa      	ldrh	r2, [r7, #22]
 8017b44:	429a      	cmp	r2, r3
 8017b46:	d902      	bls.n	8017b4e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017b48:	f04f 33ff 	mov.w	r3, #4294967295
 8017b4c:	e106      	b.n	8017d5c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8017b4e:	68fb      	ldr	r3, [r7, #12]
 8017b50:	685b      	ldr	r3, [r3, #4]
 8017b52:	627b      	str	r3, [r7, #36]	; 0x24
 8017b54:	e068      	b.n	8017c28 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8017b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b58:	685b      	ldr	r3, [r3, #4]
 8017b5a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8017b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b5e:	889b      	ldrh	r3, [r3, #4]
 8017b60:	b29a      	uxth	r2, r3
 8017b62:	693b      	ldr	r3, [r7, #16]
 8017b64:	889b      	ldrh	r3, [r3, #4]
 8017b66:	b29b      	uxth	r3, r3
 8017b68:	429a      	cmp	r2, r3
 8017b6a:	d235      	bcs.n	8017bd8 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8017b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017b70:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8017b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b74:	2b00      	cmp	r3, #0
 8017b76:	d020      	beq.n	8017bba <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8017b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b7a:	889b      	ldrh	r3, [r3, #4]
 8017b7c:	b29a      	uxth	r2, r3
 8017b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b80:	88db      	ldrh	r3, [r3, #6]
 8017b82:	b29b      	uxth	r3, r3
 8017b84:	429a      	cmp	r2, r3
 8017b86:	d307      	bcc.n	8017b98 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8017b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b8a:	88db      	ldrh	r3, [r3, #6]
 8017b8c:	b29a      	uxth	r2, r3
 8017b8e:	693b      	ldr	r3, [r7, #16]
 8017b90:	889b      	ldrh	r3, [r3, #4]
 8017b92:	b29b      	uxth	r3, r3
 8017b94:	429a      	cmp	r2, r3
 8017b96:	d902      	bls.n	8017b9e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017b98:	f04f 33ff 	mov.w	r3, #4294967295
 8017b9c:	e0de      	b.n	8017d5c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8017b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ba0:	68ba      	ldr	r2, [r7, #8]
 8017ba2:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8017ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ba6:	88db      	ldrh	r3, [r3, #6]
 8017ba8:	b29a      	uxth	r2, r3
 8017baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017bac:	889b      	ldrh	r3, [r3, #4]
 8017bae:	b29b      	uxth	r3, r3
 8017bb0:	429a      	cmp	r2, r3
 8017bb2:	d03d      	beq.n	8017c30 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8017bb4:	2300      	movs	r3, #0
 8017bb6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8017bb8:	e03a      	b.n	8017c30 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8017bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017bbc:	88db      	ldrh	r3, [r3, #6]
 8017bbe:	b29a      	uxth	r2, r3
 8017bc0:	693b      	ldr	r3, [r7, #16]
 8017bc2:	889b      	ldrh	r3, [r3, #4]
 8017bc4:	b29b      	uxth	r3, r3
 8017bc6:	429a      	cmp	r2, r3
 8017bc8:	d902      	bls.n	8017bd0 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017bca:	f04f 33ff 	mov.w	r3, #4294967295
 8017bce:	e0c5      	b.n	8017d5c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8017bd0:	68fb      	ldr	r3, [r7, #12]
 8017bd2:	68ba      	ldr	r2, [r7, #8]
 8017bd4:	605a      	str	r2, [r3, #4]
      break;
 8017bd6:	e02b      	b.n	8017c30 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8017bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017bda:	889b      	ldrh	r3, [r3, #4]
 8017bdc:	b29a      	uxth	r2, r3
 8017bde:	693b      	ldr	r3, [r7, #16]
 8017be0:	889b      	ldrh	r3, [r3, #4]
 8017be2:	b29b      	uxth	r3, r3
 8017be4:	429a      	cmp	r2, r3
 8017be6:	d102      	bne.n	8017bee <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017be8:	f04f 33ff 	mov.w	r3, #4294967295
 8017bec:	e0b6      	b.n	8017d5c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8017bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017bf0:	889b      	ldrh	r3, [r3, #4]
 8017bf2:	b29a      	uxth	r2, r3
 8017bf4:	693b      	ldr	r3, [r7, #16]
 8017bf6:	88db      	ldrh	r3, [r3, #6]
 8017bf8:	b29b      	uxth	r3, r3
 8017bfa:	429a      	cmp	r2, r3
 8017bfc:	d202      	bcs.n	8017c04 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8017c02:	e0ab      	b.n	8017d5c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8017c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c06:	2b00      	cmp	r3, #0
 8017c08:	d009      	beq.n	8017c1e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8017c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c0c:	88db      	ldrh	r3, [r3, #6]
 8017c0e:	b29a      	uxth	r2, r3
 8017c10:	693b      	ldr	r3, [r7, #16]
 8017c12:	889b      	ldrh	r3, [r3, #4]
 8017c14:	b29b      	uxth	r3, r3
 8017c16:	429a      	cmp	r2, r3
 8017c18:	d001      	beq.n	8017c1e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8017c1a:	2300      	movs	r3, #0
 8017c1c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8017c1e:	693b      	ldr	r3, [r7, #16]
 8017c20:	681b      	ldr	r3, [r3, #0]
 8017c22:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8017c24:	693b      	ldr	r3, [r7, #16]
 8017c26:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8017c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c2a:	2b00      	cmp	r3, #0
 8017c2c:	d193      	bne.n	8017b56 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8017c2e:	e000      	b.n	8017c32 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8017c30:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8017c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c34:	2b00      	cmp	r3, #0
 8017c36:	d12d      	bne.n	8017c94 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8017c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c3a:	2b00      	cmp	r3, #0
 8017c3c:	d01c      	beq.n	8017c78 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8017c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c40:	88db      	ldrh	r3, [r3, #6]
 8017c42:	b29a      	uxth	r2, r3
 8017c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c46:	889b      	ldrh	r3, [r3, #4]
 8017c48:	b29b      	uxth	r3, r3
 8017c4a:	429a      	cmp	r2, r3
 8017c4c:	d906      	bls.n	8017c5c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8017c4e:	4b45      	ldr	r3, [pc, #276]	; (8017d64 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017c50:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8017c54:	4944      	ldr	r1, [pc, #272]	; (8017d68 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8017c56:	4845      	ldr	r0, [pc, #276]	; (8017d6c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017c58:	f000 ff9e 	bl	8018b98 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8017c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c5e:	68ba      	ldr	r2, [r7, #8]
 8017c60:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8017c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c64:	88db      	ldrh	r3, [r3, #6]
 8017c66:	b29a      	uxth	r2, r3
 8017c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c6a:	889b      	ldrh	r3, [r3, #4]
 8017c6c:	b29b      	uxth	r3, r3
 8017c6e:	429a      	cmp	r2, r3
 8017c70:	d010      	beq.n	8017c94 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8017c72:	2300      	movs	r3, #0
 8017c74:	623b      	str	r3, [r7, #32]
 8017c76:	e00d      	b.n	8017c94 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8017c78:	68fb      	ldr	r3, [r7, #12]
 8017c7a:	685b      	ldr	r3, [r3, #4]
 8017c7c:	2b00      	cmp	r3, #0
 8017c7e:	d006      	beq.n	8017c8e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8017c80:	4b38      	ldr	r3, [pc, #224]	; (8017d64 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017c82:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8017c86:	493a      	ldr	r1, [pc, #232]	; (8017d70 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8017c88:	4838      	ldr	r0, [pc, #224]	; (8017d6c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017c8a:	f000 ff85 	bl	8018b98 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8017c8e:	68fb      	ldr	r3, [r7, #12]
 8017c90:	68ba      	ldr	r2, [r7, #8]
 8017c92:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8017c94:	687b      	ldr	r3, [r7, #4]
 8017c96:	2b00      	cmp	r3, #0
 8017c98:	d105      	bne.n	8017ca6 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8017c9a:	68fb      	ldr	r3, [r7, #12]
 8017c9c:	7f9b      	ldrb	r3, [r3, #30]
 8017c9e:	f003 0301 	and.w	r3, r3, #1
 8017ca2:	2b00      	cmp	r3, #0
 8017ca4:	d059      	beq.n	8017d5a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8017ca6:	6a3b      	ldr	r3, [r7, #32]
 8017ca8:	2b00      	cmp	r3, #0
 8017caa:	d04f      	beq.n	8017d4c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8017cac:	68fb      	ldr	r3, [r7, #12]
 8017cae:	685b      	ldr	r3, [r3, #4]
 8017cb0:	2b00      	cmp	r3, #0
 8017cb2:	d006      	beq.n	8017cc2 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8017cb4:	68fb      	ldr	r3, [r7, #12]
 8017cb6:	685b      	ldr	r3, [r3, #4]
 8017cb8:	685b      	ldr	r3, [r3, #4]
 8017cba:	889b      	ldrh	r3, [r3, #4]
 8017cbc:	b29b      	uxth	r3, r3
 8017cbe:	2b00      	cmp	r3, #0
 8017cc0:	d002      	beq.n	8017cc8 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8017cc2:	2300      	movs	r3, #0
 8017cc4:	623b      	str	r3, [r7, #32]
 8017cc6:	e041      	b.n	8017d4c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8017cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017cca:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8017ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017cce:	681b      	ldr	r3, [r3, #0]
 8017cd0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8017cd2:	e012      	b.n	8017cfa <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8017cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cd6:	685b      	ldr	r3, [r3, #4]
 8017cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8017cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017cdc:	88db      	ldrh	r3, [r3, #6]
 8017cde:	b29a      	uxth	r2, r3
 8017ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ce2:	889b      	ldrh	r3, [r3, #4]
 8017ce4:	b29b      	uxth	r3, r3
 8017ce6:	429a      	cmp	r2, r3
 8017ce8:	d002      	beq.n	8017cf0 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8017cea:	2300      	movs	r3, #0
 8017cec:	623b      	str	r3, [r7, #32]
            break;
 8017cee:	e007      	b.n	8017d00 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8017cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017cf2:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8017cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017cf6:	681b      	ldr	r3, [r3, #0]
 8017cf8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8017cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cfc:	2b00      	cmp	r3, #0
 8017cfe:	d1e9      	bne.n	8017cd4 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8017d00:	6a3b      	ldr	r3, [r7, #32]
 8017d02:	2b00      	cmp	r3, #0
 8017d04:	d022      	beq.n	8017d4c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8017d06:	68fb      	ldr	r3, [r7, #12]
 8017d08:	685b      	ldr	r3, [r3, #4]
 8017d0a:	2b00      	cmp	r3, #0
 8017d0c:	d106      	bne.n	8017d1c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8017d0e:	4b15      	ldr	r3, [pc, #84]	; (8017d64 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017d10:	f240 12df 	movw	r2, #479	; 0x1df
 8017d14:	4917      	ldr	r1, [pc, #92]	; (8017d74 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8017d16:	4815      	ldr	r0, [pc, #84]	; (8017d6c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017d18:	f000 ff3e 	bl	8018b98 <iprintf>
          LWIP_ASSERT("sanity check",
 8017d1c:	68fb      	ldr	r3, [r7, #12]
 8017d1e:	685b      	ldr	r3, [r3, #4]
 8017d20:	685b      	ldr	r3, [r3, #4]
 8017d22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017d24:	429a      	cmp	r2, r3
 8017d26:	d106      	bne.n	8017d36 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8017d28:	4b0e      	ldr	r3, [pc, #56]	; (8017d64 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017d2a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8017d2e:	4911      	ldr	r1, [pc, #68]	; (8017d74 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8017d30:	480e      	ldr	r0, [pc, #56]	; (8017d6c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017d32:	f000 ff31 	bl	8018b98 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8017d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d38:	681b      	ldr	r3, [r3, #0]
 8017d3a:	2b00      	cmp	r3, #0
 8017d3c:	d006      	beq.n	8017d4c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8017d3e:	4b09      	ldr	r3, [pc, #36]	; (8017d64 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017d40:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8017d44:	490c      	ldr	r1, [pc, #48]	; (8017d78 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8017d46:	4809      	ldr	r0, [pc, #36]	; (8017d6c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017d48:	f000 ff26 	bl	8018b98 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8017d4c:	6a3b      	ldr	r3, [r7, #32]
 8017d4e:	2b00      	cmp	r3, #0
 8017d50:	bf14      	ite	ne
 8017d52:	2301      	movne	r3, #1
 8017d54:	2300      	moveq	r3, #0
 8017d56:	b2db      	uxtb	r3, r3
 8017d58:	e000      	b.n	8017d5c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8017d5a:	2300      	movs	r3, #0
}
 8017d5c:	4618      	mov	r0, r3
 8017d5e:	3730      	adds	r7, #48	; 0x30
 8017d60:	46bd      	mov	sp, r7
 8017d62:	bd80      	pop	{r7, pc}
 8017d64:	0801d898 	.word	0x0801d898
 8017d68:	0801d97c 	.word	0x0801d97c
 8017d6c:	0801d8e0 	.word	0x0801d8e0
 8017d70:	0801d99c 	.word	0x0801d99c
 8017d74:	0801d9d4 	.word	0x0801d9d4
 8017d78:	0801d9e4 	.word	0x0801d9e4

08017d7c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8017d7c:	b580      	push	{r7, lr}
 8017d7e:	b08e      	sub	sp, #56	; 0x38
 8017d80:	af00      	add	r7, sp, #0
 8017d82:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8017d84:	687b      	ldr	r3, [r7, #4]
 8017d86:	685b      	ldr	r3, [r3, #4]
 8017d88:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8017d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d8c:	781b      	ldrb	r3, [r3, #0]
 8017d8e:	f003 030f 	and.w	r3, r3, #15
 8017d92:	b2db      	uxtb	r3, r3
 8017d94:	009b      	lsls	r3, r3, #2
 8017d96:	b2db      	uxtb	r3, r3
 8017d98:	2b14      	cmp	r3, #20
 8017d9a:	f040 8171 	bne.w	8018080 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8017d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017da0:	88db      	ldrh	r3, [r3, #6]
 8017da2:	b29b      	uxth	r3, r3
 8017da4:	4618      	mov	r0, r3
 8017da6:	f7f3 fb91 	bl	800b4cc <lwip_htons>
 8017daa:	4603      	mov	r3, r0
 8017dac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017db0:	b29b      	uxth	r3, r3
 8017db2:	00db      	lsls	r3, r3, #3
 8017db4:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8017db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017db8:	885b      	ldrh	r3, [r3, #2]
 8017dba:	b29b      	uxth	r3, r3
 8017dbc:	4618      	mov	r0, r3
 8017dbe:	f7f3 fb85 	bl	800b4cc <lwip_htons>
 8017dc2:	4603      	mov	r3, r0
 8017dc4:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8017dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017dc8:	781b      	ldrb	r3, [r3, #0]
 8017dca:	f003 030f 	and.w	r3, r3, #15
 8017dce:	b2db      	uxtb	r3, r3
 8017dd0:	009b      	lsls	r3, r3, #2
 8017dd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8017dd6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017dda:	b29b      	uxth	r3, r3
 8017ddc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017dde:	429a      	cmp	r2, r3
 8017de0:	f0c0 8150 	bcc.w	8018084 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8017de4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017de8:	b29b      	uxth	r3, r3
 8017dea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017dec:	1ad3      	subs	r3, r2, r3
 8017dee:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8017df0:	6878      	ldr	r0, [r7, #4]
 8017df2:	f7f5 f82d 	bl	800ce50 <pbuf_clen>
 8017df6:	4603      	mov	r3, r0
 8017df8:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8017dfa:	4b8c      	ldr	r3, [pc, #560]	; (801802c <ip4_reass+0x2b0>)
 8017dfc:	881b      	ldrh	r3, [r3, #0]
 8017dfe:	461a      	mov	r2, r3
 8017e00:	8c3b      	ldrh	r3, [r7, #32]
 8017e02:	4413      	add	r3, r2
 8017e04:	2b0a      	cmp	r3, #10
 8017e06:	dd10      	ble.n	8017e2a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8017e08:	8c3b      	ldrh	r3, [r7, #32]
 8017e0a:	4619      	mov	r1, r3
 8017e0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017e0e:	f7ff fd81 	bl	8017914 <ip_reass_remove_oldest_datagram>
 8017e12:	4603      	mov	r3, r0
 8017e14:	2b00      	cmp	r3, #0
 8017e16:	f000 8137 	beq.w	8018088 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8017e1a:	4b84      	ldr	r3, [pc, #528]	; (801802c <ip4_reass+0x2b0>)
 8017e1c:	881b      	ldrh	r3, [r3, #0]
 8017e1e:	461a      	mov	r2, r3
 8017e20:	8c3b      	ldrh	r3, [r7, #32]
 8017e22:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8017e24:	2b0a      	cmp	r3, #10
 8017e26:	f300 812f 	bgt.w	8018088 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8017e2a:	4b81      	ldr	r3, [pc, #516]	; (8018030 <ip4_reass+0x2b4>)
 8017e2c:	681b      	ldr	r3, [r3, #0]
 8017e2e:	633b      	str	r3, [r7, #48]	; 0x30
 8017e30:	e015      	b.n	8017e5e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8017e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e34:	695a      	ldr	r2, [r3, #20]
 8017e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e38:	68db      	ldr	r3, [r3, #12]
 8017e3a:	429a      	cmp	r2, r3
 8017e3c:	d10c      	bne.n	8017e58 <ip4_reass+0xdc>
 8017e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e40:	699a      	ldr	r2, [r3, #24]
 8017e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e44:	691b      	ldr	r3, [r3, #16]
 8017e46:	429a      	cmp	r2, r3
 8017e48:	d106      	bne.n	8017e58 <ip4_reass+0xdc>
 8017e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e4c:	899a      	ldrh	r2, [r3, #12]
 8017e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e50:	889b      	ldrh	r3, [r3, #4]
 8017e52:	b29b      	uxth	r3, r3
 8017e54:	429a      	cmp	r2, r3
 8017e56:	d006      	beq.n	8017e66 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8017e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e5a:	681b      	ldr	r3, [r3, #0]
 8017e5c:	633b      	str	r3, [r7, #48]	; 0x30
 8017e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e60:	2b00      	cmp	r3, #0
 8017e62:	d1e6      	bne.n	8017e32 <ip4_reass+0xb6>
 8017e64:	e000      	b.n	8017e68 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8017e66:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8017e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e6a:	2b00      	cmp	r3, #0
 8017e6c:	d109      	bne.n	8017e82 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8017e6e:	8c3b      	ldrh	r3, [r7, #32]
 8017e70:	4619      	mov	r1, r3
 8017e72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017e74:	f7ff fdb0 	bl	80179d8 <ip_reass_enqueue_new_datagram>
 8017e78:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8017e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e7c:	2b00      	cmp	r3, #0
 8017e7e:	d11c      	bne.n	8017eba <ip4_reass+0x13e>
      goto nullreturn;
 8017e80:	e105      	b.n	801808e <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8017e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e84:	88db      	ldrh	r3, [r3, #6]
 8017e86:	b29b      	uxth	r3, r3
 8017e88:	4618      	mov	r0, r3
 8017e8a:	f7f3 fb1f 	bl	800b4cc <lwip_htons>
 8017e8e:	4603      	mov	r3, r0
 8017e90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017e94:	2b00      	cmp	r3, #0
 8017e96:	d110      	bne.n	8017eba <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8017e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e9a:	89db      	ldrh	r3, [r3, #14]
 8017e9c:	4618      	mov	r0, r3
 8017e9e:	f7f3 fb15 	bl	800b4cc <lwip_htons>
 8017ea2:	4603      	mov	r3, r0
 8017ea4:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8017ea8:	2b00      	cmp	r3, #0
 8017eaa:	d006      	beq.n	8017eba <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8017eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017eae:	3308      	adds	r3, #8
 8017eb0:	2214      	movs	r2, #20
 8017eb2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017eb4:	4618      	mov	r0, r3
 8017eb6:	f001 f86f 	bl	8018f98 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8017eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ebc:	88db      	ldrh	r3, [r3, #6]
 8017ebe:	b29b      	uxth	r3, r3
 8017ec0:	f003 0320 	and.w	r3, r3, #32
 8017ec4:	2b00      	cmp	r3, #0
 8017ec6:	bf0c      	ite	eq
 8017ec8:	2301      	moveq	r3, #1
 8017eca:	2300      	movne	r3, #0
 8017ecc:	b2db      	uxtb	r3, r3
 8017ece:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8017ed0:	69fb      	ldr	r3, [r7, #28]
 8017ed2:	2b00      	cmp	r3, #0
 8017ed4:	d00e      	beq.n	8017ef4 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8017ed6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8017ed8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017eda:	4413      	add	r3, r2
 8017edc:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8017ede:	8b7a      	ldrh	r2, [r7, #26]
 8017ee0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8017ee2:	429a      	cmp	r2, r3
 8017ee4:	f0c0 80a0 	bcc.w	8018028 <ip4_reass+0x2ac>
 8017ee8:	8b7b      	ldrh	r3, [r7, #26]
 8017eea:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8017eee:	4293      	cmp	r3, r2
 8017ef0:	f200 809a 	bhi.w	8018028 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8017ef4:	69fa      	ldr	r2, [r7, #28]
 8017ef6:	6879      	ldr	r1, [r7, #4]
 8017ef8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017efa:	f7ff fdd5 	bl	8017aa8 <ip_reass_chain_frag_into_datagram_and_validate>
 8017efe:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8017f00:	697b      	ldr	r3, [r7, #20]
 8017f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017f06:	f000 809b 	beq.w	8018040 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8017f0a:	4b48      	ldr	r3, [pc, #288]	; (801802c <ip4_reass+0x2b0>)
 8017f0c:	881a      	ldrh	r2, [r3, #0]
 8017f0e:	8c3b      	ldrh	r3, [r7, #32]
 8017f10:	4413      	add	r3, r2
 8017f12:	b29a      	uxth	r2, r3
 8017f14:	4b45      	ldr	r3, [pc, #276]	; (801802c <ip4_reass+0x2b0>)
 8017f16:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8017f18:	69fb      	ldr	r3, [r7, #28]
 8017f1a:	2b00      	cmp	r3, #0
 8017f1c:	d00d      	beq.n	8017f3a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8017f1e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8017f20:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017f22:	4413      	add	r3, r2
 8017f24:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8017f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f28:	8a7a      	ldrh	r2, [r7, #18]
 8017f2a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8017f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f2e:	7f9b      	ldrb	r3, [r3, #30]
 8017f30:	f043 0301 	orr.w	r3, r3, #1
 8017f34:	b2da      	uxtb	r2, r3
 8017f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f38:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8017f3a:	697b      	ldr	r3, [r7, #20]
 8017f3c:	2b01      	cmp	r3, #1
 8017f3e:	d171      	bne.n	8018024 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8017f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f42:	8b9b      	ldrh	r3, [r3, #28]
 8017f44:	3314      	adds	r3, #20
 8017f46:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8017f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f4a:	685b      	ldr	r3, [r3, #4]
 8017f4c:	685b      	ldr	r3, [r3, #4]
 8017f4e:	681b      	ldr	r3, [r3, #0]
 8017f50:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8017f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f54:	685b      	ldr	r3, [r3, #4]
 8017f56:	685b      	ldr	r3, [r3, #4]
 8017f58:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8017f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f5c:	3308      	adds	r3, #8
 8017f5e:	2214      	movs	r2, #20
 8017f60:	4619      	mov	r1, r3
 8017f62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017f64:	f001 f818 	bl	8018f98 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8017f68:	8a3b      	ldrh	r3, [r7, #16]
 8017f6a:	4618      	mov	r0, r3
 8017f6c:	f7f3 faae 	bl	800b4cc <lwip_htons>
 8017f70:	4603      	mov	r3, r0
 8017f72:	461a      	mov	r2, r3
 8017f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f76:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8017f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f7a:	2200      	movs	r2, #0
 8017f7c:	719a      	strb	r2, [r3, #6]
 8017f7e:	2200      	movs	r2, #0
 8017f80:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8017f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f84:	2200      	movs	r2, #0
 8017f86:	729a      	strb	r2, [r3, #10]
 8017f88:	2200      	movs	r2, #0
 8017f8a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8017f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f8e:	685b      	ldr	r3, [r3, #4]
 8017f90:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8017f92:	e00d      	b.n	8017fb0 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8017f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017f96:	685b      	ldr	r3, [r3, #4]
 8017f98:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8017f9a:	2114      	movs	r1, #20
 8017f9c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8017f9e:	f7f4 fe43 	bl	800cc28 <pbuf_remove_header>
      pbuf_cat(p, r);
 8017fa2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017fa4:	6878      	ldr	r0, [r7, #4]
 8017fa6:	f7f4 ff93 	bl	800ced0 <pbuf_cat>
      r = iprh->next_pbuf;
 8017faa:	68fb      	ldr	r3, [r7, #12]
 8017fac:	681b      	ldr	r3, [r3, #0]
 8017fae:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8017fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017fb2:	2b00      	cmp	r3, #0
 8017fb4:	d1ee      	bne.n	8017f94 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8017fb6:	4b1e      	ldr	r3, [pc, #120]	; (8018030 <ip4_reass+0x2b4>)
 8017fb8:	681b      	ldr	r3, [r3, #0]
 8017fba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017fbc:	429a      	cmp	r2, r3
 8017fbe:	d102      	bne.n	8017fc6 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8017fc0:	2300      	movs	r3, #0
 8017fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017fc4:	e010      	b.n	8017fe8 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8017fc6:	4b1a      	ldr	r3, [pc, #104]	; (8018030 <ip4_reass+0x2b4>)
 8017fc8:	681b      	ldr	r3, [r3, #0]
 8017fca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017fcc:	e007      	b.n	8017fde <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8017fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fd0:	681b      	ldr	r3, [r3, #0]
 8017fd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017fd4:	429a      	cmp	r2, r3
 8017fd6:	d006      	beq.n	8017fe6 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8017fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fda:	681b      	ldr	r3, [r3, #0]
 8017fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fe0:	2b00      	cmp	r3, #0
 8017fe2:	d1f4      	bne.n	8017fce <ip4_reass+0x252>
 8017fe4:	e000      	b.n	8017fe8 <ip4_reass+0x26c>
          break;
 8017fe6:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8017fe8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017fea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017fec:	f7ff fd2e 	bl	8017a4c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8017ff0:	6878      	ldr	r0, [r7, #4]
 8017ff2:	f7f4 ff2d 	bl	800ce50 <pbuf_clen>
 8017ff6:	4603      	mov	r3, r0
 8017ff8:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8017ffa:	4b0c      	ldr	r3, [pc, #48]	; (801802c <ip4_reass+0x2b0>)
 8017ffc:	881b      	ldrh	r3, [r3, #0]
 8017ffe:	8c3a      	ldrh	r2, [r7, #32]
 8018000:	429a      	cmp	r2, r3
 8018002:	d906      	bls.n	8018012 <ip4_reass+0x296>
 8018004:	4b0b      	ldr	r3, [pc, #44]	; (8018034 <ip4_reass+0x2b8>)
 8018006:	f240 229b 	movw	r2, #667	; 0x29b
 801800a:	490b      	ldr	r1, [pc, #44]	; (8018038 <ip4_reass+0x2bc>)
 801800c:	480b      	ldr	r0, [pc, #44]	; (801803c <ip4_reass+0x2c0>)
 801800e:	f000 fdc3 	bl	8018b98 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8018012:	4b06      	ldr	r3, [pc, #24]	; (801802c <ip4_reass+0x2b0>)
 8018014:	881a      	ldrh	r2, [r3, #0]
 8018016:	8c3b      	ldrh	r3, [r7, #32]
 8018018:	1ad3      	subs	r3, r2, r3
 801801a:	b29a      	uxth	r2, r3
 801801c:	4b03      	ldr	r3, [pc, #12]	; (801802c <ip4_reass+0x2b0>)
 801801e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8018020:	687b      	ldr	r3, [r7, #4]
 8018022:	e038      	b.n	8018096 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8018024:	2300      	movs	r3, #0
 8018026:	e036      	b.n	8018096 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8018028:	bf00      	nop
 801802a:	e00a      	b.n	8018042 <ip4_reass+0x2c6>
 801802c:	20010ffc 	.word	0x20010ffc
 8018030:	20010ff8 	.word	0x20010ff8
 8018034:	0801d898 	.word	0x0801d898
 8018038:	0801da08 	.word	0x0801da08
 801803c:	0801d8e0 	.word	0x0801d8e0
    goto nullreturn_ipr;
 8018040:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8018042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018044:	2b00      	cmp	r3, #0
 8018046:	d106      	bne.n	8018056 <ip4_reass+0x2da>
 8018048:	4b15      	ldr	r3, [pc, #84]	; (80180a0 <ip4_reass+0x324>)
 801804a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801804e:	4915      	ldr	r1, [pc, #84]	; (80180a4 <ip4_reass+0x328>)
 8018050:	4815      	ldr	r0, [pc, #84]	; (80180a8 <ip4_reass+0x32c>)
 8018052:	f000 fda1 	bl	8018b98 <iprintf>
  if (ipr->p == NULL) {
 8018056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018058:	685b      	ldr	r3, [r3, #4]
 801805a:	2b00      	cmp	r3, #0
 801805c:	d116      	bne.n	801808c <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801805e:	4b13      	ldr	r3, [pc, #76]	; (80180ac <ip4_reass+0x330>)
 8018060:	681b      	ldr	r3, [r3, #0]
 8018062:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018064:	429a      	cmp	r2, r3
 8018066:	d006      	beq.n	8018076 <ip4_reass+0x2fa>
 8018068:	4b0d      	ldr	r3, [pc, #52]	; (80180a0 <ip4_reass+0x324>)
 801806a:	f240 22ab 	movw	r2, #683	; 0x2ab
 801806e:	4910      	ldr	r1, [pc, #64]	; (80180b0 <ip4_reass+0x334>)
 8018070:	480d      	ldr	r0, [pc, #52]	; (80180a8 <ip4_reass+0x32c>)
 8018072:	f000 fd91 	bl	8018b98 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8018076:	2100      	movs	r1, #0
 8018078:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801807a:	f7ff fce7 	bl	8017a4c <ip_reass_dequeue_datagram>
 801807e:	e006      	b.n	801808e <ip4_reass+0x312>
    goto nullreturn;
 8018080:	bf00      	nop
 8018082:	e004      	b.n	801808e <ip4_reass+0x312>
    goto nullreturn;
 8018084:	bf00      	nop
 8018086:	e002      	b.n	801808e <ip4_reass+0x312>
      goto nullreturn;
 8018088:	bf00      	nop
 801808a:	e000      	b.n	801808e <ip4_reass+0x312>
  }

nullreturn:
 801808c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801808e:	6878      	ldr	r0, [r7, #4]
 8018090:	f7f4 fe50 	bl	800cd34 <pbuf_free>
  return NULL;
 8018094:	2300      	movs	r3, #0
}
 8018096:	4618      	mov	r0, r3
 8018098:	3738      	adds	r7, #56	; 0x38
 801809a:	46bd      	mov	sp, r7
 801809c:	bd80      	pop	{r7, pc}
 801809e:	bf00      	nop
 80180a0:	0801d898 	.word	0x0801d898
 80180a4:	0801da24 	.word	0x0801da24
 80180a8:	0801d8e0 	.word	0x0801d8e0
 80180ac:	20010ff8 	.word	0x20010ff8
 80180b0:	0801da30 	.word	0x0801da30

080180b4 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80180b4:	b580      	push	{r7, lr}
 80180b6:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80180b8:	2005      	movs	r0, #5
 80180ba:	f7f3 ff15 	bl	800bee8 <memp_malloc>
 80180be:	4603      	mov	r3, r0
}
 80180c0:	4618      	mov	r0, r3
 80180c2:	bd80      	pop	{r7, pc}

080180c4 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80180c4:	b580      	push	{r7, lr}
 80180c6:	b082      	sub	sp, #8
 80180c8:	af00      	add	r7, sp, #0
 80180ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80180cc:	687b      	ldr	r3, [r7, #4]
 80180ce:	2b00      	cmp	r3, #0
 80180d0:	d106      	bne.n	80180e0 <ip_frag_free_pbuf_custom_ref+0x1c>
 80180d2:	4b07      	ldr	r3, [pc, #28]	; (80180f0 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80180d4:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80180d8:	4906      	ldr	r1, [pc, #24]	; (80180f4 <ip_frag_free_pbuf_custom_ref+0x30>)
 80180da:	4807      	ldr	r0, [pc, #28]	; (80180f8 <ip_frag_free_pbuf_custom_ref+0x34>)
 80180dc:	f000 fd5c 	bl	8018b98 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80180e0:	6879      	ldr	r1, [r7, #4]
 80180e2:	2005      	movs	r0, #5
 80180e4:	f7f3 ff76 	bl	800bfd4 <memp_free>
}
 80180e8:	bf00      	nop
 80180ea:	3708      	adds	r7, #8
 80180ec:	46bd      	mov	sp, r7
 80180ee:	bd80      	pop	{r7, pc}
 80180f0:	0801d898 	.word	0x0801d898
 80180f4:	0801da50 	.word	0x0801da50
 80180f8:	0801d8e0 	.word	0x0801d8e0

080180fc <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80180fc:	b580      	push	{r7, lr}
 80180fe:	b084      	sub	sp, #16
 8018100:	af00      	add	r7, sp, #0
 8018102:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8018104:	687b      	ldr	r3, [r7, #4]
 8018106:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8018108:	68fb      	ldr	r3, [r7, #12]
 801810a:	2b00      	cmp	r3, #0
 801810c:	d106      	bne.n	801811c <ipfrag_free_pbuf_custom+0x20>
 801810e:	4b11      	ldr	r3, [pc, #68]	; (8018154 <ipfrag_free_pbuf_custom+0x58>)
 8018110:	f240 22ce 	movw	r2, #718	; 0x2ce
 8018114:	4910      	ldr	r1, [pc, #64]	; (8018158 <ipfrag_free_pbuf_custom+0x5c>)
 8018116:	4811      	ldr	r0, [pc, #68]	; (801815c <ipfrag_free_pbuf_custom+0x60>)
 8018118:	f000 fd3e 	bl	8018b98 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801811c:	68fa      	ldr	r2, [r7, #12]
 801811e:	687b      	ldr	r3, [r7, #4]
 8018120:	429a      	cmp	r2, r3
 8018122:	d006      	beq.n	8018132 <ipfrag_free_pbuf_custom+0x36>
 8018124:	4b0b      	ldr	r3, [pc, #44]	; (8018154 <ipfrag_free_pbuf_custom+0x58>)
 8018126:	f240 22cf 	movw	r2, #719	; 0x2cf
 801812a:	490d      	ldr	r1, [pc, #52]	; (8018160 <ipfrag_free_pbuf_custom+0x64>)
 801812c:	480b      	ldr	r0, [pc, #44]	; (801815c <ipfrag_free_pbuf_custom+0x60>)
 801812e:	f000 fd33 	bl	8018b98 <iprintf>
  if (pcr->original != NULL) {
 8018132:	68fb      	ldr	r3, [r7, #12]
 8018134:	695b      	ldr	r3, [r3, #20]
 8018136:	2b00      	cmp	r3, #0
 8018138:	d004      	beq.n	8018144 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801813a:	68fb      	ldr	r3, [r7, #12]
 801813c:	695b      	ldr	r3, [r3, #20]
 801813e:	4618      	mov	r0, r3
 8018140:	f7f4 fdf8 	bl	800cd34 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8018144:	68f8      	ldr	r0, [r7, #12]
 8018146:	f7ff ffbd 	bl	80180c4 <ip_frag_free_pbuf_custom_ref>
}
 801814a:	bf00      	nop
 801814c:	3710      	adds	r7, #16
 801814e:	46bd      	mov	sp, r7
 8018150:	bd80      	pop	{r7, pc}
 8018152:	bf00      	nop
 8018154:	0801d898 	.word	0x0801d898
 8018158:	0801da5c 	.word	0x0801da5c
 801815c:	0801d8e0 	.word	0x0801d8e0
 8018160:	0801da68 	.word	0x0801da68

08018164 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8018164:	b580      	push	{r7, lr}
 8018166:	b094      	sub	sp, #80	; 0x50
 8018168:	af02      	add	r7, sp, #8
 801816a:	60f8      	str	r0, [r7, #12]
 801816c:	60b9      	str	r1, [r7, #8]
 801816e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8018170:	2300      	movs	r3, #0
 8018172:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8018176:	68bb      	ldr	r3, [r7, #8]
 8018178:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801817a:	3b14      	subs	r3, #20
 801817c:	2b00      	cmp	r3, #0
 801817e:	da00      	bge.n	8018182 <ip4_frag+0x1e>
 8018180:	3307      	adds	r3, #7
 8018182:	10db      	asrs	r3, r3, #3
 8018184:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8018186:	2314      	movs	r3, #20
 8018188:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801818a:	68fb      	ldr	r3, [r7, #12]
 801818c:	685b      	ldr	r3, [r3, #4]
 801818e:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8018190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018192:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8018194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018196:	781b      	ldrb	r3, [r3, #0]
 8018198:	f003 030f 	and.w	r3, r3, #15
 801819c:	b2db      	uxtb	r3, r3
 801819e:	009b      	lsls	r3, r3, #2
 80181a0:	b2db      	uxtb	r3, r3
 80181a2:	2b14      	cmp	r3, #20
 80181a4:	d002      	beq.n	80181ac <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80181a6:	f06f 0305 	mvn.w	r3, #5
 80181aa:	e110      	b.n	80183ce <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80181ac:	68fb      	ldr	r3, [r7, #12]
 80181ae:	895b      	ldrh	r3, [r3, #10]
 80181b0:	2b13      	cmp	r3, #19
 80181b2:	d809      	bhi.n	80181c8 <ip4_frag+0x64>
 80181b4:	4b88      	ldr	r3, [pc, #544]	; (80183d8 <ip4_frag+0x274>)
 80181b6:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80181ba:	4988      	ldr	r1, [pc, #544]	; (80183dc <ip4_frag+0x278>)
 80181bc:	4888      	ldr	r0, [pc, #544]	; (80183e0 <ip4_frag+0x27c>)
 80181be:	f000 fceb 	bl	8018b98 <iprintf>
 80181c2:	f06f 0305 	mvn.w	r3, #5
 80181c6:	e102      	b.n	80183ce <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80181c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80181ca:	88db      	ldrh	r3, [r3, #6]
 80181cc:	b29b      	uxth	r3, r3
 80181ce:	4618      	mov	r0, r3
 80181d0:	f7f3 f97c 	bl	800b4cc <lwip_htons>
 80181d4:	4603      	mov	r3, r0
 80181d6:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80181d8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80181da:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80181de:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80181e2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80181e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80181e8:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80181ea:	68fb      	ldr	r3, [r7, #12]
 80181ec:	891b      	ldrh	r3, [r3, #8]
 80181ee:	3b14      	subs	r3, #20
 80181f0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80181f4:	e0e1      	b.n	80183ba <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80181f6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80181f8:	00db      	lsls	r3, r3, #3
 80181fa:	b29b      	uxth	r3, r3
 80181fc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018200:	4293      	cmp	r3, r2
 8018202:	bf28      	it	cs
 8018204:	4613      	movcs	r3, r2
 8018206:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8018208:	f44f 7220 	mov.w	r2, #640	; 0x280
 801820c:	2114      	movs	r1, #20
 801820e:	200e      	movs	r0, #14
 8018210:	f7f4 faac 	bl	800c76c <pbuf_alloc>
 8018214:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8018216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018218:	2b00      	cmp	r3, #0
 801821a:	f000 80d5 	beq.w	80183c8 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801821e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018220:	895b      	ldrh	r3, [r3, #10]
 8018222:	2b13      	cmp	r3, #19
 8018224:	d806      	bhi.n	8018234 <ip4_frag+0xd0>
 8018226:	4b6c      	ldr	r3, [pc, #432]	; (80183d8 <ip4_frag+0x274>)
 8018228:	f44f 7249 	mov.w	r2, #804	; 0x324
 801822c:	496d      	ldr	r1, [pc, #436]	; (80183e4 <ip4_frag+0x280>)
 801822e:	486c      	ldr	r0, [pc, #432]	; (80183e0 <ip4_frag+0x27c>)
 8018230:	f000 fcb2 	bl	8018b98 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8018234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018236:	685b      	ldr	r3, [r3, #4]
 8018238:	2214      	movs	r2, #20
 801823a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801823c:	4618      	mov	r0, r3
 801823e:	f000 feab 	bl	8018f98 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8018242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018244:	685b      	ldr	r3, [r3, #4]
 8018246:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8018248:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801824a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801824e:	e064      	b.n	801831a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8018250:	68fb      	ldr	r3, [r7, #12]
 8018252:	895a      	ldrh	r2, [r3, #10]
 8018254:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018256:	1ad3      	subs	r3, r2, r3
 8018258:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801825a:	68fb      	ldr	r3, [r7, #12]
 801825c:	895b      	ldrh	r3, [r3, #10]
 801825e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8018260:	429a      	cmp	r2, r3
 8018262:	d906      	bls.n	8018272 <ip4_frag+0x10e>
 8018264:	4b5c      	ldr	r3, [pc, #368]	; (80183d8 <ip4_frag+0x274>)
 8018266:	f240 322d 	movw	r2, #813	; 0x32d
 801826a:	495f      	ldr	r1, [pc, #380]	; (80183e8 <ip4_frag+0x284>)
 801826c:	485c      	ldr	r0, [pc, #368]	; (80183e0 <ip4_frag+0x27c>)
 801826e:	f000 fc93 	bl	8018b98 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8018272:	8bfa      	ldrh	r2, [r7, #30]
 8018274:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018278:	4293      	cmp	r3, r2
 801827a:	bf28      	it	cs
 801827c:	4613      	movcs	r3, r2
 801827e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8018282:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018286:	2b00      	cmp	r3, #0
 8018288:	d105      	bne.n	8018296 <ip4_frag+0x132>
        poff = 0;
 801828a:	2300      	movs	r3, #0
 801828c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801828e:	68fb      	ldr	r3, [r7, #12]
 8018290:	681b      	ldr	r3, [r3, #0]
 8018292:	60fb      	str	r3, [r7, #12]
        continue;
 8018294:	e041      	b.n	801831a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8018296:	f7ff ff0d 	bl	80180b4 <ip_frag_alloc_pbuf_custom_ref>
 801829a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801829c:	69bb      	ldr	r3, [r7, #24]
 801829e:	2b00      	cmp	r3, #0
 80182a0:	d103      	bne.n	80182aa <ip4_frag+0x146>
        pbuf_free(rambuf);
 80182a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80182a4:	f7f4 fd46 	bl	800cd34 <pbuf_free>
        goto memerr;
 80182a8:	e08f      	b.n	80183ca <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80182aa:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80182ac:	68fb      	ldr	r3, [r7, #12]
 80182ae:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80182b0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80182b2:	4413      	add	r3, r2
 80182b4:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80182b8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80182bc:	9201      	str	r2, [sp, #4]
 80182be:	9300      	str	r3, [sp, #0]
 80182c0:	4603      	mov	r3, r0
 80182c2:	2241      	movs	r2, #65	; 0x41
 80182c4:	2000      	movs	r0, #0
 80182c6:	f7f4 fb7b 	bl	800c9c0 <pbuf_alloced_custom>
 80182ca:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80182cc:	697b      	ldr	r3, [r7, #20]
 80182ce:	2b00      	cmp	r3, #0
 80182d0:	d106      	bne.n	80182e0 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80182d2:	69b8      	ldr	r0, [r7, #24]
 80182d4:	f7ff fef6 	bl	80180c4 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80182d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80182da:	f7f4 fd2b 	bl	800cd34 <pbuf_free>
        goto memerr;
 80182de:	e074      	b.n	80183ca <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80182e0:	68f8      	ldr	r0, [r7, #12]
 80182e2:	f7f4 fdcd 	bl	800ce80 <pbuf_ref>
      pcr->original = p;
 80182e6:	69bb      	ldr	r3, [r7, #24]
 80182e8:	68fa      	ldr	r2, [r7, #12]
 80182ea:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80182ec:	69bb      	ldr	r3, [r7, #24]
 80182ee:	4a3f      	ldr	r2, [pc, #252]	; (80183ec <ip4_frag+0x288>)
 80182f0:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80182f2:	6979      	ldr	r1, [r7, #20]
 80182f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80182f6:	f7f4 fdeb 	bl	800ced0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80182fa:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80182fe:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018302:	1ad3      	subs	r3, r2, r3
 8018304:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8018308:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801830c:	2b00      	cmp	r3, #0
 801830e:	d004      	beq.n	801831a <ip4_frag+0x1b6>
        poff = 0;
 8018310:	2300      	movs	r3, #0
 8018312:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8018314:	68fb      	ldr	r3, [r7, #12]
 8018316:	681b      	ldr	r3, [r3, #0]
 8018318:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801831a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801831e:	2b00      	cmp	r3, #0
 8018320:	d196      	bne.n	8018250 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8018322:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8018324:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018328:	4413      	add	r3, r2
 801832a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801832c:	68bb      	ldr	r3, [r7, #8]
 801832e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018330:	f1a3 0213 	sub.w	r2, r3, #19
 8018334:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018338:	429a      	cmp	r2, r3
 801833a:	bfcc      	ite	gt
 801833c:	2301      	movgt	r3, #1
 801833e:	2300      	movle	r3, #0
 8018340:	b2db      	uxtb	r3, r3
 8018342:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8018344:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8018348:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801834c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801834e:	6a3b      	ldr	r3, [r7, #32]
 8018350:	2b00      	cmp	r3, #0
 8018352:	d002      	beq.n	801835a <ip4_frag+0x1f6>
 8018354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018356:	2b00      	cmp	r3, #0
 8018358:	d003      	beq.n	8018362 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801835a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801835c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8018360:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8018362:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018364:	4618      	mov	r0, r3
 8018366:	f7f3 f8b1 	bl	800b4cc <lwip_htons>
 801836a:	4603      	mov	r3, r0
 801836c:	461a      	mov	r2, r3
 801836e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018370:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8018372:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018374:	3314      	adds	r3, #20
 8018376:	b29b      	uxth	r3, r3
 8018378:	4618      	mov	r0, r3
 801837a:	f7f3 f8a7 	bl	800b4cc <lwip_htons>
 801837e:	4603      	mov	r3, r0
 8018380:	461a      	mov	r2, r3
 8018382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018384:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8018386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018388:	2200      	movs	r2, #0
 801838a:	729a      	strb	r2, [r3, #10]
 801838c:	2200      	movs	r2, #0
 801838e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8018390:	68bb      	ldr	r3, [r7, #8]
 8018392:	695b      	ldr	r3, [r3, #20]
 8018394:	687a      	ldr	r2, [r7, #4]
 8018396:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018398:	68b8      	ldr	r0, [r7, #8]
 801839a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801839c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801839e:	f7f4 fcc9 	bl	800cd34 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80183a2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80183a6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80183a8:	1ad3      	subs	r3, r2, r3
 80183aa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80183ae:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80183b2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80183b4:	4413      	add	r3, r2
 80183b6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80183ba:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80183be:	2b00      	cmp	r3, #0
 80183c0:	f47f af19 	bne.w	80181f6 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80183c4:	2300      	movs	r3, #0
 80183c6:	e002      	b.n	80183ce <ip4_frag+0x26a>
      goto memerr;
 80183c8:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80183ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80183ce:	4618      	mov	r0, r3
 80183d0:	3748      	adds	r7, #72	; 0x48
 80183d2:	46bd      	mov	sp, r7
 80183d4:	bd80      	pop	{r7, pc}
 80183d6:	bf00      	nop
 80183d8:	0801d898 	.word	0x0801d898
 80183dc:	0801da74 	.word	0x0801da74
 80183e0:	0801d8e0 	.word	0x0801d8e0
 80183e4:	0801da90 	.word	0x0801da90
 80183e8:	0801dab0 	.word	0x0801dab0
 80183ec:	080180fd 	.word	0x080180fd

080183f0 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80183f0:	b580      	push	{r7, lr}
 80183f2:	b086      	sub	sp, #24
 80183f4:	af00      	add	r7, sp, #0
 80183f6:	6078      	str	r0, [r7, #4]
 80183f8:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80183fa:	230e      	movs	r3, #14
 80183fc:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80183fe:	687b      	ldr	r3, [r7, #4]
 8018400:	895b      	ldrh	r3, [r3, #10]
 8018402:	2b0e      	cmp	r3, #14
 8018404:	d96e      	bls.n	80184e4 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8018406:	687b      	ldr	r3, [r7, #4]
 8018408:	7bdb      	ldrb	r3, [r3, #15]
 801840a:	2b00      	cmp	r3, #0
 801840c:	d106      	bne.n	801841c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801840e:	683b      	ldr	r3, [r7, #0]
 8018410:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8018414:	3301      	adds	r3, #1
 8018416:	b2da      	uxtb	r2, r3
 8018418:	687b      	ldr	r3, [r7, #4]
 801841a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801841c:	687b      	ldr	r3, [r7, #4]
 801841e:	685b      	ldr	r3, [r3, #4]
 8018420:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8018422:	693b      	ldr	r3, [r7, #16]
 8018424:	7b1a      	ldrb	r2, [r3, #12]
 8018426:	7b5b      	ldrb	r3, [r3, #13]
 8018428:	021b      	lsls	r3, r3, #8
 801842a:	4313      	orrs	r3, r2
 801842c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801842e:	693b      	ldr	r3, [r7, #16]
 8018430:	781b      	ldrb	r3, [r3, #0]
 8018432:	f003 0301 	and.w	r3, r3, #1
 8018436:	2b00      	cmp	r3, #0
 8018438:	d023      	beq.n	8018482 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801843a:	693b      	ldr	r3, [r7, #16]
 801843c:	781b      	ldrb	r3, [r3, #0]
 801843e:	2b01      	cmp	r3, #1
 8018440:	d10f      	bne.n	8018462 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8018442:	693b      	ldr	r3, [r7, #16]
 8018444:	785b      	ldrb	r3, [r3, #1]
 8018446:	2b00      	cmp	r3, #0
 8018448:	d11b      	bne.n	8018482 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801844a:	693b      	ldr	r3, [r7, #16]
 801844c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801844e:	2b5e      	cmp	r3, #94	; 0x5e
 8018450:	d117      	bne.n	8018482 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8018452:	687b      	ldr	r3, [r7, #4]
 8018454:	7b5b      	ldrb	r3, [r3, #13]
 8018456:	f043 0310 	orr.w	r3, r3, #16
 801845a:	b2da      	uxtb	r2, r3
 801845c:	687b      	ldr	r3, [r7, #4]
 801845e:	735a      	strb	r2, [r3, #13]
 8018460:	e00f      	b.n	8018482 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8018462:	693b      	ldr	r3, [r7, #16]
 8018464:	2206      	movs	r2, #6
 8018466:	4928      	ldr	r1, [pc, #160]	; (8018508 <ethernet_input+0x118>)
 8018468:	4618      	mov	r0, r3
 801846a:	f000 fc0a 	bl	8018c82 <memcmp>
 801846e:	4603      	mov	r3, r0
 8018470:	2b00      	cmp	r3, #0
 8018472:	d106      	bne.n	8018482 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8018474:	687b      	ldr	r3, [r7, #4]
 8018476:	7b5b      	ldrb	r3, [r3, #13]
 8018478:	f043 0308 	orr.w	r3, r3, #8
 801847c:	b2da      	uxtb	r2, r3
 801847e:	687b      	ldr	r3, [r7, #4]
 8018480:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8018482:	89fb      	ldrh	r3, [r7, #14]
 8018484:	2b08      	cmp	r3, #8
 8018486:	d003      	beq.n	8018490 <ethernet_input+0xa0>
 8018488:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801848c:	d014      	beq.n	80184b8 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801848e:	e032      	b.n	80184f6 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018490:	683b      	ldr	r3, [r7, #0]
 8018492:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018496:	f003 0308 	and.w	r3, r3, #8
 801849a:	2b00      	cmp	r3, #0
 801849c:	d024      	beq.n	80184e8 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801849e:	8afb      	ldrh	r3, [r7, #22]
 80184a0:	4619      	mov	r1, r3
 80184a2:	6878      	ldr	r0, [r7, #4]
 80184a4:	f7f4 fbc0 	bl	800cc28 <pbuf_remove_header>
 80184a8:	4603      	mov	r3, r0
 80184aa:	2b00      	cmp	r3, #0
 80184ac:	d11e      	bne.n	80184ec <ethernet_input+0xfc>
        ip4_input(p, netif);
 80184ae:	6839      	ldr	r1, [r7, #0]
 80184b0:	6878      	ldr	r0, [r7, #4]
 80184b2:	f7fe ff03 	bl	80172bc <ip4_input>
      break;
 80184b6:	e013      	b.n	80184e0 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80184b8:	683b      	ldr	r3, [r7, #0]
 80184ba:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80184be:	f003 0308 	and.w	r3, r3, #8
 80184c2:	2b00      	cmp	r3, #0
 80184c4:	d014      	beq.n	80184f0 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80184c6:	8afb      	ldrh	r3, [r7, #22]
 80184c8:	4619      	mov	r1, r3
 80184ca:	6878      	ldr	r0, [r7, #4]
 80184cc:	f7f4 fbac 	bl	800cc28 <pbuf_remove_header>
 80184d0:	4603      	mov	r3, r0
 80184d2:	2b00      	cmp	r3, #0
 80184d4:	d10e      	bne.n	80184f4 <ethernet_input+0x104>
        etharp_input(p, netif);
 80184d6:	6839      	ldr	r1, [r7, #0]
 80184d8:	6878      	ldr	r0, [r7, #4]
 80184da:	f7fe f89f 	bl	801661c <etharp_input>
      break;
 80184de:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80184e0:	2300      	movs	r3, #0
 80184e2:	e00c      	b.n	80184fe <ethernet_input+0x10e>
    goto free_and_return;
 80184e4:	bf00      	nop
 80184e6:	e006      	b.n	80184f6 <ethernet_input+0x106>
        goto free_and_return;
 80184e8:	bf00      	nop
 80184ea:	e004      	b.n	80184f6 <ethernet_input+0x106>
        goto free_and_return;
 80184ec:	bf00      	nop
 80184ee:	e002      	b.n	80184f6 <ethernet_input+0x106>
        goto free_and_return;
 80184f0:	bf00      	nop
 80184f2:	e000      	b.n	80184f6 <ethernet_input+0x106>
        goto free_and_return;
 80184f4:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80184f6:	6878      	ldr	r0, [r7, #4]
 80184f8:	f7f4 fc1c 	bl	800cd34 <pbuf_free>
  return ERR_OK;
 80184fc:	2300      	movs	r3, #0
}
 80184fe:	4618      	mov	r0, r3
 8018500:	3718      	adds	r7, #24
 8018502:	46bd      	mov	sp, r7
 8018504:	bd80      	pop	{r7, pc}
 8018506:	bf00      	nop
 8018508:	08027ddc 	.word	0x08027ddc

0801850c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801850c:	b580      	push	{r7, lr}
 801850e:	b086      	sub	sp, #24
 8018510:	af00      	add	r7, sp, #0
 8018512:	60f8      	str	r0, [r7, #12]
 8018514:	60b9      	str	r1, [r7, #8]
 8018516:	607a      	str	r2, [r7, #4]
 8018518:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801851a:	8c3b      	ldrh	r3, [r7, #32]
 801851c:	4618      	mov	r0, r3
 801851e:	f7f2 ffd5 	bl	800b4cc <lwip_htons>
 8018522:	4603      	mov	r3, r0
 8018524:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8018526:	210e      	movs	r1, #14
 8018528:	68b8      	ldr	r0, [r7, #8]
 801852a:	f7f4 fb6d 	bl	800cc08 <pbuf_add_header>
 801852e:	4603      	mov	r3, r0
 8018530:	2b00      	cmp	r3, #0
 8018532:	d125      	bne.n	8018580 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8018534:	68bb      	ldr	r3, [r7, #8]
 8018536:	685b      	ldr	r3, [r3, #4]
 8018538:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801853a:	693b      	ldr	r3, [r7, #16]
 801853c:	8afa      	ldrh	r2, [r7, #22]
 801853e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8018540:	693b      	ldr	r3, [r7, #16]
 8018542:	2206      	movs	r2, #6
 8018544:	6839      	ldr	r1, [r7, #0]
 8018546:	4618      	mov	r0, r3
 8018548:	f000 fd26 	bl	8018f98 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801854c:	693b      	ldr	r3, [r7, #16]
 801854e:	3306      	adds	r3, #6
 8018550:	2206      	movs	r2, #6
 8018552:	6879      	ldr	r1, [r7, #4]
 8018554:	4618      	mov	r0, r3
 8018556:	f000 fd1f 	bl	8018f98 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801855a:	68fb      	ldr	r3, [r7, #12]
 801855c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018560:	2b06      	cmp	r3, #6
 8018562:	d006      	beq.n	8018572 <ethernet_output+0x66>
 8018564:	4b0a      	ldr	r3, [pc, #40]	; (8018590 <ethernet_output+0x84>)
 8018566:	f44f 7299 	mov.w	r2, #306	; 0x132
 801856a:	490a      	ldr	r1, [pc, #40]	; (8018594 <ethernet_output+0x88>)
 801856c:	480a      	ldr	r0, [pc, #40]	; (8018598 <ethernet_output+0x8c>)
 801856e:	f000 fb13 	bl	8018b98 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8018572:	68fb      	ldr	r3, [r7, #12]
 8018574:	699b      	ldr	r3, [r3, #24]
 8018576:	68b9      	ldr	r1, [r7, #8]
 8018578:	68f8      	ldr	r0, [r7, #12]
 801857a:	4798      	blx	r3
 801857c:	4603      	mov	r3, r0
 801857e:	e002      	b.n	8018586 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8018580:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8018582:	f06f 0301 	mvn.w	r3, #1
}
 8018586:	4618      	mov	r0, r3
 8018588:	3718      	adds	r7, #24
 801858a:	46bd      	mov	sp, r7
 801858c:	bd80      	pop	{r7, pc}
 801858e:	bf00      	nop
 8018590:	0801dac0 	.word	0x0801dac0
 8018594:	0801daf8 	.word	0x0801daf8
 8018598:	0801db2c 	.word	0x0801db2c

0801859c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801859c:	b580      	push	{r7, lr}
 801859e:	b086      	sub	sp, #24
 80185a0:	af00      	add	r7, sp, #0
 80185a2:	6078      	str	r0, [r7, #4]
 80185a4:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 80185a6:	683b      	ldr	r3, [r7, #0]
 80185a8:	60bb      	str	r3, [r7, #8]
 80185aa:	2304      	movs	r3, #4
 80185ac:	60fb      	str	r3, [r7, #12]
 80185ae:	2300      	movs	r3, #0
 80185b0:	613b      	str	r3, [r7, #16]
 80185b2:	2300      	movs	r3, #0
 80185b4:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 80185b6:	f107 0308 	add.w	r3, r7, #8
 80185ba:	2100      	movs	r1, #0
 80185bc:	4618      	mov	r0, r3
 80185be:	f7ec fee0 	bl	8005382 <osMessageCreate>
 80185c2:	4602      	mov	r2, r0
 80185c4:	687b      	ldr	r3, [r7, #4]
 80185c6:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 80185c8:	687b      	ldr	r3, [r7, #4]
 80185ca:	681b      	ldr	r3, [r3, #0]
 80185cc:	2b00      	cmp	r3, #0
 80185ce:	d102      	bne.n	80185d6 <sys_mbox_new+0x3a>
    return ERR_MEM;
 80185d0:	f04f 33ff 	mov.w	r3, #4294967295
 80185d4:	e000      	b.n	80185d8 <sys_mbox_new+0x3c>

  return ERR_OK;
 80185d6:	2300      	movs	r3, #0
}
 80185d8:	4618      	mov	r0, r3
 80185da:	3718      	adds	r7, #24
 80185dc:	46bd      	mov	sp, r7
 80185de:	bd80      	pop	{r7, pc}

080185e0 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 80185e0:	b580      	push	{r7, lr}
 80185e2:	b082      	sub	sp, #8
 80185e4:	af00      	add	r7, sp, #0
 80185e6:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 80185e8:	687b      	ldr	r3, [r7, #4]
 80185ea:	681b      	ldr	r3, [r3, #0]
 80185ec:	4618      	mov	r0, r3
 80185ee:	f7ec ffa5 	bl	800553c <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 80185f2:	687b      	ldr	r3, [r7, #4]
 80185f4:	681b      	ldr	r3, [r3, #0]
 80185f6:	4618      	mov	r0, r3
 80185f8:	f7ec ffb6 	bl	8005568 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 80185fc:	bf00      	nop
 80185fe:	3708      	adds	r7, #8
 8018600:	46bd      	mov	sp, r7
 8018602:	bd80      	pop	{r7, pc}

08018604 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8018604:	b580      	push	{r7, lr}
 8018606:	b084      	sub	sp, #16
 8018608:	af00      	add	r7, sp, #0
 801860a:	6078      	str	r0, [r7, #4]
 801860c:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801860e:	687b      	ldr	r3, [r7, #4]
 8018610:	681b      	ldr	r3, [r3, #0]
 8018612:	6839      	ldr	r1, [r7, #0]
 8018614:	2200      	movs	r2, #0
 8018616:	4618      	mov	r0, r3
 8018618:	f7ec fedc 	bl	80053d4 <osMessagePut>
 801861c:	4603      	mov	r3, r0
 801861e:	2b00      	cmp	r3, #0
 8018620:	d102      	bne.n	8018628 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8018622:	2300      	movs	r3, #0
 8018624:	73fb      	strb	r3, [r7, #15]
 8018626:	e001      	b.n	801862c <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8018628:	23ff      	movs	r3, #255	; 0xff
 801862a:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801862c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018630:	4618      	mov	r0, r3
 8018632:	3710      	adds	r7, #16
 8018634:	46bd      	mov	sp, r7
 8018636:	bd80      	pop	{r7, pc}

08018638 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8018638:	b580      	push	{r7, lr}
 801863a:	b08c      	sub	sp, #48	; 0x30
 801863c:	af00      	add	r7, sp, #0
 801863e:	61f8      	str	r0, [r7, #28]
 8018640:	61b9      	str	r1, [r7, #24]
 8018642:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8018644:	f7ec fcc8 	bl	8004fd8 <osKernelSysTick>
 8018648:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801864a:	697b      	ldr	r3, [r7, #20]
 801864c:	2b00      	cmp	r3, #0
 801864e:	d017      	beq.n	8018680 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8018650:	69fb      	ldr	r3, [r7, #28]
 8018652:	6819      	ldr	r1, [r3, #0]
 8018654:	f107 0320 	add.w	r3, r7, #32
 8018658:	697a      	ldr	r2, [r7, #20]
 801865a:	4618      	mov	r0, r3
 801865c:	f7ec fefa 	bl	8005454 <osMessageGet>

    if(event.status == osEventMessage)
 8018660:	6a3b      	ldr	r3, [r7, #32]
 8018662:	2b10      	cmp	r3, #16
 8018664:	d109      	bne.n	801867a <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8018666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018668:	461a      	mov	r2, r3
 801866a:	69bb      	ldr	r3, [r7, #24]
 801866c:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801866e:	f7ec fcb3 	bl	8004fd8 <osKernelSysTick>
 8018672:	4602      	mov	r2, r0
 8018674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018676:	1ad3      	subs	r3, r2, r3
 8018678:	e019      	b.n	80186ae <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801867a:	f04f 33ff 	mov.w	r3, #4294967295
 801867e:	e016      	b.n	80186ae <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8018680:	69fb      	ldr	r3, [r7, #28]
 8018682:	6819      	ldr	r1, [r3, #0]
 8018684:	463b      	mov	r3, r7
 8018686:	f04f 32ff 	mov.w	r2, #4294967295
 801868a:	4618      	mov	r0, r3
 801868c:	f7ec fee2 	bl	8005454 <osMessageGet>
 8018690:	f107 0320 	add.w	r3, r7, #32
 8018694:	463a      	mov	r2, r7
 8018696:	ca07      	ldmia	r2, {r0, r1, r2}
 8018698:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801869c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801869e:	461a      	mov	r2, r3
 80186a0:	69bb      	ldr	r3, [r7, #24]
 80186a2:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 80186a4:	f7ec fc98 	bl	8004fd8 <osKernelSysTick>
 80186a8:	4602      	mov	r2, r0
 80186aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186ac:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80186ae:	4618      	mov	r0, r3
 80186b0:	3730      	adds	r7, #48	; 0x30
 80186b2:	46bd      	mov	sp, r7
 80186b4:	bd80      	pop	{r7, pc}

080186b6 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 80186b6:	b580      	push	{r7, lr}
 80186b8:	b086      	sub	sp, #24
 80186ba:	af00      	add	r7, sp, #0
 80186bc:	6078      	str	r0, [r7, #4]
 80186be:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 80186c0:	687b      	ldr	r3, [r7, #4]
 80186c2:	6819      	ldr	r1, [r3, #0]
 80186c4:	f107 030c 	add.w	r3, r7, #12
 80186c8:	2200      	movs	r2, #0
 80186ca:	4618      	mov	r0, r3
 80186cc:	f7ec fec2 	bl	8005454 <osMessageGet>

  if(event.status == osEventMessage)
 80186d0:	68fb      	ldr	r3, [r7, #12]
 80186d2:	2b10      	cmp	r3, #16
 80186d4:	d105      	bne.n	80186e2 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 80186d6:	693b      	ldr	r3, [r7, #16]
 80186d8:	461a      	mov	r2, r3
 80186da:	683b      	ldr	r3, [r7, #0]
 80186dc:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 80186de:	2300      	movs	r3, #0
 80186e0:	e001      	b.n	80186e6 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 80186e2:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 80186e6:	4618      	mov	r0, r3
 80186e8:	3718      	adds	r7, #24
 80186ea:	46bd      	mov	sp, r7
 80186ec:	bd80      	pop	{r7, pc}

080186ee <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 80186ee:	b480      	push	{r7}
 80186f0:	b083      	sub	sp, #12
 80186f2:	af00      	add	r7, sp, #0
 80186f4:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 80186f6:	687b      	ldr	r3, [r7, #4]
 80186f8:	681b      	ldr	r3, [r3, #0]
 80186fa:	2b00      	cmp	r3, #0
 80186fc:	d101      	bne.n	8018702 <sys_mbox_valid+0x14>
    return 0;
 80186fe:	2300      	movs	r3, #0
 8018700:	e000      	b.n	8018704 <sys_mbox_valid+0x16>
  else
    return 1;
 8018702:	2301      	movs	r3, #1
}
 8018704:	4618      	mov	r0, r3
 8018706:	370c      	adds	r7, #12
 8018708:	46bd      	mov	sp, r7
 801870a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801870e:	4770      	bx	lr

08018710 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8018710:	b480      	push	{r7}
 8018712:	b083      	sub	sp, #12
 8018714:	af00      	add	r7, sp, #0
 8018716:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8018718:	687b      	ldr	r3, [r7, #4]
 801871a:	2200      	movs	r2, #0
 801871c:	601a      	str	r2, [r3, #0]
}
 801871e:	bf00      	nop
 8018720:	370c      	adds	r7, #12
 8018722:	46bd      	mov	sp, r7
 8018724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018728:	4770      	bx	lr

0801872a <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801872a:	b580      	push	{r7, lr}
 801872c:	b084      	sub	sp, #16
 801872e:	af00      	add	r7, sp, #0
 8018730:	6078      	str	r0, [r7, #4]
 8018732:	460b      	mov	r3, r1
 8018734:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8018736:	2300      	movs	r3, #0
 8018738:	60bb      	str	r3, [r7, #8]
 801873a:	2300      	movs	r3, #0
 801873c:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 801873e:	f107 0308 	add.w	r3, r7, #8
 8018742:	2101      	movs	r1, #1
 8018744:	4618      	mov	r0, r3
 8018746:	f7ec fd53 	bl	80051f0 <osSemaphoreCreate>
 801874a:	4602      	mov	r2, r0
 801874c:	687b      	ldr	r3, [r7, #4]
 801874e:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8018750:	687b      	ldr	r3, [r7, #4]
 8018752:	681b      	ldr	r3, [r3, #0]
 8018754:	2b00      	cmp	r3, #0
 8018756:	d102      	bne.n	801875e <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8018758:	f04f 33ff 	mov.w	r3, #4294967295
 801875c:	e009      	b.n	8018772 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 801875e:	78fb      	ldrb	r3, [r7, #3]
 8018760:	2b00      	cmp	r3, #0
 8018762:	d105      	bne.n	8018770 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8018764:	687b      	ldr	r3, [r7, #4]
 8018766:	681b      	ldr	r3, [r3, #0]
 8018768:	2100      	movs	r1, #0
 801876a:	4618      	mov	r0, r3
 801876c:	f7ec fd72 	bl	8005254 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8018770:	2300      	movs	r3, #0
}
 8018772:	4618      	mov	r0, r3
 8018774:	3710      	adds	r7, #16
 8018776:	46bd      	mov	sp, r7
 8018778:	bd80      	pop	{r7, pc}

0801877a <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801877a:	b580      	push	{r7, lr}
 801877c:	b084      	sub	sp, #16
 801877e:	af00      	add	r7, sp, #0
 8018780:	6078      	str	r0, [r7, #4]
 8018782:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8018784:	f7ec fc28 	bl	8004fd8 <osKernelSysTick>
 8018788:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801878a:	683b      	ldr	r3, [r7, #0]
 801878c:	2b00      	cmp	r3, #0
 801878e:	d011      	beq.n	80187b4 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8018790:	687b      	ldr	r3, [r7, #4]
 8018792:	681b      	ldr	r3, [r3, #0]
 8018794:	6839      	ldr	r1, [r7, #0]
 8018796:	4618      	mov	r0, r3
 8018798:	f7ec fd5c 	bl	8005254 <osSemaphoreWait>
 801879c:	4603      	mov	r3, r0
 801879e:	2b00      	cmp	r3, #0
 80187a0:	d105      	bne.n	80187ae <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 80187a2:	f7ec fc19 	bl	8004fd8 <osKernelSysTick>
 80187a6:	4602      	mov	r2, r0
 80187a8:	68fb      	ldr	r3, [r7, #12]
 80187aa:	1ad3      	subs	r3, r2, r3
 80187ac:	e012      	b.n	80187d4 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 80187ae:	f04f 33ff 	mov.w	r3, #4294967295
 80187b2:	e00f      	b.n	80187d4 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 80187b4:	bf00      	nop
 80187b6:	687b      	ldr	r3, [r7, #4]
 80187b8:	681b      	ldr	r3, [r3, #0]
 80187ba:	f04f 31ff 	mov.w	r1, #4294967295
 80187be:	4618      	mov	r0, r3
 80187c0:	f7ec fd48 	bl	8005254 <osSemaphoreWait>
 80187c4:	4603      	mov	r3, r0
 80187c6:	2b00      	cmp	r3, #0
 80187c8:	d1f5      	bne.n	80187b6 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 80187ca:	f7ec fc05 	bl	8004fd8 <osKernelSysTick>
 80187ce:	4602      	mov	r2, r0
 80187d0:	68fb      	ldr	r3, [r7, #12]
 80187d2:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80187d4:	4618      	mov	r0, r3
 80187d6:	3710      	adds	r7, #16
 80187d8:	46bd      	mov	sp, r7
 80187da:	bd80      	pop	{r7, pc}

080187dc <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 80187dc:	b580      	push	{r7, lr}
 80187de:	b082      	sub	sp, #8
 80187e0:	af00      	add	r7, sp, #0
 80187e2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 80187e4:	687b      	ldr	r3, [r7, #4]
 80187e6:	681b      	ldr	r3, [r3, #0]
 80187e8:	4618      	mov	r0, r3
 80187ea:	f7ec fd81 	bl	80052f0 <osSemaphoreRelease>
}
 80187ee:	bf00      	nop
 80187f0:	3708      	adds	r7, #8
 80187f2:	46bd      	mov	sp, r7
 80187f4:	bd80      	pop	{r7, pc}

080187f6 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 80187f6:	b580      	push	{r7, lr}
 80187f8:	b082      	sub	sp, #8
 80187fa:	af00      	add	r7, sp, #0
 80187fc:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 80187fe:	687b      	ldr	r3, [r7, #4]
 8018800:	681b      	ldr	r3, [r3, #0]
 8018802:	4618      	mov	r0, r3
 8018804:	f7ec fdaa 	bl	800535c <osSemaphoreDelete>
}
 8018808:	bf00      	nop
 801880a:	3708      	adds	r7, #8
 801880c:	46bd      	mov	sp, r7
 801880e:	bd80      	pop	{r7, pc}

08018810 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8018810:	b480      	push	{r7}
 8018812:	b083      	sub	sp, #12
 8018814:	af00      	add	r7, sp, #0
 8018816:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8018818:	687b      	ldr	r3, [r7, #4]
 801881a:	681b      	ldr	r3, [r3, #0]
 801881c:	2b00      	cmp	r3, #0
 801881e:	d101      	bne.n	8018824 <sys_sem_valid+0x14>
    return 0;
 8018820:	2300      	movs	r3, #0
 8018822:	e000      	b.n	8018826 <sys_sem_valid+0x16>
  else
    return 1;
 8018824:	2301      	movs	r3, #1
}
 8018826:	4618      	mov	r0, r3
 8018828:	370c      	adds	r7, #12
 801882a:	46bd      	mov	sp, r7
 801882c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018830:	4770      	bx	lr

08018832 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8018832:	b480      	push	{r7}
 8018834:	b083      	sub	sp, #12
 8018836:	af00      	add	r7, sp, #0
 8018838:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801883a:	687b      	ldr	r3, [r7, #4]
 801883c:	2200      	movs	r2, #0
 801883e:	601a      	str	r2, [r3, #0]
}
 8018840:	bf00      	nop
 8018842:	370c      	adds	r7, #12
 8018844:	46bd      	mov	sp, r7
 8018846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801884a:	4770      	bx	lr

0801884c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801884c:	b580      	push	{r7, lr}
 801884e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8018850:	4803      	ldr	r0, [pc, #12]	; (8018860 <sys_init+0x14>)
 8018852:	f7ec fc31 	bl	80050b8 <osMutexCreate>
 8018856:	4603      	mov	r3, r0
 8018858:	4a02      	ldr	r2, [pc, #8]	; (8018864 <sys_init+0x18>)
 801885a:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801885c:	bf00      	nop
 801885e:	bd80      	pop	{r7, pc}
 8018860:	08027dec 	.word	0x08027dec
 8018864:	20011000 	.word	0x20011000

08018868 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8018868:	b580      	push	{r7, lr}
 801886a:	b084      	sub	sp, #16
 801886c:	af00      	add	r7, sp, #0
 801886e:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8018870:	2300      	movs	r3, #0
 8018872:	60bb      	str	r3, [r7, #8]
 8018874:	2300      	movs	r3, #0
 8018876:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8018878:	f107 0308 	add.w	r3, r7, #8
 801887c:	4618      	mov	r0, r3
 801887e:	f7ec fc1b 	bl	80050b8 <osMutexCreate>
 8018882:	4602      	mov	r2, r0
 8018884:	687b      	ldr	r3, [r7, #4]
 8018886:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8018888:	687b      	ldr	r3, [r7, #4]
 801888a:	681b      	ldr	r3, [r3, #0]
 801888c:	2b00      	cmp	r3, #0
 801888e:	d102      	bne.n	8018896 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8018890:	f04f 33ff 	mov.w	r3, #4294967295
 8018894:	e000      	b.n	8018898 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8018896:	2300      	movs	r3, #0
}
 8018898:	4618      	mov	r0, r3
 801889a:	3710      	adds	r7, #16
 801889c:	46bd      	mov	sp, r7
 801889e:	bd80      	pop	{r7, pc}

080188a0 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80188a0:	b580      	push	{r7, lr}
 80188a2:	b082      	sub	sp, #8
 80188a4:	af00      	add	r7, sp, #0
 80188a6:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 80188a8:	687b      	ldr	r3, [r7, #4]
 80188aa:	681b      	ldr	r3, [r3, #0]
 80188ac:	f04f 31ff 	mov.w	r1, #4294967295
 80188b0:	4618      	mov	r0, r3
 80188b2:	f7ec fc19 	bl	80050e8 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 80188b6:	bf00      	nop
 80188b8:	3708      	adds	r7, #8
 80188ba:	46bd      	mov	sp, r7
 80188bc:	bd80      	pop	{r7, pc}

080188be <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80188be:	b580      	push	{r7, lr}
 80188c0:	b082      	sub	sp, #8
 80188c2:	af00      	add	r7, sp, #0
 80188c4:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80188c6:	687b      	ldr	r3, [r7, #4]
 80188c8:	681b      	ldr	r3, [r3, #0]
 80188ca:	4618      	mov	r0, r3
 80188cc:	f7ec fc5a 	bl	8005184 <osMutexRelease>
}
 80188d0:	bf00      	nop
 80188d2:	3708      	adds	r7, #8
 80188d4:	46bd      	mov	sp, r7
 80188d6:	bd80      	pop	{r7, pc}

080188d8 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80188d8:	b580      	push	{r7, lr}
 80188da:	b08c      	sub	sp, #48	; 0x30
 80188dc:	af00      	add	r7, sp, #0
 80188de:	60f8      	str	r0, [r7, #12]
 80188e0:	60b9      	str	r1, [r7, #8]
 80188e2:	607a      	str	r2, [r7, #4]
 80188e4:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 80188e6:	f107 0314 	add.w	r3, r7, #20
 80188ea:	2200      	movs	r2, #0
 80188ec:	601a      	str	r2, [r3, #0]
 80188ee:	605a      	str	r2, [r3, #4]
 80188f0:	609a      	str	r2, [r3, #8]
 80188f2:	60da      	str	r2, [r3, #12]
 80188f4:	611a      	str	r2, [r3, #16]
 80188f6:	615a      	str	r2, [r3, #20]
 80188f8:	619a      	str	r2, [r3, #24]
 80188fa:	68fb      	ldr	r3, [r7, #12]
 80188fc:	617b      	str	r3, [r7, #20]
 80188fe:	68bb      	ldr	r3, [r7, #8]
 8018900:	61bb      	str	r3, [r7, #24]
 8018902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018904:	b21b      	sxth	r3, r3
 8018906:	83bb      	strh	r3, [r7, #28]
 8018908:	683b      	ldr	r3, [r7, #0]
 801890a:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 801890c:	f107 0314 	add.w	r3, r7, #20
 8018910:	6879      	ldr	r1, [r7, #4]
 8018912:	4618      	mov	r0, r3
 8018914:	f7ec fb70 	bl	8004ff8 <osThreadCreate>
 8018918:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801891a:	4618      	mov	r0, r3
 801891c:	3730      	adds	r7, #48	; 0x30
 801891e:	46bd      	mov	sp, r7
 8018920:	bd80      	pop	{r7, pc}
	...

08018924 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8018924:	b580      	push	{r7, lr}
 8018926:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8018928:	4b04      	ldr	r3, [pc, #16]	; (801893c <sys_arch_protect+0x18>)
 801892a:	681b      	ldr	r3, [r3, #0]
 801892c:	f04f 31ff 	mov.w	r1, #4294967295
 8018930:	4618      	mov	r0, r3
 8018932:	f7ec fbd9 	bl	80050e8 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8018936:	2301      	movs	r3, #1
}
 8018938:	4618      	mov	r0, r3
 801893a:	bd80      	pop	{r7, pc}
 801893c:	20011000 	.word	0x20011000

08018940 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8018940:	b580      	push	{r7, lr}
 8018942:	b082      	sub	sp, #8
 8018944:	af00      	add	r7, sp, #0
 8018946:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8018948:	4b04      	ldr	r3, [pc, #16]	; (801895c <sys_arch_unprotect+0x1c>)
 801894a:	681b      	ldr	r3, [r3, #0]
 801894c:	4618      	mov	r0, r3
 801894e:	f7ec fc19 	bl	8005184 <osMutexRelease>
}
 8018952:	bf00      	nop
 8018954:	3708      	adds	r7, #8
 8018956:	46bd      	mov	sp, r7
 8018958:	bd80      	pop	{r7, pc}
 801895a:	bf00      	nop
 801895c:	20011000 	.word	0x20011000

08018960 <srand>:
 8018960:	b538      	push	{r3, r4, r5, lr}
 8018962:	4b10      	ldr	r3, [pc, #64]	; (80189a4 <srand+0x44>)
 8018964:	681d      	ldr	r5, [r3, #0]
 8018966:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8018968:	4604      	mov	r4, r0
 801896a:	b9b3      	cbnz	r3, 801899a <srand+0x3a>
 801896c:	2018      	movs	r0, #24
 801896e:	f000 fb8b 	bl	8019088 <malloc>
 8018972:	4602      	mov	r2, r0
 8018974:	6328      	str	r0, [r5, #48]	; 0x30
 8018976:	b920      	cbnz	r0, 8018982 <srand+0x22>
 8018978:	4b0b      	ldr	r3, [pc, #44]	; (80189a8 <srand+0x48>)
 801897a:	480c      	ldr	r0, [pc, #48]	; (80189ac <srand+0x4c>)
 801897c:	2146      	movs	r1, #70	; 0x46
 801897e:	f000 fb19 	bl	8018fb4 <__assert_func>
 8018982:	490b      	ldr	r1, [pc, #44]	; (80189b0 <srand+0x50>)
 8018984:	4b0b      	ldr	r3, [pc, #44]	; (80189b4 <srand+0x54>)
 8018986:	e9c0 1300 	strd	r1, r3, [r0]
 801898a:	4b0b      	ldr	r3, [pc, #44]	; (80189b8 <srand+0x58>)
 801898c:	6083      	str	r3, [r0, #8]
 801898e:	230b      	movs	r3, #11
 8018990:	8183      	strh	r3, [r0, #12]
 8018992:	2100      	movs	r1, #0
 8018994:	2001      	movs	r0, #1
 8018996:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801899a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801899c:	2200      	movs	r2, #0
 801899e:	611c      	str	r4, [r3, #16]
 80189a0:	615a      	str	r2, [r3, #20]
 80189a2:	bd38      	pop	{r3, r4, r5, pc}
 80189a4:	2000008c 	.word	0x2000008c
 80189a8:	08027df4 	.word	0x08027df4
 80189ac:	08027e0b 	.word	0x08027e0b
 80189b0:	abcd330e 	.word	0xabcd330e
 80189b4:	e66d1234 	.word	0xe66d1234
 80189b8:	0005deec 	.word	0x0005deec

080189bc <rand>:
 80189bc:	4b16      	ldr	r3, [pc, #88]	; (8018a18 <rand+0x5c>)
 80189be:	b510      	push	{r4, lr}
 80189c0:	681c      	ldr	r4, [r3, #0]
 80189c2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80189c4:	b9b3      	cbnz	r3, 80189f4 <rand+0x38>
 80189c6:	2018      	movs	r0, #24
 80189c8:	f000 fb5e 	bl	8019088 <malloc>
 80189cc:	4602      	mov	r2, r0
 80189ce:	6320      	str	r0, [r4, #48]	; 0x30
 80189d0:	b920      	cbnz	r0, 80189dc <rand+0x20>
 80189d2:	4b12      	ldr	r3, [pc, #72]	; (8018a1c <rand+0x60>)
 80189d4:	4812      	ldr	r0, [pc, #72]	; (8018a20 <rand+0x64>)
 80189d6:	2152      	movs	r1, #82	; 0x52
 80189d8:	f000 faec 	bl	8018fb4 <__assert_func>
 80189dc:	4911      	ldr	r1, [pc, #68]	; (8018a24 <rand+0x68>)
 80189de:	4b12      	ldr	r3, [pc, #72]	; (8018a28 <rand+0x6c>)
 80189e0:	e9c0 1300 	strd	r1, r3, [r0]
 80189e4:	4b11      	ldr	r3, [pc, #68]	; (8018a2c <rand+0x70>)
 80189e6:	6083      	str	r3, [r0, #8]
 80189e8:	230b      	movs	r3, #11
 80189ea:	8183      	strh	r3, [r0, #12]
 80189ec:	2100      	movs	r1, #0
 80189ee:	2001      	movs	r0, #1
 80189f0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80189f4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80189f6:	480e      	ldr	r0, [pc, #56]	; (8018a30 <rand+0x74>)
 80189f8:	690b      	ldr	r3, [r1, #16]
 80189fa:	694c      	ldr	r4, [r1, #20]
 80189fc:	4a0d      	ldr	r2, [pc, #52]	; (8018a34 <rand+0x78>)
 80189fe:	4358      	muls	r0, r3
 8018a00:	fb02 0004 	mla	r0, r2, r4, r0
 8018a04:	fba3 3202 	umull	r3, r2, r3, r2
 8018a08:	3301      	adds	r3, #1
 8018a0a:	eb40 0002 	adc.w	r0, r0, r2
 8018a0e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8018a12:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8018a16:	bd10      	pop	{r4, pc}
 8018a18:	2000008c 	.word	0x2000008c
 8018a1c:	08027df4 	.word	0x08027df4
 8018a20:	08027e0b 	.word	0x08027e0b
 8018a24:	abcd330e 	.word	0xabcd330e
 8018a28:	e66d1234 	.word	0xe66d1234
 8018a2c:	0005deec 	.word	0x0005deec
 8018a30:	5851f42d 	.word	0x5851f42d
 8018a34:	4c957f2d 	.word	0x4c957f2d

08018a38 <std>:
 8018a38:	2300      	movs	r3, #0
 8018a3a:	b510      	push	{r4, lr}
 8018a3c:	4604      	mov	r4, r0
 8018a3e:	e9c0 3300 	strd	r3, r3, [r0]
 8018a42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018a46:	6083      	str	r3, [r0, #8]
 8018a48:	8181      	strh	r1, [r0, #12]
 8018a4a:	6643      	str	r3, [r0, #100]	; 0x64
 8018a4c:	81c2      	strh	r2, [r0, #14]
 8018a4e:	6183      	str	r3, [r0, #24]
 8018a50:	4619      	mov	r1, r3
 8018a52:	2208      	movs	r2, #8
 8018a54:	305c      	adds	r0, #92	; 0x5c
 8018a56:	f000 f93e 	bl	8018cd6 <memset>
 8018a5a:	4b05      	ldr	r3, [pc, #20]	; (8018a70 <std+0x38>)
 8018a5c:	6263      	str	r3, [r4, #36]	; 0x24
 8018a5e:	4b05      	ldr	r3, [pc, #20]	; (8018a74 <std+0x3c>)
 8018a60:	62a3      	str	r3, [r4, #40]	; 0x28
 8018a62:	4b05      	ldr	r3, [pc, #20]	; (8018a78 <std+0x40>)
 8018a64:	62e3      	str	r3, [r4, #44]	; 0x2c
 8018a66:	4b05      	ldr	r3, [pc, #20]	; (8018a7c <std+0x44>)
 8018a68:	6224      	str	r4, [r4, #32]
 8018a6a:	6323      	str	r3, [r4, #48]	; 0x30
 8018a6c:	bd10      	pop	{r4, pc}
 8018a6e:	bf00      	nop
 8018a70:	08018bfd 	.word	0x08018bfd
 8018a74:	08018c1f 	.word	0x08018c1f
 8018a78:	08018c57 	.word	0x08018c57
 8018a7c:	08018c7b 	.word	0x08018c7b

08018a80 <stdio_exit_handler>:
 8018a80:	4a02      	ldr	r2, [pc, #8]	; (8018a8c <stdio_exit_handler+0xc>)
 8018a82:	4903      	ldr	r1, [pc, #12]	; (8018a90 <stdio_exit_handler+0x10>)
 8018a84:	4803      	ldr	r0, [pc, #12]	; (8018a94 <stdio_exit_handler+0x14>)
 8018a86:	f000 b869 	b.w	8018b5c <_fwalk_sglue>
 8018a8a:	bf00      	nop
 8018a8c:	20000034 	.word	0x20000034
 8018a90:	08019b55 	.word	0x08019b55
 8018a94:	20000040 	.word	0x20000040

08018a98 <cleanup_stdio>:
 8018a98:	6841      	ldr	r1, [r0, #4]
 8018a9a:	4b0c      	ldr	r3, [pc, #48]	; (8018acc <cleanup_stdio+0x34>)
 8018a9c:	4299      	cmp	r1, r3
 8018a9e:	b510      	push	{r4, lr}
 8018aa0:	4604      	mov	r4, r0
 8018aa2:	d001      	beq.n	8018aa8 <cleanup_stdio+0x10>
 8018aa4:	f001 f856 	bl	8019b54 <_fflush_r>
 8018aa8:	68a1      	ldr	r1, [r4, #8]
 8018aaa:	4b09      	ldr	r3, [pc, #36]	; (8018ad0 <cleanup_stdio+0x38>)
 8018aac:	4299      	cmp	r1, r3
 8018aae:	d002      	beq.n	8018ab6 <cleanup_stdio+0x1e>
 8018ab0:	4620      	mov	r0, r4
 8018ab2:	f001 f84f 	bl	8019b54 <_fflush_r>
 8018ab6:	68e1      	ldr	r1, [r4, #12]
 8018ab8:	4b06      	ldr	r3, [pc, #24]	; (8018ad4 <cleanup_stdio+0x3c>)
 8018aba:	4299      	cmp	r1, r3
 8018abc:	d004      	beq.n	8018ac8 <cleanup_stdio+0x30>
 8018abe:	4620      	mov	r0, r4
 8018ac0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018ac4:	f001 b846 	b.w	8019b54 <_fflush_r>
 8018ac8:	bd10      	pop	{r4, pc}
 8018aca:	bf00      	nop
 8018acc:	20011004 	.word	0x20011004
 8018ad0:	2001106c 	.word	0x2001106c
 8018ad4:	200110d4 	.word	0x200110d4

08018ad8 <global_stdio_init.part.0>:
 8018ad8:	b510      	push	{r4, lr}
 8018ada:	4b0b      	ldr	r3, [pc, #44]	; (8018b08 <global_stdio_init.part.0+0x30>)
 8018adc:	4c0b      	ldr	r4, [pc, #44]	; (8018b0c <global_stdio_init.part.0+0x34>)
 8018ade:	4a0c      	ldr	r2, [pc, #48]	; (8018b10 <global_stdio_init.part.0+0x38>)
 8018ae0:	601a      	str	r2, [r3, #0]
 8018ae2:	4620      	mov	r0, r4
 8018ae4:	2200      	movs	r2, #0
 8018ae6:	2104      	movs	r1, #4
 8018ae8:	f7ff ffa6 	bl	8018a38 <std>
 8018aec:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8018af0:	2201      	movs	r2, #1
 8018af2:	2109      	movs	r1, #9
 8018af4:	f7ff ffa0 	bl	8018a38 <std>
 8018af8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8018afc:	2202      	movs	r2, #2
 8018afe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018b02:	2112      	movs	r1, #18
 8018b04:	f7ff bf98 	b.w	8018a38 <std>
 8018b08:	2001113c 	.word	0x2001113c
 8018b0c:	20011004 	.word	0x20011004
 8018b10:	08018a81 	.word	0x08018a81

08018b14 <__sfp_lock_acquire>:
 8018b14:	4801      	ldr	r0, [pc, #4]	; (8018b1c <__sfp_lock_acquire+0x8>)
 8018b16:	f000 ba3d 	b.w	8018f94 <__retarget_lock_acquire_recursive>
 8018b1a:	bf00      	nop
 8018b1c:	20011145 	.word	0x20011145

08018b20 <__sfp_lock_release>:
 8018b20:	4801      	ldr	r0, [pc, #4]	; (8018b28 <__sfp_lock_release+0x8>)
 8018b22:	f000 ba38 	b.w	8018f96 <__retarget_lock_release_recursive>
 8018b26:	bf00      	nop
 8018b28:	20011145 	.word	0x20011145

08018b2c <__sinit>:
 8018b2c:	b510      	push	{r4, lr}
 8018b2e:	4604      	mov	r4, r0
 8018b30:	f7ff fff0 	bl	8018b14 <__sfp_lock_acquire>
 8018b34:	6a23      	ldr	r3, [r4, #32]
 8018b36:	b11b      	cbz	r3, 8018b40 <__sinit+0x14>
 8018b38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018b3c:	f7ff bff0 	b.w	8018b20 <__sfp_lock_release>
 8018b40:	4b04      	ldr	r3, [pc, #16]	; (8018b54 <__sinit+0x28>)
 8018b42:	6223      	str	r3, [r4, #32]
 8018b44:	4b04      	ldr	r3, [pc, #16]	; (8018b58 <__sinit+0x2c>)
 8018b46:	681b      	ldr	r3, [r3, #0]
 8018b48:	2b00      	cmp	r3, #0
 8018b4a:	d1f5      	bne.n	8018b38 <__sinit+0xc>
 8018b4c:	f7ff ffc4 	bl	8018ad8 <global_stdio_init.part.0>
 8018b50:	e7f2      	b.n	8018b38 <__sinit+0xc>
 8018b52:	bf00      	nop
 8018b54:	08018a99 	.word	0x08018a99
 8018b58:	2001113c 	.word	0x2001113c

08018b5c <_fwalk_sglue>:
 8018b5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018b60:	4607      	mov	r7, r0
 8018b62:	4688      	mov	r8, r1
 8018b64:	4614      	mov	r4, r2
 8018b66:	2600      	movs	r6, #0
 8018b68:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8018b6c:	f1b9 0901 	subs.w	r9, r9, #1
 8018b70:	d505      	bpl.n	8018b7e <_fwalk_sglue+0x22>
 8018b72:	6824      	ldr	r4, [r4, #0]
 8018b74:	2c00      	cmp	r4, #0
 8018b76:	d1f7      	bne.n	8018b68 <_fwalk_sglue+0xc>
 8018b78:	4630      	mov	r0, r6
 8018b7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018b7e:	89ab      	ldrh	r3, [r5, #12]
 8018b80:	2b01      	cmp	r3, #1
 8018b82:	d907      	bls.n	8018b94 <_fwalk_sglue+0x38>
 8018b84:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018b88:	3301      	adds	r3, #1
 8018b8a:	d003      	beq.n	8018b94 <_fwalk_sglue+0x38>
 8018b8c:	4629      	mov	r1, r5
 8018b8e:	4638      	mov	r0, r7
 8018b90:	47c0      	blx	r8
 8018b92:	4306      	orrs	r6, r0
 8018b94:	3568      	adds	r5, #104	; 0x68
 8018b96:	e7e9      	b.n	8018b6c <_fwalk_sglue+0x10>

08018b98 <iprintf>:
 8018b98:	b40f      	push	{r0, r1, r2, r3}
 8018b9a:	b507      	push	{r0, r1, r2, lr}
 8018b9c:	4906      	ldr	r1, [pc, #24]	; (8018bb8 <iprintf+0x20>)
 8018b9e:	ab04      	add	r3, sp, #16
 8018ba0:	6808      	ldr	r0, [r1, #0]
 8018ba2:	f853 2b04 	ldr.w	r2, [r3], #4
 8018ba6:	6881      	ldr	r1, [r0, #8]
 8018ba8:	9301      	str	r3, [sp, #4]
 8018baa:	f000 fca3 	bl	80194f4 <_vfiprintf_r>
 8018bae:	b003      	add	sp, #12
 8018bb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8018bb4:	b004      	add	sp, #16
 8018bb6:	4770      	bx	lr
 8018bb8:	2000008c 	.word	0x2000008c

08018bbc <siprintf>:
 8018bbc:	b40e      	push	{r1, r2, r3}
 8018bbe:	b500      	push	{lr}
 8018bc0:	b09c      	sub	sp, #112	; 0x70
 8018bc2:	ab1d      	add	r3, sp, #116	; 0x74
 8018bc4:	9002      	str	r0, [sp, #8]
 8018bc6:	9006      	str	r0, [sp, #24]
 8018bc8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8018bcc:	4809      	ldr	r0, [pc, #36]	; (8018bf4 <siprintf+0x38>)
 8018bce:	9107      	str	r1, [sp, #28]
 8018bd0:	9104      	str	r1, [sp, #16]
 8018bd2:	4909      	ldr	r1, [pc, #36]	; (8018bf8 <siprintf+0x3c>)
 8018bd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8018bd8:	9105      	str	r1, [sp, #20]
 8018bda:	6800      	ldr	r0, [r0, #0]
 8018bdc:	9301      	str	r3, [sp, #4]
 8018bde:	a902      	add	r1, sp, #8
 8018be0:	f000 fb60 	bl	80192a4 <_svfiprintf_r>
 8018be4:	9b02      	ldr	r3, [sp, #8]
 8018be6:	2200      	movs	r2, #0
 8018be8:	701a      	strb	r2, [r3, #0]
 8018bea:	b01c      	add	sp, #112	; 0x70
 8018bec:	f85d eb04 	ldr.w	lr, [sp], #4
 8018bf0:	b003      	add	sp, #12
 8018bf2:	4770      	bx	lr
 8018bf4:	2000008c 	.word	0x2000008c
 8018bf8:	ffff0208 	.word	0xffff0208

08018bfc <__sread>:
 8018bfc:	b510      	push	{r4, lr}
 8018bfe:	460c      	mov	r4, r1
 8018c00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018c04:	f000 f97e 	bl	8018f04 <_read_r>
 8018c08:	2800      	cmp	r0, #0
 8018c0a:	bfab      	itete	ge
 8018c0c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8018c0e:	89a3      	ldrhlt	r3, [r4, #12]
 8018c10:	181b      	addge	r3, r3, r0
 8018c12:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8018c16:	bfac      	ite	ge
 8018c18:	6563      	strge	r3, [r4, #84]	; 0x54
 8018c1a:	81a3      	strhlt	r3, [r4, #12]
 8018c1c:	bd10      	pop	{r4, pc}

08018c1e <__swrite>:
 8018c1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018c22:	461f      	mov	r7, r3
 8018c24:	898b      	ldrh	r3, [r1, #12]
 8018c26:	05db      	lsls	r3, r3, #23
 8018c28:	4605      	mov	r5, r0
 8018c2a:	460c      	mov	r4, r1
 8018c2c:	4616      	mov	r6, r2
 8018c2e:	d505      	bpl.n	8018c3c <__swrite+0x1e>
 8018c30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018c34:	2302      	movs	r3, #2
 8018c36:	2200      	movs	r2, #0
 8018c38:	f000 f952 	bl	8018ee0 <_lseek_r>
 8018c3c:	89a3      	ldrh	r3, [r4, #12]
 8018c3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018c42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8018c46:	81a3      	strh	r3, [r4, #12]
 8018c48:	4632      	mov	r2, r6
 8018c4a:	463b      	mov	r3, r7
 8018c4c:	4628      	mov	r0, r5
 8018c4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018c52:	f000 b969 	b.w	8018f28 <_write_r>

08018c56 <__sseek>:
 8018c56:	b510      	push	{r4, lr}
 8018c58:	460c      	mov	r4, r1
 8018c5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018c5e:	f000 f93f 	bl	8018ee0 <_lseek_r>
 8018c62:	1c43      	adds	r3, r0, #1
 8018c64:	89a3      	ldrh	r3, [r4, #12]
 8018c66:	bf15      	itete	ne
 8018c68:	6560      	strne	r0, [r4, #84]	; 0x54
 8018c6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8018c6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8018c72:	81a3      	strheq	r3, [r4, #12]
 8018c74:	bf18      	it	ne
 8018c76:	81a3      	strhne	r3, [r4, #12]
 8018c78:	bd10      	pop	{r4, pc}

08018c7a <__sclose>:
 8018c7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018c7e:	f000 b8c9 	b.w	8018e14 <_close_r>

08018c82 <memcmp>:
 8018c82:	b510      	push	{r4, lr}
 8018c84:	3901      	subs	r1, #1
 8018c86:	4402      	add	r2, r0
 8018c88:	4290      	cmp	r0, r2
 8018c8a:	d101      	bne.n	8018c90 <memcmp+0xe>
 8018c8c:	2000      	movs	r0, #0
 8018c8e:	e005      	b.n	8018c9c <memcmp+0x1a>
 8018c90:	7803      	ldrb	r3, [r0, #0]
 8018c92:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8018c96:	42a3      	cmp	r3, r4
 8018c98:	d001      	beq.n	8018c9e <memcmp+0x1c>
 8018c9a:	1b18      	subs	r0, r3, r4
 8018c9c:	bd10      	pop	{r4, pc}
 8018c9e:	3001      	adds	r0, #1
 8018ca0:	e7f2      	b.n	8018c88 <memcmp+0x6>

08018ca2 <memmove>:
 8018ca2:	4288      	cmp	r0, r1
 8018ca4:	b510      	push	{r4, lr}
 8018ca6:	eb01 0402 	add.w	r4, r1, r2
 8018caa:	d902      	bls.n	8018cb2 <memmove+0x10>
 8018cac:	4284      	cmp	r4, r0
 8018cae:	4623      	mov	r3, r4
 8018cb0:	d807      	bhi.n	8018cc2 <memmove+0x20>
 8018cb2:	1e43      	subs	r3, r0, #1
 8018cb4:	42a1      	cmp	r1, r4
 8018cb6:	d008      	beq.n	8018cca <memmove+0x28>
 8018cb8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018cbc:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018cc0:	e7f8      	b.n	8018cb4 <memmove+0x12>
 8018cc2:	4402      	add	r2, r0
 8018cc4:	4601      	mov	r1, r0
 8018cc6:	428a      	cmp	r2, r1
 8018cc8:	d100      	bne.n	8018ccc <memmove+0x2a>
 8018cca:	bd10      	pop	{r4, pc}
 8018ccc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018cd0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8018cd4:	e7f7      	b.n	8018cc6 <memmove+0x24>

08018cd6 <memset>:
 8018cd6:	4402      	add	r2, r0
 8018cd8:	4603      	mov	r3, r0
 8018cda:	4293      	cmp	r3, r2
 8018cdc:	d100      	bne.n	8018ce0 <memset+0xa>
 8018cde:	4770      	bx	lr
 8018ce0:	f803 1b01 	strb.w	r1, [r3], #1
 8018ce4:	e7f9      	b.n	8018cda <memset+0x4>
	...

08018ce8 <strcasecmp>:
 8018ce8:	b530      	push	{r4, r5, lr}
 8018cea:	4d0b      	ldr	r5, [pc, #44]	; (8018d18 <strcasecmp+0x30>)
 8018cec:	4604      	mov	r4, r0
 8018cee:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018cf2:	5cea      	ldrb	r2, [r5, r3]
 8018cf4:	f002 0203 	and.w	r2, r2, #3
 8018cf8:	2a01      	cmp	r2, #1
 8018cfa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018cfe:	5ca8      	ldrb	r0, [r5, r2]
 8018d00:	f000 0003 	and.w	r0, r0, #3
 8018d04:	bf08      	it	eq
 8018d06:	3320      	addeq	r3, #32
 8018d08:	2801      	cmp	r0, #1
 8018d0a:	bf08      	it	eq
 8018d0c:	3220      	addeq	r2, #32
 8018d0e:	1a98      	subs	r0, r3, r2
 8018d10:	d101      	bne.n	8018d16 <strcasecmp+0x2e>
 8018d12:	2a00      	cmp	r2, #0
 8018d14:	d1eb      	bne.n	8018cee <strcasecmp+0x6>
 8018d16:	bd30      	pop	{r4, r5, pc}
 8018d18:	08027e64 	.word	0x08027e64

08018d1c <strchr>:
 8018d1c:	b2c9      	uxtb	r1, r1
 8018d1e:	4603      	mov	r3, r0
 8018d20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018d24:	b11a      	cbz	r2, 8018d2e <strchr+0x12>
 8018d26:	428a      	cmp	r2, r1
 8018d28:	d1f9      	bne.n	8018d1e <strchr+0x2>
 8018d2a:	4618      	mov	r0, r3
 8018d2c:	4770      	bx	lr
 8018d2e:	2900      	cmp	r1, #0
 8018d30:	bf18      	it	ne
 8018d32:	2300      	movne	r3, #0
 8018d34:	e7f9      	b.n	8018d2a <strchr+0xe>

08018d36 <strncmp>:
 8018d36:	b510      	push	{r4, lr}
 8018d38:	b16a      	cbz	r2, 8018d56 <strncmp+0x20>
 8018d3a:	3901      	subs	r1, #1
 8018d3c:	1884      	adds	r4, r0, r2
 8018d3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018d42:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8018d46:	429a      	cmp	r2, r3
 8018d48:	d103      	bne.n	8018d52 <strncmp+0x1c>
 8018d4a:	42a0      	cmp	r0, r4
 8018d4c:	d001      	beq.n	8018d52 <strncmp+0x1c>
 8018d4e:	2a00      	cmp	r2, #0
 8018d50:	d1f5      	bne.n	8018d3e <strncmp+0x8>
 8018d52:	1ad0      	subs	r0, r2, r3
 8018d54:	bd10      	pop	{r4, pc}
 8018d56:	4610      	mov	r0, r2
 8018d58:	e7fc      	b.n	8018d54 <strncmp+0x1e>
	...

08018d5c <strtok>:
 8018d5c:	4b16      	ldr	r3, [pc, #88]	; (8018db8 <strtok+0x5c>)
 8018d5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018d60:	681e      	ldr	r6, [r3, #0]
 8018d62:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8018d64:	4605      	mov	r5, r0
 8018d66:	b9fc      	cbnz	r4, 8018da8 <strtok+0x4c>
 8018d68:	2050      	movs	r0, #80	; 0x50
 8018d6a:	9101      	str	r1, [sp, #4]
 8018d6c:	f000 f98c 	bl	8019088 <malloc>
 8018d70:	9901      	ldr	r1, [sp, #4]
 8018d72:	6470      	str	r0, [r6, #68]	; 0x44
 8018d74:	4602      	mov	r2, r0
 8018d76:	b920      	cbnz	r0, 8018d82 <strtok+0x26>
 8018d78:	4b10      	ldr	r3, [pc, #64]	; (8018dbc <strtok+0x60>)
 8018d7a:	4811      	ldr	r0, [pc, #68]	; (8018dc0 <strtok+0x64>)
 8018d7c:	215b      	movs	r1, #91	; 0x5b
 8018d7e:	f000 f919 	bl	8018fb4 <__assert_func>
 8018d82:	e9c0 4400 	strd	r4, r4, [r0]
 8018d86:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8018d8a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8018d8e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8018d92:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8018d96:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8018d9a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8018d9e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8018da2:	6184      	str	r4, [r0, #24]
 8018da4:	7704      	strb	r4, [r0, #28]
 8018da6:	6244      	str	r4, [r0, #36]	; 0x24
 8018da8:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8018daa:	2301      	movs	r3, #1
 8018dac:	4628      	mov	r0, r5
 8018dae:	b002      	add	sp, #8
 8018db0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018db4:	f000 b806 	b.w	8018dc4 <__strtok_r>
 8018db8:	2000008c 	.word	0x2000008c
 8018dbc:	08027df4 	.word	0x08027df4
 8018dc0:	08027f64 	.word	0x08027f64

08018dc4 <__strtok_r>:
 8018dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018dc6:	b908      	cbnz	r0, 8018dcc <__strtok_r+0x8>
 8018dc8:	6810      	ldr	r0, [r2, #0]
 8018dca:	b188      	cbz	r0, 8018df0 <__strtok_r+0x2c>
 8018dcc:	4604      	mov	r4, r0
 8018dce:	4620      	mov	r0, r4
 8018dd0:	f814 5b01 	ldrb.w	r5, [r4], #1
 8018dd4:	460f      	mov	r7, r1
 8018dd6:	f817 6b01 	ldrb.w	r6, [r7], #1
 8018dda:	b91e      	cbnz	r6, 8018de4 <__strtok_r+0x20>
 8018ddc:	b965      	cbnz	r5, 8018df8 <__strtok_r+0x34>
 8018dde:	6015      	str	r5, [r2, #0]
 8018de0:	4628      	mov	r0, r5
 8018de2:	e005      	b.n	8018df0 <__strtok_r+0x2c>
 8018de4:	42b5      	cmp	r5, r6
 8018de6:	d1f6      	bne.n	8018dd6 <__strtok_r+0x12>
 8018de8:	2b00      	cmp	r3, #0
 8018dea:	d1f0      	bne.n	8018dce <__strtok_r+0xa>
 8018dec:	6014      	str	r4, [r2, #0]
 8018dee:	7003      	strb	r3, [r0, #0]
 8018df0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018df2:	461c      	mov	r4, r3
 8018df4:	e00c      	b.n	8018e10 <__strtok_r+0x4c>
 8018df6:	b915      	cbnz	r5, 8018dfe <__strtok_r+0x3a>
 8018df8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018dfc:	460e      	mov	r6, r1
 8018dfe:	f816 5b01 	ldrb.w	r5, [r6], #1
 8018e02:	42ab      	cmp	r3, r5
 8018e04:	d1f7      	bne.n	8018df6 <__strtok_r+0x32>
 8018e06:	2b00      	cmp	r3, #0
 8018e08:	d0f3      	beq.n	8018df2 <__strtok_r+0x2e>
 8018e0a:	2300      	movs	r3, #0
 8018e0c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8018e10:	6014      	str	r4, [r2, #0]
 8018e12:	e7ed      	b.n	8018df0 <__strtok_r+0x2c>

08018e14 <_close_r>:
 8018e14:	b538      	push	{r3, r4, r5, lr}
 8018e16:	4d06      	ldr	r5, [pc, #24]	; (8018e30 <_close_r+0x1c>)
 8018e18:	2300      	movs	r3, #0
 8018e1a:	4604      	mov	r4, r0
 8018e1c:	4608      	mov	r0, r1
 8018e1e:	602b      	str	r3, [r5, #0]
 8018e20:	f7e7 ff4f 	bl	8000cc2 <_close>
 8018e24:	1c43      	adds	r3, r0, #1
 8018e26:	d102      	bne.n	8018e2e <_close_r+0x1a>
 8018e28:	682b      	ldr	r3, [r5, #0]
 8018e2a:	b103      	cbz	r3, 8018e2e <_close_r+0x1a>
 8018e2c:	6023      	str	r3, [r4, #0]
 8018e2e:	bd38      	pop	{r3, r4, r5, pc}
 8018e30:	20011140 	.word	0x20011140

08018e34 <_reclaim_reent>:
 8018e34:	4b29      	ldr	r3, [pc, #164]	; (8018edc <_reclaim_reent+0xa8>)
 8018e36:	681b      	ldr	r3, [r3, #0]
 8018e38:	4283      	cmp	r3, r0
 8018e3a:	b570      	push	{r4, r5, r6, lr}
 8018e3c:	4604      	mov	r4, r0
 8018e3e:	d04b      	beq.n	8018ed8 <_reclaim_reent+0xa4>
 8018e40:	69c3      	ldr	r3, [r0, #28]
 8018e42:	b143      	cbz	r3, 8018e56 <_reclaim_reent+0x22>
 8018e44:	68db      	ldr	r3, [r3, #12]
 8018e46:	2b00      	cmp	r3, #0
 8018e48:	d144      	bne.n	8018ed4 <_reclaim_reent+0xa0>
 8018e4a:	69e3      	ldr	r3, [r4, #28]
 8018e4c:	6819      	ldr	r1, [r3, #0]
 8018e4e:	b111      	cbz	r1, 8018e56 <_reclaim_reent+0x22>
 8018e50:	4620      	mov	r0, r4
 8018e52:	f000 f8cd 	bl	8018ff0 <_free_r>
 8018e56:	6961      	ldr	r1, [r4, #20]
 8018e58:	b111      	cbz	r1, 8018e60 <_reclaim_reent+0x2c>
 8018e5a:	4620      	mov	r0, r4
 8018e5c:	f000 f8c8 	bl	8018ff0 <_free_r>
 8018e60:	69e1      	ldr	r1, [r4, #28]
 8018e62:	b111      	cbz	r1, 8018e6a <_reclaim_reent+0x36>
 8018e64:	4620      	mov	r0, r4
 8018e66:	f000 f8c3 	bl	8018ff0 <_free_r>
 8018e6a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8018e6c:	b111      	cbz	r1, 8018e74 <_reclaim_reent+0x40>
 8018e6e:	4620      	mov	r0, r4
 8018e70:	f000 f8be 	bl	8018ff0 <_free_r>
 8018e74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018e76:	b111      	cbz	r1, 8018e7e <_reclaim_reent+0x4a>
 8018e78:	4620      	mov	r0, r4
 8018e7a:	f000 f8b9 	bl	8018ff0 <_free_r>
 8018e7e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8018e80:	b111      	cbz	r1, 8018e88 <_reclaim_reent+0x54>
 8018e82:	4620      	mov	r0, r4
 8018e84:	f000 f8b4 	bl	8018ff0 <_free_r>
 8018e88:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8018e8a:	b111      	cbz	r1, 8018e92 <_reclaim_reent+0x5e>
 8018e8c:	4620      	mov	r0, r4
 8018e8e:	f000 f8af 	bl	8018ff0 <_free_r>
 8018e92:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8018e94:	b111      	cbz	r1, 8018e9c <_reclaim_reent+0x68>
 8018e96:	4620      	mov	r0, r4
 8018e98:	f000 f8aa 	bl	8018ff0 <_free_r>
 8018e9c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8018e9e:	b111      	cbz	r1, 8018ea6 <_reclaim_reent+0x72>
 8018ea0:	4620      	mov	r0, r4
 8018ea2:	f000 f8a5 	bl	8018ff0 <_free_r>
 8018ea6:	6a23      	ldr	r3, [r4, #32]
 8018ea8:	b1b3      	cbz	r3, 8018ed8 <_reclaim_reent+0xa4>
 8018eaa:	4620      	mov	r0, r4
 8018eac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018eb0:	4718      	bx	r3
 8018eb2:	5949      	ldr	r1, [r1, r5]
 8018eb4:	b941      	cbnz	r1, 8018ec8 <_reclaim_reent+0x94>
 8018eb6:	3504      	adds	r5, #4
 8018eb8:	69e3      	ldr	r3, [r4, #28]
 8018eba:	2d80      	cmp	r5, #128	; 0x80
 8018ebc:	68d9      	ldr	r1, [r3, #12]
 8018ebe:	d1f8      	bne.n	8018eb2 <_reclaim_reent+0x7e>
 8018ec0:	4620      	mov	r0, r4
 8018ec2:	f000 f895 	bl	8018ff0 <_free_r>
 8018ec6:	e7c0      	b.n	8018e4a <_reclaim_reent+0x16>
 8018ec8:	680e      	ldr	r6, [r1, #0]
 8018eca:	4620      	mov	r0, r4
 8018ecc:	f000 f890 	bl	8018ff0 <_free_r>
 8018ed0:	4631      	mov	r1, r6
 8018ed2:	e7ef      	b.n	8018eb4 <_reclaim_reent+0x80>
 8018ed4:	2500      	movs	r5, #0
 8018ed6:	e7ef      	b.n	8018eb8 <_reclaim_reent+0x84>
 8018ed8:	bd70      	pop	{r4, r5, r6, pc}
 8018eda:	bf00      	nop
 8018edc:	2000008c 	.word	0x2000008c

08018ee0 <_lseek_r>:
 8018ee0:	b538      	push	{r3, r4, r5, lr}
 8018ee2:	4d07      	ldr	r5, [pc, #28]	; (8018f00 <_lseek_r+0x20>)
 8018ee4:	4604      	mov	r4, r0
 8018ee6:	4608      	mov	r0, r1
 8018ee8:	4611      	mov	r1, r2
 8018eea:	2200      	movs	r2, #0
 8018eec:	602a      	str	r2, [r5, #0]
 8018eee:	461a      	mov	r2, r3
 8018ef0:	f7e7 ff0e 	bl	8000d10 <_lseek>
 8018ef4:	1c43      	adds	r3, r0, #1
 8018ef6:	d102      	bne.n	8018efe <_lseek_r+0x1e>
 8018ef8:	682b      	ldr	r3, [r5, #0]
 8018efa:	b103      	cbz	r3, 8018efe <_lseek_r+0x1e>
 8018efc:	6023      	str	r3, [r4, #0]
 8018efe:	bd38      	pop	{r3, r4, r5, pc}
 8018f00:	20011140 	.word	0x20011140

08018f04 <_read_r>:
 8018f04:	b538      	push	{r3, r4, r5, lr}
 8018f06:	4d07      	ldr	r5, [pc, #28]	; (8018f24 <_read_r+0x20>)
 8018f08:	4604      	mov	r4, r0
 8018f0a:	4608      	mov	r0, r1
 8018f0c:	4611      	mov	r1, r2
 8018f0e:	2200      	movs	r2, #0
 8018f10:	602a      	str	r2, [r5, #0]
 8018f12:	461a      	mov	r2, r3
 8018f14:	f7e7 fe9c 	bl	8000c50 <_read>
 8018f18:	1c43      	adds	r3, r0, #1
 8018f1a:	d102      	bne.n	8018f22 <_read_r+0x1e>
 8018f1c:	682b      	ldr	r3, [r5, #0]
 8018f1e:	b103      	cbz	r3, 8018f22 <_read_r+0x1e>
 8018f20:	6023      	str	r3, [r4, #0]
 8018f22:	bd38      	pop	{r3, r4, r5, pc}
 8018f24:	20011140 	.word	0x20011140

08018f28 <_write_r>:
 8018f28:	b538      	push	{r3, r4, r5, lr}
 8018f2a:	4d07      	ldr	r5, [pc, #28]	; (8018f48 <_write_r+0x20>)
 8018f2c:	4604      	mov	r4, r0
 8018f2e:	4608      	mov	r0, r1
 8018f30:	4611      	mov	r1, r2
 8018f32:	2200      	movs	r2, #0
 8018f34:	602a      	str	r2, [r5, #0]
 8018f36:	461a      	mov	r2, r3
 8018f38:	f7e7 fea7 	bl	8000c8a <_write>
 8018f3c:	1c43      	adds	r3, r0, #1
 8018f3e:	d102      	bne.n	8018f46 <_write_r+0x1e>
 8018f40:	682b      	ldr	r3, [r5, #0]
 8018f42:	b103      	cbz	r3, 8018f46 <_write_r+0x1e>
 8018f44:	6023      	str	r3, [r4, #0]
 8018f46:	bd38      	pop	{r3, r4, r5, pc}
 8018f48:	20011140 	.word	0x20011140

08018f4c <__libc_init_array>:
 8018f4c:	b570      	push	{r4, r5, r6, lr}
 8018f4e:	4d0d      	ldr	r5, [pc, #52]	; (8018f84 <__libc_init_array+0x38>)
 8018f50:	4c0d      	ldr	r4, [pc, #52]	; (8018f88 <__libc_init_array+0x3c>)
 8018f52:	1b64      	subs	r4, r4, r5
 8018f54:	10a4      	asrs	r4, r4, #2
 8018f56:	2600      	movs	r6, #0
 8018f58:	42a6      	cmp	r6, r4
 8018f5a:	d109      	bne.n	8018f70 <__libc_init_array+0x24>
 8018f5c:	4d0b      	ldr	r5, [pc, #44]	; (8018f8c <__libc_init_array+0x40>)
 8018f5e:	4c0c      	ldr	r4, [pc, #48]	; (8018f90 <__libc_init_array+0x44>)
 8018f60:	f000 ffde 	bl	8019f20 <_init>
 8018f64:	1b64      	subs	r4, r4, r5
 8018f66:	10a4      	asrs	r4, r4, #2
 8018f68:	2600      	movs	r6, #0
 8018f6a:	42a6      	cmp	r6, r4
 8018f6c:	d105      	bne.n	8018f7a <__libc_init_array+0x2e>
 8018f6e:	bd70      	pop	{r4, r5, r6, pc}
 8018f70:	f855 3b04 	ldr.w	r3, [r5], #4
 8018f74:	4798      	blx	r3
 8018f76:	3601      	adds	r6, #1
 8018f78:	e7ee      	b.n	8018f58 <__libc_init_array+0xc>
 8018f7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8018f7e:	4798      	blx	r3
 8018f80:	3601      	adds	r6, #1
 8018f82:	e7f2      	b.n	8018f6a <__libc_init_array+0x1e>
 8018f84:	08028038 	.word	0x08028038
 8018f88:	08028038 	.word	0x08028038
 8018f8c:	08028038 	.word	0x08028038
 8018f90:	0802803c 	.word	0x0802803c

08018f94 <__retarget_lock_acquire_recursive>:
 8018f94:	4770      	bx	lr

08018f96 <__retarget_lock_release_recursive>:
 8018f96:	4770      	bx	lr

08018f98 <memcpy>:
 8018f98:	440a      	add	r2, r1
 8018f9a:	4291      	cmp	r1, r2
 8018f9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8018fa0:	d100      	bne.n	8018fa4 <memcpy+0xc>
 8018fa2:	4770      	bx	lr
 8018fa4:	b510      	push	{r4, lr}
 8018fa6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018faa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018fae:	4291      	cmp	r1, r2
 8018fb0:	d1f9      	bne.n	8018fa6 <memcpy+0xe>
 8018fb2:	bd10      	pop	{r4, pc}

08018fb4 <__assert_func>:
 8018fb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018fb6:	4614      	mov	r4, r2
 8018fb8:	461a      	mov	r2, r3
 8018fba:	4b09      	ldr	r3, [pc, #36]	; (8018fe0 <__assert_func+0x2c>)
 8018fbc:	681b      	ldr	r3, [r3, #0]
 8018fbe:	4605      	mov	r5, r0
 8018fc0:	68d8      	ldr	r0, [r3, #12]
 8018fc2:	b14c      	cbz	r4, 8018fd8 <__assert_func+0x24>
 8018fc4:	4b07      	ldr	r3, [pc, #28]	; (8018fe4 <__assert_func+0x30>)
 8018fc6:	9100      	str	r1, [sp, #0]
 8018fc8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018fcc:	4906      	ldr	r1, [pc, #24]	; (8018fe8 <__assert_func+0x34>)
 8018fce:	462b      	mov	r3, r5
 8018fd0:	f000 fde8 	bl	8019ba4 <fiprintf>
 8018fd4:	f000 fe9e 	bl	8019d14 <abort>
 8018fd8:	4b04      	ldr	r3, [pc, #16]	; (8018fec <__assert_func+0x38>)
 8018fda:	461c      	mov	r4, r3
 8018fdc:	e7f3      	b.n	8018fc6 <__assert_func+0x12>
 8018fde:	bf00      	nop
 8018fe0:	2000008c 	.word	0x2000008c
 8018fe4:	08027fbe 	.word	0x08027fbe
 8018fe8:	08027fcb 	.word	0x08027fcb
 8018fec:	08027ff9 	.word	0x08027ff9

08018ff0 <_free_r>:
 8018ff0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018ff2:	2900      	cmp	r1, #0
 8018ff4:	d044      	beq.n	8019080 <_free_r+0x90>
 8018ff6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018ffa:	9001      	str	r0, [sp, #4]
 8018ffc:	2b00      	cmp	r3, #0
 8018ffe:	f1a1 0404 	sub.w	r4, r1, #4
 8019002:	bfb8      	it	lt
 8019004:	18e4      	addlt	r4, r4, r3
 8019006:	f000 f8e7 	bl	80191d8 <__malloc_lock>
 801900a:	4a1e      	ldr	r2, [pc, #120]	; (8019084 <_free_r+0x94>)
 801900c:	9801      	ldr	r0, [sp, #4]
 801900e:	6813      	ldr	r3, [r2, #0]
 8019010:	b933      	cbnz	r3, 8019020 <_free_r+0x30>
 8019012:	6063      	str	r3, [r4, #4]
 8019014:	6014      	str	r4, [r2, #0]
 8019016:	b003      	add	sp, #12
 8019018:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801901c:	f000 b8e2 	b.w	80191e4 <__malloc_unlock>
 8019020:	42a3      	cmp	r3, r4
 8019022:	d908      	bls.n	8019036 <_free_r+0x46>
 8019024:	6825      	ldr	r5, [r4, #0]
 8019026:	1961      	adds	r1, r4, r5
 8019028:	428b      	cmp	r3, r1
 801902a:	bf01      	itttt	eq
 801902c:	6819      	ldreq	r1, [r3, #0]
 801902e:	685b      	ldreq	r3, [r3, #4]
 8019030:	1949      	addeq	r1, r1, r5
 8019032:	6021      	streq	r1, [r4, #0]
 8019034:	e7ed      	b.n	8019012 <_free_r+0x22>
 8019036:	461a      	mov	r2, r3
 8019038:	685b      	ldr	r3, [r3, #4]
 801903a:	b10b      	cbz	r3, 8019040 <_free_r+0x50>
 801903c:	42a3      	cmp	r3, r4
 801903e:	d9fa      	bls.n	8019036 <_free_r+0x46>
 8019040:	6811      	ldr	r1, [r2, #0]
 8019042:	1855      	adds	r5, r2, r1
 8019044:	42a5      	cmp	r5, r4
 8019046:	d10b      	bne.n	8019060 <_free_r+0x70>
 8019048:	6824      	ldr	r4, [r4, #0]
 801904a:	4421      	add	r1, r4
 801904c:	1854      	adds	r4, r2, r1
 801904e:	42a3      	cmp	r3, r4
 8019050:	6011      	str	r1, [r2, #0]
 8019052:	d1e0      	bne.n	8019016 <_free_r+0x26>
 8019054:	681c      	ldr	r4, [r3, #0]
 8019056:	685b      	ldr	r3, [r3, #4]
 8019058:	6053      	str	r3, [r2, #4]
 801905a:	440c      	add	r4, r1
 801905c:	6014      	str	r4, [r2, #0]
 801905e:	e7da      	b.n	8019016 <_free_r+0x26>
 8019060:	d902      	bls.n	8019068 <_free_r+0x78>
 8019062:	230c      	movs	r3, #12
 8019064:	6003      	str	r3, [r0, #0]
 8019066:	e7d6      	b.n	8019016 <_free_r+0x26>
 8019068:	6825      	ldr	r5, [r4, #0]
 801906a:	1961      	adds	r1, r4, r5
 801906c:	428b      	cmp	r3, r1
 801906e:	bf04      	itt	eq
 8019070:	6819      	ldreq	r1, [r3, #0]
 8019072:	685b      	ldreq	r3, [r3, #4]
 8019074:	6063      	str	r3, [r4, #4]
 8019076:	bf04      	itt	eq
 8019078:	1949      	addeq	r1, r1, r5
 801907a:	6021      	streq	r1, [r4, #0]
 801907c:	6054      	str	r4, [r2, #4]
 801907e:	e7ca      	b.n	8019016 <_free_r+0x26>
 8019080:	b003      	add	sp, #12
 8019082:	bd30      	pop	{r4, r5, pc}
 8019084:	20011148 	.word	0x20011148

08019088 <malloc>:
 8019088:	4b02      	ldr	r3, [pc, #8]	; (8019094 <malloc+0xc>)
 801908a:	4601      	mov	r1, r0
 801908c:	6818      	ldr	r0, [r3, #0]
 801908e:	f000 b823 	b.w	80190d8 <_malloc_r>
 8019092:	bf00      	nop
 8019094:	2000008c 	.word	0x2000008c

08019098 <sbrk_aligned>:
 8019098:	b570      	push	{r4, r5, r6, lr}
 801909a:	4e0e      	ldr	r6, [pc, #56]	; (80190d4 <sbrk_aligned+0x3c>)
 801909c:	460c      	mov	r4, r1
 801909e:	6831      	ldr	r1, [r6, #0]
 80190a0:	4605      	mov	r5, r0
 80190a2:	b911      	cbnz	r1, 80190aa <sbrk_aligned+0x12>
 80190a4:	f000 fe26 	bl	8019cf4 <_sbrk_r>
 80190a8:	6030      	str	r0, [r6, #0]
 80190aa:	4621      	mov	r1, r4
 80190ac:	4628      	mov	r0, r5
 80190ae:	f000 fe21 	bl	8019cf4 <_sbrk_r>
 80190b2:	1c43      	adds	r3, r0, #1
 80190b4:	d00a      	beq.n	80190cc <sbrk_aligned+0x34>
 80190b6:	1cc4      	adds	r4, r0, #3
 80190b8:	f024 0403 	bic.w	r4, r4, #3
 80190bc:	42a0      	cmp	r0, r4
 80190be:	d007      	beq.n	80190d0 <sbrk_aligned+0x38>
 80190c0:	1a21      	subs	r1, r4, r0
 80190c2:	4628      	mov	r0, r5
 80190c4:	f000 fe16 	bl	8019cf4 <_sbrk_r>
 80190c8:	3001      	adds	r0, #1
 80190ca:	d101      	bne.n	80190d0 <sbrk_aligned+0x38>
 80190cc:	f04f 34ff 	mov.w	r4, #4294967295
 80190d0:	4620      	mov	r0, r4
 80190d2:	bd70      	pop	{r4, r5, r6, pc}
 80190d4:	2001114c 	.word	0x2001114c

080190d8 <_malloc_r>:
 80190d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80190dc:	1ccd      	adds	r5, r1, #3
 80190de:	f025 0503 	bic.w	r5, r5, #3
 80190e2:	3508      	adds	r5, #8
 80190e4:	2d0c      	cmp	r5, #12
 80190e6:	bf38      	it	cc
 80190e8:	250c      	movcc	r5, #12
 80190ea:	2d00      	cmp	r5, #0
 80190ec:	4607      	mov	r7, r0
 80190ee:	db01      	blt.n	80190f4 <_malloc_r+0x1c>
 80190f0:	42a9      	cmp	r1, r5
 80190f2:	d905      	bls.n	8019100 <_malloc_r+0x28>
 80190f4:	230c      	movs	r3, #12
 80190f6:	603b      	str	r3, [r7, #0]
 80190f8:	2600      	movs	r6, #0
 80190fa:	4630      	mov	r0, r6
 80190fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019100:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80191d4 <_malloc_r+0xfc>
 8019104:	f000 f868 	bl	80191d8 <__malloc_lock>
 8019108:	f8d8 3000 	ldr.w	r3, [r8]
 801910c:	461c      	mov	r4, r3
 801910e:	bb5c      	cbnz	r4, 8019168 <_malloc_r+0x90>
 8019110:	4629      	mov	r1, r5
 8019112:	4638      	mov	r0, r7
 8019114:	f7ff ffc0 	bl	8019098 <sbrk_aligned>
 8019118:	1c43      	adds	r3, r0, #1
 801911a:	4604      	mov	r4, r0
 801911c:	d155      	bne.n	80191ca <_malloc_r+0xf2>
 801911e:	f8d8 4000 	ldr.w	r4, [r8]
 8019122:	4626      	mov	r6, r4
 8019124:	2e00      	cmp	r6, #0
 8019126:	d145      	bne.n	80191b4 <_malloc_r+0xdc>
 8019128:	2c00      	cmp	r4, #0
 801912a:	d048      	beq.n	80191be <_malloc_r+0xe6>
 801912c:	6823      	ldr	r3, [r4, #0]
 801912e:	4631      	mov	r1, r6
 8019130:	4638      	mov	r0, r7
 8019132:	eb04 0903 	add.w	r9, r4, r3
 8019136:	f000 fddd 	bl	8019cf4 <_sbrk_r>
 801913a:	4581      	cmp	r9, r0
 801913c:	d13f      	bne.n	80191be <_malloc_r+0xe6>
 801913e:	6821      	ldr	r1, [r4, #0]
 8019140:	1a6d      	subs	r5, r5, r1
 8019142:	4629      	mov	r1, r5
 8019144:	4638      	mov	r0, r7
 8019146:	f7ff ffa7 	bl	8019098 <sbrk_aligned>
 801914a:	3001      	adds	r0, #1
 801914c:	d037      	beq.n	80191be <_malloc_r+0xe6>
 801914e:	6823      	ldr	r3, [r4, #0]
 8019150:	442b      	add	r3, r5
 8019152:	6023      	str	r3, [r4, #0]
 8019154:	f8d8 3000 	ldr.w	r3, [r8]
 8019158:	2b00      	cmp	r3, #0
 801915a:	d038      	beq.n	80191ce <_malloc_r+0xf6>
 801915c:	685a      	ldr	r2, [r3, #4]
 801915e:	42a2      	cmp	r2, r4
 8019160:	d12b      	bne.n	80191ba <_malloc_r+0xe2>
 8019162:	2200      	movs	r2, #0
 8019164:	605a      	str	r2, [r3, #4]
 8019166:	e00f      	b.n	8019188 <_malloc_r+0xb0>
 8019168:	6822      	ldr	r2, [r4, #0]
 801916a:	1b52      	subs	r2, r2, r5
 801916c:	d41f      	bmi.n	80191ae <_malloc_r+0xd6>
 801916e:	2a0b      	cmp	r2, #11
 8019170:	d917      	bls.n	80191a2 <_malloc_r+0xca>
 8019172:	1961      	adds	r1, r4, r5
 8019174:	42a3      	cmp	r3, r4
 8019176:	6025      	str	r5, [r4, #0]
 8019178:	bf18      	it	ne
 801917a:	6059      	strne	r1, [r3, #4]
 801917c:	6863      	ldr	r3, [r4, #4]
 801917e:	bf08      	it	eq
 8019180:	f8c8 1000 	streq.w	r1, [r8]
 8019184:	5162      	str	r2, [r4, r5]
 8019186:	604b      	str	r3, [r1, #4]
 8019188:	4638      	mov	r0, r7
 801918a:	f104 060b 	add.w	r6, r4, #11
 801918e:	f000 f829 	bl	80191e4 <__malloc_unlock>
 8019192:	f026 0607 	bic.w	r6, r6, #7
 8019196:	1d23      	adds	r3, r4, #4
 8019198:	1af2      	subs	r2, r6, r3
 801919a:	d0ae      	beq.n	80190fa <_malloc_r+0x22>
 801919c:	1b9b      	subs	r3, r3, r6
 801919e:	50a3      	str	r3, [r4, r2]
 80191a0:	e7ab      	b.n	80190fa <_malloc_r+0x22>
 80191a2:	42a3      	cmp	r3, r4
 80191a4:	6862      	ldr	r2, [r4, #4]
 80191a6:	d1dd      	bne.n	8019164 <_malloc_r+0x8c>
 80191a8:	f8c8 2000 	str.w	r2, [r8]
 80191ac:	e7ec      	b.n	8019188 <_malloc_r+0xb0>
 80191ae:	4623      	mov	r3, r4
 80191b0:	6864      	ldr	r4, [r4, #4]
 80191b2:	e7ac      	b.n	801910e <_malloc_r+0x36>
 80191b4:	4634      	mov	r4, r6
 80191b6:	6876      	ldr	r6, [r6, #4]
 80191b8:	e7b4      	b.n	8019124 <_malloc_r+0x4c>
 80191ba:	4613      	mov	r3, r2
 80191bc:	e7cc      	b.n	8019158 <_malloc_r+0x80>
 80191be:	230c      	movs	r3, #12
 80191c0:	603b      	str	r3, [r7, #0]
 80191c2:	4638      	mov	r0, r7
 80191c4:	f000 f80e 	bl	80191e4 <__malloc_unlock>
 80191c8:	e797      	b.n	80190fa <_malloc_r+0x22>
 80191ca:	6025      	str	r5, [r4, #0]
 80191cc:	e7dc      	b.n	8019188 <_malloc_r+0xb0>
 80191ce:	605b      	str	r3, [r3, #4]
 80191d0:	deff      	udf	#255	; 0xff
 80191d2:	bf00      	nop
 80191d4:	20011148 	.word	0x20011148

080191d8 <__malloc_lock>:
 80191d8:	4801      	ldr	r0, [pc, #4]	; (80191e0 <__malloc_lock+0x8>)
 80191da:	f7ff bedb 	b.w	8018f94 <__retarget_lock_acquire_recursive>
 80191de:	bf00      	nop
 80191e0:	20011144 	.word	0x20011144

080191e4 <__malloc_unlock>:
 80191e4:	4801      	ldr	r0, [pc, #4]	; (80191ec <__malloc_unlock+0x8>)
 80191e6:	f7ff bed6 	b.w	8018f96 <__retarget_lock_release_recursive>
 80191ea:	bf00      	nop
 80191ec:	20011144 	.word	0x20011144

080191f0 <__ssputs_r>:
 80191f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80191f4:	688e      	ldr	r6, [r1, #8]
 80191f6:	461f      	mov	r7, r3
 80191f8:	42be      	cmp	r6, r7
 80191fa:	680b      	ldr	r3, [r1, #0]
 80191fc:	4682      	mov	sl, r0
 80191fe:	460c      	mov	r4, r1
 8019200:	4690      	mov	r8, r2
 8019202:	d82c      	bhi.n	801925e <__ssputs_r+0x6e>
 8019204:	898a      	ldrh	r2, [r1, #12]
 8019206:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801920a:	d026      	beq.n	801925a <__ssputs_r+0x6a>
 801920c:	6965      	ldr	r5, [r4, #20]
 801920e:	6909      	ldr	r1, [r1, #16]
 8019210:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019214:	eba3 0901 	sub.w	r9, r3, r1
 8019218:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801921c:	1c7b      	adds	r3, r7, #1
 801921e:	444b      	add	r3, r9
 8019220:	106d      	asrs	r5, r5, #1
 8019222:	429d      	cmp	r5, r3
 8019224:	bf38      	it	cc
 8019226:	461d      	movcc	r5, r3
 8019228:	0553      	lsls	r3, r2, #21
 801922a:	d527      	bpl.n	801927c <__ssputs_r+0x8c>
 801922c:	4629      	mov	r1, r5
 801922e:	f7ff ff53 	bl	80190d8 <_malloc_r>
 8019232:	4606      	mov	r6, r0
 8019234:	b360      	cbz	r0, 8019290 <__ssputs_r+0xa0>
 8019236:	6921      	ldr	r1, [r4, #16]
 8019238:	464a      	mov	r2, r9
 801923a:	f7ff fead 	bl	8018f98 <memcpy>
 801923e:	89a3      	ldrh	r3, [r4, #12]
 8019240:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019244:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019248:	81a3      	strh	r3, [r4, #12]
 801924a:	6126      	str	r6, [r4, #16]
 801924c:	6165      	str	r5, [r4, #20]
 801924e:	444e      	add	r6, r9
 8019250:	eba5 0509 	sub.w	r5, r5, r9
 8019254:	6026      	str	r6, [r4, #0]
 8019256:	60a5      	str	r5, [r4, #8]
 8019258:	463e      	mov	r6, r7
 801925a:	42be      	cmp	r6, r7
 801925c:	d900      	bls.n	8019260 <__ssputs_r+0x70>
 801925e:	463e      	mov	r6, r7
 8019260:	6820      	ldr	r0, [r4, #0]
 8019262:	4632      	mov	r2, r6
 8019264:	4641      	mov	r1, r8
 8019266:	f7ff fd1c 	bl	8018ca2 <memmove>
 801926a:	68a3      	ldr	r3, [r4, #8]
 801926c:	1b9b      	subs	r3, r3, r6
 801926e:	60a3      	str	r3, [r4, #8]
 8019270:	6823      	ldr	r3, [r4, #0]
 8019272:	4433      	add	r3, r6
 8019274:	6023      	str	r3, [r4, #0]
 8019276:	2000      	movs	r0, #0
 8019278:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801927c:	462a      	mov	r2, r5
 801927e:	f000 fd50 	bl	8019d22 <_realloc_r>
 8019282:	4606      	mov	r6, r0
 8019284:	2800      	cmp	r0, #0
 8019286:	d1e0      	bne.n	801924a <__ssputs_r+0x5a>
 8019288:	6921      	ldr	r1, [r4, #16]
 801928a:	4650      	mov	r0, sl
 801928c:	f7ff feb0 	bl	8018ff0 <_free_r>
 8019290:	230c      	movs	r3, #12
 8019292:	f8ca 3000 	str.w	r3, [sl]
 8019296:	89a3      	ldrh	r3, [r4, #12]
 8019298:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801929c:	81a3      	strh	r3, [r4, #12]
 801929e:	f04f 30ff 	mov.w	r0, #4294967295
 80192a2:	e7e9      	b.n	8019278 <__ssputs_r+0x88>

080192a4 <_svfiprintf_r>:
 80192a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80192a8:	4698      	mov	r8, r3
 80192aa:	898b      	ldrh	r3, [r1, #12]
 80192ac:	061b      	lsls	r3, r3, #24
 80192ae:	b09d      	sub	sp, #116	; 0x74
 80192b0:	4607      	mov	r7, r0
 80192b2:	460d      	mov	r5, r1
 80192b4:	4614      	mov	r4, r2
 80192b6:	d50e      	bpl.n	80192d6 <_svfiprintf_r+0x32>
 80192b8:	690b      	ldr	r3, [r1, #16]
 80192ba:	b963      	cbnz	r3, 80192d6 <_svfiprintf_r+0x32>
 80192bc:	2140      	movs	r1, #64	; 0x40
 80192be:	f7ff ff0b 	bl	80190d8 <_malloc_r>
 80192c2:	6028      	str	r0, [r5, #0]
 80192c4:	6128      	str	r0, [r5, #16]
 80192c6:	b920      	cbnz	r0, 80192d2 <_svfiprintf_r+0x2e>
 80192c8:	230c      	movs	r3, #12
 80192ca:	603b      	str	r3, [r7, #0]
 80192cc:	f04f 30ff 	mov.w	r0, #4294967295
 80192d0:	e0d0      	b.n	8019474 <_svfiprintf_r+0x1d0>
 80192d2:	2340      	movs	r3, #64	; 0x40
 80192d4:	616b      	str	r3, [r5, #20]
 80192d6:	2300      	movs	r3, #0
 80192d8:	9309      	str	r3, [sp, #36]	; 0x24
 80192da:	2320      	movs	r3, #32
 80192dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80192e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80192e4:	2330      	movs	r3, #48	; 0x30
 80192e6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801948c <_svfiprintf_r+0x1e8>
 80192ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80192ee:	f04f 0901 	mov.w	r9, #1
 80192f2:	4623      	mov	r3, r4
 80192f4:	469a      	mov	sl, r3
 80192f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80192fa:	b10a      	cbz	r2, 8019300 <_svfiprintf_r+0x5c>
 80192fc:	2a25      	cmp	r2, #37	; 0x25
 80192fe:	d1f9      	bne.n	80192f4 <_svfiprintf_r+0x50>
 8019300:	ebba 0b04 	subs.w	fp, sl, r4
 8019304:	d00b      	beq.n	801931e <_svfiprintf_r+0x7a>
 8019306:	465b      	mov	r3, fp
 8019308:	4622      	mov	r2, r4
 801930a:	4629      	mov	r1, r5
 801930c:	4638      	mov	r0, r7
 801930e:	f7ff ff6f 	bl	80191f0 <__ssputs_r>
 8019312:	3001      	adds	r0, #1
 8019314:	f000 80a9 	beq.w	801946a <_svfiprintf_r+0x1c6>
 8019318:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801931a:	445a      	add	r2, fp
 801931c:	9209      	str	r2, [sp, #36]	; 0x24
 801931e:	f89a 3000 	ldrb.w	r3, [sl]
 8019322:	2b00      	cmp	r3, #0
 8019324:	f000 80a1 	beq.w	801946a <_svfiprintf_r+0x1c6>
 8019328:	2300      	movs	r3, #0
 801932a:	f04f 32ff 	mov.w	r2, #4294967295
 801932e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019332:	f10a 0a01 	add.w	sl, sl, #1
 8019336:	9304      	str	r3, [sp, #16]
 8019338:	9307      	str	r3, [sp, #28]
 801933a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801933e:	931a      	str	r3, [sp, #104]	; 0x68
 8019340:	4654      	mov	r4, sl
 8019342:	2205      	movs	r2, #5
 8019344:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019348:	4850      	ldr	r0, [pc, #320]	; (801948c <_svfiprintf_r+0x1e8>)
 801934a:	f7e6 ff69 	bl	8000220 <memchr>
 801934e:	9a04      	ldr	r2, [sp, #16]
 8019350:	b9d8      	cbnz	r0, 801938a <_svfiprintf_r+0xe6>
 8019352:	06d0      	lsls	r0, r2, #27
 8019354:	bf44      	itt	mi
 8019356:	2320      	movmi	r3, #32
 8019358:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801935c:	0711      	lsls	r1, r2, #28
 801935e:	bf44      	itt	mi
 8019360:	232b      	movmi	r3, #43	; 0x2b
 8019362:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019366:	f89a 3000 	ldrb.w	r3, [sl]
 801936a:	2b2a      	cmp	r3, #42	; 0x2a
 801936c:	d015      	beq.n	801939a <_svfiprintf_r+0xf6>
 801936e:	9a07      	ldr	r2, [sp, #28]
 8019370:	4654      	mov	r4, sl
 8019372:	2000      	movs	r0, #0
 8019374:	f04f 0c0a 	mov.w	ip, #10
 8019378:	4621      	mov	r1, r4
 801937a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801937e:	3b30      	subs	r3, #48	; 0x30
 8019380:	2b09      	cmp	r3, #9
 8019382:	d94d      	bls.n	8019420 <_svfiprintf_r+0x17c>
 8019384:	b1b0      	cbz	r0, 80193b4 <_svfiprintf_r+0x110>
 8019386:	9207      	str	r2, [sp, #28]
 8019388:	e014      	b.n	80193b4 <_svfiprintf_r+0x110>
 801938a:	eba0 0308 	sub.w	r3, r0, r8
 801938e:	fa09 f303 	lsl.w	r3, r9, r3
 8019392:	4313      	orrs	r3, r2
 8019394:	9304      	str	r3, [sp, #16]
 8019396:	46a2      	mov	sl, r4
 8019398:	e7d2      	b.n	8019340 <_svfiprintf_r+0x9c>
 801939a:	9b03      	ldr	r3, [sp, #12]
 801939c:	1d19      	adds	r1, r3, #4
 801939e:	681b      	ldr	r3, [r3, #0]
 80193a0:	9103      	str	r1, [sp, #12]
 80193a2:	2b00      	cmp	r3, #0
 80193a4:	bfbb      	ittet	lt
 80193a6:	425b      	neglt	r3, r3
 80193a8:	f042 0202 	orrlt.w	r2, r2, #2
 80193ac:	9307      	strge	r3, [sp, #28]
 80193ae:	9307      	strlt	r3, [sp, #28]
 80193b0:	bfb8      	it	lt
 80193b2:	9204      	strlt	r2, [sp, #16]
 80193b4:	7823      	ldrb	r3, [r4, #0]
 80193b6:	2b2e      	cmp	r3, #46	; 0x2e
 80193b8:	d10c      	bne.n	80193d4 <_svfiprintf_r+0x130>
 80193ba:	7863      	ldrb	r3, [r4, #1]
 80193bc:	2b2a      	cmp	r3, #42	; 0x2a
 80193be:	d134      	bne.n	801942a <_svfiprintf_r+0x186>
 80193c0:	9b03      	ldr	r3, [sp, #12]
 80193c2:	1d1a      	adds	r2, r3, #4
 80193c4:	681b      	ldr	r3, [r3, #0]
 80193c6:	9203      	str	r2, [sp, #12]
 80193c8:	2b00      	cmp	r3, #0
 80193ca:	bfb8      	it	lt
 80193cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80193d0:	3402      	adds	r4, #2
 80193d2:	9305      	str	r3, [sp, #20]
 80193d4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801949c <_svfiprintf_r+0x1f8>
 80193d8:	7821      	ldrb	r1, [r4, #0]
 80193da:	2203      	movs	r2, #3
 80193dc:	4650      	mov	r0, sl
 80193de:	f7e6 ff1f 	bl	8000220 <memchr>
 80193e2:	b138      	cbz	r0, 80193f4 <_svfiprintf_r+0x150>
 80193e4:	9b04      	ldr	r3, [sp, #16]
 80193e6:	eba0 000a 	sub.w	r0, r0, sl
 80193ea:	2240      	movs	r2, #64	; 0x40
 80193ec:	4082      	lsls	r2, r0
 80193ee:	4313      	orrs	r3, r2
 80193f0:	3401      	adds	r4, #1
 80193f2:	9304      	str	r3, [sp, #16]
 80193f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80193f8:	4825      	ldr	r0, [pc, #148]	; (8019490 <_svfiprintf_r+0x1ec>)
 80193fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80193fe:	2206      	movs	r2, #6
 8019400:	f7e6 ff0e 	bl	8000220 <memchr>
 8019404:	2800      	cmp	r0, #0
 8019406:	d038      	beq.n	801947a <_svfiprintf_r+0x1d6>
 8019408:	4b22      	ldr	r3, [pc, #136]	; (8019494 <_svfiprintf_r+0x1f0>)
 801940a:	bb1b      	cbnz	r3, 8019454 <_svfiprintf_r+0x1b0>
 801940c:	9b03      	ldr	r3, [sp, #12]
 801940e:	3307      	adds	r3, #7
 8019410:	f023 0307 	bic.w	r3, r3, #7
 8019414:	3308      	adds	r3, #8
 8019416:	9303      	str	r3, [sp, #12]
 8019418:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801941a:	4433      	add	r3, r6
 801941c:	9309      	str	r3, [sp, #36]	; 0x24
 801941e:	e768      	b.n	80192f2 <_svfiprintf_r+0x4e>
 8019420:	fb0c 3202 	mla	r2, ip, r2, r3
 8019424:	460c      	mov	r4, r1
 8019426:	2001      	movs	r0, #1
 8019428:	e7a6      	b.n	8019378 <_svfiprintf_r+0xd4>
 801942a:	2300      	movs	r3, #0
 801942c:	3401      	adds	r4, #1
 801942e:	9305      	str	r3, [sp, #20]
 8019430:	4619      	mov	r1, r3
 8019432:	f04f 0c0a 	mov.w	ip, #10
 8019436:	4620      	mov	r0, r4
 8019438:	f810 2b01 	ldrb.w	r2, [r0], #1
 801943c:	3a30      	subs	r2, #48	; 0x30
 801943e:	2a09      	cmp	r2, #9
 8019440:	d903      	bls.n	801944a <_svfiprintf_r+0x1a6>
 8019442:	2b00      	cmp	r3, #0
 8019444:	d0c6      	beq.n	80193d4 <_svfiprintf_r+0x130>
 8019446:	9105      	str	r1, [sp, #20]
 8019448:	e7c4      	b.n	80193d4 <_svfiprintf_r+0x130>
 801944a:	fb0c 2101 	mla	r1, ip, r1, r2
 801944e:	4604      	mov	r4, r0
 8019450:	2301      	movs	r3, #1
 8019452:	e7f0      	b.n	8019436 <_svfiprintf_r+0x192>
 8019454:	ab03      	add	r3, sp, #12
 8019456:	9300      	str	r3, [sp, #0]
 8019458:	462a      	mov	r2, r5
 801945a:	4b0f      	ldr	r3, [pc, #60]	; (8019498 <_svfiprintf_r+0x1f4>)
 801945c:	a904      	add	r1, sp, #16
 801945e:	4638      	mov	r0, r7
 8019460:	f3af 8000 	nop.w
 8019464:	1c42      	adds	r2, r0, #1
 8019466:	4606      	mov	r6, r0
 8019468:	d1d6      	bne.n	8019418 <_svfiprintf_r+0x174>
 801946a:	89ab      	ldrh	r3, [r5, #12]
 801946c:	065b      	lsls	r3, r3, #25
 801946e:	f53f af2d 	bmi.w	80192cc <_svfiprintf_r+0x28>
 8019472:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019474:	b01d      	add	sp, #116	; 0x74
 8019476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801947a:	ab03      	add	r3, sp, #12
 801947c:	9300      	str	r3, [sp, #0]
 801947e:	462a      	mov	r2, r5
 8019480:	4b05      	ldr	r3, [pc, #20]	; (8019498 <_svfiprintf_r+0x1f4>)
 8019482:	a904      	add	r1, sp, #16
 8019484:	4638      	mov	r0, r7
 8019486:	f000 f9bd 	bl	8019804 <_printf_i>
 801948a:	e7eb      	b.n	8019464 <_svfiprintf_r+0x1c0>
 801948c:	08027ffa 	.word	0x08027ffa
 8019490:	08028004 	.word	0x08028004
 8019494:	00000000 	.word	0x00000000
 8019498:	080191f1 	.word	0x080191f1
 801949c:	08028000 	.word	0x08028000

080194a0 <__sfputc_r>:
 80194a0:	6893      	ldr	r3, [r2, #8]
 80194a2:	3b01      	subs	r3, #1
 80194a4:	2b00      	cmp	r3, #0
 80194a6:	b410      	push	{r4}
 80194a8:	6093      	str	r3, [r2, #8]
 80194aa:	da08      	bge.n	80194be <__sfputc_r+0x1e>
 80194ac:	6994      	ldr	r4, [r2, #24]
 80194ae:	42a3      	cmp	r3, r4
 80194b0:	db01      	blt.n	80194b6 <__sfputc_r+0x16>
 80194b2:	290a      	cmp	r1, #10
 80194b4:	d103      	bne.n	80194be <__sfputc_r+0x1e>
 80194b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80194ba:	f000 bb85 	b.w	8019bc8 <__swbuf_r>
 80194be:	6813      	ldr	r3, [r2, #0]
 80194c0:	1c58      	adds	r0, r3, #1
 80194c2:	6010      	str	r0, [r2, #0]
 80194c4:	7019      	strb	r1, [r3, #0]
 80194c6:	4608      	mov	r0, r1
 80194c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80194cc:	4770      	bx	lr

080194ce <__sfputs_r>:
 80194ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80194d0:	4606      	mov	r6, r0
 80194d2:	460f      	mov	r7, r1
 80194d4:	4614      	mov	r4, r2
 80194d6:	18d5      	adds	r5, r2, r3
 80194d8:	42ac      	cmp	r4, r5
 80194da:	d101      	bne.n	80194e0 <__sfputs_r+0x12>
 80194dc:	2000      	movs	r0, #0
 80194de:	e007      	b.n	80194f0 <__sfputs_r+0x22>
 80194e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80194e4:	463a      	mov	r2, r7
 80194e6:	4630      	mov	r0, r6
 80194e8:	f7ff ffda 	bl	80194a0 <__sfputc_r>
 80194ec:	1c43      	adds	r3, r0, #1
 80194ee:	d1f3      	bne.n	80194d8 <__sfputs_r+0xa>
 80194f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080194f4 <_vfiprintf_r>:
 80194f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80194f8:	460d      	mov	r5, r1
 80194fa:	b09d      	sub	sp, #116	; 0x74
 80194fc:	4614      	mov	r4, r2
 80194fe:	4698      	mov	r8, r3
 8019500:	4606      	mov	r6, r0
 8019502:	b118      	cbz	r0, 801950c <_vfiprintf_r+0x18>
 8019504:	6a03      	ldr	r3, [r0, #32]
 8019506:	b90b      	cbnz	r3, 801950c <_vfiprintf_r+0x18>
 8019508:	f7ff fb10 	bl	8018b2c <__sinit>
 801950c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801950e:	07d9      	lsls	r1, r3, #31
 8019510:	d405      	bmi.n	801951e <_vfiprintf_r+0x2a>
 8019512:	89ab      	ldrh	r3, [r5, #12]
 8019514:	059a      	lsls	r2, r3, #22
 8019516:	d402      	bmi.n	801951e <_vfiprintf_r+0x2a>
 8019518:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801951a:	f7ff fd3b 	bl	8018f94 <__retarget_lock_acquire_recursive>
 801951e:	89ab      	ldrh	r3, [r5, #12]
 8019520:	071b      	lsls	r3, r3, #28
 8019522:	d501      	bpl.n	8019528 <_vfiprintf_r+0x34>
 8019524:	692b      	ldr	r3, [r5, #16]
 8019526:	b99b      	cbnz	r3, 8019550 <_vfiprintf_r+0x5c>
 8019528:	4629      	mov	r1, r5
 801952a:	4630      	mov	r0, r6
 801952c:	f000 fb8a 	bl	8019c44 <__swsetup_r>
 8019530:	b170      	cbz	r0, 8019550 <_vfiprintf_r+0x5c>
 8019532:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019534:	07dc      	lsls	r4, r3, #31
 8019536:	d504      	bpl.n	8019542 <_vfiprintf_r+0x4e>
 8019538:	f04f 30ff 	mov.w	r0, #4294967295
 801953c:	b01d      	add	sp, #116	; 0x74
 801953e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019542:	89ab      	ldrh	r3, [r5, #12]
 8019544:	0598      	lsls	r0, r3, #22
 8019546:	d4f7      	bmi.n	8019538 <_vfiprintf_r+0x44>
 8019548:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801954a:	f7ff fd24 	bl	8018f96 <__retarget_lock_release_recursive>
 801954e:	e7f3      	b.n	8019538 <_vfiprintf_r+0x44>
 8019550:	2300      	movs	r3, #0
 8019552:	9309      	str	r3, [sp, #36]	; 0x24
 8019554:	2320      	movs	r3, #32
 8019556:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801955a:	f8cd 800c 	str.w	r8, [sp, #12]
 801955e:	2330      	movs	r3, #48	; 0x30
 8019560:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8019714 <_vfiprintf_r+0x220>
 8019564:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019568:	f04f 0901 	mov.w	r9, #1
 801956c:	4623      	mov	r3, r4
 801956e:	469a      	mov	sl, r3
 8019570:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019574:	b10a      	cbz	r2, 801957a <_vfiprintf_r+0x86>
 8019576:	2a25      	cmp	r2, #37	; 0x25
 8019578:	d1f9      	bne.n	801956e <_vfiprintf_r+0x7a>
 801957a:	ebba 0b04 	subs.w	fp, sl, r4
 801957e:	d00b      	beq.n	8019598 <_vfiprintf_r+0xa4>
 8019580:	465b      	mov	r3, fp
 8019582:	4622      	mov	r2, r4
 8019584:	4629      	mov	r1, r5
 8019586:	4630      	mov	r0, r6
 8019588:	f7ff ffa1 	bl	80194ce <__sfputs_r>
 801958c:	3001      	adds	r0, #1
 801958e:	f000 80a9 	beq.w	80196e4 <_vfiprintf_r+0x1f0>
 8019592:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019594:	445a      	add	r2, fp
 8019596:	9209      	str	r2, [sp, #36]	; 0x24
 8019598:	f89a 3000 	ldrb.w	r3, [sl]
 801959c:	2b00      	cmp	r3, #0
 801959e:	f000 80a1 	beq.w	80196e4 <_vfiprintf_r+0x1f0>
 80195a2:	2300      	movs	r3, #0
 80195a4:	f04f 32ff 	mov.w	r2, #4294967295
 80195a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80195ac:	f10a 0a01 	add.w	sl, sl, #1
 80195b0:	9304      	str	r3, [sp, #16]
 80195b2:	9307      	str	r3, [sp, #28]
 80195b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80195b8:	931a      	str	r3, [sp, #104]	; 0x68
 80195ba:	4654      	mov	r4, sl
 80195bc:	2205      	movs	r2, #5
 80195be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80195c2:	4854      	ldr	r0, [pc, #336]	; (8019714 <_vfiprintf_r+0x220>)
 80195c4:	f7e6 fe2c 	bl	8000220 <memchr>
 80195c8:	9a04      	ldr	r2, [sp, #16]
 80195ca:	b9d8      	cbnz	r0, 8019604 <_vfiprintf_r+0x110>
 80195cc:	06d1      	lsls	r1, r2, #27
 80195ce:	bf44      	itt	mi
 80195d0:	2320      	movmi	r3, #32
 80195d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80195d6:	0713      	lsls	r3, r2, #28
 80195d8:	bf44      	itt	mi
 80195da:	232b      	movmi	r3, #43	; 0x2b
 80195dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80195e0:	f89a 3000 	ldrb.w	r3, [sl]
 80195e4:	2b2a      	cmp	r3, #42	; 0x2a
 80195e6:	d015      	beq.n	8019614 <_vfiprintf_r+0x120>
 80195e8:	9a07      	ldr	r2, [sp, #28]
 80195ea:	4654      	mov	r4, sl
 80195ec:	2000      	movs	r0, #0
 80195ee:	f04f 0c0a 	mov.w	ip, #10
 80195f2:	4621      	mov	r1, r4
 80195f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80195f8:	3b30      	subs	r3, #48	; 0x30
 80195fa:	2b09      	cmp	r3, #9
 80195fc:	d94d      	bls.n	801969a <_vfiprintf_r+0x1a6>
 80195fe:	b1b0      	cbz	r0, 801962e <_vfiprintf_r+0x13a>
 8019600:	9207      	str	r2, [sp, #28]
 8019602:	e014      	b.n	801962e <_vfiprintf_r+0x13a>
 8019604:	eba0 0308 	sub.w	r3, r0, r8
 8019608:	fa09 f303 	lsl.w	r3, r9, r3
 801960c:	4313      	orrs	r3, r2
 801960e:	9304      	str	r3, [sp, #16]
 8019610:	46a2      	mov	sl, r4
 8019612:	e7d2      	b.n	80195ba <_vfiprintf_r+0xc6>
 8019614:	9b03      	ldr	r3, [sp, #12]
 8019616:	1d19      	adds	r1, r3, #4
 8019618:	681b      	ldr	r3, [r3, #0]
 801961a:	9103      	str	r1, [sp, #12]
 801961c:	2b00      	cmp	r3, #0
 801961e:	bfbb      	ittet	lt
 8019620:	425b      	neglt	r3, r3
 8019622:	f042 0202 	orrlt.w	r2, r2, #2
 8019626:	9307      	strge	r3, [sp, #28]
 8019628:	9307      	strlt	r3, [sp, #28]
 801962a:	bfb8      	it	lt
 801962c:	9204      	strlt	r2, [sp, #16]
 801962e:	7823      	ldrb	r3, [r4, #0]
 8019630:	2b2e      	cmp	r3, #46	; 0x2e
 8019632:	d10c      	bne.n	801964e <_vfiprintf_r+0x15a>
 8019634:	7863      	ldrb	r3, [r4, #1]
 8019636:	2b2a      	cmp	r3, #42	; 0x2a
 8019638:	d134      	bne.n	80196a4 <_vfiprintf_r+0x1b0>
 801963a:	9b03      	ldr	r3, [sp, #12]
 801963c:	1d1a      	adds	r2, r3, #4
 801963e:	681b      	ldr	r3, [r3, #0]
 8019640:	9203      	str	r2, [sp, #12]
 8019642:	2b00      	cmp	r3, #0
 8019644:	bfb8      	it	lt
 8019646:	f04f 33ff 	movlt.w	r3, #4294967295
 801964a:	3402      	adds	r4, #2
 801964c:	9305      	str	r3, [sp, #20]
 801964e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8019724 <_vfiprintf_r+0x230>
 8019652:	7821      	ldrb	r1, [r4, #0]
 8019654:	2203      	movs	r2, #3
 8019656:	4650      	mov	r0, sl
 8019658:	f7e6 fde2 	bl	8000220 <memchr>
 801965c:	b138      	cbz	r0, 801966e <_vfiprintf_r+0x17a>
 801965e:	9b04      	ldr	r3, [sp, #16]
 8019660:	eba0 000a 	sub.w	r0, r0, sl
 8019664:	2240      	movs	r2, #64	; 0x40
 8019666:	4082      	lsls	r2, r0
 8019668:	4313      	orrs	r3, r2
 801966a:	3401      	adds	r4, #1
 801966c:	9304      	str	r3, [sp, #16]
 801966e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019672:	4829      	ldr	r0, [pc, #164]	; (8019718 <_vfiprintf_r+0x224>)
 8019674:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019678:	2206      	movs	r2, #6
 801967a:	f7e6 fdd1 	bl	8000220 <memchr>
 801967e:	2800      	cmp	r0, #0
 8019680:	d03f      	beq.n	8019702 <_vfiprintf_r+0x20e>
 8019682:	4b26      	ldr	r3, [pc, #152]	; (801971c <_vfiprintf_r+0x228>)
 8019684:	bb1b      	cbnz	r3, 80196ce <_vfiprintf_r+0x1da>
 8019686:	9b03      	ldr	r3, [sp, #12]
 8019688:	3307      	adds	r3, #7
 801968a:	f023 0307 	bic.w	r3, r3, #7
 801968e:	3308      	adds	r3, #8
 8019690:	9303      	str	r3, [sp, #12]
 8019692:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019694:	443b      	add	r3, r7
 8019696:	9309      	str	r3, [sp, #36]	; 0x24
 8019698:	e768      	b.n	801956c <_vfiprintf_r+0x78>
 801969a:	fb0c 3202 	mla	r2, ip, r2, r3
 801969e:	460c      	mov	r4, r1
 80196a0:	2001      	movs	r0, #1
 80196a2:	e7a6      	b.n	80195f2 <_vfiprintf_r+0xfe>
 80196a4:	2300      	movs	r3, #0
 80196a6:	3401      	adds	r4, #1
 80196a8:	9305      	str	r3, [sp, #20]
 80196aa:	4619      	mov	r1, r3
 80196ac:	f04f 0c0a 	mov.w	ip, #10
 80196b0:	4620      	mov	r0, r4
 80196b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80196b6:	3a30      	subs	r2, #48	; 0x30
 80196b8:	2a09      	cmp	r2, #9
 80196ba:	d903      	bls.n	80196c4 <_vfiprintf_r+0x1d0>
 80196bc:	2b00      	cmp	r3, #0
 80196be:	d0c6      	beq.n	801964e <_vfiprintf_r+0x15a>
 80196c0:	9105      	str	r1, [sp, #20]
 80196c2:	e7c4      	b.n	801964e <_vfiprintf_r+0x15a>
 80196c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80196c8:	4604      	mov	r4, r0
 80196ca:	2301      	movs	r3, #1
 80196cc:	e7f0      	b.n	80196b0 <_vfiprintf_r+0x1bc>
 80196ce:	ab03      	add	r3, sp, #12
 80196d0:	9300      	str	r3, [sp, #0]
 80196d2:	462a      	mov	r2, r5
 80196d4:	4b12      	ldr	r3, [pc, #72]	; (8019720 <_vfiprintf_r+0x22c>)
 80196d6:	a904      	add	r1, sp, #16
 80196d8:	4630      	mov	r0, r6
 80196da:	f3af 8000 	nop.w
 80196de:	4607      	mov	r7, r0
 80196e0:	1c78      	adds	r0, r7, #1
 80196e2:	d1d6      	bne.n	8019692 <_vfiprintf_r+0x19e>
 80196e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80196e6:	07d9      	lsls	r1, r3, #31
 80196e8:	d405      	bmi.n	80196f6 <_vfiprintf_r+0x202>
 80196ea:	89ab      	ldrh	r3, [r5, #12]
 80196ec:	059a      	lsls	r2, r3, #22
 80196ee:	d402      	bmi.n	80196f6 <_vfiprintf_r+0x202>
 80196f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80196f2:	f7ff fc50 	bl	8018f96 <__retarget_lock_release_recursive>
 80196f6:	89ab      	ldrh	r3, [r5, #12]
 80196f8:	065b      	lsls	r3, r3, #25
 80196fa:	f53f af1d 	bmi.w	8019538 <_vfiprintf_r+0x44>
 80196fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019700:	e71c      	b.n	801953c <_vfiprintf_r+0x48>
 8019702:	ab03      	add	r3, sp, #12
 8019704:	9300      	str	r3, [sp, #0]
 8019706:	462a      	mov	r2, r5
 8019708:	4b05      	ldr	r3, [pc, #20]	; (8019720 <_vfiprintf_r+0x22c>)
 801970a:	a904      	add	r1, sp, #16
 801970c:	4630      	mov	r0, r6
 801970e:	f000 f879 	bl	8019804 <_printf_i>
 8019712:	e7e4      	b.n	80196de <_vfiprintf_r+0x1ea>
 8019714:	08027ffa 	.word	0x08027ffa
 8019718:	08028004 	.word	0x08028004
 801971c:	00000000 	.word	0x00000000
 8019720:	080194cf 	.word	0x080194cf
 8019724:	08028000 	.word	0x08028000

08019728 <_printf_common>:
 8019728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801972c:	4616      	mov	r6, r2
 801972e:	4699      	mov	r9, r3
 8019730:	688a      	ldr	r2, [r1, #8]
 8019732:	690b      	ldr	r3, [r1, #16]
 8019734:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8019738:	4293      	cmp	r3, r2
 801973a:	bfb8      	it	lt
 801973c:	4613      	movlt	r3, r2
 801973e:	6033      	str	r3, [r6, #0]
 8019740:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8019744:	4607      	mov	r7, r0
 8019746:	460c      	mov	r4, r1
 8019748:	b10a      	cbz	r2, 801974e <_printf_common+0x26>
 801974a:	3301      	adds	r3, #1
 801974c:	6033      	str	r3, [r6, #0]
 801974e:	6823      	ldr	r3, [r4, #0]
 8019750:	0699      	lsls	r1, r3, #26
 8019752:	bf42      	ittt	mi
 8019754:	6833      	ldrmi	r3, [r6, #0]
 8019756:	3302      	addmi	r3, #2
 8019758:	6033      	strmi	r3, [r6, #0]
 801975a:	6825      	ldr	r5, [r4, #0]
 801975c:	f015 0506 	ands.w	r5, r5, #6
 8019760:	d106      	bne.n	8019770 <_printf_common+0x48>
 8019762:	f104 0a19 	add.w	sl, r4, #25
 8019766:	68e3      	ldr	r3, [r4, #12]
 8019768:	6832      	ldr	r2, [r6, #0]
 801976a:	1a9b      	subs	r3, r3, r2
 801976c:	42ab      	cmp	r3, r5
 801976e:	dc26      	bgt.n	80197be <_printf_common+0x96>
 8019770:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8019774:	1e13      	subs	r3, r2, #0
 8019776:	6822      	ldr	r2, [r4, #0]
 8019778:	bf18      	it	ne
 801977a:	2301      	movne	r3, #1
 801977c:	0692      	lsls	r2, r2, #26
 801977e:	d42b      	bmi.n	80197d8 <_printf_common+0xb0>
 8019780:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019784:	4649      	mov	r1, r9
 8019786:	4638      	mov	r0, r7
 8019788:	47c0      	blx	r8
 801978a:	3001      	adds	r0, #1
 801978c:	d01e      	beq.n	80197cc <_printf_common+0xa4>
 801978e:	6823      	ldr	r3, [r4, #0]
 8019790:	6922      	ldr	r2, [r4, #16]
 8019792:	f003 0306 	and.w	r3, r3, #6
 8019796:	2b04      	cmp	r3, #4
 8019798:	bf02      	ittt	eq
 801979a:	68e5      	ldreq	r5, [r4, #12]
 801979c:	6833      	ldreq	r3, [r6, #0]
 801979e:	1aed      	subeq	r5, r5, r3
 80197a0:	68a3      	ldr	r3, [r4, #8]
 80197a2:	bf0c      	ite	eq
 80197a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80197a8:	2500      	movne	r5, #0
 80197aa:	4293      	cmp	r3, r2
 80197ac:	bfc4      	itt	gt
 80197ae:	1a9b      	subgt	r3, r3, r2
 80197b0:	18ed      	addgt	r5, r5, r3
 80197b2:	2600      	movs	r6, #0
 80197b4:	341a      	adds	r4, #26
 80197b6:	42b5      	cmp	r5, r6
 80197b8:	d11a      	bne.n	80197f0 <_printf_common+0xc8>
 80197ba:	2000      	movs	r0, #0
 80197bc:	e008      	b.n	80197d0 <_printf_common+0xa8>
 80197be:	2301      	movs	r3, #1
 80197c0:	4652      	mov	r2, sl
 80197c2:	4649      	mov	r1, r9
 80197c4:	4638      	mov	r0, r7
 80197c6:	47c0      	blx	r8
 80197c8:	3001      	adds	r0, #1
 80197ca:	d103      	bne.n	80197d4 <_printf_common+0xac>
 80197cc:	f04f 30ff 	mov.w	r0, #4294967295
 80197d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80197d4:	3501      	adds	r5, #1
 80197d6:	e7c6      	b.n	8019766 <_printf_common+0x3e>
 80197d8:	18e1      	adds	r1, r4, r3
 80197da:	1c5a      	adds	r2, r3, #1
 80197dc:	2030      	movs	r0, #48	; 0x30
 80197de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80197e2:	4422      	add	r2, r4
 80197e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80197e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80197ec:	3302      	adds	r3, #2
 80197ee:	e7c7      	b.n	8019780 <_printf_common+0x58>
 80197f0:	2301      	movs	r3, #1
 80197f2:	4622      	mov	r2, r4
 80197f4:	4649      	mov	r1, r9
 80197f6:	4638      	mov	r0, r7
 80197f8:	47c0      	blx	r8
 80197fa:	3001      	adds	r0, #1
 80197fc:	d0e6      	beq.n	80197cc <_printf_common+0xa4>
 80197fe:	3601      	adds	r6, #1
 8019800:	e7d9      	b.n	80197b6 <_printf_common+0x8e>
	...

08019804 <_printf_i>:
 8019804:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019808:	7e0f      	ldrb	r7, [r1, #24]
 801980a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801980c:	2f78      	cmp	r7, #120	; 0x78
 801980e:	4691      	mov	r9, r2
 8019810:	4680      	mov	r8, r0
 8019812:	460c      	mov	r4, r1
 8019814:	469a      	mov	sl, r3
 8019816:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801981a:	d807      	bhi.n	801982c <_printf_i+0x28>
 801981c:	2f62      	cmp	r7, #98	; 0x62
 801981e:	d80a      	bhi.n	8019836 <_printf_i+0x32>
 8019820:	2f00      	cmp	r7, #0
 8019822:	f000 80d4 	beq.w	80199ce <_printf_i+0x1ca>
 8019826:	2f58      	cmp	r7, #88	; 0x58
 8019828:	f000 80c0 	beq.w	80199ac <_printf_i+0x1a8>
 801982c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019830:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8019834:	e03a      	b.n	80198ac <_printf_i+0xa8>
 8019836:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801983a:	2b15      	cmp	r3, #21
 801983c:	d8f6      	bhi.n	801982c <_printf_i+0x28>
 801983e:	a101      	add	r1, pc, #4	; (adr r1, 8019844 <_printf_i+0x40>)
 8019840:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019844:	0801989d 	.word	0x0801989d
 8019848:	080198b1 	.word	0x080198b1
 801984c:	0801982d 	.word	0x0801982d
 8019850:	0801982d 	.word	0x0801982d
 8019854:	0801982d 	.word	0x0801982d
 8019858:	0801982d 	.word	0x0801982d
 801985c:	080198b1 	.word	0x080198b1
 8019860:	0801982d 	.word	0x0801982d
 8019864:	0801982d 	.word	0x0801982d
 8019868:	0801982d 	.word	0x0801982d
 801986c:	0801982d 	.word	0x0801982d
 8019870:	080199b5 	.word	0x080199b5
 8019874:	080198dd 	.word	0x080198dd
 8019878:	0801996f 	.word	0x0801996f
 801987c:	0801982d 	.word	0x0801982d
 8019880:	0801982d 	.word	0x0801982d
 8019884:	080199d7 	.word	0x080199d7
 8019888:	0801982d 	.word	0x0801982d
 801988c:	080198dd 	.word	0x080198dd
 8019890:	0801982d 	.word	0x0801982d
 8019894:	0801982d 	.word	0x0801982d
 8019898:	08019977 	.word	0x08019977
 801989c:	682b      	ldr	r3, [r5, #0]
 801989e:	1d1a      	adds	r2, r3, #4
 80198a0:	681b      	ldr	r3, [r3, #0]
 80198a2:	602a      	str	r2, [r5, #0]
 80198a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80198a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80198ac:	2301      	movs	r3, #1
 80198ae:	e09f      	b.n	80199f0 <_printf_i+0x1ec>
 80198b0:	6820      	ldr	r0, [r4, #0]
 80198b2:	682b      	ldr	r3, [r5, #0]
 80198b4:	0607      	lsls	r7, r0, #24
 80198b6:	f103 0104 	add.w	r1, r3, #4
 80198ba:	6029      	str	r1, [r5, #0]
 80198bc:	d501      	bpl.n	80198c2 <_printf_i+0xbe>
 80198be:	681e      	ldr	r6, [r3, #0]
 80198c0:	e003      	b.n	80198ca <_printf_i+0xc6>
 80198c2:	0646      	lsls	r6, r0, #25
 80198c4:	d5fb      	bpl.n	80198be <_printf_i+0xba>
 80198c6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80198ca:	2e00      	cmp	r6, #0
 80198cc:	da03      	bge.n	80198d6 <_printf_i+0xd2>
 80198ce:	232d      	movs	r3, #45	; 0x2d
 80198d0:	4276      	negs	r6, r6
 80198d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80198d6:	485a      	ldr	r0, [pc, #360]	; (8019a40 <_printf_i+0x23c>)
 80198d8:	230a      	movs	r3, #10
 80198da:	e012      	b.n	8019902 <_printf_i+0xfe>
 80198dc:	682b      	ldr	r3, [r5, #0]
 80198de:	6820      	ldr	r0, [r4, #0]
 80198e0:	1d19      	adds	r1, r3, #4
 80198e2:	6029      	str	r1, [r5, #0]
 80198e4:	0605      	lsls	r5, r0, #24
 80198e6:	d501      	bpl.n	80198ec <_printf_i+0xe8>
 80198e8:	681e      	ldr	r6, [r3, #0]
 80198ea:	e002      	b.n	80198f2 <_printf_i+0xee>
 80198ec:	0641      	lsls	r1, r0, #25
 80198ee:	d5fb      	bpl.n	80198e8 <_printf_i+0xe4>
 80198f0:	881e      	ldrh	r6, [r3, #0]
 80198f2:	4853      	ldr	r0, [pc, #332]	; (8019a40 <_printf_i+0x23c>)
 80198f4:	2f6f      	cmp	r7, #111	; 0x6f
 80198f6:	bf0c      	ite	eq
 80198f8:	2308      	moveq	r3, #8
 80198fa:	230a      	movne	r3, #10
 80198fc:	2100      	movs	r1, #0
 80198fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8019902:	6865      	ldr	r5, [r4, #4]
 8019904:	60a5      	str	r5, [r4, #8]
 8019906:	2d00      	cmp	r5, #0
 8019908:	bfa2      	ittt	ge
 801990a:	6821      	ldrge	r1, [r4, #0]
 801990c:	f021 0104 	bicge.w	r1, r1, #4
 8019910:	6021      	strge	r1, [r4, #0]
 8019912:	b90e      	cbnz	r6, 8019918 <_printf_i+0x114>
 8019914:	2d00      	cmp	r5, #0
 8019916:	d04b      	beq.n	80199b0 <_printf_i+0x1ac>
 8019918:	4615      	mov	r5, r2
 801991a:	fbb6 f1f3 	udiv	r1, r6, r3
 801991e:	fb03 6711 	mls	r7, r3, r1, r6
 8019922:	5dc7      	ldrb	r7, [r0, r7]
 8019924:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8019928:	4637      	mov	r7, r6
 801992a:	42bb      	cmp	r3, r7
 801992c:	460e      	mov	r6, r1
 801992e:	d9f4      	bls.n	801991a <_printf_i+0x116>
 8019930:	2b08      	cmp	r3, #8
 8019932:	d10b      	bne.n	801994c <_printf_i+0x148>
 8019934:	6823      	ldr	r3, [r4, #0]
 8019936:	07de      	lsls	r6, r3, #31
 8019938:	d508      	bpl.n	801994c <_printf_i+0x148>
 801993a:	6923      	ldr	r3, [r4, #16]
 801993c:	6861      	ldr	r1, [r4, #4]
 801993e:	4299      	cmp	r1, r3
 8019940:	bfde      	ittt	le
 8019942:	2330      	movle	r3, #48	; 0x30
 8019944:	f805 3c01 	strble.w	r3, [r5, #-1]
 8019948:	f105 35ff 	addle.w	r5, r5, #4294967295
 801994c:	1b52      	subs	r2, r2, r5
 801994e:	6122      	str	r2, [r4, #16]
 8019950:	f8cd a000 	str.w	sl, [sp]
 8019954:	464b      	mov	r3, r9
 8019956:	aa03      	add	r2, sp, #12
 8019958:	4621      	mov	r1, r4
 801995a:	4640      	mov	r0, r8
 801995c:	f7ff fee4 	bl	8019728 <_printf_common>
 8019960:	3001      	adds	r0, #1
 8019962:	d14a      	bne.n	80199fa <_printf_i+0x1f6>
 8019964:	f04f 30ff 	mov.w	r0, #4294967295
 8019968:	b004      	add	sp, #16
 801996a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801996e:	6823      	ldr	r3, [r4, #0]
 8019970:	f043 0320 	orr.w	r3, r3, #32
 8019974:	6023      	str	r3, [r4, #0]
 8019976:	4833      	ldr	r0, [pc, #204]	; (8019a44 <_printf_i+0x240>)
 8019978:	2778      	movs	r7, #120	; 0x78
 801997a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801997e:	6823      	ldr	r3, [r4, #0]
 8019980:	6829      	ldr	r1, [r5, #0]
 8019982:	061f      	lsls	r7, r3, #24
 8019984:	f851 6b04 	ldr.w	r6, [r1], #4
 8019988:	d402      	bmi.n	8019990 <_printf_i+0x18c>
 801998a:	065f      	lsls	r7, r3, #25
 801998c:	bf48      	it	mi
 801998e:	b2b6      	uxthmi	r6, r6
 8019990:	07df      	lsls	r7, r3, #31
 8019992:	bf48      	it	mi
 8019994:	f043 0320 	orrmi.w	r3, r3, #32
 8019998:	6029      	str	r1, [r5, #0]
 801999a:	bf48      	it	mi
 801999c:	6023      	strmi	r3, [r4, #0]
 801999e:	b91e      	cbnz	r6, 80199a8 <_printf_i+0x1a4>
 80199a0:	6823      	ldr	r3, [r4, #0]
 80199a2:	f023 0320 	bic.w	r3, r3, #32
 80199a6:	6023      	str	r3, [r4, #0]
 80199a8:	2310      	movs	r3, #16
 80199aa:	e7a7      	b.n	80198fc <_printf_i+0xf8>
 80199ac:	4824      	ldr	r0, [pc, #144]	; (8019a40 <_printf_i+0x23c>)
 80199ae:	e7e4      	b.n	801997a <_printf_i+0x176>
 80199b0:	4615      	mov	r5, r2
 80199b2:	e7bd      	b.n	8019930 <_printf_i+0x12c>
 80199b4:	682b      	ldr	r3, [r5, #0]
 80199b6:	6826      	ldr	r6, [r4, #0]
 80199b8:	6961      	ldr	r1, [r4, #20]
 80199ba:	1d18      	adds	r0, r3, #4
 80199bc:	6028      	str	r0, [r5, #0]
 80199be:	0635      	lsls	r5, r6, #24
 80199c0:	681b      	ldr	r3, [r3, #0]
 80199c2:	d501      	bpl.n	80199c8 <_printf_i+0x1c4>
 80199c4:	6019      	str	r1, [r3, #0]
 80199c6:	e002      	b.n	80199ce <_printf_i+0x1ca>
 80199c8:	0670      	lsls	r0, r6, #25
 80199ca:	d5fb      	bpl.n	80199c4 <_printf_i+0x1c0>
 80199cc:	8019      	strh	r1, [r3, #0]
 80199ce:	2300      	movs	r3, #0
 80199d0:	6123      	str	r3, [r4, #16]
 80199d2:	4615      	mov	r5, r2
 80199d4:	e7bc      	b.n	8019950 <_printf_i+0x14c>
 80199d6:	682b      	ldr	r3, [r5, #0]
 80199d8:	1d1a      	adds	r2, r3, #4
 80199da:	602a      	str	r2, [r5, #0]
 80199dc:	681d      	ldr	r5, [r3, #0]
 80199de:	6862      	ldr	r2, [r4, #4]
 80199e0:	2100      	movs	r1, #0
 80199e2:	4628      	mov	r0, r5
 80199e4:	f7e6 fc1c 	bl	8000220 <memchr>
 80199e8:	b108      	cbz	r0, 80199ee <_printf_i+0x1ea>
 80199ea:	1b40      	subs	r0, r0, r5
 80199ec:	6060      	str	r0, [r4, #4]
 80199ee:	6863      	ldr	r3, [r4, #4]
 80199f0:	6123      	str	r3, [r4, #16]
 80199f2:	2300      	movs	r3, #0
 80199f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80199f8:	e7aa      	b.n	8019950 <_printf_i+0x14c>
 80199fa:	6923      	ldr	r3, [r4, #16]
 80199fc:	462a      	mov	r2, r5
 80199fe:	4649      	mov	r1, r9
 8019a00:	4640      	mov	r0, r8
 8019a02:	47d0      	blx	sl
 8019a04:	3001      	adds	r0, #1
 8019a06:	d0ad      	beq.n	8019964 <_printf_i+0x160>
 8019a08:	6823      	ldr	r3, [r4, #0]
 8019a0a:	079b      	lsls	r3, r3, #30
 8019a0c:	d413      	bmi.n	8019a36 <_printf_i+0x232>
 8019a0e:	68e0      	ldr	r0, [r4, #12]
 8019a10:	9b03      	ldr	r3, [sp, #12]
 8019a12:	4298      	cmp	r0, r3
 8019a14:	bfb8      	it	lt
 8019a16:	4618      	movlt	r0, r3
 8019a18:	e7a6      	b.n	8019968 <_printf_i+0x164>
 8019a1a:	2301      	movs	r3, #1
 8019a1c:	4632      	mov	r2, r6
 8019a1e:	4649      	mov	r1, r9
 8019a20:	4640      	mov	r0, r8
 8019a22:	47d0      	blx	sl
 8019a24:	3001      	adds	r0, #1
 8019a26:	d09d      	beq.n	8019964 <_printf_i+0x160>
 8019a28:	3501      	adds	r5, #1
 8019a2a:	68e3      	ldr	r3, [r4, #12]
 8019a2c:	9903      	ldr	r1, [sp, #12]
 8019a2e:	1a5b      	subs	r3, r3, r1
 8019a30:	42ab      	cmp	r3, r5
 8019a32:	dcf2      	bgt.n	8019a1a <_printf_i+0x216>
 8019a34:	e7eb      	b.n	8019a0e <_printf_i+0x20a>
 8019a36:	2500      	movs	r5, #0
 8019a38:	f104 0619 	add.w	r6, r4, #25
 8019a3c:	e7f5      	b.n	8019a2a <_printf_i+0x226>
 8019a3e:	bf00      	nop
 8019a40:	0802800b 	.word	0x0802800b
 8019a44:	0802801c 	.word	0x0802801c

08019a48 <__sflush_r>:
 8019a48:	898a      	ldrh	r2, [r1, #12]
 8019a4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019a4e:	4605      	mov	r5, r0
 8019a50:	0710      	lsls	r0, r2, #28
 8019a52:	460c      	mov	r4, r1
 8019a54:	d458      	bmi.n	8019b08 <__sflush_r+0xc0>
 8019a56:	684b      	ldr	r3, [r1, #4]
 8019a58:	2b00      	cmp	r3, #0
 8019a5a:	dc05      	bgt.n	8019a68 <__sflush_r+0x20>
 8019a5c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8019a5e:	2b00      	cmp	r3, #0
 8019a60:	dc02      	bgt.n	8019a68 <__sflush_r+0x20>
 8019a62:	2000      	movs	r0, #0
 8019a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019a68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019a6a:	2e00      	cmp	r6, #0
 8019a6c:	d0f9      	beq.n	8019a62 <__sflush_r+0x1a>
 8019a6e:	2300      	movs	r3, #0
 8019a70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019a74:	682f      	ldr	r7, [r5, #0]
 8019a76:	6a21      	ldr	r1, [r4, #32]
 8019a78:	602b      	str	r3, [r5, #0]
 8019a7a:	d032      	beq.n	8019ae2 <__sflush_r+0x9a>
 8019a7c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8019a7e:	89a3      	ldrh	r3, [r4, #12]
 8019a80:	075a      	lsls	r2, r3, #29
 8019a82:	d505      	bpl.n	8019a90 <__sflush_r+0x48>
 8019a84:	6863      	ldr	r3, [r4, #4]
 8019a86:	1ac0      	subs	r0, r0, r3
 8019a88:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019a8a:	b10b      	cbz	r3, 8019a90 <__sflush_r+0x48>
 8019a8c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019a8e:	1ac0      	subs	r0, r0, r3
 8019a90:	2300      	movs	r3, #0
 8019a92:	4602      	mov	r2, r0
 8019a94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019a96:	6a21      	ldr	r1, [r4, #32]
 8019a98:	4628      	mov	r0, r5
 8019a9a:	47b0      	blx	r6
 8019a9c:	1c43      	adds	r3, r0, #1
 8019a9e:	89a3      	ldrh	r3, [r4, #12]
 8019aa0:	d106      	bne.n	8019ab0 <__sflush_r+0x68>
 8019aa2:	6829      	ldr	r1, [r5, #0]
 8019aa4:	291d      	cmp	r1, #29
 8019aa6:	d82b      	bhi.n	8019b00 <__sflush_r+0xb8>
 8019aa8:	4a29      	ldr	r2, [pc, #164]	; (8019b50 <__sflush_r+0x108>)
 8019aaa:	410a      	asrs	r2, r1
 8019aac:	07d6      	lsls	r6, r2, #31
 8019aae:	d427      	bmi.n	8019b00 <__sflush_r+0xb8>
 8019ab0:	2200      	movs	r2, #0
 8019ab2:	6062      	str	r2, [r4, #4]
 8019ab4:	04d9      	lsls	r1, r3, #19
 8019ab6:	6922      	ldr	r2, [r4, #16]
 8019ab8:	6022      	str	r2, [r4, #0]
 8019aba:	d504      	bpl.n	8019ac6 <__sflush_r+0x7e>
 8019abc:	1c42      	adds	r2, r0, #1
 8019abe:	d101      	bne.n	8019ac4 <__sflush_r+0x7c>
 8019ac0:	682b      	ldr	r3, [r5, #0]
 8019ac2:	b903      	cbnz	r3, 8019ac6 <__sflush_r+0x7e>
 8019ac4:	6560      	str	r0, [r4, #84]	; 0x54
 8019ac6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019ac8:	602f      	str	r7, [r5, #0]
 8019aca:	2900      	cmp	r1, #0
 8019acc:	d0c9      	beq.n	8019a62 <__sflush_r+0x1a>
 8019ace:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019ad2:	4299      	cmp	r1, r3
 8019ad4:	d002      	beq.n	8019adc <__sflush_r+0x94>
 8019ad6:	4628      	mov	r0, r5
 8019ad8:	f7ff fa8a 	bl	8018ff0 <_free_r>
 8019adc:	2000      	movs	r0, #0
 8019ade:	6360      	str	r0, [r4, #52]	; 0x34
 8019ae0:	e7c0      	b.n	8019a64 <__sflush_r+0x1c>
 8019ae2:	2301      	movs	r3, #1
 8019ae4:	4628      	mov	r0, r5
 8019ae6:	47b0      	blx	r6
 8019ae8:	1c41      	adds	r1, r0, #1
 8019aea:	d1c8      	bne.n	8019a7e <__sflush_r+0x36>
 8019aec:	682b      	ldr	r3, [r5, #0]
 8019aee:	2b00      	cmp	r3, #0
 8019af0:	d0c5      	beq.n	8019a7e <__sflush_r+0x36>
 8019af2:	2b1d      	cmp	r3, #29
 8019af4:	d001      	beq.n	8019afa <__sflush_r+0xb2>
 8019af6:	2b16      	cmp	r3, #22
 8019af8:	d101      	bne.n	8019afe <__sflush_r+0xb6>
 8019afa:	602f      	str	r7, [r5, #0]
 8019afc:	e7b1      	b.n	8019a62 <__sflush_r+0x1a>
 8019afe:	89a3      	ldrh	r3, [r4, #12]
 8019b00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019b04:	81a3      	strh	r3, [r4, #12]
 8019b06:	e7ad      	b.n	8019a64 <__sflush_r+0x1c>
 8019b08:	690f      	ldr	r7, [r1, #16]
 8019b0a:	2f00      	cmp	r7, #0
 8019b0c:	d0a9      	beq.n	8019a62 <__sflush_r+0x1a>
 8019b0e:	0793      	lsls	r3, r2, #30
 8019b10:	680e      	ldr	r6, [r1, #0]
 8019b12:	bf08      	it	eq
 8019b14:	694b      	ldreq	r3, [r1, #20]
 8019b16:	600f      	str	r7, [r1, #0]
 8019b18:	bf18      	it	ne
 8019b1a:	2300      	movne	r3, #0
 8019b1c:	eba6 0807 	sub.w	r8, r6, r7
 8019b20:	608b      	str	r3, [r1, #8]
 8019b22:	f1b8 0f00 	cmp.w	r8, #0
 8019b26:	dd9c      	ble.n	8019a62 <__sflush_r+0x1a>
 8019b28:	6a21      	ldr	r1, [r4, #32]
 8019b2a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8019b2c:	4643      	mov	r3, r8
 8019b2e:	463a      	mov	r2, r7
 8019b30:	4628      	mov	r0, r5
 8019b32:	47b0      	blx	r6
 8019b34:	2800      	cmp	r0, #0
 8019b36:	dc06      	bgt.n	8019b46 <__sflush_r+0xfe>
 8019b38:	89a3      	ldrh	r3, [r4, #12]
 8019b3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019b3e:	81a3      	strh	r3, [r4, #12]
 8019b40:	f04f 30ff 	mov.w	r0, #4294967295
 8019b44:	e78e      	b.n	8019a64 <__sflush_r+0x1c>
 8019b46:	4407      	add	r7, r0
 8019b48:	eba8 0800 	sub.w	r8, r8, r0
 8019b4c:	e7e9      	b.n	8019b22 <__sflush_r+0xda>
 8019b4e:	bf00      	nop
 8019b50:	dfbffffe 	.word	0xdfbffffe

08019b54 <_fflush_r>:
 8019b54:	b538      	push	{r3, r4, r5, lr}
 8019b56:	690b      	ldr	r3, [r1, #16]
 8019b58:	4605      	mov	r5, r0
 8019b5a:	460c      	mov	r4, r1
 8019b5c:	b913      	cbnz	r3, 8019b64 <_fflush_r+0x10>
 8019b5e:	2500      	movs	r5, #0
 8019b60:	4628      	mov	r0, r5
 8019b62:	bd38      	pop	{r3, r4, r5, pc}
 8019b64:	b118      	cbz	r0, 8019b6e <_fflush_r+0x1a>
 8019b66:	6a03      	ldr	r3, [r0, #32]
 8019b68:	b90b      	cbnz	r3, 8019b6e <_fflush_r+0x1a>
 8019b6a:	f7fe ffdf 	bl	8018b2c <__sinit>
 8019b6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019b72:	2b00      	cmp	r3, #0
 8019b74:	d0f3      	beq.n	8019b5e <_fflush_r+0xa>
 8019b76:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019b78:	07d0      	lsls	r0, r2, #31
 8019b7a:	d404      	bmi.n	8019b86 <_fflush_r+0x32>
 8019b7c:	0599      	lsls	r1, r3, #22
 8019b7e:	d402      	bmi.n	8019b86 <_fflush_r+0x32>
 8019b80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019b82:	f7ff fa07 	bl	8018f94 <__retarget_lock_acquire_recursive>
 8019b86:	4628      	mov	r0, r5
 8019b88:	4621      	mov	r1, r4
 8019b8a:	f7ff ff5d 	bl	8019a48 <__sflush_r>
 8019b8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019b90:	07da      	lsls	r2, r3, #31
 8019b92:	4605      	mov	r5, r0
 8019b94:	d4e4      	bmi.n	8019b60 <_fflush_r+0xc>
 8019b96:	89a3      	ldrh	r3, [r4, #12]
 8019b98:	059b      	lsls	r3, r3, #22
 8019b9a:	d4e1      	bmi.n	8019b60 <_fflush_r+0xc>
 8019b9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019b9e:	f7ff f9fa 	bl	8018f96 <__retarget_lock_release_recursive>
 8019ba2:	e7dd      	b.n	8019b60 <_fflush_r+0xc>

08019ba4 <fiprintf>:
 8019ba4:	b40e      	push	{r1, r2, r3}
 8019ba6:	b503      	push	{r0, r1, lr}
 8019ba8:	4601      	mov	r1, r0
 8019baa:	ab03      	add	r3, sp, #12
 8019bac:	4805      	ldr	r0, [pc, #20]	; (8019bc4 <fiprintf+0x20>)
 8019bae:	f853 2b04 	ldr.w	r2, [r3], #4
 8019bb2:	6800      	ldr	r0, [r0, #0]
 8019bb4:	9301      	str	r3, [sp, #4]
 8019bb6:	f7ff fc9d 	bl	80194f4 <_vfiprintf_r>
 8019bba:	b002      	add	sp, #8
 8019bbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8019bc0:	b003      	add	sp, #12
 8019bc2:	4770      	bx	lr
 8019bc4:	2000008c 	.word	0x2000008c

08019bc8 <__swbuf_r>:
 8019bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019bca:	460e      	mov	r6, r1
 8019bcc:	4614      	mov	r4, r2
 8019bce:	4605      	mov	r5, r0
 8019bd0:	b118      	cbz	r0, 8019bda <__swbuf_r+0x12>
 8019bd2:	6a03      	ldr	r3, [r0, #32]
 8019bd4:	b90b      	cbnz	r3, 8019bda <__swbuf_r+0x12>
 8019bd6:	f7fe ffa9 	bl	8018b2c <__sinit>
 8019bda:	69a3      	ldr	r3, [r4, #24]
 8019bdc:	60a3      	str	r3, [r4, #8]
 8019bde:	89a3      	ldrh	r3, [r4, #12]
 8019be0:	071a      	lsls	r2, r3, #28
 8019be2:	d525      	bpl.n	8019c30 <__swbuf_r+0x68>
 8019be4:	6923      	ldr	r3, [r4, #16]
 8019be6:	b31b      	cbz	r3, 8019c30 <__swbuf_r+0x68>
 8019be8:	6823      	ldr	r3, [r4, #0]
 8019bea:	6922      	ldr	r2, [r4, #16]
 8019bec:	1a98      	subs	r0, r3, r2
 8019bee:	6963      	ldr	r3, [r4, #20]
 8019bf0:	b2f6      	uxtb	r6, r6
 8019bf2:	4283      	cmp	r3, r0
 8019bf4:	4637      	mov	r7, r6
 8019bf6:	dc04      	bgt.n	8019c02 <__swbuf_r+0x3a>
 8019bf8:	4621      	mov	r1, r4
 8019bfa:	4628      	mov	r0, r5
 8019bfc:	f7ff ffaa 	bl	8019b54 <_fflush_r>
 8019c00:	b9e0      	cbnz	r0, 8019c3c <__swbuf_r+0x74>
 8019c02:	68a3      	ldr	r3, [r4, #8]
 8019c04:	3b01      	subs	r3, #1
 8019c06:	60a3      	str	r3, [r4, #8]
 8019c08:	6823      	ldr	r3, [r4, #0]
 8019c0a:	1c5a      	adds	r2, r3, #1
 8019c0c:	6022      	str	r2, [r4, #0]
 8019c0e:	701e      	strb	r6, [r3, #0]
 8019c10:	6962      	ldr	r2, [r4, #20]
 8019c12:	1c43      	adds	r3, r0, #1
 8019c14:	429a      	cmp	r2, r3
 8019c16:	d004      	beq.n	8019c22 <__swbuf_r+0x5a>
 8019c18:	89a3      	ldrh	r3, [r4, #12]
 8019c1a:	07db      	lsls	r3, r3, #31
 8019c1c:	d506      	bpl.n	8019c2c <__swbuf_r+0x64>
 8019c1e:	2e0a      	cmp	r6, #10
 8019c20:	d104      	bne.n	8019c2c <__swbuf_r+0x64>
 8019c22:	4621      	mov	r1, r4
 8019c24:	4628      	mov	r0, r5
 8019c26:	f7ff ff95 	bl	8019b54 <_fflush_r>
 8019c2a:	b938      	cbnz	r0, 8019c3c <__swbuf_r+0x74>
 8019c2c:	4638      	mov	r0, r7
 8019c2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019c30:	4621      	mov	r1, r4
 8019c32:	4628      	mov	r0, r5
 8019c34:	f000 f806 	bl	8019c44 <__swsetup_r>
 8019c38:	2800      	cmp	r0, #0
 8019c3a:	d0d5      	beq.n	8019be8 <__swbuf_r+0x20>
 8019c3c:	f04f 37ff 	mov.w	r7, #4294967295
 8019c40:	e7f4      	b.n	8019c2c <__swbuf_r+0x64>
	...

08019c44 <__swsetup_r>:
 8019c44:	b538      	push	{r3, r4, r5, lr}
 8019c46:	4b2a      	ldr	r3, [pc, #168]	; (8019cf0 <__swsetup_r+0xac>)
 8019c48:	4605      	mov	r5, r0
 8019c4a:	6818      	ldr	r0, [r3, #0]
 8019c4c:	460c      	mov	r4, r1
 8019c4e:	b118      	cbz	r0, 8019c58 <__swsetup_r+0x14>
 8019c50:	6a03      	ldr	r3, [r0, #32]
 8019c52:	b90b      	cbnz	r3, 8019c58 <__swsetup_r+0x14>
 8019c54:	f7fe ff6a 	bl	8018b2c <__sinit>
 8019c58:	89a3      	ldrh	r3, [r4, #12]
 8019c5a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019c5e:	0718      	lsls	r0, r3, #28
 8019c60:	d422      	bmi.n	8019ca8 <__swsetup_r+0x64>
 8019c62:	06d9      	lsls	r1, r3, #27
 8019c64:	d407      	bmi.n	8019c76 <__swsetup_r+0x32>
 8019c66:	2309      	movs	r3, #9
 8019c68:	602b      	str	r3, [r5, #0]
 8019c6a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019c6e:	81a3      	strh	r3, [r4, #12]
 8019c70:	f04f 30ff 	mov.w	r0, #4294967295
 8019c74:	e034      	b.n	8019ce0 <__swsetup_r+0x9c>
 8019c76:	0758      	lsls	r0, r3, #29
 8019c78:	d512      	bpl.n	8019ca0 <__swsetup_r+0x5c>
 8019c7a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019c7c:	b141      	cbz	r1, 8019c90 <__swsetup_r+0x4c>
 8019c7e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019c82:	4299      	cmp	r1, r3
 8019c84:	d002      	beq.n	8019c8c <__swsetup_r+0x48>
 8019c86:	4628      	mov	r0, r5
 8019c88:	f7ff f9b2 	bl	8018ff0 <_free_r>
 8019c8c:	2300      	movs	r3, #0
 8019c8e:	6363      	str	r3, [r4, #52]	; 0x34
 8019c90:	89a3      	ldrh	r3, [r4, #12]
 8019c92:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019c96:	81a3      	strh	r3, [r4, #12]
 8019c98:	2300      	movs	r3, #0
 8019c9a:	6063      	str	r3, [r4, #4]
 8019c9c:	6923      	ldr	r3, [r4, #16]
 8019c9e:	6023      	str	r3, [r4, #0]
 8019ca0:	89a3      	ldrh	r3, [r4, #12]
 8019ca2:	f043 0308 	orr.w	r3, r3, #8
 8019ca6:	81a3      	strh	r3, [r4, #12]
 8019ca8:	6923      	ldr	r3, [r4, #16]
 8019caa:	b94b      	cbnz	r3, 8019cc0 <__swsetup_r+0x7c>
 8019cac:	89a3      	ldrh	r3, [r4, #12]
 8019cae:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019cb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019cb6:	d003      	beq.n	8019cc0 <__swsetup_r+0x7c>
 8019cb8:	4621      	mov	r1, r4
 8019cba:	4628      	mov	r0, r5
 8019cbc:	f000 f886 	bl	8019dcc <__smakebuf_r>
 8019cc0:	89a0      	ldrh	r0, [r4, #12]
 8019cc2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019cc6:	f010 0301 	ands.w	r3, r0, #1
 8019cca:	d00a      	beq.n	8019ce2 <__swsetup_r+0x9e>
 8019ccc:	2300      	movs	r3, #0
 8019cce:	60a3      	str	r3, [r4, #8]
 8019cd0:	6963      	ldr	r3, [r4, #20]
 8019cd2:	425b      	negs	r3, r3
 8019cd4:	61a3      	str	r3, [r4, #24]
 8019cd6:	6923      	ldr	r3, [r4, #16]
 8019cd8:	b943      	cbnz	r3, 8019cec <__swsetup_r+0xa8>
 8019cda:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8019cde:	d1c4      	bne.n	8019c6a <__swsetup_r+0x26>
 8019ce0:	bd38      	pop	{r3, r4, r5, pc}
 8019ce2:	0781      	lsls	r1, r0, #30
 8019ce4:	bf58      	it	pl
 8019ce6:	6963      	ldrpl	r3, [r4, #20]
 8019ce8:	60a3      	str	r3, [r4, #8]
 8019cea:	e7f4      	b.n	8019cd6 <__swsetup_r+0x92>
 8019cec:	2000      	movs	r0, #0
 8019cee:	e7f7      	b.n	8019ce0 <__swsetup_r+0x9c>
 8019cf0:	2000008c 	.word	0x2000008c

08019cf4 <_sbrk_r>:
 8019cf4:	b538      	push	{r3, r4, r5, lr}
 8019cf6:	4d06      	ldr	r5, [pc, #24]	; (8019d10 <_sbrk_r+0x1c>)
 8019cf8:	2300      	movs	r3, #0
 8019cfa:	4604      	mov	r4, r0
 8019cfc:	4608      	mov	r0, r1
 8019cfe:	602b      	str	r3, [r5, #0]
 8019d00:	f7e7 f814 	bl	8000d2c <_sbrk>
 8019d04:	1c43      	adds	r3, r0, #1
 8019d06:	d102      	bne.n	8019d0e <_sbrk_r+0x1a>
 8019d08:	682b      	ldr	r3, [r5, #0]
 8019d0a:	b103      	cbz	r3, 8019d0e <_sbrk_r+0x1a>
 8019d0c:	6023      	str	r3, [r4, #0]
 8019d0e:	bd38      	pop	{r3, r4, r5, pc}
 8019d10:	20011140 	.word	0x20011140

08019d14 <abort>:
 8019d14:	b508      	push	{r3, lr}
 8019d16:	2006      	movs	r0, #6
 8019d18:	f000 f8bc 	bl	8019e94 <raise>
 8019d1c:	2001      	movs	r0, #1
 8019d1e:	f7e6 ff8d 	bl	8000c3c <_exit>

08019d22 <_realloc_r>:
 8019d22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019d26:	4680      	mov	r8, r0
 8019d28:	4614      	mov	r4, r2
 8019d2a:	460e      	mov	r6, r1
 8019d2c:	b921      	cbnz	r1, 8019d38 <_realloc_r+0x16>
 8019d2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019d32:	4611      	mov	r1, r2
 8019d34:	f7ff b9d0 	b.w	80190d8 <_malloc_r>
 8019d38:	b92a      	cbnz	r2, 8019d46 <_realloc_r+0x24>
 8019d3a:	f7ff f959 	bl	8018ff0 <_free_r>
 8019d3e:	4625      	mov	r5, r4
 8019d40:	4628      	mov	r0, r5
 8019d42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019d46:	f000 f8e3 	bl	8019f10 <_malloc_usable_size_r>
 8019d4a:	4284      	cmp	r4, r0
 8019d4c:	4607      	mov	r7, r0
 8019d4e:	d802      	bhi.n	8019d56 <_realloc_r+0x34>
 8019d50:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8019d54:	d812      	bhi.n	8019d7c <_realloc_r+0x5a>
 8019d56:	4621      	mov	r1, r4
 8019d58:	4640      	mov	r0, r8
 8019d5a:	f7ff f9bd 	bl	80190d8 <_malloc_r>
 8019d5e:	4605      	mov	r5, r0
 8019d60:	2800      	cmp	r0, #0
 8019d62:	d0ed      	beq.n	8019d40 <_realloc_r+0x1e>
 8019d64:	42bc      	cmp	r4, r7
 8019d66:	4622      	mov	r2, r4
 8019d68:	4631      	mov	r1, r6
 8019d6a:	bf28      	it	cs
 8019d6c:	463a      	movcs	r2, r7
 8019d6e:	f7ff f913 	bl	8018f98 <memcpy>
 8019d72:	4631      	mov	r1, r6
 8019d74:	4640      	mov	r0, r8
 8019d76:	f7ff f93b 	bl	8018ff0 <_free_r>
 8019d7a:	e7e1      	b.n	8019d40 <_realloc_r+0x1e>
 8019d7c:	4635      	mov	r5, r6
 8019d7e:	e7df      	b.n	8019d40 <_realloc_r+0x1e>

08019d80 <__swhatbuf_r>:
 8019d80:	b570      	push	{r4, r5, r6, lr}
 8019d82:	460c      	mov	r4, r1
 8019d84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019d88:	2900      	cmp	r1, #0
 8019d8a:	b096      	sub	sp, #88	; 0x58
 8019d8c:	4615      	mov	r5, r2
 8019d8e:	461e      	mov	r6, r3
 8019d90:	da0d      	bge.n	8019dae <__swhatbuf_r+0x2e>
 8019d92:	89a3      	ldrh	r3, [r4, #12]
 8019d94:	f013 0f80 	tst.w	r3, #128	; 0x80
 8019d98:	f04f 0100 	mov.w	r1, #0
 8019d9c:	bf0c      	ite	eq
 8019d9e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8019da2:	2340      	movne	r3, #64	; 0x40
 8019da4:	2000      	movs	r0, #0
 8019da6:	6031      	str	r1, [r6, #0]
 8019da8:	602b      	str	r3, [r5, #0]
 8019daa:	b016      	add	sp, #88	; 0x58
 8019dac:	bd70      	pop	{r4, r5, r6, pc}
 8019dae:	466a      	mov	r2, sp
 8019db0:	f000 f878 	bl	8019ea4 <_fstat_r>
 8019db4:	2800      	cmp	r0, #0
 8019db6:	dbec      	blt.n	8019d92 <__swhatbuf_r+0x12>
 8019db8:	9901      	ldr	r1, [sp, #4]
 8019dba:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8019dbe:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8019dc2:	4259      	negs	r1, r3
 8019dc4:	4159      	adcs	r1, r3
 8019dc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019dca:	e7eb      	b.n	8019da4 <__swhatbuf_r+0x24>

08019dcc <__smakebuf_r>:
 8019dcc:	898b      	ldrh	r3, [r1, #12]
 8019dce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019dd0:	079d      	lsls	r5, r3, #30
 8019dd2:	4606      	mov	r6, r0
 8019dd4:	460c      	mov	r4, r1
 8019dd6:	d507      	bpl.n	8019de8 <__smakebuf_r+0x1c>
 8019dd8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019ddc:	6023      	str	r3, [r4, #0]
 8019dde:	6123      	str	r3, [r4, #16]
 8019de0:	2301      	movs	r3, #1
 8019de2:	6163      	str	r3, [r4, #20]
 8019de4:	b002      	add	sp, #8
 8019de6:	bd70      	pop	{r4, r5, r6, pc}
 8019de8:	ab01      	add	r3, sp, #4
 8019dea:	466a      	mov	r2, sp
 8019dec:	f7ff ffc8 	bl	8019d80 <__swhatbuf_r>
 8019df0:	9900      	ldr	r1, [sp, #0]
 8019df2:	4605      	mov	r5, r0
 8019df4:	4630      	mov	r0, r6
 8019df6:	f7ff f96f 	bl	80190d8 <_malloc_r>
 8019dfa:	b948      	cbnz	r0, 8019e10 <__smakebuf_r+0x44>
 8019dfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019e00:	059a      	lsls	r2, r3, #22
 8019e02:	d4ef      	bmi.n	8019de4 <__smakebuf_r+0x18>
 8019e04:	f023 0303 	bic.w	r3, r3, #3
 8019e08:	f043 0302 	orr.w	r3, r3, #2
 8019e0c:	81a3      	strh	r3, [r4, #12]
 8019e0e:	e7e3      	b.n	8019dd8 <__smakebuf_r+0xc>
 8019e10:	89a3      	ldrh	r3, [r4, #12]
 8019e12:	6020      	str	r0, [r4, #0]
 8019e14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019e18:	81a3      	strh	r3, [r4, #12]
 8019e1a:	9b00      	ldr	r3, [sp, #0]
 8019e1c:	6163      	str	r3, [r4, #20]
 8019e1e:	9b01      	ldr	r3, [sp, #4]
 8019e20:	6120      	str	r0, [r4, #16]
 8019e22:	b15b      	cbz	r3, 8019e3c <__smakebuf_r+0x70>
 8019e24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019e28:	4630      	mov	r0, r6
 8019e2a:	f000 f84d 	bl	8019ec8 <_isatty_r>
 8019e2e:	b128      	cbz	r0, 8019e3c <__smakebuf_r+0x70>
 8019e30:	89a3      	ldrh	r3, [r4, #12]
 8019e32:	f023 0303 	bic.w	r3, r3, #3
 8019e36:	f043 0301 	orr.w	r3, r3, #1
 8019e3a:	81a3      	strh	r3, [r4, #12]
 8019e3c:	89a3      	ldrh	r3, [r4, #12]
 8019e3e:	431d      	orrs	r5, r3
 8019e40:	81a5      	strh	r5, [r4, #12]
 8019e42:	e7cf      	b.n	8019de4 <__smakebuf_r+0x18>

08019e44 <_raise_r>:
 8019e44:	291f      	cmp	r1, #31
 8019e46:	b538      	push	{r3, r4, r5, lr}
 8019e48:	4604      	mov	r4, r0
 8019e4a:	460d      	mov	r5, r1
 8019e4c:	d904      	bls.n	8019e58 <_raise_r+0x14>
 8019e4e:	2316      	movs	r3, #22
 8019e50:	6003      	str	r3, [r0, #0]
 8019e52:	f04f 30ff 	mov.w	r0, #4294967295
 8019e56:	bd38      	pop	{r3, r4, r5, pc}
 8019e58:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8019e5a:	b112      	cbz	r2, 8019e62 <_raise_r+0x1e>
 8019e5c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019e60:	b94b      	cbnz	r3, 8019e76 <_raise_r+0x32>
 8019e62:	4620      	mov	r0, r4
 8019e64:	f000 f852 	bl	8019f0c <_getpid_r>
 8019e68:	462a      	mov	r2, r5
 8019e6a:	4601      	mov	r1, r0
 8019e6c:	4620      	mov	r0, r4
 8019e6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019e72:	f000 b839 	b.w	8019ee8 <_kill_r>
 8019e76:	2b01      	cmp	r3, #1
 8019e78:	d00a      	beq.n	8019e90 <_raise_r+0x4c>
 8019e7a:	1c59      	adds	r1, r3, #1
 8019e7c:	d103      	bne.n	8019e86 <_raise_r+0x42>
 8019e7e:	2316      	movs	r3, #22
 8019e80:	6003      	str	r3, [r0, #0]
 8019e82:	2001      	movs	r0, #1
 8019e84:	e7e7      	b.n	8019e56 <_raise_r+0x12>
 8019e86:	2400      	movs	r4, #0
 8019e88:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8019e8c:	4628      	mov	r0, r5
 8019e8e:	4798      	blx	r3
 8019e90:	2000      	movs	r0, #0
 8019e92:	e7e0      	b.n	8019e56 <_raise_r+0x12>

08019e94 <raise>:
 8019e94:	4b02      	ldr	r3, [pc, #8]	; (8019ea0 <raise+0xc>)
 8019e96:	4601      	mov	r1, r0
 8019e98:	6818      	ldr	r0, [r3, #0]
 8019e9a:	f7ff bfd3 	b.w	8019e44 <_raise_r>
 8019e9e:	bf00      	nop
 8019ea0:	2000008c 	.word	0x2000008c

08019ea4 <_fstat_r>:
 8019ea4:	b538      	push	{r3, r4, r5, lr}
 8019ea6:	4d07      	ldr	r5, [pc, #28]	; (8019ec4 <_fstat_r+0x20>)
 8019ea8:	2300      	movs	r3, #0
 8019eaa:	4604      	mov	r4, r0
 8019eac:	4608      	mov	r0, r1
 8019eae:	4611      	mov	r1, r2
 8019eb0:	602b      	str	r3, [r5, #0]
 8019eb2:	f7e6 ff12 	bl	8000cda <_fstat>
 8019eb6:	1c43      	adds	r3, r0, #1
 8019eb8:	d102      	bne.n	8019ec0 <_fstat_r+0x1c>
 8019eba:	682b      	ldr	r3, [r5, #0]
 8019ebc:	b103      	cbz	r3, 8019ec0 <_fstat_r+0x1c>
 8019ebe:	6023      	str	r3, [r4, #0]
 8019ec0:	bd38      	pop	{r3, r4, r5, pc}
 8019ec2:	bf00      	nop
 8019ec4:	20011140 	.word	0x20011140

08019ec8 <_isatty_r>:
 8019ec8:	b538      	push	{r3, r4, r5, lr}
 8019eca:	4d06      	ldr	r5, [pc, #24]	; (8019ee4 <_isatty_r+0x1c>)
 8019ecc:	2300      	movs	r3, #0
 8019ece:	4604      	mov	r4, r0
 8019ed0:	4608      	mov	r0, r1
 8019ed2:	602b      	str	r3, [r5, #0]
 8019ed4:	f7e6 ff11 	bl	8000cfa <_isatty>
 8019ed8:	1c43      	adds	r3, r0, #1
 8019eda:	d102      	bne.n	8019ee2 <_isatty_r+0x1a>
 8019edc:	682b      	ldr	r3, [r5, #0]
 8019ede:	b103      	cbz	r3, 8019ee2 <_isatty_r+0x1a>
 8019ee0:	6023      	str	r3, [r4, #0]
 8019ee2:	bd38      	pop	{r3, r4, r5, pc}
 8019ee4:	20011140 	.word	0x20011140

08019ee8 <_kill_r>:
 8019ee8:	b538      	push	{r3, r4, r5, lr}
 8019eea:	4d07      	ldr	r5, [pc, #28]	; (8019f08 <_kill_r+0x20>)
 8019eec:	2300      	movs	r3, #0
 8019eee:	4604      	mov	r4, r0
 8019ef0:	4608      	mov	r0, r1
 8019ef2:	4611      	mov	r1, r2
 8019ef4:	602b      	str	r3, [r5, #0]
 8019ef6:	f7e6 fe8f 	bl	8000c18 <_kill>
 8019efa:	1c43      	adds	r3, r0, #1
 8019efc:	d102      	bne.n	8019f04 <_kill_r+0x1c>
 8019efe:	682b      	ldr	r3, [r5, #0]
 8019f00:	b103      	cbz	r3, 8019f04 <_kill_r+0x1c>
 8019f02:	6023      	str	r3, [r4, #0]
 8019f04:	bd38      	pop	{r3, r4, r5, pc}
 8019f06:	bf00      	nop
 8019f08:	20011140 	.word	0x20011140

08019f0c <_getpid_r>:
 8019f0c:	f7e6 be7c 	b.w	8000c08 <_getpid>

08019f10 <_malloc_usable_size_r>:
 8019f10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019f14:	1f18      	subs	r0, r3, #4
 8019f16:	2b00      	cmp	r3, #0
 8019f18:	bfbc      	itt	lt
 8019f1a:	580b      	ldrlt	r3, [r1, r0]
 8019f1c:	18c0      	addlt	r0, r0, r3
 8019f1e:	4770      	bx	lr

08019f20 <_init>:
 8019f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019f22:	bf00      	nop
 8019f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019f26:	bc08      	pop	{r3}
 8019f28:	469e      	mov	lr, r3
 8019f2a:	4770      	bx	lr

08019f2c <_fini>:
 8019f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019f2e:	bf00      	nop
 8019f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019f32:	bc08      	pop	{r3}
 8019f34:	469e      	mov	lr, r3
 8019f36:	4770      	bx	lr
