
cv11-smajlici.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008700  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000430  080088b0  080088b0  000188b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ce0  08008ce0  0002011c  2**0
                  CONTENTS
  4 .ARM          00000008  08008ce0  08008ce0  00018ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ce8  08008ce8  0002011c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ce8  08008ce8  00018ce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008cec  08008cec  00018cec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000011c  20000000  08008cf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002011c  2**0
                  CONTENTS
 10 .bss          00000a74  2000011c  2000011c  0002011c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000b90  20000b90  0002011c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00010481  00000000  00000000  0002018f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002bb0  00000000  00000000  00030610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000d10  00000000  00000000  000331c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000009e4  00000000  00000000  00033ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000252a0  00000000  00000000  000348b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001167c  00000000  00000000  00059b54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d5a2e  00000000  00000000  0006b1d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003800  00000000  00000000  00140c00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000051  00000000  00000000  00144400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000011c 	.word	0x2000011c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008898 	.word	0x08008898

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000120 	.word	0x20000120
 80001ec:	08008898 	.word	0x08008898

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__aeabi_d2f>:
 800098c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000990:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000994:	bf24      	itt	cs
 8000996:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800099a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800099e:	d90d      	bls.n	80009bc <__aeabi_d2f+0x30>
 80009a0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009a4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009a8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009ac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009b0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009b4:	bf08      	it	eq
 80009b6:	f020 0001 	biceq.w	r0, r0, #1
 80009ba:	4770      	bx	lr
 80009bc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009c0:	d121      	bne.n	8000a06 <__aeabi_d2f+0x7a>
 80009c2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009c6:	bfbc      	itt	lt
 80009c8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009cc:	4770      	bxlt	lr
 80009ce:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009d2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009d6:	f1c2 0218 	rsb	r2, r2, #24
 80009da:	f1c2 0c20 	rsb	ip, r2, #32
 80009de:	fa10 f30c 	lsls.w	r3, r0, ip
 80009e2:	fa20 f002 	lsr.w	r0, r0, r2
 80009e6:	bf18      	it	ne
 80009e8:	f040 0001 	orrne.w	r0, r0, #1
 80009ec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009f0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009f4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009f8:	ea40 000c 	orr.w	r0, r0, ip
 80009fc:	fa23 f302 	lsr.w	r3, r3, r2
 8000a00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a04:	e7cc      	b.n	80009a0 <__aeabi_d2f+0x14>
 8000a06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a0a:	d107      	bne.n	8000a1c <__aeabi_d2f+0x90>
 8000a0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a10:	bf1e      	ittt	ne
 8000a12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a1a:	4770      	bxne	lr
 8000a1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop

08000a2c <__aeabi_uldivmod>:
 8000a2c:	b953      	cbnz	r3, 8000a44 <__aeabi_uldivmod+0x18>
 8000a2e:	b94a      	cbnz	r2, 8000a44 <__aeabi_uldivmod+0x18>
 8000a30:	2900      	cmp	r1, #0
 8000a32:	bf08      	it	eq
 8000a34:	2800      	cmpeq	r0, #0
 8000a36:	bf1c      	itt	ne
 8000a38:	f04f 31ff 	movne.w	r1, #4294967295
 8000a3c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a40:	f000 b970 	b.w	8000d24 <__aeabi_idiv0>
 8000a44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a4c:	f000 f806 	bl	8000a5c <__udivmoddi4>
 8000a50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a58:	b004      	add	sp, #16
 8000a5a:	4770      	bx	lr

08000a5c <__udivmoddi4>:
 8000a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a60:	9e08      	ldr	r6, [sp, #32]
 8000a62:	460d      	mov	r5, r1
 8000a64:	4604      	mov	r4, r0
 8000a66:	460f      	mov	r7, r1
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d14a      	bne.n	8000b02 <__udivmoddi4+0xa6>
 8000a6c:	428a      	cmp	r2, r1
 8000a6e:	4694      	mov	ip, r2
 8000a70:	d965      	bls.n	8000b3e <__udivmoddi4+0xe2>
 8000a72:	fab2 f382 	clz	r3, r2
 8000a76:	b143      	cbz	r3, 8000a8a <__udivmoddi4+0x2e>
 8000a78:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a7c:	f1c3 0220 	rsb	r2, r3, #32
 8000a80:	409f      	lsls	r7, r3
 8000a82:	fa20 f202 	lsr.w	r2, r0, r2
 8000a86:	4317      	orrs	r7, r2
 8000a88:	409c      	lsls	r4, r3
 8000a8a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a8e:	fa1f f58c 	uxth.w	r5, ip
 8000a92:	fbb7 f1fe 	udiv	r1, r7, lr
 8000a96:	0c22      	lsrs	r2, r4, #16
 8000a98:	fb0e 7711 	mls	r7, lr, r1, r7
 8000a9c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000aa0:	fb01 f005 	mul.w	r0, r1, r5
 8000aa4:	4290      	cmp	r0, r2
 8000aa6:	d90a      	bls.n	8000abe <__udivmoddi4+0x62>
 8000aa8:	eb1c 0202 	adds.w	r2, ip, r2
 8000aac:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ab0:	f080 811c 	bcs.w	8000cec <__udivmoddi4+0x290>
 8000ab4:	4290      	cmp	r0, r2
 8000ab6:	f240 8119 	bls.w	8000cec <__udivmoddi4+0x290>
 8000aba:	3902      	subs	r1, #2
 8000abc:	4462      	add	r2, ip
 8000abe:	1a12      	subs	r2, r2, r0
 8000ac0:	b2a4      	uxth	r4, r4
 8000ac2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ac6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000aca:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ace:	fb00 f505 	mul.w	r5, r0, r5
 8000ad2:	42a5      	cmp	r5, r4
 8000ad4:	d90a      	bls.n	8000aec <__udivmoddi4+0x90>
 8000ad6:	eb1c 0404 	adds.w	r4, ip, r4
 8000ada:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ade:	f080 8107 	bcs.w	8000cf0 <__udivmoddi4+0x294>
 8000ae2:	42a5      	cmp	r5, r4
 8000ae4:	f240 8104 	bls.w	8000cf0 <__udivmoddi4+0x294>
 8000ae8:	4464      	add	r4, ip
 8000aea:	3802      	subs	r0, #2
 8000aec:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000af0:	1b64      	subs	r4, r4, r5
 8000af2:	2100      	movs	r1, #0
 8000af4:	b11e      	cbz	r6, 8000afe <__udivmoddi4+0xa2>
 8000af6:	40dc      	lsrs	r4, r3
 8000af8:	2300      	movs	r3, #0
 8000afa:	e9c6 4300 	strd	r4, r3, [r6]
 8000afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b02:	428b      	cmp	r3, r1
 8000b04:	d908      	bls.n	8000b18 <__udivmoddi4+0xbc>
 8000b06:	2e00      	cmp	r6, #0
 8000b08:	f000 80ed 	beq.w	8000ce6 <__udivmoddi4+0x28a>
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b12:	4608      	mov	r0, r1
 8000b14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b18:	fab3 f183 	clz	r1, r3
 8000b1c:	2900      	cmp	r1, #0
 8000b1e:	d149      	bne.n	8000bb4 <__udivmoddi4+0x158>
 8000b20:	42ab      	cmp	r3, r5
 8000b22:	d302      	bcc.n	8000b2a <__udivmoddi4+0xce>
 8000b24:	4282      	cmp	r2, r0
 8000b26:	f200 80f8 	bhi.w	8000d1a <__udivmoddi4+0x2be>
 8000b2a:	1a84      	subs	r4, r0, r2
 8000b2c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b30:	2001      	movs	r0, #1
 8000b32:	4617      	mov	r7, r2
 8000b34:	2e00      	cmp	r6, #0
 8000b36:	d0e2      	beq.n	8000afe <__udivmoddi4+0xa2>
 8000b38:	e9c6 4700 	strd	r4, r7, [r6]
 8000b3c:	e7df      	b.n	8000afe <__udivmoddi4+0xa2>
 8000b3e:	b902      	cbnz	r2, 8000b42 <__udivmoddi4+0xe6>
 8000b40:	deff      	udf	#255	; 0xff
 8000b42:	fab2 f382 	clz	r3, r2
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	f040 8090 	bne.w	8000c6c <__udivmoddi4+0x210>
 8000b4c:	1a8a      	subs	r2, r1, r2
 8000b4e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b52:	fa1f fe8c 	uxth.w	lr, ip
 8000b56:	2101      	movs	r1, #1
 8000b58:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b5c:	fb07 2015 	mls	r0, r7, r5, r2
 8000b60:	0c22      	lsrs	r2, r4, #16
 8000b62:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b66:	fb0e f005 	mul.w	r0, lr, r5
 8000b6a:	4290      	cmp	r0, r2
 8000b6c:	d908      	bls.n	8000b80 <__udivmoddi4+0x124>
 8000b6e:	eb1c 0202 	adds.w	r2, ip, r2
 8000b72:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b76:	d202      	bcs.n	8000b7e <__udivmoddi4+0x122>
 8000b78:	4290      	cmp	r0, r2
 8000b7a:	f200 80cb 	bhi.w	8000d14 <__udivmoddi4+0x2b8>
 8000b7e:	4645      	mov	r5, r8
 8000b80:	1a12      	subs	r2, r2, r0
 8000b82:	b2a4      	uxth	r4, r4
 8000b84:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b88:	fb07 2210 	mls	r2, r7, r0, r2
 8000b8c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b90:	fb0e fe00 	mul.w	lr, lr, r0
 8000b94:	45a6      	cmp	lr, r4
 8000b96:	d908      	bls.n	8000baa <__udivmoddi4+0x14e>
 8000b98:	eb1c 0404 	adds.w	r4, ip, r4
 8000b9c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ba0:	d202      	bcs.n	8000ba8 <__udivmoddi4+0x14c>
 8000ba2:	45a6      	cmp	lr, r4
 8000ba4:	f200 80bb 	bhi.w	8000d1e <__udivmoddi4+0x2c2>
 8000ba8:	4610      	mov	r0, r2
 8000baa:	eba4 040e 	sub.w	r4, r4, lr
 8000bae:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000bb2:	e79f      	b.n	8000af4 <__udivmoddi4+0x98>
 8000bb4:	f1c1 0720 	rsb	r7, r1, #32
 8000bb8:	408b      	lsls	r3, r1
 8000bba:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bbe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bc2:	fa05 f401 	lsl.w	r4, r5, r1
 8000bc6:	fa20 f307 	lsr.w	r3, r0, r7
 8000bca:	40fd      	lsrs	r5, r7
 8000bcc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bd0:	4323      	orrs	r3, r4
 8000bd2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000bd6:	fa1f fe8c 	uxth.w	lr, ip
 8000bda:	fb09 5518 	mls	r5, r9, r8, r5
 8000bde:	0c1c      	lsrs	r4, r3, #16
 8000be0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000be4:	fb08 f50e 	mul.w	r5, r8, lr
 8000be8:	42a5      	cmp	r5, r4
 8000bea:	fa02 f201 	lsl.w	r2, r2, r1
 8000bee:	fa00 f001 	lsl.w	r0, r0, r1
 8000bf2:	d90b      	bls.n	8000c0c <__udivmoddi4+0x1b0>
 8000bf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000bf8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bfc:	f080 8088 	bcs.w	8000d10 <__udivmoddi4+0x2b4>
 8000c00:	42a5      	cmp	r5, r4
 8000c02:	f240 8085 	bls.w	8000d10 <__udivmoddi4+0x2b4>
 8000c06:	f1a8 0802 	sub.w	r8, r8, #2
 8000c0a:	4464      	add	r4, ip
 8000c0c:	1b64      	subs	r4, r4, r5
 8000c0e:	b29d      	uxth	r5, r3
 8000c10:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c14:	fb09 4413 	mls	r4, r9, r3, r4
 8000c18:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c1c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c20:	45a6      	cmp	lr, r4
 8000c22:	d908      	bls.n	8000c36 <__udivmoddi4+0x1da>
 8000c24:	eb1c 0404 	adds.w	r4, ip, r4
 8000c28:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c2c:	d26c      	bcs.n	8000d08 <__udivmoddi4+0x2ac>
 8000c2e:	45a6      	cmp	lr, r4
 8000c30:	d96a      	bls.n	8000d08 <__udivmoddi4+0x2ac>
 8000c32:	3b02      	subs	r3, #2
 8000c34:	4464      	add	r4, ip
 8000c36:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c3a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c3e:	eba4 040e 	sub.w	r4, r4, lr
 8000c42:	42ac      	cmp	r4, r5
 8000c44:	46c8      	mov	r8, r9
 8000c46:	46ae      	mov	lr, r5
 8000c48:	d356      	bcc.n	8000cf8 <__udivmoddi4+0x29c>
 8000c4a:	d053      	beq.n	8000cf4 <__udivmoddi4+0x298>
 8000c4c:	b156      	cbz	r6, 8000c64 <__udivmoddi4+0x208>
 8000c4e:	ebb0 0208 	subs.w	r2, r0, r8
 8000c52:	eb64 040e 	sbc.w	r4, r4, lr
 8000c56:	fa04 f707 	lsl.w	r7, r4, r7
 8000c5a:	40ca      	lsrs	r2, r1
 8000c5c:	40cc      	lsrs	r4, r1
 8000c5e:	4317      	orrs	r7, r2
 8000c60:	e9c6 7400 	strd	r7, r4, [r6]
 8000c64:	4618      	mov	r0, r3
 8000c66:	2100      	movs	r1, #0
 8000c68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6c:	f1c3 0120 	rsb	r1, r3, #32
 8000c70:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c74:	fa20 f201 	lsr.w	r2, r0, r1
 8000c78:	fa25 f101 	lsr.w	r1, r5, r1
 8000c7c:	409d      	lsls	r5, r3
 8000c7e:	432a      	orrs	r2, r5
 8000c80:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c84:	fa1f fe8c 	uxth.w	lr, ip
 8000c88:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c8c:	fb07 1510 	mls	r5, r7, r0, r1
 8000c90:	0c11      	lsrs	r1, r2, #16
 8000c92:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000c96:	fb00 f50e 	mul.w	r5, r0, lr
 8000c9a:	428d      	cmp	r5, r1
 8000c9c:	fa04 f403 	lsl.w	r4, r4, r3
 8000ca0:	d908      	bls.n	8000cb4 <__udivmoddi4+0x258>
 8000ca2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ca6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000caa:	d22f      	bcs.n	8000d0c <__udivmoddi4+0x2b0>
 8000cac:	428d      	cmp	r5, r1
 8000cae:	d92d      	bls.n	8000d0c <__udivmoddi4+0x2b0>
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	4461      	add	r1, ip
 8000cb4:	1b49      	subs	r1, r1, r5
 8000cb6:	b292      	uxth	r2, r2
 8000cb8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000cbc:	fb07 1115 	mls	r1, r7, r5, r1
 8000cc0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cc4:	fb05 f10e 	mul.w	r1, r5, lr
 8000cc8:	4291      	cmp	r1, r2
 8000cca:	d908      	bls.n	8000cde <__udivmoddi4+0x282>
 8000ccc:	eb1c 0202 	adds.w	r2, ip, r2
 8000cd0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cd4:	d216      	bcs.n	8000d04 <__udivmoddi4+0x2a8>
 8000cd6:	4291      	cmp	r1, r2
 8000cd8:	d914      	bls.n	8000d04 <__udivmoddi4+0x2a8>
 8000cda:	3d02      	subs	r5, #2
 8000cdc:	4462      	add	r2, ip
 8000cde:	1a52      	subs	r2, r2, r1
 8000ce0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ce4:	e738      	b.n	8000b58 <__udivmoddi4+0xfc>
 8000ce6:	4631      	mov	r1, r6
 8000ce8:	4630      	mov	r0, r6
 8000cea:	e708      	b.n	8000afe <__udivmoddi4+0xa2>
 8000cec:	4639      	mov	r1, r7
 8000cee:	e6e6      	b.n	8000abe <__udivmoddi4+0x62>
 8000cf0:	4610      	mov	r0, r2
 8000cf2:	e6fb      	b.n	8000aec <__udivmoddi4+0x90>
 8000cf4:	4548      	cmp	r0, r9
 8000cf6:	d2a9      	bcs.n	8000c4c <__udivmoddi4+0x1f0>
 8000cf8:	ebb9 0802 	subs.w	r8, r9, r2
 8000cfc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d00:	3b01      	subs	r3, #1
 8000d02:	e7a3      	b.n	8000c4c <__udivmoddi4+0x1f0>
 8000d04:	4645      	mov	r5, r8
 8000d06:	e7ea      	b.n	8000cde <__udivmoddi4+0x282>
 8000d08:	462b      	mov	r3, r5
 8000d0a:	e794      	b.n	8000c36 <__udivmoddi4+0x1da>
 8000d0c:	4640      	mov	r0, r8
 8000d0e:	e7d1      	b.n	8000cb4 <__udivmoddi4+0x258>
 8000d10:	46d0      	mov	r8, sl
 8000d12:	e77b      	b.n	8000c0c <__udivmoddi4+0x1b0>
 8000d14:	3d02      	subs	r5, #2
 8000d16:	4462      	add	r2, ip
 8000d18:	e732      	b.n	8000b80 <__udivmoddi4+0x124>
 8000d1a:	4608      	mov	r0, r1
 8000d1c:	e70a      	b.n	8000b34 <__udivmoddi4+0xd8>
 8000d1e:	4464      	add	r4, ip
 8000d20:	3802      	subs	r0, #2
 8000d22:	e742      	b.n	8000baa <__udivmoddi4+0x14e>

08000d24 <__aeabi_idiv0>:
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop

08000d28 <posunMys>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
extern USBD_HandleTypeDef hUsbDeviceFS;

static void posunMys(int8_t x, int8_t y, uint8_t tlacitko ) {
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b084      	sub	sp, #16
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	71fb      	strb	r3, [r7, #7]
 8000d32:	460b      	mov	r3, r1
 8000d34:	71bb      	strb	r3, [r7, #6]
 8000d36:	4613      	mov	r3, r2
 8000d38:	717b      	strb	r3, [r7, #5]

	uint8_t buff[4];
	buff[0] = tlacitko; // stiskni leve tlacitko
 8000d3a:	797b      	ldrb	r3, [r7, #5]
 8000d3c:	733b      	strb	r3, [r7, #12]
	buff[1] =  (x); // posun X
 8000d3e:	79fb      	ldrb	r3, [r7, #7]
 8000d40:	737b      	strb	r3, [r7, #13]
	buff[2] =  (-y); // posun Y
 8000d42:	79bb      	ldrb	r3, [r7, #6]
 8000d44:	425b      	negs	r3, r3
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	73bb      	strb	r3, [r7, #14]
	buff[3] = 0; // bez scrollu
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	73fb      	strb	r3, [r7, #15]
	USBD_HID_SendReport(&hUsbDeviceFS, buff, sizeof(buff));
 8000d4e:	f107 030c 	add.w	r3, r7, #12
 8000d52:	2204      	movs	r2, #4
 8000d54:	4619      	mov	r1, r3
 8000d56:	4807      	ldr	r0, [pc, #28]	; (8000d74 <posunMys+0x4c>)
 8000d58:	f005 f820 	bl	8005d9c <USBD_HID_SendReport>
	HAL_Delay(USBD_HID_GetPollingInterval(&hUsbDeviceFS));
 8000d5c:	4805      	ldr	r0, [pc, #20]	; (8000d74 <posunMys+0x4c>)
 8000d5e:	f005 f84d 	bl	8005dfc <USBD_HID_GetPollingInterval>
 8000d62:	4603      	mov	r3, r0
 8000d64:	4618      	mov	r0, r3
 8000d66:	f000 fd43 	bl	80017f0 <HAL_Delay>


}
 8000d6a:	bf00      	nop
 8000d6c:	3710      	adds	r7, #16
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	20000194 	.word	0x20000194

08000d78 <kresliKruznici>:

static void kresliKruznici(uint8_t radius) {
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	ed2d 8b02 	vpush	{d8}
 8000d7e:	b088      	sub	sp, #32
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	71fb      	strb	r3, [r7, #7]
	 float x;
	float y;

	int step;
	int tlacitko;
	tlacitko = 0x00;
 8000d86:	2300      	movs	r3, #0
 8000d88:	61bb      	str	r3, [r7, #24]
	posunMys(radius, 0, tlacitko);
 8000d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8e:	69ba      	ldr	r2, [r7, #24]
 8000d90:	b2d2      	uxtb	r2, r2
 8000d92:	2100      	movs	r1, #0
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff ffc7 	bl	8000d28 <posunMys>
	for (step = 0; step < 61; step++) {
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	61fb      	str	r3, [r7, #28]
 8000d9e:	e0d3      	b.n	8000f48 <kresliKruznici+0x1d0>

		sx = radius * cosf(step * 6 * M_PI / 180);
 8000da0:	79fb      	ldrb	r3, [r7, #7]
 8000da2:	ee07 3a90 	vmov	s15, r3
 8000da6:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8000daa:	69fa      	ldr	r2, [r7, #28]
 8000dac:	4613      	mov	r3, r2
 8000dae:	005b      	lsls	r3, r3, #1
 8000db0:	4413      	add	r3, r2
 8000db2:	005b      	lsls	r3, r3, #1
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff fb6d 	bl	8000494 <__aeabi_i2d>
 8000dba:	a369      	add	r3, pc, #420	; (adr r3, 8000f60 <kresliKruznici+0x1e8>)
 8000dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dc0:	f7ff fbd2 	bl	8000568 <__aeabi_dmul>
 8000dc4:	4602      	mov	r2, r0
 8000dc6:	460b      	mov	r3, r1
 8000dc8:	4610      	mov	r0, r2
 8000dca:	4619      	mov	r1, r3
 8000dcc:	f04f 0200 	mov.w	r2, #0
 8000dd0:	4b65      	ldr	r3, [pc, #404]	; (8000f68 <kresliKruznici+0x1f0>)
 8000dd2:	f7ff fcf3 	bl	80007bc <__aeabi_ddiv>
 8000dd6:	4602      	mov	r2, r0
 8000dd8:	460b      	mov	r3, r1
 8000dda:	4610      	mov	r0, r2
 8000ddc:	4619      	mov	r1, r3
 8000dde:	f7ff fdd5 	bl	800098c <__aeabi_d2f>
 8000de2:	4603      	mov	r3, r0
 8000de4:	ee00 3a10 	vmov	s0, r3
 8000de8:	f006 ffd8 	bl	8007d9c <cosf>
 8000dec:	eef0 7a40 	vmov.f32	s15, s0
 8000df0:	ee68 7a27 	vmul.f32	s15, s16, s15
 8000df4:	edc7 7a05 	vstr	s15, [r7, #20]
		sy = radius * sinf(step * 6 *  M_PI / 180);
 8000df8:	79fb      	ldrb	r3, [r7, #7]
 8000dfa:	ee07 3a90 	vmov	s15, r3
 8000dfe:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8000e02:	69fa      	ldr	r2, [r7, #28]
 8000e04:	4613      	mov	r3, r2
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	4413      	add	r3, r2
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff fb41 	bl	8000494 <__aeabi_i2d>
 8000e12:	a353      	add	r3, pc, #332	; (adr r3, 8000f60 <kresliKruznici+0x1e8>)
 8000e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e18:	f7ff fba6 	bl	8000568 <__aeabi_dmul>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	460b      	mov	r3, r1
 8000e20:	4610      	mov	r0, r2
 8000e22:	4619      	mov	r1, r3
 8000e24:	f04f 0200 	mov.w	r2, #0
 8000e28:	4b4f      	ldr	r3, [pc, #316]	; (8000f68 <kresliKruznici+0x1f0>)
 8000e2a:	f7ff fcc7 	bl	80007bc <__aeabi_ddiv>
 8000e2e:	4602      	mov	r2, r0
 8000e30:	460b      	mov	r3, r1
 8000e32:	4610      	mov	r0, r2
 8000e34:	4619      	mov	r1, r3
 8000e36:	f7ff fda9 	bl	800098c <__aeabi_d2f>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	ee00 3a10 	vmov	s0, r3
 8000e40:	f006 fff0 	bl	8007e24 <sinf>
 8000e44:	eef0 7a40 	vmov.f32	s15, s0
 8000e48:	ee68 7a27 	vmul.f32	s15, s16, s15
 8000e4c:	edc7 7a04 	vstr	s15, [r7, #16]

		x = radius * cosf((step +1) * 6 * M_PI / 180) - sx;
 8000e50:	79fb      	ldrb	r3, [r7, #7]
 8000e52:	ee07 3a90 	vmov	s15, r3
 8000e56:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	1c5a      	adds	r2, r3, #1
 8000e5e:	4613      	mov	r3, r2
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	4413      	add	r3, r2
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff fb14 	bl	8000494 <__aeabi_i2d>
 8000e6c:	a33c      	add	r3, pc, #240	; (adr r3, 8000f60 <kresliKruznici+0x1e8>)
 8000e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e72:	f7ff fb79 	bl	8000568 <__aeabi_dmul>
 8000e76:	4602      	mov	r2, r0
 8000e78:	460b      	mov	r3, r1
 8000e7a:	4610      	mov	r0, r2
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	f04f 0200 	mov.w	r2, #0
 8000e82:	4b39      	ldr	r3, [pc, #228]	; (8000f68 <kresliKruznici+0x1f0>)
 8000e84:	f7ff fc9a 	bl	80007bc <__aeabi_ddiv>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	460b      	mov	r3, r1
 8000e8c:	4610      	mov	r0, r2
 8000e8e:	4619      	mov	r1, r3
 8000e90:	f7ff fd7c 	bl	800098c <__aeabi_d2f>
 8000e94:	4603      	mov	r3, r0
 8000e96:	ee00 3a10 	vmov	s0, r3
 8000e9a:	f006 ff7f 	bl	8007d9c <cosf>
 8000e9e:	eef0 7a40 	vmov.f32	s15, s0
 8000ea2:	ee28 7a27 	vmul.f32	s14, s16, s15
 8000ea6:	edd7 7a05 	vldr	s15, [r7, #20]
 8000eaa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000eae:	edc7 7a03 	vstr	s15, [r7, #12]
		y = radius * sinf((step +1)* 6 * M_PI / 180) - sy;
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	ee07 3a90 	vmov	s15, r3
 8000eb8:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	1c5a      	adds	r2, r3, #1
 8000ec0:	4613      	mov	r3, r2
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	4413      	add	r3, r2
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff fae3 	bl	8000494 <__aeabi_i2d>
 8000ece:	a324      	add	r3, pc, #144	; (adr r3, 8000f60 <kresliKruznici+0x1e8>)
 8000ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ed4:	f7ff fb48 	bl	8000568 <__aeabi_dmul>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	460b      	mov	r3, r1
 8000edc:	4610      	mov	r0, r2
 8000ede:	4619      	mov	r1, r3
 8000ee0:	f04f 0200 	mov.w	r2, #0
 8000ee4:	4b20      	ldr	r3, [pc, #128]	; (8000f68 <kresliKruznici+0x1f0>)
 8000ee6:	f7ff fc69 	bl	80007bc <__aeabi_ddiv>
 8000eea:	4602      	mov	r2, r0
 8000eec:	460b      	mov	r3, r1
 8000eee:	4610      	mov	r0, r2
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	f7ff fd4b 	bl	800098c <__aeabi_d2f>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	ee00 3a10 	vmov	s0, r3
 8000efc:	f006 ff92 	bl	8007e24 <sinf>
 8000f00:	eef0 7a40 	vmov.f32	s15, s0
 8000f04:	ee28 7a27 	vmul.f32	s14, s16, s15
 8000f08:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f10:	edc7 7a02 	vstr	s15, [r7, #8]

		tlacitko = 0x01;
 8000f14:	2301      	movs	r3, #1
 8000f16:	61bb      	str	r3, [r7, #24]
		posunMys(x, y, tlacitko);
 8000f18:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f20:	edc7 7a00 	vstr	s15, [r7]
 8000f24:	783b      	ldrb	r3, [r7, #0]
 8000f26:	b25b      	sxtb	r3, r3
 8000f28:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f30:	edc7 7a00 	vstr	s15, [r7]
 8000f34:	783a      	ldrb	r2, [r7, #0]
 8000f36:	b251      	sxtb	r1, r2
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	b2d2      	uxtb	r2, r2
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff fef3 	bl	8000d28 <posunMys>
	for (step = 0; step < 61; step++) {
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	3301      	adds	r3, #1
 8000f46:	61fb      	str	r3, [r7, #28]
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	2b3c      	cmp	r3, #60	; 0x3c
 8000f4c:	f77f af28 	ble.w	8000da0 <kresliKruznici+0x28>


	}


}
 8000f50:	bf00      	nop
 8000f52:	bf00      	nop
 8000f54:	3720      	adds	r7, #32
 8000f56:	46bd      	mov	sp, r7
 8000f58:	ecbd 8b02 	vpop	{d8}
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	54442d18 	.word	0x54442d18
 8000f64:	400921fb 	.word	0x400921fb
 8000f68:	40668000 	.word	0x40668000

08000f6c <pustTlacidlo>:
static void pustTlacidlo(){posunMys(0, 0, 0x00);}
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	2200      	movs	r2, #0
 8000f72:	2100      	movs	r1, #0
 8000f74:	2000      	movs	r0, #0
 8000f76:	f7ff fed7 	bl	8000d28 <posunMys>
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
	...

08000f80 <kresliUsmev>:

static void kresliUsmev(uint8_t radius) {
 8000f80:	b580      	push	{r7, lr}
 8000f82:	ed2d 8b02 	vpush	{d8}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	71fb      	strb	r3, [r7, #7]
	static float x;
	static float y;

	int step;
	int tlacitko;
	tlacitko = 0x00;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60bb      	str	r3, [r7, #8]
	posunMys(0, -radius, tlacitko);
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	425b      	negs	r3, r3
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	b25b      	sxtb	r3, r3
 8000f9a:	68ba      	ldr	r2, [r7, #8]
 8000f9c:	b2d2      	uxtb	r2, r2
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	2000      	movs	r0, #0
 8000fa2:	f7ff fec1 	bl	8000d28 <posunMys>

	for (step = 0; step < 31; step++) {
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	60fb      	str	r3, [r7, #12]
 8000faa:	e0df      	b.n	800116c <kresliUsmev+0x1ec>

		sx = radius * cosf(step * 6 * M_PI / 180);
 8000fac:	79fb      	ldrb	r3, [r7, #7]
 8000fae:	ee07 3a90 	vmov	s15, r3
 8000fb2:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8000fb6:	68fa      	ldr	r2, [r7, #12]
 8000fb8:	4613      	mov	r3, r2
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	4413      	add	r3, r2
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff fa67 	bl	8000494 <__aeabi_i2d>
 8000fc6:	a370      	add	r3, pc, #448	; (adr r3, 8001188 <kresliUsmev+0x208>)
 8000fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fcc:	f7ff facc 	bl	8000568 <__aeabi_dmul>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	4610      	mov	r0, r2
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	f04f 0200 	mov.w	r2, #0
 8000fdc:	4b6c      	ldr	r3, [pc, #432]	; (8001190 <kresliUsmev+0x210>)
 8000fde:	f7ff fbed 	bl	80007bc <__aeabi_ddiv>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	4610      	mov	r0, r2
 8000fe8:	4619      	mov	r1, r3
 8000fea:	f7ff fccf 	bl	800098c <__aeabi_d2f>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	ee00 3a10 	vmov	s0, r3
 8000ff4:	f006 fed2 	bl	8007d9c <cosf>
 8000ff8:	eef0 7a40 	vmov.f32	s15, s0
 8000ffc:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001000:	4b64      	ldr	r3, [pc, #400]	; (8001194 <kresliUsmev+0x214>)
 8001002:	edc3 7a00 	vstr	s15, [r3]
		sy = radius * sinf(step * 6 *  M_PI / 180);
 8001006:	79fb      	ldrb	r3, [r7, #7]
 8001008:	ee07 3a90 	vmov	s15, r3
 800100c:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001010:	68fa      	ldr	r2, [r7, #12]
 8001012:	4613      	mov	r3, r2
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	4413      	add	r3, r2
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff fa3a 	bl	8000494 <__aeabi_i2d>
 8001020:	a359      	add	r3, pc, #356	; (adr r3, 8001188 <kresliUsmev+0x208>)
 8001022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001026:	f7ff fa9f 	bl	8000568 <__aeabi_dmul>
 800102a:	4602      	mov	r2, r0
 800102c:	460b      	mov	r3, r1
 800102e:	4610      	mov	r0, r2
 8001030:	4619      	mov	r1, r3
 8001032:	f04f 0200 	mov.w	r2, #0
 8001036:	4b56      	ldr	r3, [pc, #344]	; (8001190 <kresliUsmev+0x210>)
 8001038:	f7ff fbc0 	bl	80007bc <__aeabi_ddiv>
 800103c:	4602      	mov	r2, r0
 800103e:	460b      	mov	r3, r1
 8001040:	4610      	mov	r0, r2
 8001042:	4619      	mov	r1, r3
 8001044:	f7ff fca2 	bl	800098c <__aeabi_d2f>
 8001048:	4603      	mov	r3, r0
 800104a:	ee00 3a10 	vmov	s0, r3
 800104e:	f006 fee9 	bl	8007e24 <sinf>
 8001052:	eef0 7a40 	vmov.f32	s15, s0
 8001056:	ee68 7a27 	vmul.f32	s15, s16, s15
 800105a:	4b4f      	ldr	r3, [pc, #316]	; (8001198 <kresliUsmev+0x218>)
 800105c:	edc3 7a00 	vstr	s15, [r3]

		x = -(radius * cosf((step +1) * 6 * M_PI / 180) - sx);
 8001060:	79fb      	ldrb	r3, [r7, #7]
 8001062:	ee07 3a90 	vmov	s15, r3
 8001066:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	1c5a      	adds	r2, r3, #1
 800106e:	4613      	mov	r3, r2
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	4413      	add	r3, r2
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff fa0c 	bl	8000494 <__aeabi_i2d>
 800107c:	a342      	add	r3, pc, #264	; (adr r3, 8001188 <kresliUsmev+0x208>)
 800107e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001082:	f7ff fa71 	bl	8000568 <__aeabi_dmul>
 8001086:	4602      	mov	r2, r0
 8001088:	460b      	mov	r3, r1
 800108a:	4610      	mov	r0, r2
 800108c:	4619      	mov	r1, r3
 800108e:	f04f 0200 	mov.w	r2, #0
 8001092:	4b3f      	ldr	r3, [pc, #252]	; (8001190 <kresliUsmev+0x210>)
 8001094:	f7ff fb92 	bl	80007bc <__aeabi_ddiv>
 8001098:	4602      	mov	r2, r0
 800109a:	460b      	mov	r3, r1
 800109c:	4610      	mov	r0, r2
 800109e:	4619      	mov	r1, r3
 80010a0:	f7ff fc74 	bl	800098c <__aeabi_d2f>
 80010a4:	4603      	mov	r3, r0
 80010a6:	ee00 3a10 	vmov	s0, r3
 80010aa:	f006 fe77 	bl	8007d9c <cosf>
 80010ae:	eef0 7a40 	vmov.f32	s15, s0
 80010b2:	ee28 7a27 	vmul.f32	s14, s16, s15
 80010b6:	4b37      	ldr	r3, [pc, #220]	; (8001194 <kresliUsmev+0x214>)
 80010b8:	edd3 7a00 	vldr	s15, [r3]
 80010bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010c0:	eef1 7a67 	vneg.f32	s15, s15
 80010c4:	4b35      	ldr	r3, [pc, #212]	; (800119c <kresliUsmev+0x21c>)
 80010c6:	edc3 7a00 	vstr	s15, [r3]
		y = -(radius * sinf((step +1)* 6 * M_PI / 180) - sy);
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	ee07 3a90 	vmov	s15, r3
 80010d0:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	1c5a      	adds	r2, r3, #1
 80010d8:	4613      	mov	r3, r2
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	4413      	add	r3, r2
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff f9d7 	bl	8000494 <__aeabi_i2d>
 80010e6:	a328      	add	r3, pc, #160	; (adr r3, 8001188 <kresliUsmev+0x208>)
 80010e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ec:	f7ff fa3c 	bl	8000568 <__aeabi_dmul>
 80010f0:	4602      	mov	r2, r0
 80010f2:	460b      	mov	r3, r1
 80010f4:	4610      	mov	r0, r2
 80010f6:	4619      	mov	r1, r3
 80010f8:	f04f 0200 	mov.w	r2, #0
 80010fc:	4b24      	ldr	r3, [pc, #144]	; (8001190 <kresliUsmev+0x210>)
 80010fe:	f7ff fb5d 	bl	80007bc <__aeabi_ddiv>
 8001102:	4602      	mov	r2, r0
 8001104:	460b      	mov	r3, r1
 8001106:	4610      	mov	r0, r2
 8001108:	4619      	mov	r1, r3
 800110a:	f7ff fc3f 	bl	800098c <__aeabi_d2f>
 800110e:	4603      	mov	r3, r0
 8001110:	ee00 3a10 	vmov	s0, r3
 8001114:	f006 fe86 	bl	8007e24 <sinf>
 8001118:	eef0 7a40 	vmov.f32	s15, s0
 800111c:	ee28 7a27 	vmul.f32	s14, s16, s15
 8001120:	4b1d      	ldr	r3, [pc, #116]	; (8001198 <kresliUsmev+0x218>)
 8001122:	edd3 7a00 	vldr	s15, [r3]
 8001126:	ee77 7a67 	vsub.f32	s15, s14, s15
 800112a:	eef1 7a67 	vneg.f32	s15, s15
 800112e:	4b1c      	ldr	r3, [pc, #112]	; (80011a0 <kresliUsmev+0x220>)
 8001130:	edc3 7a00 	vstr	s15, [r3]

		tlacitko = 0x01;
 8001134:	2301      	movs	r3, #1
 8001136:	60bb      	str	r3, [r7, #8]
		posunMys(x, y, tlacitko);
 8001138:	4b18      	ldr	r3, [pc, #96]	; (800119c <kresliUsmev+0x21c>)
 800113a:	edd3 7a00 	vldr	s15, [r3]
 800113e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001142:	edc7 7a00 	vstr	s15, [r7]
 8001146:	783b      	ldrb	r3, [r7, #0]
 8001148:	b25b      	sxtb	r3, r3
 800114a:	4a15      	ldr	r2, [pc, #84]	; (80011a0 <kresliUsmev+0x220>)
 800114c:	edd2 7a00 	vldr	s15, [r2]
 8001150:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001154:	edc7 7a00 	vstr	s15, [r7]
 8001158:	783a      	ldrb	r2, [r7, #0]
 800115a:	b251      	sxtb	r1, r2
 800115c:	68ba      	ldr	r2, [r7, #8]
 800115e:	b2d2      	uxtb	r2, r2
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff fde1 	bl	8000d28 <posunMys>
	for (step = 0; step < 31; step++) {
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	3301      	adds	r3, #1
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	2b1e      	cmp	r3, #30
 8001170:	f77f af1c 	ble.w	8000fac <kresliUsmev+0x2c>


	}


}
 8001174:	bf00      	nop
 8001176:	bf00      	nop
 8001178:	3710      	adds	r7, #16
 800117a:	46bd      	mov	sp, r7
 800117c:	ecbd 8b02 	vpop	{d8}
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	f3af 8000 	nop.w
 8001188:	54442d18 	.word	0x54442d18
 800118c:	400921fb 	.word	0x400921fb
 8001190:	40668000 	.word	0x40668000
 8001194:	2000017c 	.word	0x2000017c
 8001198:	20000180 	.word	0x20000180
 800119c:	20000184 	.word	0x20000184
 80011a0:	20000188 	.word	0x20000188

080011a4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
/* USER CODE END 1 */

/* MCU Configuration--------------------------------------------------------*/

/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
HAL_Init();
 80011a8:	f000 fab0 	bl	800170c <HAL_Init>
/* USER CODE BEGIN Init */

/* USER CODE END Init */

/* Configure the system clock */
SystemClock_Config();
 80011ac:	f000 f842 	bl	8001234 <SystemClock_Config>
/* USER CODE BEGIN SysInit */

/* USER CODE END SysInit */

/* Initialize all configured peripherals */
MX_GPIO_Init();
 80011b0:	f000 f8d4 	bl	800135c <MX_GPIO_Init>
MX_USART3_UART_Init();
 80011b4:	f000 f8a8 	bl	8001308 <MX_USART3_UART_Init>
MX_USB_DEVICE_Init();
 80011b8:	f006 f97e 	bl	80074b8 <MX_USB_DEVICE_Init>

/* Infinite loop */
/* USER CODE BEGIN WHILE */
while (1) {
	//tuna pis
	if (HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin)) {
 80011bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011c0:	481b      	ldr	r0, [pc, #108]	; (8001230 <main+0x8c>)
 80011c2:	f000 fdf7 	bl	8001db4 <HAL_GPIO_ReadPin>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d0f7      	beq.n	80011bc <main+0x18>
		kresliKruznici(60);
 80011cc:	203c      	movs	r0, #60	; 0x3c
 80011ce:	f7ff fdd3 	bl	8000d78 <kresliKruznici>
		pustTlacidlo();
 80011d2:	f7ff fecb 	bl	8000f6c <pustTlacidlo>
		posunMys(-30, -5, 0x01);
 80011d6:	2201      	movs	r2, #1
 80011d8:	f06f 0104 	mvn.w	r1, #4
 80011dc:	f06f 001d 	mvn.w	r0, #29
 80011e0:	f7ff fda2 	bl	8000d28 <posunMys>
		posunMys(0, 15, 0x00);
 80011e4:	2200      	movs	r2, #0
 80011e6:	210f      	movs	r1, #15
 80011e8:	2000      	movs	r0, #0
 80011ea:	f7ff fd9d 	bl	8000d28 <posunMys>
		posunMys(8, 0, 0x00);
 80011ee:	2200      	movs	r2, #0
 80011f0:	2100      	movs	r1, #0
 80011f2:	2008      	movs	r0, #8
 80011f4:	f7ff fd98 	bl	8000d28 <posunMys>
		kresliKruznici(20);
 80011f8:	2014      	movs	r0, #20
 80011fa:	f7ff fdbd 	bl	8000d78 <kresliKruznici>
		pustTlacidlo();
 80011fe:	f7ff feb5 	bl	8000f6c <pustTlacidlo>
		posunMys(-50, 0, 0x00);
 8001202:	2200      	movs	r2, #0
 8001204:	2100      	movs	r1, #0
 8001206:	f06f 0031 	mvn.w	r0, #49	; 0x31
 800120a:	f7ff fd8d 	bl	8000d28 <posunMys>
		kresliKruznici(20);
 800120e:	2014      	movs	r0, #20
 8001210:	f7ff fdb2 	bl	8000d78 <kresliKruznici>
		pustTlacidlo();
 8001214:	f7ff feaa 	bl	8000f6c <pustTlacidlo>
		posunMys(-3, 6, 0x00);
 8001218:	2200      	movs	r2, #0
 800121a:	2106      	movs	r1, #6
 800121c:	f06f 0002 	mvn.w	r0, #2
 8001220:	f7ff fd82 	bl	8000d28 <posunMys>
		kresliUsmev(30);
 8001224:	201e      	movs	r0, #30
 8001226:	f7ff feab 	bl	8000f80 <kresliUsmev>
		pustTlacidlo();
 800122a:	f7ff fe9f 	bl	8000f6c <pustTlacidlo>
	if (HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin)) {
 800122e:	e7c5      	b.n	80011bc <main+0x18>
 8001230:	40020800 	.word	0x40020800

08001234 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001234:	b580      	push	{r7, lr}
 8001236:	b094      	sub	sp, #80	; 0x50
 8001238:	af00      	add	r7, sp, #0
RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800123a:	f107 0320 	add.w	r3, r7, #32
 800123e:	2230      	movs	r2, #48	; 0x30
 8001240:	2100      	movs	r1, #0
 8001242:	4618      	mov	r0, r3
 8001244:	f006 fd7e 	bl	8007d44 <memset>
RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001248:	f107 030c 	add.w	r3, r7, #12
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	60da      	str	r2, [r3, #12]
 8001256:	611a      	str	r2, [r3, #16]

/** Configure the main internal regulator output voltage
 */
__HAL_RCC_PWR_CLK_ENABLE();
 8001258:	2300      	movs	r3, #0
 800125a:	60bb      	str	r3, [r7, #8]
 800125c:	4b28      	ldr	r3, [pc, #160]	; (8001300 <SystemClock_Config+0xcc>)
 800125e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001260:	4a27      	ldr	r2, [pc, #156]	; (8001300 <SystemClock_Config+0xcc>)
 8001262:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001266:	6413      	str	r3, [r2, #64]	; 0x40
 8001268:	4b25      	ldr	r3, [pc, #148]	; (8001300 <SystemClock_Config+0xcc>)
 800126a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001270:	60bb      	str	r3, [r7, #8]
 8001272:	68bb      	ldr	r3, [r7, #8]
__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001274:	2300      	movs	r3, #0
 8001276:	607b      	str	r3, [r7, #4]
 8001278:	4b22      	ldr	r3, [pc, #136]	; (8001304 <SystemClock_Config+0xd0>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a21      	ldr	r2, [pc, #132]	; (8001304 <SystemClock_Config+0xd0>)
 800127e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001282:	6013      	str	r3, [r2, #0]
 8001284:	4b1f      	ldr	r3, [pc, #124]	; (8001304 <SystemClock_Config+0xd0>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800128c:	607b      	str	r3, [r7, #4]
 800128e:	687b      	ldr	r3, [r7, #4]

/** Initializes the RCC Oscillators according to the specified parameters
 * in the RCC_OscInitTypeDef structure.
 */
RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001290:	2301      	movs	r3, #1
 8001292:	623b      	str	r3, [r7, #32]
RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001294:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001298:	627b      	str	r3, [r7, #36]	; 0x24
RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800129a:	2302      	movs	r3, #2
 800129c:	63bb      	str	r3, [r7, #56]	; 0x38
RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800129e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012a2:	63fb      	str	r3, [r7, #60]	; 0x3c
RCC_OscInitStruct.PLL.PLLM = 4;
 80012a4:	2304      	movs	r3, #4
 80012a6:	643b      	str	r3, [r7, #64]	; 0x40
RCC_OscInitStruct.PLL.PLLN = 168;
 80012a8:	23a8      	movs	r3, #168	; 0xa8
 80012aa:	647b      	str	r3, [r7, #68]	; 0x44
RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012ac:	2302      	movs	r3, #2
 80012ae:	64bb      	str	r3, [r7, #72]	; 0x48
RCC_OscInitStruct.PLL.PLLQ = 7;
 80012b0:	2307      	movs	r3, #7
 80012b2:	64fb      	str	r3, [r7, #76]	; 0x4c
if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80012b4:	f107 0320 	add.w	r3, r7, #32
 80012b8:	4618      	mov	r0, r3
 80012ba:	f002 f811 	bl	80032e0 <HAL_RCC_OscConfig>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <SystemClock_Config+0x94>
	Error_Handler();
 80012c4:	f000 f93c 	bl	8001540 <Error_Handler>
}

/** Initializes the CPU, AHB and APB buses clocks
 */
RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80012c8:	230f      	movs	r3, #15
 80012ca:	60fb      	str	r3, [r7, #12]
		| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012cc:	2302      	movs	r3, #2
 80012ce:	613b      	str	r3, [r7, #16]
RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012d0:	2300      	movs	r3, #0
 80012d2:	617b      	str	r3, [r7, #20]
RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012d4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012d8:	61bb      	str	r3, [r7, #24]
RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012de:	61fb      	str	r3, [r7, #28]

if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 80012e0:	f107 030c 	add.w	r3, r7, #12
 80012e4:	2105      	movs	r1, #5
 80012e6:	4618      	mov	r0, r3
 80012e8:	f002 fa72 	bl	80037d0 <HAL_RCC_ClockConfig>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <SystemClock_Config+0xc2>
	Error_Handler();
 80012f2:	f000 f925 	bl	8001540 <Error_Handler>
}
}
 80012f6:	bf00      	nop
 80012f8:	3750      	adds	r7, #80	; 0x50
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40023800 	.word	0x40023800
 8001304:	40007000 	.word	0x40007000

08001308 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
/* USER CODE END USART3_Init 0 */

/* USER CODE BEGIN USART3_Init 1 */

/* USER CODE END USART3_Init 1 */
huart3.Instance = USART3;
 800130c:	4b11      	ldr	r3, [pc, #68]	; (8001354 <MX_USART3_UART_Init+0x4c>)
 800130e:	4a12      	ldr	r2, [pc, #72]	; (8001358 <MX_USART3_UART_Init+0x50>)
 8001310:	601a      	str	r2, [r3, #0]
huart3.Init.BaudRate = 115200;
 8001312:	4b10      	ldr	r3, [pc, #64]	; (8001354 <MX_USART3_UART_Init+0x4c>)
 8001314:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001318:	605a      	str	r2, [r3, #4]
huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800131a:	4b0e      	ldr	r3, [pc, #56]	; (8001354 <MX_USART3_UART_Init+0x4c>)
 800131c:	2200      	movs	r2, #0
 800131e:	609a      	str	r2, [r3, #8]
huart3.Init.StopBits = UART_STOPBITS_1;
 8001320:	4b0c      	ldr	r3, [pc, #48]	; (8001354 <MX_USART3_UART_Init+0x4c>)
 8001322:	2200      	movs	r2, #0
 8001324:	60da      	str	r2, [r3, #12]
huart3.Init.Parity = UART_PARITY_NONE;
 8001326:	4b0b      	ldr	r3, [pc, #44]	; (8001354 <MX_USART3_UART_Init+0x4c>)
 8001328:	2200      	movs	r2, #0
 800132a:	611a      	str	r2, [r3, #16]
huart3.Init.Mode = UART_MODE_TX_RX;
 800132c:	4b09      	ldr	r3, [pc, #36]	; (8001354 <MX_USART3_UART_Init+0x4c>)
 800132e:	220c      	movs	r2, #12
 8001330:	615a      	str	r2, [r3, #20]
huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001332:	4b08      	ldr	r3, [pc, #32]	; (8001354 <MX_USART3_UART_Init+0x4c>)
 8001334:	2200      	movs	r2, #0
 8001336:	619a      	str	r2, [r3, #24]
huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001338:	4b06      	ldr	r3, [pc, #24]	; (8001354 <MX_USART3_UART_Init+0x4c>)
 800133a:	2200      	movs	r2, #0
 800133c:	61da      	str	r2, [r3, #28]
if (HAL_UART_Init(&huart3) != HAL_OK) {
 800133e:	4805      	ldr	r0, [pc, #20]	; (8001354 <MX_USART3_UART_Init+0x4c>)
 8001340:	f002 fc66 	bl	8003c10 <HAL_UART_Init>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_USART3_UART_Init+0x46>
	Error_Handler();
 800134a:	f000 f8f9 	bl	8001540 <Error_Handler>
}
/* USER CODE BEGIN USART3_Init 2 */

/* USER CODE END USART3_Init 2 */

}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	20000138 	.word	0x20000138
 8001358:	40004800 	.word	0x40004800

0800135c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800135c:	b580      	push	{r7, lr}
 800135e:	b08c      	sub	sp, #48	; 0x30
 8001360:	af00      	add	r7, sp, #0
GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001362:	f107 031c 	add.w	r3, r7, #28
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	605a      	str	r2, [r3, #4]
 800136c:	609a      	str	r2, [r3, #8]
 800136e:	60da      	str	r2, [r3, #12]
 8001370:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

/* GPIO Ports Clock Enable */
__HAL_RCC_GPIOC_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	61bb      	str	r3, [r7, #24]
 8001376:	4b6d      	ldr	r3, [pc, #436]	; (800152c <MX_GPIO_Init+0x1d0>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	4a6c      	ldr	r2, [pc, #432]	; (800152c <MX_GPIO_Init+0x1d0>)
 800137c:	f043 0304 	orr.w	r3, r3, #4
 8001380:	6313      	str	r3, [r2, #48]	; 0x30
 8001382:	4b6a      	ldr	r3, [pc, #424]	; (800152c <MX_GPIO_Init+0x1d0>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	f003 0304 	and.w	r3, r3, #4
 800138a:	61bb      	str	r3, [r7, #24]
 800138c:	69bb      	ldr	r3, [r7, #24]
__HAL_RCC_GPIOH_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	617b      	str	r3, [r7, #20]
 8001392:	4b66      	ldr	r3, [pc, #408]	; (800152c <MX_GPIO_Init+0x1d0>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	4a65      	ldr	r2, [pc, #404]	; (800152c <MX_GPIO_Init+0x1d0>)
 8001398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800139c:	6313      	str	r3, [r2, #48]	; 0x30
 800139e:	4b63      	ldr	r3, [pc, #396]	; (800152c <MX_GPIO_Init+0x1d0>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013a6:	617b      	str	r3, [r7, #20]
 80013a8:	697b      	ldr	r3, [r7, #20]
__HAL_RCC_GPIOA_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	613b      	str	r3, [r7, #16]
 80013ae:	4b5f      	ldr	r3, [pc, #380]	; (800152c <MX_GPIO_Init+0x1d0>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	4a5e      	ldr	r2, [pc, #376]	; (800152c <MX_GPIO_Init+0x1d0>)
 80013b4:	f043 0301 	orr.w	r3, r3, #1
 80013b8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ba:	4b5c      	ldr	r3, [pc, #368]	; (800152c <MX_GPIO_Init+0x1d0>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	613b      	str	r3, [r7, #16]
 80013c4:	693b      	ldr	r3, [r7, #16]
__HAL_RCC_GPIOB_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	60fb      	str	r3, [r7, #12]
 80013ca:	4b58      	ldr	r3, [pc, #352]	; (800152c <MX_GPIO_Init+0x1d0>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	4a57      	ldr	r2, [pc, #348]	; (800152c <MX_GPIO_Init+0x1d0>)
 80013d0:	f043 0302 	orr.w	r3, r3, #2
 80013d4:	6313      	str	r3, [r2, #48]	; 0x30
 80013d6:	4b55      	ldr	r3, [pc, #340]	; (800152c <MX_GPIO_Init+0x1d0>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	f003 0302 	and.w	r3, r3, #2
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	68fb      	ldr	r3, [r7, #12]
__HAL_RCC_GPIOD_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	60bb      	str	r3, [r7, #8]
 80013e6:	4b51      	ldr	r3, [pc, #324]	; (800152c <MX_GPIO_Init+0x1d0>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	4a50      	ldr	r2, [pc, #320]	; (800152c <MX_GPIO_Init+0x1d0>)
 80013ec:	f043 0308 	orr.w	r3, r3, #8
 80013f0:	6313      	str	r3, [r2, #48]	; 0x30
 80013f2:	4b4e      	ldr	r3, [pc, #312]	; (800152c <MX_GPIO_Init+0x1d0>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	f003 0308 	and.w	r3, r3, #8
 80013fa:	60bb      	str	r3, [r7, #8]
 80013fc:	68bb      	ldr	r3, [r7, #8]
__HAL_RCC_GPIOG_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	607b      	str	r3, [r7, #4]
 8001402:	4b4a      	ldr	r3, [pc, #296]	; (800152c <MX_GPIO_Init+0x1d0>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	4a49      	ldr	r2, [pc, #292]	; (800152c <MX_GPIO_Init+0x1d0>)
 8001408:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800140c:	6313      	str	r3, [r2, #48]	; 0x30
 800140e:	4b47      	ldr	r3, [pc, #284]	; (800152c <MX_GPIO_Init+0x1d0>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001416:	607b      	str	r3, [r7, #4]
 8001418:	687b      	ldr	r3, [r7, #4]

/*Configure GPIO pin Output Level */
HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 800141a:	2200      	movs	r2, #0
 800141c:	f244 0181 	movw	r1, #16513	; 0x4081
 8001420:	4843      	ldr	r0, [pc, #268]	; (8001530 <MX_GPIO_Init+0x1d4>)
 8001422:	f000 fcdf 	bl	8001de4 <HAL_GPIO_WritePin>

/*Configure GPIO pin Output Level */
HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin,
 8001426:	2200      	movs	r2, #0
 8001428:	2140      	movs	r1, #64	; 0x40
 800142a:	4842      	ldr	r0, [pc, #264]	; (8001534 <MX_GPIO_Init+0x1d8>)
 800142c:	f000 fcda 	bl	8001de4 <HAL_GPIO_WritePin>
		GPIO_PIN_RESET);

/*Configure GPIO pin : USER_Btn_Pin */
GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001430:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001434:	61fb      	str	r3, [r7, #28]
GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001436:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800143a:	623b      	str	r3, [r7, #32]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	627b      	str	r3, [r7, #36]	; 0x24
HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001440:	f107 031c 	add.w	r3, r7, #28
 8001444:	4619      	mov	r1, r3
 8001446:	483c      	ldr	r0, [pc, #240]	; (8001538 <MX_GPIO_Init+0x1dc>)
 8001448:	f000 fb08 	bl	8001a5c <HAL_GPIO_Init>

/*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
GPIO_InitStruct.Pin = RMII_MDC_Pin | RMII_RXD0_Pin | RMII_RXD1_Pin;
 800144c:	2332      	movs	r3, #50	; 0x32
 800144e:	61fb      	str	r3, [r7, #28]
GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001450:	2302      	movs	r3, #2
 8001452:	623b      	str	r3, [r7, #32]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	627b      	str	r3, [r7, #36]	; 0x24
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001458:	2303      	movs	r3, #3
 800145a:	62bb      	str	r3, [r7, #40]	; 0x28
GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800145c:	230b      	movs	r3, #11
 800145e:	62fb      	str	r3, [r7, #44]	; 0x2c
HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001460:	f107 031c 	add.w	r3, r7, #28
 8001464:	4619      	mov	r1, r3
 8001466:	4834      	ldr	r0, [pc, #208]	; (8001538 <MX_GPIO_Init+0x1dc>)
 8001468:	f000 faf8 	bl	8001a5c <HAL_GPIO_Init>

/*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
GPIO_InitStruct.Pin = RMII_REF_CLK_Pin | RMII_MDIO_Pin | RMII_CRS_DV_Pin;
 800146c:	2386      	movs	r3, #134	; 0x86
 800146e:	61fb      	str	r3, [r7, #28]
GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001470:	2302      	movs	r3, #2
 8001472:	623b      	str	r3, [r7, #32]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	627b      	str	r3, [r7, #36]	; 0x24
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001478:	2303      	movs	r3, #3
 800147a:	62bb      	str	r3, [r7, #40]	; 0x28
GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800147c:	230b      	movs	r3, #11
 800147e:	62fb      	str	r3, [r7, #44]	; 0x2c
HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001480:	f107 031c 	add.w	r3, r7, #28
 8001484:	4619      	mov	r1, r3
 8001486:	482d      	ldr	r0, [pc, #180]	; (800153c <MX_GPIO_Init+0x1e0>)
 8001488:	f000 fae8 	bl	8001a5c <HAL_GPIO_Init>

/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | LD2_Pin;
 800148c:	f244 0381 	movw	r3, #16513	; 0x4081
 8001490:	61fb      	str	r3, [r7, #28]
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001492:	2301      	movs	r3, #1
 8001494:	623b      	str	r3, [r7, #32]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	627b      	str	r3, [r7, #36]	; 0x24
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149a:	2300      	movs	r3, #0
 800149c:	62bb      	str	r3, [r7, #40]	; 0x28
HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800149e:	f107 031c 	add.w	r3, r7, #28
 80014a2:	4619      	mov	r1, r3
 80014a4:	4822      	ldr	r0, [pc, #136]	; (8001530 <MX_GPIO_Init+0x1d4>)
 80014a6:	f000 fad9 	bl	8001a5c <HAL_GPIO_Init>

/*Configure GPIO pin : RMII_TXD1_Pin */
GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80014aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014ae:	61fb      	str	r3, [r7, #28]
GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b0:	2302      	movs	r3, #2
 80014b2:	623b      	str	r3, [r7, #32]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b4:	2300      	movs	r3, #0
 80014b6:	627b      	str	r3, [r7, #36]	; 0x24
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b8:	2303      	movs	r3, #3
 80014ba:	62bb      	str	r3, [r7, #40]	; 0x28
GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014bc:	230b      	movs	r3, #11
 80014be:	62fb      	str	r3, [r7, #44]	; 0x2c
HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80014c0:	f107 031c 	add.w	r3, r7, #28
 80014c4:	4619      	mov	r1, r3
 80014c6:	481a      	ldr	r0, [pc, #104]	; (8001530 <MX_GPIO_Init+0x1d4>)
 80014c8:	f000 fac8 	bl	8001a5c <HAL_GPIO_Init>

/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80014cc:	2340      	movs	r3, #64	; 0x40
 80014ce:	61fb      	str	r3, [r7, #28]
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d0:	2301      	movs	r3, #1
 80014d2:	623b      	str	r3, [r7, #32]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d4:	2300      	movs	r3, #0
 80014d6:	627b      	str	r3, [r7, #36]	; 0x24
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d8:	2300      	movs	r3, #0
 80014da:	62bb      	str	r3, [r7, #40]	; 0x28
HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80014dc:	f107 031c 	add.w	r3, r7, #28
 80014e0:	4619      	mov	r1, r3
 80014e2:	4814      	ldr	r0, [pc, #80]	; (8001534 <MX_GPIO_Init+0x1d8>)
 80014e4:	f000 faba 	bl	8001a5c <HAL_GPIO_Init>

/*Configure GPIO pin : USB_OverCurrent_Pin */
GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80014e8:	2380      	movs	r3, #128	; 0x80
 80014ea:	61fb      	str	r3, [r7, #28]
GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ec:	2300      	movs	r3, #0
 80014ee:	623b      	str	r3, [r7, #32]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	627b      	str	r3, [r7, #36]	; 0x24
HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80014f4:	f107 031c 	add.w	r3, r7, #28
 80014f8:	4619      	mov	r1, r3
 80014fa:	480e      	ldr	r0, [pc, #56]	; (8001534 <MX_GPIO_Init+0x1d8>)
 80014fc:	f000 faae 	bl	8001a5c <HAL_GPIO_Init>

/*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
GPIO_InitStruct.Pin = RMII_TX_EN_Pin | RMII_TXD0_Pin;
 8001500:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001504:	61fb      	str	r3, [r7, #28]
GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001506:	2302      	movs	r3, #2
 8001508:	623b      	str	r3, [r7, #32]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150a:	2300      	movs	r3, #0
 800150c:	627b      	str	r3, [r7, #36]	; 0x24
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800150e:	2303      	movs	r3, #3
 8001510:	62bb      	str	r3, [r7, #40]	; 0x28
GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001512:	230b      	movs	r3, #11
 8001514:	62fb      	str	r3, [r7, #44]	; 0x2c
HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001516:	f107 031c 	add.w	r3, r7, #28
 800151a:	4619      	mov	r1, r3
 800151c:	4805      	ldr	r0, [pc, #20]	; (8001534 <MX_GPIO_Init+0x1d8>)
 800151e:	f000 fa9d 	bl	8001a5c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001522:	bf00      	nop
 8001524:	3730      	adds	r7, #48	; 0x30
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	40023800 	.word	0x40023800
 8001530:	40020400 	.word	0x40020400
 8001534:	40021800 	.word	0x40021800
 8001538:	40020800 	.word	0x40020800
 800153c:	40020000 	.word	0x40020000

08001540 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001544:	b672      	cpsid	i
}
 8001546:	bf00      	nop
/* USER CODE BEGIN Error_Handler_Debug */
/* User can add his own implementation to report the HAL error return state */
__disable_irq();
while (1) {
 8001548:	e7fe      	b.n	8001548 <Error_Handler+0x8>
	...

0800154c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	607b      	str	r3, [r7, #4]
 8001556:	4b10      	ldr	r3, [pc, #64]	; (8001598 <HAL_MspInit+0x4c>)
 8001558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155a:	4a0f      	ldr	r2, [pc, #60]	; (8001598 <HAL_MspInit+0x4c>)
 800155c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001560:	6453      	str	r3, [r2, #68]	; 0x44
 8001562:	4b0d      	ldr	r3, [pc, #52]	; (8001598 <HAL_MspInit+0x4c>)
 8001564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001566:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800156a:	607b      	str	r3, [r7, #4]
 800156c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	603b      	str	r3, [r7, #0]
 8001572:	4b09      	ldr	r3, [pc, #36]	; (8001598 <HAL_MspInit+0x4c>)
 8001574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001576:	4a08      	ldr	r2, [pc, #32]	; (8001598 <HAL_MspInit+0x4c>)
 8001578:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800157c:	6413      	str	r3, [r2, #64]	; 0x40
 800157e:	4b06      	ldr	r3, [pc, #24]	; (8001598 <HAL_MspInit+0x4c>)
 8001580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001586:	603b      	str	r3, [r7, #0]
 8001588:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800158a:	bf00      	nop
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	40023800 	.word	0x40023800

0800159c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b08a      	sub	sp, #40	; 0x28
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a4:	f107 0314 	add.w	r3, r7, #20
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	60da      	str	r2, [r3, #12]
 80015b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a19      	ldr	r2, [pc, #100]	; (8001620 <HAL_UART_MspInit+0x84>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d12c      	bne.n	8001618 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80015be:	2300      	movs	r3, #0
 80015c0:	613b      	str	r3, [r7, #16]
 80015c2:	4b18      	ldr	r3, [pc, #96]	; (8001624 <HAL_UART_MspInit+0x88>)
 80015c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c6:	4a17      	ldr	r2, [pc, #92]	; (8001624 <HAL_UART_MspInit+0x88>)
 80015c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015cc:	6413      	str	r3, [r2, #64]	; 0x40
 80015ce:	4b15      	ldr	r3, [pc, #84]	; (8001624 <HAL_UART_MspInit+0x88>)
 80015d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015d6:	613b      	str	r3, [r7, #16]
 80015d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	60fb      	str	r3, [r7, #12]
 80015de:	4b11      	ldr	r3, [pc, #68]	; (8001624 <HAL_UART_MspInit+0x88>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	4a10      	ldr	r2, [pc, #64]	; (8001624 <HAL_UART_MspInit+0x88>)
 80015e4:	f043 0308 	orr.w	r3, r3, #8
 80015e8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ea:	4b0e      	ldr	r3, [pc, #56]	; (8001624 <HAL_UART_MspInit+0x88>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	f003 0308 	and.w	r3, r3, #8
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80015f6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fc:	2302      	movs	r3, #2
 80015fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001600:	2300      	movs	r3, #0
 8001602:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001604:	2303      	movs	r3, #3
 8001606:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001608:	2307      	movs	r3, #7
 800160a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800160c:	f107 0314 	add.w	r3, r7, #20
 8001610:	4619      	mov	r1, r3
 8001612:	4805      	ldr	r0, [pc, #20]	; (8001628 <HAL_UART_MspInit+0x8c>)
 8001614:	f000 fa22 	bl	8001a5c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001618:	bf00      	nop
 800161a:	3728      	adds	r7, #40	; 0x28
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	40004800 	.word	0x40004800
 8001624:	40023800 	.word	0x40023800
 8001628:	40020c00 	.word	0x40020c00

0800162c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001630:	e7fe      	b.n	8001630 <NMI_Handler+0x4>

08001632 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001632:	b480      	push	{r7}
 8001634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001636:	e7fe      	b.n	8001636 <HardFault_Handler+0x4>

08001638 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800163c:	e7fe      	b.n	800163c <MemManage_Handler+0x4>

0800163e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800163e:	b480      	push	{r7}
 8001640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001642:	e7fe      	b.n	8001642 <BusFault_Handler+0x4>

08001644 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001648:	e7fe      	b.n	8001648 <UsageFault_Handler+0x4>

0800164a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800164a:	b480      	push	{r7}
 800164c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800164e:	bf00      	nop
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800165c:	bf00      	nop
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr

08001666 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001666:	b480      	push	{r7}
 8001668:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800166a:	bf00      	nop
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001678:	f000 f89a 	bl	80017b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800167c:	bf00      	nop
 800167e:	bd80      	pop	{r7, pc}

08001680 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001684:	4802      	ldr	r0, [pc, #8]	; (8001690 <OTG_FS_IRQHandler+0x10>)
 8001686:	f000 fd16 	bl	80020b6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	20000670 	.word	0x20000670

08001694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001698:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <SystemInit+0x20>)
 800169a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800169e:	4a05      	ldr	r2, [pc, #20]	; (80016b4 <SystemInit+0x20>)
 80016a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016a8:	bf00      	nop
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	e000ed00 	.word	0xe000ed00

080016b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80016b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016f0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016bc:	480d      	ldr	r0, [pc, #52]	; (80016f4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016be:	490e      	ldr	r1, [pc, #56]	; (80016f8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016c0:	4a0e      	ldr	r2, [pc, #56]	; (80016fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016c4:	e002      	b.n	80016cc <LoopCopyDataInit>

080016c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ca:	3304      	adds	r3, #4

080016cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016d0:	d3f9      	bcc.n	80016c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016d2:	4a0b      	ldr	r2, [pc, #44]	; (8001700 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016d4:	4c0b      	ldr	r4, [pc, #44]	; (8001704 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016d8:	e001      	b.n	80016de <LoopFillZerobss>

080016da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016dc:	3204      	adds	r2, #4

080016de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016e0:	d3fb      	bcc.n	80016da <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016e2:	f7ff ffd7 	bl	8001694 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016e6:	f006 fb35 	bl	8007d54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016ea:	f7ff fd5b 	bl	80011a4 <main>
  bx  lr    
 80016ee:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80016f0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80016f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016f8:	2000011c 	.word	0x2000011c
  ldr r2, =_sidata
 80016fc:	08008cf0 	.word	0x08008cf0
  ldr r2, =_sbss
 8001700:	2000011c 	.word	0x2000011c
  ldr r4, =_ebss
 8001704:	20000b90 	.word	0x20000b90

08001708 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001708:	e7fe      	b.n	8001708 <ADC_IRQHandler>
	...

0800170c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001710:	4b0e      	ldr	r3, [pc, #56]	; (800174c <HAL_Init+0x40>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a0d      	ldr	r2, [pc, #52]	; (800174c <HAL_Init+0x40>)
 8001716:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800171a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800171c:	4b0b      	ldr	r3, [pc, #44]	; (800174c <HAL_Init+0x40>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a0a      	ldr	r2, [pc, #40]	; (800174c <HAL_Init+0x40>)
 8001722:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001726:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001728:	4b08      	ldr	r3, [pc, #32]	; (800174c <HAL_Init+0x40>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a07      	ldr	r2, [pc, #28]	; (800174c <HAL_Init+0x40>)
 800172e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001732:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001734:	2003      	movs	r0, #3
 8001736:	f000 f94f 	bl	80019d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800173a:	2000      	movs	r0, #0
 800173c:	f000 f808 	bl	8001750 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001740:	f7ff ff04 	bl	800154c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001744:	2300      	movs	r3, #0
}
 8001746:	4618      	mov	r0, r3
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40023c00 	.word	0x40023c00

08001750 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001758:	4b12      	ldr	r3, [pc, #72]	; (80017a4 <HAL_InitTick+0x54>)
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	4b12      	ldr	r3, [pc, #72]	; (80017a8 <HAL_InitTick+0x58>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	4619      	mov	r1, r3
 8001762:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001766:	fbb3 f3f1 	udiv	r3, r3, r1
 800176a:	fbb2 f3f3 	udiv	r3, r2, r3
 800176e:	4618      	mov	r0, r3
 8001770:	f000 f967 	bl	8001a42 <HAL_SYSTICK_Config>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e00e      	b.n	800179c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2b0f      	cmp	r3, #15
 8001782:	d80a      	bhi.n	800179a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001784:	2200      	movs	r2, #0
 8001786:	6879      	ldr	r1, [r7, #4]
 8001788:	f04f 30ff 	mov.w	r0, #4294967295
 800178c:	f000 f92f 	bl	80019ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001790:	4a06      	ldr	r2, [pc, #24]	; (80017ac <HAL_InitTick+0x5c>)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001796:	2300      	movs	r3, #0
 8001798:	e000      	b.n	800179c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
}
 800179c:	4618      	mov	r0, r3
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	20000000 	.word	0x20000000
 80017a8:	20000008 	.word	0x20000008
 80017ac:	20000004 	.word	0x20000004

080017b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017b4:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <HAL_IncTick+0x20>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	461a      	mov	r2, r3
 80017ba:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <HAL_IncTick+0x24>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4413      	add	r3, r2
 80017c0:	4a04      	ldr	r2, [pc, #16]	; (80017d4 <HAL_IncTick+0x24>)
 80017c2:	6013      	str	r3, [r2, #0]
}
 80017c4:	bf00      	nop
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	20000008 	.word	0x20000008
 80017d4:	2000018c 	.word	0x2000018c

080017d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  return uwTick;
 80017dc:	4b03      	ldr	r3, [pc, #12]	; (80017ec <HAL_GetTick+0x14>)
 80017de:	681b      	ldr	r3, [r3, #0]
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	2000018c 	.word	0x2000018c

080017f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017f8:	f7ff ffee 	bl	80017d8 <HAL_GetTick>
 80017fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001808:	d005      	beq.n	8001816 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800180a:	4b0a      	ldr	r3, [pc, #40]	; (8001834 <HAL_Delay+0x44>)
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	461a      	mov	r2, r3
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	4413      	add	r3, r2
 8001814:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001816:	bf00      	nop
 8001818:	f7ff ffde 	bl	80017d8 <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	68fa      	ldr	r2, [r7, #12]
 8001824:	429a      	cmp	r2, r3
 8001826:	d8f7      	bhi.n	8001818 <HAL_Delay+0x28>
  {
  }
}
 8001828:	bf00      	nop
 800182a:	bf00      	nop
 800182c:	3710      	adds	r7, #16
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	20000008 	.word	0x20000008

08001838 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001838:	b480      	push	{r7}
 800183a:	b085      	sub	sp, #20
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f003 0307 	and.w	r3, r3, #7
 8001846:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001848:	4b0c      	ldr	r3, [pc, #48]	; (800187c <__NVIC_SetPriorityGrouping+0x44>)
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800184e:	68ba      	ldr	r2, [r7, #8]
 8001850:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001854:	4013      	ands	r3, r2
 8001856:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001860:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001864:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001868:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800186a:	4a04      	ldr	r2, [pc, #16]	; (800187c <__NVIC_SetPriorityGrouping+0x44>)
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	60d3      	str	r3, [r2, #12]
}
 8001870:	bf00      	nop
 8001872:	3714      	adds	r7, #20
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	e000ed00 	.word	0xe000ed00

08001880 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001884:	4b04      	ldr	r3, [pc, #16]	; (8001898 <__NVIC_GetPriorityGrouping+0x18>)
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	0a1b      	lsrs	r3, r3, #8
 800188a:	f003 0307 	and.w	r3, r3, #7
}
 800188e:	4618      	mov	r0, r3
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr
 8001898:	e000ed00 	.word	0xe000ed00

0800189c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	4603      	mov	r3, r0
 80018a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	db0b      	blt.n	80018c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018ae:	79fb      	ldrb	r3, [r7, #7]
 80018b0:	f003 021f 	and.w	r2, r3, #31
 80018b4:	4907      	ldr	r1, [pc, #28]	; (80018d4 <__NVIC_EnableIRQ+0x38>)
 80018b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ba:	095b      	lsrs	r3, r3, #5
 80018bc:	2001      	movs	r0, #1
 80018be:	fa00 f202 	lsl.w	r2, r0, r2
 80018c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018c6:	bf00      	nop
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	e000e100 	.word	0xe000e100

080018d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	6039      	str	r1, [r7, #0]
 80018e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	db0a      	blt.n	8001902 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	b2da      	uxtb	r2, r3
 80018f0:	490c      	ldr	r1, [pc, #48]	; (8001924 <__NVIC_SetPriority+0x4c>)
 80018f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f6:	0112      	lsls	r2, r2, #4
 80018f8:	b2d2      	uxtb	r2, r2
 80018fa:	440b      	add	r3, r1
 80018fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001900:	e00a      	b.n	8001918 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	b2da      	uxtb	r2, r3
 8001906:	4908      	ldr	r1, [pc, #32]	; (8001928 <__NVIC_SetPriority+0x50>)
 8001908:	79fb      	ldrb	r3, [r7, #7]
 800190a:	f003 030f 	and.w	r3, r3, #15
 800190e:	3b04      	subs	r3, #4
 8001910:	0112      	lsls	r2, r2, #4
 8001912:	b2d2      	uxtb	r2, r2
 8001914:	440b      	add	r3, r1
 8001916:	761a      	strb	r2, [r3, #24]
}
 8001918:	bf00      	nop
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	e000e100 	.word	0xe000e100
 8001928:	e000ed00 	.word	0xe000ed00

0800192c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800192c:	b480      	push	{r7}
 800192e:	b089      	sub	sp, #36	; 0x24
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f003 0307 	and.w	r3, r3, #7
 800193e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	f1c3 0307 	rsb	r3, r3, #7
 8001946:	2b04      	cmp	r3, #4
 8001948:	bf28      	it	cs
 800194a:	2304      	movcs	r3, #4
 800194c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	3304      	adds	r3, #4
 8001952:	2b06      	cmp	r3, #6
 8001954:	d902      	bls.n	800195c <NVIC_EncodePriority+0x30>
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	3b03      	subs	r3, #3
 800195a:	e000      	b.n	800195e <NVIC_EncodePriority+0x32>
 800195c:	2300      	movs	r3, #0
 800195e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001960:	f04f 32ff 	mov.w	r2, #4294967295
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	fa02 f303 	lsl.w	r3, r2, r3
 800196a:	43da      	mvns	r2, r3
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	401a      	ands	r2, r3
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001974:	f04f 31ff 	mov.w	r1, #4294967295
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	fa01 f303 	lsl.w	r3, r1, r3
 800197e:	43d9      	mvns	r1, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001984:	4313      	orrs	r3, r2
         );
}
 8001986:	4618      	mov	r0, r3
 8001988:	3724      	adds	r7, #36	; 0x24
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
	...

08001994 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	3b01      	subs	r3, #1
 80019a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019a4:	d301      	bcc.n	80019aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019a6:	2301      	movs	r3, #1
 80019a8:	e00f      	b.n	80019ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019aa:	4a0a      	ldr	r2, [pc, #40]	; (80019d4 <SysTick_Config+0x40>)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	3b01      	subs	r3, #1
 80019b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019b2:	210f      	movs	r1, #15
 80019b4:	f04f 30ff 	mov.w	r0, #4294967295
 80019b8:	f7ff ff8e 	bl	80018d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019bc:	4b05      	ldr	r3, [pc, #20]	; (80019d4 <SysTick_Config+0x40>)
 80019be:	2200      	movs	r2, #0
 80019c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019c2:	4b04      	ldr	r3, [pc, #16]	; (80019d4 <SysTick_Config+0x40>)
 80019c4:	2207      	movs	r2, #7
 80019c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	e000e010 	.word	0xe000e010

080019d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f7ff ff29 	bl	8001838 <__NVIC_SetPriorityGrouping>
}
 80019e6:	bf00      	nop
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}

080019ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b086      	sub	sp, #24
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	4603      	mov	r3, r0
 80019f6:	60b9      	str	r1, [r7, #8]
 80019f8:	607a      	str	r2, [r7, #4]
 80019fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019fc:	2300      	movs	r3, #0
 80019fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a00:	f7ff ff3e 	bl	8001880 <__NVIC_GetPriorityGrouping>
 8001a04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	68b9      	ldr	r1, [r7, #8]
 8001a0a:	6978      	ldr	r0, [r7, #20]
 8001a0c:	f7ff ff8e 	bl	800192c <NVIC_EncodePriority>
 8001a10:	4602      	mov	r2, r0
 8001a12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a16:	4611      	mov	r1, r2
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff ff5d 	bl	80018d8 <__NVIC_SetPriority>
}
 8001a1e:	bf00      	nop
 8001a20:	3718      	adds	r7, #24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b082      	sub	sp, #8
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff ff31 	bl	800189c <__NVIC_EnableIRQ>
}
 8001a3a:	bf00      	nop
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b082      	sub	sp, #8
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f7ff ffa2 	bl	8001994 <SysTick_Config>
 8001a50:	4603      	mov	r3, r0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
	...

08001a5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b089      	sub	sp, #36	; 0x24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a66:	2300      	movs	r3, #0
 8001a68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a72:	2300      	movs	r3, #0
 8001a74:	61fb      	str	r3, [r7, #28]
 8001a76:	e177      	b.n	8001d68 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a78:	2201      	movs	r2, #1
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	697a      	ldr	r2, [r7, #20]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a8c:	693a      	ldr	r2, [r7, #16]
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	f040 8166 	bne.w	8001d62 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f003 0303 	and.w	r3, r3, #3
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d005      	beq.n	8001aae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d130      	bne.n	8001b10 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	2203      	movs	r2, #3
 8001aba:	fa02 f303 	lsl.w	r3, r2, r3
 8001abe:	43db      	mvns	r3, r3
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	68da      	ldr	r2, [r3, #12]
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	43db      	mvns	r3, r3
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	4013      	ands	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	091b      	lsrs	r3, r3, #4
 8001afa:	f003 0201 	and.w	r2, r3, #1
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f003 0303 	and.w	r3, r3, #3
 8001b18:	2b03      	cmp	r3, #3
 8001b1a:	d017      	beq.n	8001b4c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	2203      	movs	r2, #3
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	4013      	ands	r3, r2
 8001b32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	689a      	ldr	r2, [r3, #8]
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f003 0303 	and.w	r3, r3, #3
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d123      	bne.n	8001ba0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	08da      	lsrs	r2, r3, #3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	3208      	adds	r2, #8
 8001b60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	f003 0307 	and.w	r3, r3, #7
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	220f      	movs	r2, #15
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	43db      	mvns	r3, r3
 8001b76:	69ba      	ldr	r2, [r7, #24]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	691a      	ldr	r2, [r3, #16]
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	f003 0307 	and.w	r3, r3, #7
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	08da      	lsrs	r2, r3, #3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	3208      	adds	r2, #8
 8001b9a:	69b9      	ldr	r1, [r7, #24]
 8001b9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	2203      	movs	r2, #3
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f003 0203 	and.w	r2, r3, #3
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	f000 80c0 	beq.w	8001d62 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001be2:	2300      	movs	r3, #0
 8001be4:	60fb      	str	r3, [r7, #12]
 8001be6:	4b66      	ldr	r3, [pc, #408]	; (8001d80 <HAL_GPIO_Init+0x324>)
 8001be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bea:	4a65      	ldr	r2, [pc, #404]	; (8001d80 <HAL_GPIO_Init+0x324>)
 8001bec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bf0:	6453      	str	r3, [r2, #68]	; 0x44
 8001bf2:	4b63      	ldr	r3, [pc, #396]	; (8001d80 <HAL_GPIO_Init+0x324>)
 8001bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bfa:	60fb      	str	r3, [r7, #12]
 8001bfc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bfe:	4a61      	ldr	r2, [pc, #388]	; (8001d84 <HAL_GPIO_Init+0x328>)
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	089b      	lsrs	r3, r3, #2
 8001c04:	3302      	adds	r3, #2
 8001c06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	f003 0303 	and.w	r3, r3, #3
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	220f      	movs	r2, #15
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	43db      	mvns	r3, r3
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	4013      	ands	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a58      	ldr	r2, [pc, #352]	; (8001d88 <HAL_GPIO_Init+0x32c>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d037      	beq.n	8001c9a <HAL_GPIO_Init+0x23e>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a57      	ldr	r2, [pc, #348]	; (8001d8c <HAL_GPIO_Init+0x330>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d031      	beq.n	8001c96 <HAL_GPIO_Init+0x23a>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a56      	ldr	r2, [pc, #344]	; (8001d90 <HAL_GPIO_Init+0x334>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d02b      	beq.n	8001c92 <HAL_GPIO_Init+0x236>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a55      	ldr	r2, [pc, #340]	; (8001d94 <HAL_GPIO_Init+0x338>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d025      	beq.n	8001c8e <HAL_GPIO_Init+0x232>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a54      	ldr	r2, [pc, #336]	; (8001d98 <HAL_GPIO_Init+0x33c>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d01f      	beq.n	8001c8a <HAL_GPIO_Init+0x22e>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a53      	ldr	r2, [pc, #332]	; (8001d9c <HAL_GPIO_Init+0x340>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d019      	beq.n	8001c86 <HAL_GPIO_Init+0x22a>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a52      	ldr	r2, [pc, #328]	; (8001da0 <HAL_GPIO_Init+0x344>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d013      	beq.n	8001c82 <HAL_GPIO_Init+0x226>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a51      	ldr	r2, [pc, #324]	; (8001da4 <HAL_GPIO_Init+0x348>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d00d      	beq.n	8001c7e <HAL_GPIO_Init+0x222>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a50      	ldr	r2, [pc, #320]	; (8001da8 <HAL_GPIO_Init+0x34c>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d007      	beq.n	8001c7a <HAL_GPIO_Init+0x21e>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a4f      	ldr	r2, [pc, #316]	; (8001dac <HAL_GPIO_Init+0x350>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d101      	bne.n	8001c76 <HAL_GPIO_Init+0x21a>
 8001c72:	2309      	movs	r3, #9
 8001c74:	e012      	b.n	8001c9c <HAL_GPIO_Init+0x240>
 8001c76:	230a      	movs	r3, #10
 8001c78:	e010      	b.n	8001c9c <HAL_GPIO_Init+0x240>
 8001c7a:	2308      	movs	r3, #8
 8001c7c:	e00e      	b.n	8001c9c <HAL_GPIO_Init+0x240>
 8001c7e:	2307      	movs	r3, #7
 8001c80:	e00c      	b.n	8001c9c <HAL_GPIO_Init+0x240>
 8001c82:	2306      	movs	r3, #6
 8001c84:	e00a      	b.n	8001c9c <HAL_GPIO_Init+0x240>
 8001c86:	2305      	movs	r3, #5
 8001c88:	e008      	b.n	8001c9c <HAL_GPIO_Init+0x240>
 8001c8a:	2304      	movs	r3, #4
 8001c8c:	e006      	b.n	8001c9c <HAL_GPIO_Init+0x240>
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e004      	b.n	8001c9c <HAL_GPIO_Init+0x240>
 8001c92:	2302      	movs	r3, #2
 8001c94:	e002      	b.n	8001c9c <HAL_GPIO_Init+0x240>
 8001c96:	2301      	movs	r3, #1
 8001c98:	e000      	b.n	8001c9c <HAL_GPIO_Init+0x240>
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	69fa      	ldr	r2, [r7, #28]
 8001c9e:	f002 0203 	and.w	r2, r2, #3
 8001ca2:	0092      	lsls	r2, r2, #2
 8001ca4:	4093      	lsls	r3, r2
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cac:	4935      	ldr	r1, [pc, #212]	; (8001d84 <HAL_GPIO_Init+0x328>)
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	089b      	lsrs	r3, r3, #2
 8001cb2:	3302      	adds	r3, #2
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cba:	4b3d      	ldr	r3, [pc, #244]	; (8001db0 <HAL_GPIO_Init+0x354>)
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	43db      	mvns	r3, r3
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d003      	beq.n	8001cde <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001cd6:	69ba      	ldr	r2, [r7, #24]
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cde:	4a34      	ldr	r2, [pc, #208]	; (8001db0 <HAL_GPIO_Init+0x354>)
 8001ce0:	69bb      	ldr	r3, [r7, #24]
 8001ce2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ce4:	4b32      	ldr	r3, [pc, #200]	; (8001db0 <HAL_GPIO_Init+0x354>)
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	43db      	mvns	r3, r3
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d003      	beq.n	8001d08 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d08:	4a29      	ldr	r2, [pc, #164]	; (8001db0 <HAL_GPIO_Init+0x354>)
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d0e:	4b28      	ldr	r3, [pc, #160]	; (8001db0 <HAL_GPIO_Init+0x354>)
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	43db      	mvns	r3, r3
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d003      	beq.n	8001d32 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d32:	4a1f      	ldr	r2, [pc, #124]	; (8001db0 <HAL_GPIO_Init+0x354>)
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d38:	4b1d      	ldr	r3, [pc, #116]	; (8001db0 <HAL_GPIO_Init+0x354>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	43db      	mvns	r3, r3
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	4013      	ands	r3, r2
 8001d46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d003      	beq.n	8001d5c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d5c:	4a14      	ldr	r2, [pc, #80]	; (8001db0 <HAL_GPIO_Init+0x354>)
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	3301      	adds	r3, #1
 8001d66:	61fb      	str	r3, [r7, #28]
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	2b0f      	cmp	r3, #15
 8001d6c:	f67f ae84 	bls.w	8001a78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d70:	bf00      	nop
 8001d72:	bf00      	nop
 8001d74:	3724      	adds	r7, #36	; 0x24
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	40023800 	.word	0x40023800
 8001d84:	40013800 	.word	0x40013800
 8001d88:	40020000 	.word	0x40020000
 8001d8c:	40020400 	.word	0x40020400
 8001d90:	40020800 	.word	0x40020800
 8001d94:	40020c00 	.word	0x40020c00
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	40021400 	.word	0x40021400
 8001da0:	40021800 	.word	0x40021800
 8001da4:	40021c00 	.word	0x40021c00
 8001da8:	40022000 	.word	0x40022000
 8001dac:	40022400 	.word	0x40022400
 8001db0:	40013c00 	.word	0x40013c00

08001db4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b085      	sub	sp, #20
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	691a      	ldr	r2, [r3, #16]
 8001dc4:	887b      	ldrh	r3, [r7, #2]
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d002      	beq.n	8001dd2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	73fb      	strb	r3, [r7, #15]
 8001dd0:	e001      	b.n	8001dd6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001dd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3714      	adds	r7, #20
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	460b      	mov	r3, r1
 8001dee:	807b      	strh	r3, [r7, #2]
 8001df0:	4613      	mov	r3, r2
 8001df2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001df4:	787b      	ldrb	r3, [r7, #1]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d003      	beq.n	8001e02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dfa:	887a      	ldrh	r2, [r7, #2]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e00:	e003      	b.n	8001e0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e02:	887b      	ldrh	r3, [r7, #2]
 8001e04:	041a      	lsls	r2, r3, #16
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	619a      	str	r2, [r3, #24]
}
 8001e0a:	bf00      	nop
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr

08001e16 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001e16:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e18:	b08f      	sub	sp, #60	; 0x3c
 8001e1a:	af0a      	add	r7, sp, #40	; 0x28
 8001e1c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d101      	bne.n	8001e28 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e10f      	b.n	8002048 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d106      	bne.n	8001e48 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f005 fc6e 	bl	8007724 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2203      	movs	r2, #3
 8001e4c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d102      	bne.n	8001e62 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f002 faa9 	bl	80043be <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	603b      	str	r3, [r7, #0]
 8001e72:	687e      	ldr	r6, [r7, #4]
 8001e74:	466d      	mov	r5, sp
 8001e76:	f106 0410 	add.w	r4, r6, #16
 8001e7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e82:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e86:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e8a:	1d33      	adds	r3, r6, #4
 8001e8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e8e:	6838      	ldr	r0, [r7, #0]
 8001e90:	f002 f980 	bl	8004194 <USB_CoreInit>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d005      	beq.n	8001ea6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2202      	movs	r2, #2
 8001e9e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e0d0      	b.n	8002048 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2100      	movs	r1, #0
 8001eac:	4618      	mov	r0, r3
 8001eae:	f002 fa97 	bl	80043e0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	73fb      	strb	r3, [r7, #15]
 8001eb6:	e04a      	b.n	8001f4e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001eb8:	7bfa      	ldrb	r2, [r7, #15]
 8001eba:	6879      	ldr	r1, [r7, #4]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	00db      	lsls	r3, r3, #3
 8001ec0:	4413      	add	r3, r2
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	440b      	add	r3, r1
 8001ec6:	333d      	adds	r3, #61	; 0x3d
 8001ec8:	2201      	movs	r2, #1
 8001eca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001ecc:	7bfa      	ldrb	r2, [r7, #15]
 8001ece:	6879      	ldr	r1, [r7, #4]
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	00db      	lsls	r3, r3, #3
 8001ed4:	4413      	add	r3, r2
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	440b      	add	r3, r1
 8001eda:	333c      	adds	r3, #60	; 0x3c
 8001edc:	7bfa      	ldrb	r2, [r7, #15]
 8001ede:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001ee0:	7bfa      	ldrb	r2, [r7, #15]
 8001ee2:	7bfb      	ldrb	r3, [r7, #15]
 8001ee4:	b298      	uxth	r0, r3
 8001ee6:	6879      	ldr	r1, [r7, #4]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	00db      	lsls	r3, r3, #3
 8001eec:	4413      	add	r3, r2
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	440b      	add	r3, r1
 8001ef2:	3344      	adds	r3, #68	; 0x44
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ef8:	7bfa      	ldrb	r2, [r7, #15]
 8001efa:	6879      	ldr	r1, [r7, #4]
 8001efc:	4613      	mov	r3, r2
 8001efe:	00db      	lsls	r3, r3, #3
 8001f00:	4413      	add	r3, r2
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	440b      	add	r3, r1
 8001f06:	3340      	adds	r3, #64	; 0x40
 8001f08:	2200      	movs	r2, #0
 8001f0a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f0c:	7bfa      	ldrb	r2, [r7, #15]
 8001f0e:	6879      	ldr	r1, [r7, #4]
 8001f10:	4613      	mov	r3, r2
 8001f12:	00db      	lsls	r3, r3, #3
 8001f14:	4413      	add	r3, r2
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	440b      	add	r3, r1
 8001f1a:	3348      	adds	r3, #72	; 0x48
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f20:	7bfa      	ldrb	r2, [r7, #15]
 8001f22:	6879      	ldr	r1, [r7, #4]
 8001f24:	4613      	mov	r3, r2
 8001f26:	00db      	lsls	r3, r3, #3
 8001f28:	4413      	add	r3, r2
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	440b      	add	r3, r1
 8001f2e:	334c      	adds	r3, #76	; 0x4c
 8001f30:	2200      	movs	r2, #0
 8001f32:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f34:	7bfa      	ldrb	r2, [r7, #15]
 8001f36:	6879      	ldr	r1, [r7, #4]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	00db      	lsls	r3, r3, #3
 8001f3c:	4413      	add	r3, r2
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	440b      	add	r3, r1
 8001f42:	3354      	adds	r3, #84	; 0x54
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f48:	7bfb      	ldrb	r3, [r7, #15]
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	73fb      	strb	r3, [r7, #15]
 8001f4e:	7bfa      	ldrb	r2, [r7, #15]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d3af      	bcc.n	8001eb8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f58:	2300      	movs	r3, #0
 8001f5a:	73fb      	strb	r3, [r7, #15]
 8001f5c:	e044      	b.n	8001fe8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f5e:	7bfa      	ldrb	r2, [r7, #15]
 8001f60:	6879      	ldr	r1, [r7, #4]
 8001f62:	4613      	mov	r3, r2
 8001f64:	00db      	lsls	r3, r3, #3
 8001f66:	4413      	add	r3, r2
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	440b      	add	r3, r1
 8001f6c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001f70:	2200      	movs	r2, #0
 8001f72:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f74:	7bfa      	ldrb	r2, [r7, #15]
 8001f76:	6879      	ldr	r1, [r7, #4]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	00db      	lsls	r3, r3, #3
 8001f7c:	4413      	add	r3, r2
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	440b      	add	r3, r1
 8001f82:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001f86:	7bfa      	ldrb	r2, [r7, #15]
 8001f88:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f8a:	7bfa      	ldrb	r2, [r7, #15]
 8001f8c:	6879      	ldr	r1, [r7, #4]
 8001f8e:	4613      	mov	r3, r2
 8001f90:	00db      	lsls	r3, r3, #3
 8001f92:	4413      	add	r3, r2
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	440b      	add	r3, r1
 8001f98:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001fa0:	7bfa      	ldrb	r2, [r7, #15]
 8001fa2:	6879      	ldr	r1, [r7, #4]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	00db      	lsls	r3, r3, #3
 8001fa8:	4413      	add	r3, r2
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	440b      	add	r3, r1
 8001fae:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001fb6:	7bfa      	ldrb	r2, [r7, #15]
 8001fb8:	6879      	ldr	r1, [r7, #4]
 8001fba:	4613      	mov	r3, r2
 8001fbc:	00db      	lsls	r3, r3, #3
 8001fbe:	4413      	add	r3, r2
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	440b      	add	r3, r1
 8001fc4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001fcc:	7bfa      	ldrb	r2, [r7, #15]
 8001fce:	6879      	ldr	r1, [r7, #4]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	00db      	lsls	r3, r3, #3
 8001fd4:	4413      	add	r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	440b      	add	r3, r1
 8001fda:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001fde:	2200      	movs	r2, #0
 8001fe0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fe2:	7bfb      	ldrb	r3, [r7, #15]
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	73fb      	strb	r3, [r7, #15]
 8001fe8:	7bfa      	ldrb	r2, [r7, #15]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d3b5      	bcc.n	8001f5e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	603b      	str	r3, [r7, #0]
 8001ff8:	687e      	ldr	r6, [r7, #4]
 8001ffa:	466d      	mov	r5, sp
 8001ffc:	f106 0410 	add.w	r4, r6, #16
 8002000:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002002:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002004:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002006:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002008:	e894 0003 	ldmia.w	r4, {r0, r1}
 800200c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002010:	1d33      	adds	r3, r6, #4
 8002012:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002014:	6838      	ldr	r0, [r7, #0]
 8002016:	f002 fa2f 	bl	8004478 <USB_DevInit>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d005      	beq.n	800202c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2202      	movs	r2, #2
 8002024:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e00d      	b.n	8002048 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2201      	movs	r2, #1
 8002038:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4618      	mov	r0, r3
 8002042:	f003 fb7e 	bl	8005742 <USB_DevDisconnect>

  return HAL_OK;
 8002046:	2300      	movs	r3, #0
}
 8002048:	4618      	mov	r0, r3
 800204a:	3714      	adds	r7, #20
 800204c:	46bd      	mov	sp, r7
 800204e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002050 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002064:	2b01      	cmp	r3, #1
 8002066:	d101      	bne.n	800206c <HAL_PCD_Start+0x1c>
 8002068:	2302      	movs	r3, #2
 800206a:	e020      	b.n	80020ae <HAL_PCD_Start+0x5e>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2201      	movs	r2, #1
 8002070:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002078:	2b01      	cmp	r3, #1
 800207a:	d109      	bne.n	8002090 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002080:	2b01      	cmp	r3, #1
 8002082:	d005      	beq.n	8002090 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002088:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4618      	mov	r0, r3
 8002096:	f002 f981 	bl	800439c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4618      	mov	r0, r3
 80020a0:	f003 fb2e 	bl	8005700 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3710      	adds	r7, #16
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80020b6:	b590      	push	{r4, r7, lr}
 80020b8:	b08d      	sub	sp, #52	; 0x34
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020c4:	6a3b      	ldr	r3, [r7, #32]
 80020c6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f003 fbec 	bl	80058aa <USB_GetMode>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	f040 848a 	bne.w	80029ee <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4618      	mov	r0, r3
 80020e0:	f003 fb50 	bl	8005784 <USB_ReadInterrupts>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	f000 8480 	beq.w	80029ec <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	0a1b      	lsrs	r3, r3, #8
 80020f6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4618      	mov	r0, r3
 8002106:	f003 fb3d 	bl	8005784 <USB_ReadInterrupts>
 800210a:	4603      	mov	r3, r0
 800210c:	f003 0302 	and.w	r3, r3, #2
 8002110:	2b02      	cmp	r3, #2
 8002112:	d107      	bne.n	8002124 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	695a      	ldr	r2, [r3, #20]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f002 0202 	and.w	r2, r2, #2
 8002122:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4618      	mov	r0, r3
 800212a:	f003 fb2b 	bl	8005784 <USB_ReadInterrupts>
 800212e:	4603      	mov	r3, r0
 8002130:	f003 0310 	and.w	r3, r3, #16
 8002134:	2b10      	cmp	r3, #16
 8002136:	d161      	bne.n	80021fc <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	699a      	ldr	r2, [r3, #24]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f022 0210 	bic.w	r2, r2, #16
 8002146:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002148:	6a3b      	ldr	r3, [r7, #32]
 800214a:	6a1b      	ldr	r3, [r3, #32]
 800214c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	f003 020f 	and.w	r2, r3, #15
 8002154:	4613      	mov	r3, r2
 8002156:	00db      	lsls	r3, r3, #3
 8002158:	4413      	add	r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	4413      	add	r3, r2
 8002164:	3304      	adds	r3, #4
 8002166:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	0c5b      	lsrs	r3, r3, #17
 800216c:	f003 030f 	and.w	r3, r3, #15
 8002170:	2b02      	cmp	r3, #2
 8002172:	d124      	bne.n	80021be <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800217a:	4013      	ands	r3, r2
 800217c:	2b00      	cmp	r3, #0
 800217e:	d035      	beq.n	80021ec <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	091b      	lsrs	r3, r3, #4
 8002188:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800218a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800218e:	b29b      	uxth	r3, r3
 8002190:	461a      	mov	r2, r3
 8002192:	6a38      	ldr	r0, [r7, #32]
 8002194:	f003 f962 	bl	800545c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	691a      	ldr	r2, [r3, #16]
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	091b      	lsrs	r3, r3, #4
 80021a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021a4:	441a      	add	r2, r3
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	6a1a      	ldr	r2, [r3, #32]
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	091b      	lsrs	r3, r3, #4
 80021b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021b6:	441a      	add	r2, r3
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	621a      	str	r2, [r3, #32]
 80021bc:	e016      	b.n	80021ec <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	0c5b      	lsrs	r3, r3, #17
 80021c2:	f003 030f 	and.w	r3, r3, #15
 80021c6:	2b06      	cmp	r3, #6
 80021c8:	d110      	bne.n	80021ec <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80021d0:	2208      	movs	r2, #8
 80021d2:	4619      	mov	r1, r3
 80021d4:	6a38      	ldr	r0, [r7, #32]
 80021d6:	f003 f941 	bl	800545c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	6a1a      	ldr	r2, [r3, #32]
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	091b      	lsrs	r3, r3, #4
 80021e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021e6:	441a      	add	r2, r3
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	699a      	ldr	r2, [r3, #24]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f042 0210 	orr.w	r2, r2, #16
 80021fa:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4618      	mov	r0, r3
 8002202:	f003 fabf 	bl	8005784 <USB_ReadInterrupts>
 8002206:	4603      	mov	r3, r0
 8002208:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800220c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002210:	f040 80a7 	bne.w	8002362 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002214:	2300      	movs	r3, #0
 8002216:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4618      	mov	r0, r3
 800221e:	f003 fac4 	bl	80057aa <USB_ReadDevAllOutEpInterrupt>
 8002222:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002224:	e099      	b.n	800235a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002228:	f003 0301 	and.w	r3, r3, #1
 800222c:	2b00      	cmp	r3, #0
 800222e:	f000 808e 	beq.w	800234e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002238:	b2d2      	uxtb	r2, r2
 800223a:	4611      	mov	r1, r2
 800223c:	4618      	mov	r0, r3
 800223e:	f003 fae8 	bl	8005812 <USB_ReadDevOutEPInterrupt>
 8002242:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	2b00      	cmp	r3, #0
 800224c:	d00c      	beq.n	8002268 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800224e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002250:	015a      	lsls	r2, r3, #5
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	4413      	add	r3, r2
 8002256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800225a:	461a      	mov	r2, r3
 800225c:	2301      	movs	r3, #1
 800225e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002260:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f000 feaa 	bl	8002fbc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	f003 0308 	and.w	r3, r3, #8
 800226e:	2b00      	cmp	r3, #0
 8002270:	d00c      	beq.n	800228c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002274:	015a      	lsls	r2, r3, #5
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	4413      	add	r3, r2
 800227a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800227e:	461a      	mov	r2, r3
 8002280:	2308      	movs	r3, #8
 8002282:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002284:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f000 ff80 	bl	800318c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	f003 0310 	and.w	r3, r3, #16
 8002292:	2b00      	cmp	r3, #0
 8002294:	d008      	beq.n	80022a8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002298:	015a      	lsls	r2, r3, #5
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	4413      	add	r3, r2
 800229e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022a2:	461a      	mov	r2, r3
 80022a4:	2310      	movs	r3, #16
 80022a6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d030      	beq.n	8002314 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80022b2:	6a3b      	ldr	r3, [r7, #32]
 80022b4:	695b      	ldr	r3, [r3, #20]
 80022b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022ba:	2b80      	cmp	r3, #128	; 0x80
 80022bc:	d109      	bne.n	80022d2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	69fa      	ldr	r2, [r7, #28]
 80022c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022d0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80022d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022d4:	4613      	mov	r3, r2
 80022d6:	00db      	lsls	r3, r3, #3
 80022d8:	4413      	add	r3, r2
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	4413      	add	r3, r2
 80022e4:	3304      	adds	r3, #4
 80022e6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	78db      	ldrb	r3, [r3, #3]
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d108      	bne.n	8002302 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	2200      	movs	r2, #0
 80022f4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80022f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	4619      	mov	r1, r3
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f005 fb25 	bl	800794c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002304:	015a      	lsls	r2, r3, #5
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	4413      	add	r3, r2
 800230a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800230e:	461a      	mov	r2, r3
 8002310:	2302      	movs	r3, #2
 8002312:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	f003 0320 	and.w	r3, r3, #32
 800231a:	2b00      	cmp	r3, #0
 800231c:	d008      	beq.n	8002330 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800231e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002320:	015a      	lsls	r2, r3, #5
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	4413      	add	r3, r2
 8002326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800232a:	461a      	mov	r2, r3
 800232c:	2320      	movs	r3, #32
 800232e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d009      	beq.n	800234e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800233a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233c:	015a      	lsls	r2, r3, #5
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	4413      	add	r3, r2
 8002342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002346:	461a      	mov	r2, r3
 8002348:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800234c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800234e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002350:	3301      	adds	r3, #1
 8002352:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002356:	085b      	lsrs	r3, r3, #1
 8002358:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800235a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800235c:	2b00      	cmp	r3, #0
 800235e:	f47f af62 	bne.w	8002226 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4618      	mov	r0, r3
 8002368:	f003 fa0c 	bl	8005784 <USB_ReadInterrupts>
 800236c:	4603      	mov	r3, r0
 800236e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002372:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002376:	f040 80db 	bne.w	8002530 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4618      	mov	r0, r3
 8002380:	f003 fa2d 	bl	80057de <USB_ReadDevAllInEpInterrupt>
 8002384:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002386:	2300      	movs	r3, #0
 8002388:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800238a:	e0cd      	b.n	8002528 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800238c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	2b00      	cmp	r3, #0
 8002394:	f000 80c2 	beq.w	800251c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800239e:	b2d2      	uxtb	r2, r2
 80023a0:	4611      	mov	r1, r2
 80023a2:	4618      	mov	r0, r3
 80023a4:	f003 fa53 	bl	800584e <USB_ReadDevInEPInterrupt>
 80023a8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	f003 0301 	and.w	r3, r3, #1
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d057      	beq.n	8002464 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80023b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b6:	f003 030f 	and.w	r3, r3, #15
 80023ba:	2201      	movs	r2, #1
 80023bc:	fa02 f303 	lsl.w	r3, r2, r3
 80023c0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	43db      	mvns	r3, r3
 80023ce:	69f9      	ldr	r1, [r7, #28]
 80023d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80023d4:	4013      	ands	r3, r2
 80023d6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80023d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023da:	015a      	lsls	r2, r3, #5
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	4413      	add	r3, r2
 80023e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023e4:	461a      	mov	r2, r3
 80023e6:	2301      	movs	r3, #1
 80023e8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d132      	bne.n	8002458 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80023f2:	6879      	ldr	r1, [r7, #4]
 80023f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023f6:	4613      	mov	r3, r2
 80023f8:	00db      	lsls	r3, r3, #3
 80023fa:	4413      	add	r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	440b      	add	r3, r1
 8002400:	334c      	adds	r3, #76	; 0x4c
 8002402:	6819      	ldr	r1, [r3, #0]
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002408:	4613      	mov	r3, r2
 800240a:	00db      	lsls	r3, r3, #3
 800240c:	4413      	add	r3, r2
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	4403      	add	r3, r0
 8002412:	3348      	adds	r3, #72	; 0x48
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4419      	add	r1, r3
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800241c:	4613      	mov	r3, r2
 800241e:	00db      	lsls	r3, r3, #3
 8002420:	4413      	add	r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	4403      	add	r3, r0
 8002426:	334c      	adds	r3, #76	; 0x4c
 8002428:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800242a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242c:	2b00      	cmp	r3, #0
 800242e:	d113      	bne.n	8002458 <HAL_PCD_IRQHandler+0x3a2>
 8002430:	6879      	ldr	r1, [r7, #4]
 8002432:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002434:	4613      	mov	r3, r2
 8002436:	00db      	lsls	r3, r3, #3
 8002438:	4413      	add	r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	440b      	add	r3, r1
 800243e:	3354      	adds	r3, #84	; 0x54
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d108      	bne.n	8002458 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6818      	ldr	r0, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002450:	461a      	mov	r2, r3
 8002452:	2101      	movs	r1, #1
 8002454:	f003 fa5a 	bl	800590c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245a:	b2db      	uxtb	r3, r3
 800245c:	4619      	mov	r1, r3
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f005 f9ef 	bl	8007842 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	f003 0308 	and.w	r3, r3, #8
 800246a:	2b00      	cmp	r3, #0
 800246c:	d008      	beq.n	8002480 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800246e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002470:	015a      	lsls	r2, r3, #5
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	4413      	add	r3, r2
 8002476:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800247a:	461a      	mov	r2, r3
 800247c:	2308      	movs	r3, #8
 800247e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	f003 0310 	and.w	r3, r3, #16
 8002486:	2b00      	cmp	r3, #0
 8002488:	d008      	beq.n	800249c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800248a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248c:	015a      	lsls	r2, r3, #5
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	4413      	add	r3, r2
 8002492:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002496:	461a      	mov	r2, r3
 8002498:	2310      	movs	r3, #16
 800249a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d008      	beq.n	80024b8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80024a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a8:	015a      	lsls	r2, r3, #5
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	4413      	add	r3, r2
 80024ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024b2:	461a      	mov	r2, r3
 80024b4:	2340      	movs	r3, #64	; 0x40
 80024b6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d023      	beq.n	800250a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80024c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024c4:	6a38      	ldr	r0, [r7, #32]
 80024c6:	f002 f93b 	bl	8004740 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80024ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024cc:	4613      	mov	r3, r2
 80024ce:	00db      	lsls	r3, r3, #3
 80024d0:	4413      	add	r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	3338      	adds	r3, #56	; 0x38
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	4413      	add	r3, r2
 80024da:	3304      	adds	r3, #4
 80024dc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	78db      	ldrb	r3, [r3, #3]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d108      	bne.n	80024f8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	2200      	movs	r2, #0
 80024ea:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80024ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	4619      	mov	r1, r3
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f005 fa3c 	bl	8007970 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80024f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fa:	015a      	lsls	r2, r3, #5
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	4413      	add	r3, r2
 8002500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002504:	461a      	mov	r2, r3
 8002506:	2302      	movs	r3, #2
 8002508:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002510:	2b00      	cmp	r3, #0
 8002512:	d003      	beq.n	800251c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002514:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f000 fcc3 	bl	8002ea2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800251c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251e:	3301      	adds	r3, #1
 8002520:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002524:	085b      	lsrs	r3, r3, #1
 8002526:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800252a:	2b00      	cmp	r3, #0
 800252c:	f47f af2e 	bne.w	800238c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4618      	mov	r0, r3
 8002536:	f003 f925 	bl	8005784 <USB_ReadInterrupts>
 800253a:	4603      	mov	r3, r0
 800253c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002540:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002544:	d122      	bne.n	800258c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	69fa      	ldr	r2, [r7, #28]
 8002550:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002554:	f023 0301 	bic.w	r3, r3, #1
 8002558:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002560:	2b01      	cmp	r3, #1
 8002562:	d108      	bne.n	8002576 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800256c:	2100      	movs	r1, #0
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f000 feaa 	bl	80032c8 <HAL_PCDEx_LPM_Callback>
 8002574:	e002      	b.n	800257c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f005 f9da 	bl	8007930 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	695a      	ldr	r2, [r3, #20]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800258a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4618      	mov	r0, r3
 8002592:	f003 f8f7 	bl	8005784 <USB_ReadInterrupts>
 8002596:	4603      	mov	r3, r0
 8002598:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800259c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025a0:	d112      	bne.n	80025c8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d102      	bne.n	80025b8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f005 f996 	bl	80078e4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	695a      	ldr	r2, [r3, #20]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80025c6:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4618      	mov	r0, r3
 80025ce:	f003 f8d9 	bl	8005784 <USB_ReadInterrupts>
 80025d2:	4603      	mov	r3, r0
 80025d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025dc:	f040 80b7 	bne.w	800274e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	69fa      	ldr	r2, [r7, #28]
 80025ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025ee:	f023 0301 	bic.w	r3, r3, #1
 80025f2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2110      	movs	r1, #16
 80025fa:	4618      	mov	r0, r3
 80025fc:	f002 f8a0 	bl	8004740 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002600:	2300      	movs	r3, #0
 8002602:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002604:	e046      	b.n	8002694 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002608:	015a      	lsls	r2, r3, #5
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	4413      	add	r3, r2
 800260e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002612:	461a      	mov	r2, r3
 8002614:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002618:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800261a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800261c:	015a      	lsls	r2, r3, #5
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	4413      	add	r3, r2
 8002622:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800262a:	0151      	lsls	r1, r2, #5
 800262c:	69fa      	ldr	r2, [r7, #28]
 800262e:	440a      	add	r2, r1
 8002630:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002634:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002638:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800263a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800263c:	015a      	lsls	r2, r3, #5
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	4413      	add	r3, r2
 8002642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002646:	461a      	mov	r2, r3
 8002648:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800264c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800264e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002650:	015a      	lsls	r2, r3, #5
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	4413      	add	r3, r2
 8002656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800265e:	0151      	lsls	r1, r2, #5
 8002660:	69fa      	ldr	r2, [r7, #28]
 8002662:	440a      	add	r2, r1
 8002664:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002668:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800266c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800266e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002670:	015a      	lsls	r2, r3, #5
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	4413      	add	r3, r2
 8002676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800267e:	0151      	lsls	r1, r2, #5
 8002680:	69fa      	ldr	r2, [r7, #28]
 8002682:	440a      	add	r2, r1
 8002684:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002688:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800268c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800268e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002690:	3301      	adds	r3, #1
 8002692:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800269a:	429a      	cmp	r2, r3
 800269c:	d3b3      	bcc.n	8002606 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026a4:	69db      	ldr	r3, [r3, #28]
 80026a6:	69fa      	ldr	r2, [r7, #28]
 80026a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026ac:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80026b0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d016      	beq.n	80026e8 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026c4:	69fa      	ldr	r2, [r7, #28]
 80026c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026ca:	f043 030b 	orr.w	r3, r3, #11
 80026ce:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026da:	69fa      	ldr	r2, [r7, #28]
 80026dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026e0:	f043 030b 	orr.w	r3, r3, #11
 80026e4:	6453      	str	r3, [r2, #68]	; 0x44
 80026e6:	e015      	b.n	8002714 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026ee:	695b      	ldr	r3, [r3, #20]
 80026f0:	69fa      	ldr	r2, [r7, #28]
 80026f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026f6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80026fa:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80026fe:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002706:	691b      	ldr	r3, [r3, #16]
 8002708:	69fa      	ldr	r2, [r7, #28]
 800270a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800270e:	f043 030b 	orr.w	r3, r3, #11
 8002712:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	69fa      	ldr	r2, [r7, #28]
 800271e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002722:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002726:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6818      	ldr	r0, [r3, #0]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	691b      	ldr	r3, [r3, #16]
 8002730:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002738:	461a      	mov	r2, r3
 800273a:	f003 f8e7 	bl	800590c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	695a      	ldr	r2, [r3, #20]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800274c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4618      	mov	r0, r3
 8002754:	f003 f816 	bl	8005784 <USB_ReadInterrupts>
 8002758:	4603      	mov	r3, r0
 800275a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800275e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002762:	d124      	bne.n	80027ae <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4618      	mov	r0, r3
 800276a:	f003 f8ac 	bl	80058c6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4618      	mov	r0, r3
 8002774:	f002 f861 	bl	800483a <USB_GetDevSpeed>
 8002778:	4603      	mov	r3, r0
 800277a:	461a      	mov	r2, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681c      	ldr	r4, [r3, #0]
 8002784:	f001 fa10 	bl	8003ba8 <HAL_RCC_GetHCLKFreq>
 8002788:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800278e:	b2db      	uxtb	r3, r3
 8002790:	461a      	mov	r2, r3
 8002792:	4620      	mov	r0, r4
 8002794:	f001 fd60 	bl	8004258 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f005 f87a 	bl	8007892 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	695a      	ldr	r2, [r3, #20]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80027ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f002 ffe6 	bl	8005784 <USB_ReadInterrupts>
 80027b8:	4603      	mov	r3, r0
 80027ba:	f003 0308 	and.w	r3, r3, #8
 80027be:	2b08      	cmp	r3, #8
 80027c0:	d10a      	bne.n	80027d8 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f005 f857 	bl	8007876 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	695a      	ldr	r2, [r3, #20]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f002 0208 	and.w	r2, r2, #8
 80027d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4618      	mov	r0, r3
 80027de:	f002 ffd1 	bl	8005784 <USB_ReadInterrupts>
 80027e2:	4603      	mov	r3, r0
 80027e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027e8:	2b80      	cmp	r3, #128	; 0x80
 80027ea:	d122      	bne.n	8002832 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80027ec:	6a3b      	ldr	r3, [r7, #32]
 80027ee:	699b      	ldr	r3, [r3, #24]
 80027f0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027f4:	6a3b      	ldr	r3, [r7, #32]
 80027f6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80027f8:	2301      	movs	r3, #1
 80027fa:	627b      	str	r3, [r7, #36]	; 0x24
 80027fc:	e014      	b.n	8002828 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80027fe:	6879      	ldr	r1, [r7, #4]
 8002800:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002802:	4613      	mov	r3, r2
 8002804:	00db      	lsls	r3, r3, #3
 8002806:	4413      	add	r3, r2
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	440b      	add	r3, r1
 800280c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	2b01      	cmp	r3, #1
 8002814:	d105      	bne.n	8002822 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002818:	b2db      	uxtb	r3, r3
 800281a:	4619      	mov	r1, r3
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f000 fb0f 	bl	8002e40 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002824:	3301      	adds	r3, #1
 8002826:	627b      	str	r3, [r7, #36]	; 0x24
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800282e:	429a      	cmp	r2, r3
 8002830:	d3e5      	bcc.n	80027fe <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4618      	mov	r0, r3
 8002838:	f002 ffa4 	bl	8005784 <USB_ReadInterrupts>
 800283c:	4603      	mov	r3, r0
 800283e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002842:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002846:	d13b      	bne.n	80028c0 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002848:	2301      	movs	r3, #1
 800284a:	627b      	str	r3, [r7, #36]	; 0x24
 800284c:	e02b      	b.n	80028a6 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800284e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002850:	015a      	lsls	r2, r3, #5
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	4413      	add	r3, r2
 8002856:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800285e:	6879      	ldr	r1, [r7, #4]
 8002860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002862:	4613      	mov	r3, r2
 8002864:	00db      	lsls	r3, r3, #3
 8002866:	4413      	add	r3, r2
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	440b      	add	r3, r1
 800286c:	3340      	adds	r3, #64	; 0x40
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	2b01      	cmp	r3, #1
 8002872:	d115      	bne.n	80028a0 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002874:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002876:	2b00      	cmp	r3, #0
 8002878:	da12      	bge.n	80028a0 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800287a:	6879      	ldr	r1, [r7, #4]
 800287c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800287e:	4613      	mov	r3, r2
 8002880:	00db      	lsls	r3, r3, #3
 8002882:	4413      	add	r3, r2
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	440b      	add	r3, r1
 8002888:	333f      	adds	r3, #63	; 0x3f
 800288a:	2201      	movs	r2, #1
 800288c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800288e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002890:	b2db      	uxtb	r3, r3
 8002892:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002896:	b2db      	uxtb	r3, r3
 8002898:	4619      	mov	r1, r3
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f000 fad0 	bl	8002e40 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a2:	3301      	adds	r3, #1
 80028a4:	627b      	str	r3, [r7, #36]	; 0x24
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d3ce      	bcc.n	800284e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	695a      	ldr	r2, [r3, #20]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80028be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4618      	mov	r0, r3
 80028c6:	f002 ff5d 	bl	8005784 <USB_ReadInterrupts>
 80028ca:	4603      	mov	r3, r0
 80028cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80028d4:	d155      	bne.n	8002982 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028d6:	2301      	movs	r3, #1
 80028d8:	627b      	str	r3, [r7, #36]	; 0x24
 80028da:	e045      	b.n	8002968 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80028dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028de:	015a      	lsls	r2, r3, #5
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	4413      	add	r3, r2
 80028e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80028ec:	6879      	ldr	r1, [r7, #4]
 80028ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028f0:	4613      	mov	r3, r2
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	4413      	add	r3, r2
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	440b      	add	r3, r1
 80028fa:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	2b01      	cmp	r3, #1
 8002902:	d12e      	bne.n	8002962 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002904:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002906:	2b00      	cmp	r3, #0
 8002908:	da2b      	bge.n	8002962 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002916:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800291a:	429a      	cmp	r2, r3
 800291c:	d121      	bne.n	8002962 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800291e:	6879      	ldr	r1, [r7, #4]
 8002920:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002922:	4613      	mov	r3, r2
 8002924:	00db      	lsls	r3, r3, #3
 8002926:	4413      	add	r3, r2
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	440b      	add	r3, r1
 800292c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002930:	2201      	movs	r2, #1
 8002932:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002934:	6a3b      	ldr	r3, [r7, #32]
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800293c:	6a3b      	ldr	r3, [r7, #32]
 800293e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002940:	6a3b      	ldr	r3, [r7, #32]
 8002942:	695b      	ldr	r3, [r3, #20]
 8002944:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002948:	2b00      	cmp	r3, #0
 800294a:	d10a      	bne.n	8002962 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	69fa      	ldr	r2, [r7, #28]
 8002956:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800295a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800295e:	6053      	str	r3, [r2, #4]
            break;
 8002960:	e007      	b.n	8002972 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002964:	3301      	adds	r3, #1
 8002966:	627b      	str	r3, [r7, #36]	; 0x24
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800296e:	429a      	cmp	r2, r3
 8002970:	d3b4      	bcc.n	80028dc <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	695a      	ldr	r2, [r3, #20]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002980:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4618      	mov	r0, r3
 8002988:	f002 fefc 	bl	8005784 <USB_ReadInterrupts>
 800298c:	4603      	mov	r3, r0
 800298e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002992:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002996:	d10a      	bne.n	80029ae <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f004 fffb 	bl	8007994 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	695a      	ldr	r2, [r3, #20]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80029ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f002 fee6 	bl	8005784 <USB_ReadInterrupts>
 80029b8:	4603      	mov	r3, r0
 80029ba:	f003 0304 	and.w	r3, r3, #4
 80029be:	2b04      	cmp	r3, #4
 80029c0:	d115      	bne.n	80029ee <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	f003 0304 	and.w	r3, r3, #4
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d002      	beq.n	80029da <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f004 ffeb 	bl	80079b0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	6859      	ldr	r1, [r3, #4]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	430a      	orrs	r2, r1
 80029e8:	605a      	str	r2, [r3, #4]
 80029ea:	e000      	b.n	80029ee <HAL_PCD_IRQHandler+0x938>
      return;
 80029ec:	bf00      	nop
    }
  }
}
 80029ee:	3734      	adds	r7, #52	; 0x34
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd90      	pop	{r4, r7, pc}

080029f4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	460b      	mov	r3, r1
 80029fe:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d101      	bne.n	8002a0e <HAL_PCD_SetAddress+0x1a>
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	e013      	b.n	8002a36 <HAL_PCD_SetAddress+0x42>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2201      	movs	r2, #1
 8002a12:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	78fa      	ldrb	r2, [r7, #3]
 8002a1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	78fa      	ldrb	r2, [r7, #3]
 8002a24:	4611      	mov	r1, r2
 8002a26:	4618      	mov	r0, r3
 8002a28:	f002 fe44 	bl	80056b4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3708      	adds	r7, #8
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}

08002a3e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002a3e:	b580      	push	{r7, lr}
 8002a40:	b084      	sub	sp, #16
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
 8002a46:	4608      	mov	r0, r1
 8002a48:	4611      	mov	r1, r2
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	70fb      	strb	r3, [r7, #3]
 8002a50:	460b      	mov	r3, r1
 8002a52:	803b      	strh	r3, [r7, #0]
 8002a54:	4613      	mov	r3, r2
 8002a56:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	da0f      	bge.n	8002a84 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a64:	78fb      	ldrb	r3, [r7, #3]
 8002a66:	f003 020f 	and.w	r2, r3, #15
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	00db      	lsls	r3, r3, #3
 8002a6e:	4413      	add	r3, r2
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	3338      	adds	r3, #56	; 0x38
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	4413      	add	r3, r2
 8002a78:	3304      	adds	r3, #4
 8002a7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	705a      	strb	r2, [r3, #1]
 8002a82:	e00f      	b.n	8002aa4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a84:	78fb      	ldrb	r3, [r7, #3]
 8002a86:	f003 020f 	and.w	r2, r3, #15
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	00db      	lsls	r3, r3, #3
 8002a8e:	4413      	add	r3, r2
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	4413      	add	r3, r2
 8002a9a:	3304      	adds	r3, #4
 8002a9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002aa4:	78fb      	ldrb	r3, [r7, #3]
 8002aa6:	f003 030f 	and.w	r3, r3, #15
 8002aaa:	b2da      	uxtb	r2, r3
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002ab0:	883a      	ldrh	r2, [r7, #0]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	78ba      	ldrb	r2, [r7, #2]
 8002aba:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	785b      	ldrb	r3, [r3, #1]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d004      	beq.n	8002ace <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	b29a      	uxth	r2, r3
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002ace:	78bb      	ldrb	r3, [r7, #2]
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d102      	bne.n	8002ada <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d101      	bne.n	8002ae8 <HAL_PCD_EP_Open+0xaa>
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	e00e      	b.n	8002b06 <HAL_PCD_EP_Open+0xc8>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	68f9      	ldr	r1, [r7, #12]
 8002af6:	4618      	mov	r0, r3
 8002af8:	f001 fec4 	bl	8004884 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002b04:	7afb      	ldrb	r3, [r7, #11]
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3710      	adds	r7, #16
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}

08002b0e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b0e:	b580      	push	{r7, lr}
 8002b10:	b084      	sub	sp, #16
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
 8002b16:	460b      	mov	r3, r1
 8002b18:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	da0f      	bge.n	8002b42 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b22:	78fb      	ldrb	r3, [r7, #3]
 8002b24:	f003 020f 	and.w	r2, r3, #15
 8002b28:	4613      	mov	r3, r2
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	4413      	add	r3, r2
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	3338      	adds	r3, #56	; 0x38
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	4413      	add	r3, r2
 8002b36:	3304      	adds	r3, #4
 8002b38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	705a      	strb	r2, [r3, #1]
 8002b40:	e00f      	b.n	8002b62 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b42:	78fb      	ldrb	r3, [r7, #3]
 8002b44:	f003 020f 	and.w	r2, r3, #15
 8002b48:	4613      	mov	r3, r2
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	4413      	add	r3, r2
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	4413      	add	r3, r2
 8002b58:	3304      	adds	r3, #4
 8002b5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002b62:	78fb      	ldrb	r3, [r7, #3]
 8002b64:	f003 030f 	and.w	r3, r3, #15
 8002b68:	b2da      	uxtb	r2, r3
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d101      	bne.n	8002b7c <HAL_PCD_EP_Close+0x6e>
 8002b78:	2302      	movs	r3, #2
 8002b7a:	e00e      	b.n	8002b9a <HAL_PCD_EP_Close+0x8c>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	68f9      	ldr	r1, [r7, #12]
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f001 ff02 	bl	8004994 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3710      	adds	r7, #16
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}

08002ba2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ba2:	b580      	push	{r7, lr}
 8002ba4:	b086      	sub	sp, #24
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	60f8      	str	r0, [r7, #12]
 8002baa:	607a      	str	r2, [r7, #4]
 8002bac:	603b      	str	r3, [r7, #0]
 8002bae:	460b      	mov	r3, r1
 8002bb0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bb2:	7afb      	ldrb	r3, [r7, #11]
 8002bb4:	f003 020f 	and.w	r2, r3, #15
 8002bb8:	4613      	mov	r3, r2
 8002bba:	00db      	lsls	r3, r3, #3
 8002bbc:	4413      	add	r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002bc4:	68fa      	ldr	r2, [r7, #12]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	3304      	adds	r3, #4
 8002bca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	683a      	ldr	r2, [r7, #0]
 8002bd6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	2200      	movs	r2, #0
 8002be2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002be4:	7afb      	ldrb	r3, [r7, #11]
 8002be6:	f003 030f 	and.w	r3, r3, #15
 8002bea:	b2da      	uxtb	r2, r3
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	691b      	ldr	r3, [r3, #16]
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d102      	bne.n	8002bfe <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002bfe:	7afb      	ldrb	r3, [r7, #11]
 8002c00:	f003 030f 	and.w	r3, r3, #15
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d109      	bne.n	8002c1c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6818      	ldr	r0, [r3, #0]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	691b      	ldr	r3, [r3, #16]
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	461a      	mov	r2, r3
 8002c14:	6979      	ldr	r1, [r7, #20]
 8002c16:	f002 f9e1 	bl	8004fdc <USB_EP0StartXfer>
 8002c1a:	e008      	b.n	8002c2e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6818      	ldr	r0, [r3, #0]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	691b      	ldr	r3, [r3, #16]
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	461a      	mov	r2, r3
 8002c28:	6979      	ldr	r1, [r7, #20]
 8002c2a:	f001 ff8f 	bl	8004b4c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002c2e:	2300      	movs	r3, #0
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3718      	adds	r7, #24
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b086      	sub	sp, #24
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	607a      	str	r2, [r7, #4]
 8002c42:	603b      	str	r3, [r7, #0]
 8002c44:	460b      	mov	r3, r1
 8002c46:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c48:	7afb      	ldrb	r3, [r7, #11]
 8002c4a:	f003 020f 	and.w	r2, r3, #15
 8002c4e:	4613      	mov	r3, r2
 8002c50:	00db      	lsls	r3, r3, #3
 8002c52:	4413      	add	r3, r2
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	3338      	adds	r3, #56	; 0x38
 8002c58:	68fa      	ldr	r2, [r7, #12]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	3304      	adds	r3, #4
 8002c5e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	683a      	ldr	r2, [r7, #0]
 8002c6a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	2201      	movs	r2, #1
 8002c76:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c78:	7afb      	ldrb	r3, [r7, #11]
 8002c7a:	f003 030f 	and.w	r3, r3, #15
 8002c7e:	b2da      	uxtb	r2, r3
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	691b      	ldr	r3, [r3, #16]
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d102      	bne.n	8002c92 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c92:	7afb      	ldrb	r3, [r7, #11]
 8002c94:	f003 030f 	and.w	r3, r3, #15
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d109      	bne.n	8002cb0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6818      	ldr	r0, [r3, #0]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	691b      	ldr	r3, [r3, #16]
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	6979      	ldr	r1, [r7, #20]
 8002caa:	f002 f997 	bl	8004fdc <USB_EP0StartXfer>
 8002cae:	e008      	b.n	8002cc2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6818      	ldr	r0, [r3, #0]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	691b      	ldr	r3, [r3, #16]
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	461a      	mov	r2, r3
 8002cbc:	6979      	ldr	r1, [r7, #20]
 8002cbe:	f001 ff45 	bl	8004b4c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3718      	adds	r7, #24
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002cd8:	78fb      	ldrb	r3, [r7, #3]
 8002cda:	f003 020f 	and.w	r2, r3, #15
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d901      	bls.n	8002cea <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e050      	b.n	8002d8c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002cea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	da0f      	bge.n	8002d12 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cf2:	78fb      	ldrb	r3, [r7, #3]
 8002cf4:	f003 020f 	and.w	r2, r3, #15
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	00db      	lsls	r3, r3, #3
 8002cfc:	4413      	add	r3, r2
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	3338      	adds	r3, #56	; 0x38
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	4413      	add	r3, r2
 8002d06:	3304      	adds	r3, #4
 8002d08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	705a      	strb	r2, [r3, #1]
 8002d10:	e00d      	b.n	8002d2e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002d12:	78fa      	ldrb	r2, [r7, #3]
 8002d14:	4613      	mov	r3, r2
 8002d16:	00db      	lsls	r3, r3, #3
 8002d18:	4413      	add	r3, r2
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	4413      	add	r3, r2
 8002d24:	3304      	adds	r3, #4
 8002d26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2201      	movs	r2, #1
 8002d32:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d34:	78fb      	ldrb	r3, [r7, #3]
 8002d36:	f003 030f 	and.w	r3, r3, #15
 8002d3a:	b2da      	uxtb	r2, r3
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d101      	bne.n	8002d4e <HAL_PCD_EP_SetStall+0x82>
 8002d4a:	2302      	movs	r3, #2
 8002d4c:	e01e      	b.n	8002d8c <HAL_PCD_EP_SetStall+0xc0>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2201      	movs	r2, #1
 8002d52:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	68f9      	ldr	r1, [r7, #12]
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f002 fbd5 	bl	800550c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d62:	78fb      	ldrb	r3, [r7, #3]
 8002d64:	f003 030f 	and.w	r3, r3, #15
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d10a      	bne.n	8002d82 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6818      	ldr	r0, [r3, #0]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	691b      	ldr	r3, [r3, #16]
 8002d74:	b2d9      	uxtb	r1, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	f002 fdc5 	bl	800590c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3710      	adds	r7, #16
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002da0:	78fb      	ldrb	r3, [r7, #3]
 8002da2:	f003 020f 	and.w	r2, r3, #15
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d901      	bls.n	8002db2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e042      	b.n	8002e38 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002db2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	da0f      	bge.n	8002dda <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dba:	78fb      	ldrb	r3, [r7, #3]
 8002dbc:	f003 020f 	and.w	r2, r3, #15
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	00db      	lsls	r3, r3, #3
 8002dc4:	4413      	add	r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	3338      	adds	r3, #56	; 0x38
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	4413      	add	r3, r2
 8002dce:	3304      	adds	r3, #4
 8002dd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	705a      	strb	r2, [r3, #1]
 8002dd8:	e00f      	b.n	8002dfa <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002dda:	78fb      	ldrb	r3, [r7, #3]
 8002ddc:	f003 020f 	and.w	r2, r3, #15
 8002de0:	4613      	mov	r3, r2
 8002de2:	00db      	lsls	r3, r3, #3
 8002de4:	4413      	add	r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	4413      	add	r3, r2
 8002df0:	3304      	adds	r3, #4
 8002df2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2200      	movs	r2, #0
 8002df8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e00:	78fb      	ldrb	r3, [r7, #3]
 8002e02:	f003 030f 	and.w	r3, r3, #15
 8002e06:	b2da      	uxtb	r2, r3
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d101      	bne.n	8002e1a <HAL_PCD_EP_ClrStall+0x86>
 8002e16:	2302      	movs	r3, #2
 8002e18:	e00e      	b.n	8002e38 <HAL_PCD_EP_ClrStall+0xa4>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	68f9      	ldr	r1, [r7, #12]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f002 fbdd 	bl	80055e8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002e36:	2300      	movs	r3, #0
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3710      	adds	r7, #16
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	460b      	mov	r3, r1
 8002e4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002e4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	da0c      	bge.n	8002e6e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e54:	78fb      	ldrb	r3, [r7, #3]
 8002e56:	f003 020f 	and.w	r2, r3, #15
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	00db      	lsls	r3, r3, #3
 8002e5e:	4413      	add	r3, r2
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	3338      	adds	r3, #56	; 0x38
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	4413      	add	r3, r2
 8002e68:	3304      	adds	r3, #4
 8002e6a:	60fb      	str	r3, [r7, #12]
 8002e6c:	e00c      	b.n	8002e88 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e6e:	78fb      	ldrb	r3, [r7, #3]
 8002e70:	f003 020f 	and.w	r2, r3, #15
 8002e74:	4613      	mov	r3, r2
 8002e76:	00db      	lsls	r3, r3, #3
 8002e78:	4413      	add	r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	4413      	add	r3, r2
 8002e84:	3304      	adds	r3, #4
 8002e86:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	68f9      	ldr	r1, [r7, #12]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f002 f9fc 	bl	800528c <USB_EPStopXfer>
 8002e94:	4603      	mov	r3, r0
 8002e96:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002e98:	7afb      	ldrb	r3, [r7, #11]
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3710      	adds	r7, #16
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ea2:	b580      	push	{r7, lr}
 8002ea4:	b08a      	sub	sp, #40	; 0x28
 8002ea6:	af02      	add	r7, sp, #8
 8002ea8:	6078      	str	r0, [r7, #4]
 8002eaa:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002eb6:	683a      	ldr	r2, [r7, #0]
 8002eb8:	4613      	mov	r3, r2
 8002eba:	00db      	lsls	r3, r3, #3
 8002ebc:	4413      	add	r3, r2
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	3338      	adds	r3, #56	; 0x38
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	3304      	adds	r3, #4
 8002ec8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6a1a      	ldr	r2, [r3, #32]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	699b      	ldr	r3, [r3, #24]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d901      	bls.n	8002eda <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e06c      	b.n	8002fb4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	699a      	ldr	r2, [r3, #24]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6a1b      	ldr	r3, [r3, #32]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	69fa      	ldr	r2, [r7, #28]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d902      	bls.n	8002ef6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	3303      	adds	r3, #3
 8002efa:	089b      	lsrs	r3, r3, #2
 8002efc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002efe:	e02b      	b.n	8002f58 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	699a      	ldr	r2, [r3, #24]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6a1b      	ldr	r3, [r3, #32]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	69fa      	ldr	r2, [r7, #28]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d902      	bls.n	8002f1c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	3303      	adds	r3, #3
 8002f20:	089b      	lsrs	r3, r3, #2
 8002f22:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6919      	ldr	r1, [r3, #16]
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	b2da      	uxtb	r2, r3
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	9300      	str	r3, [sp, #0]
 8002f38:	4603      	mov	r3, r0
 8002f3a:	6978      	ldr	r0, [r7, #20]
 8002f3c:	f002 fa50 	bl	80053e0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	691a      	ldr	r2, [r3, #16]
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	441a      	add	r2, r3
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6a1a      	ldr	r2, [r3, #32]
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	441a      	add	r2, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	015a      	lsls	r2, r3, #5
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	4413      	add	r3, r2
 8002f60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f64:	699b      	ldr	r3, [r3, #24]
 8002f66:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d809      	bhi.n	8002f82 <PCD_WriteEmptyTxFifo+0xe0>
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6a1a      	ldr	r2, [r3, #32]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d203      	bcs.n	8002f82 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	699b      	ldr	r3, [r3, #24]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1be      	bne.n	8002f00 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	699a      	ldr	r2, [r3, #24]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6a1b      	ldr	r3, [r3, #32]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d811      	bhi.n	8002fb2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	f003 030f 	and.w	r3, r3, #15
 8002f94:	2201      	movs	r2, #1
 8002f96:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fa2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	43db      	mvns	r3, r3
 8002fa8:	6939      	ldr	r1, [r7, #16]
 8002faa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002fae:	4013      	ands	r3, r2
 8002fb0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3720      	adds	r7, #32
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b088      	sub	sp, #32
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	333c      	adds	r3, #60	; 0x3c
 8002fd4:	3304      	adds	r3, #4
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	015a      	lsls	r2, r3, #5
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	4413      	add	r3, r2
 8002fe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d17b      	bne.n	80030ea <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	f003 0308 	and.w	r3, r3, #8
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d015      	beq.n	8003028 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	4a61      	ldr	r2, [pc, #388]	; (8003184 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003000:	4293      	cmp	r3, r2
 8003002:	f240 80b9 	bls.w	8003178 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800300c:	2b00      	cmp	r3, #0
 800300e:	f000 80b3 	beq.w	8003178 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	015a      	lsls	r2, r3, #5
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	4413      	add	r3, r2
 800301a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800301e:	461a      	mov	r2, r3
 8003020:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003024:	6093      	str	r3, [r2, #8]
 8003026:	e0a7      	b.n	8003178 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	f003 0320 	and.w	r3, r3, #32
 800302e:	2b00      	cmp	r3, #0
 8003030:	d009      	beq.n	8003046 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	015a      	lsls	r2, r3, #5
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	4413      	add	r3, r2
 800303a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800303e:	461a      	mov	r2, r3
 8003040:	2320      	movs	r3, #32
 8003042:	6093      	str	r3, [r2, #8]
 8003044:	e098      	b.n	8003178 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800304c:	2b00      	cmp	r3, #0
 800304e:	f040 8093 	bne.w	8003178 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	4a4b      	ldr	r2, [pc, #300]	; (8003184 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d90f      	bls.n	800307a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003060:	2b00      	cmp	r3, #0
 8003062:	d00a      	beq.n	800307a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	015a      	lsls	r2, r3, #5
 8003068:	69bb      	ldr	r3, [r7, #24]
 800306a:	4413      	add	r3, r2
 800306c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003070:	461a      	mov	r2, r3
 8003072:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003076:	6093      	str	r3, [r2, #8]
 8003078:	e07e      	b.n	8003178 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800307a:	683a      	ldr	r2, [r7, #0]
 800307c:	4613      	mov	r3, r2
 800307e:	00db      	lsls	r3, r3, #3
 8003080:	4413      	add	r3, r2
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	4413      	add	r3, r2
 800308c:	3304      	adds	r3, #4
 800308e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	69da      	ldr	r2, [r3, #28]
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	0159      	lsls	r1, r3, #5
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	440b      	add	r3, r1
 800309c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030a6:	1ad2      	subs	r2, r2, r3
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d114      	bne.n	80030dc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d109      	bne.n	80030ce <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6818      	ldr	r0, [r3, #0]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80030c4:	461a      	mov	r2, r3
 80030c6:	2101      	movs	r1, #1
 80030c8:	f002 fc20 	bl	800590c <USB_EP0_OutStart>
 80030cc:	e006      	b.n	80030dc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	691a      	ldr	r2, [r3, #16]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	6a1b      	ldr	r3, [r3, #32]
 80030d6:	441a      	add	r2, r3
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	4619      	mov	r1, r3
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f004 fb92 	bl	800780c <HAL_PCD_DataOutStageCallback>
 80030e8:	e046      	b.n	8003178 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	4a26      	ldr	r2, [pc, #152]	; (8003188 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d124      	bne.n	800313c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d00a      	beq.n	8003112 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	015a      	lsls	r2, r3, #5
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	4413      	add	r3, r2
 8003104:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003108:	461a      	mov	r2, r3
 800310a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800310e:	6093      	str	r3, [r2, #8]
 8003110:	e032      	b.n	8003178 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	f003 0320 	and.w	r3, r3, #32
 8003118:	2b00      	cmp	r3, #0
 800311a:	d008      	beq.n	800312e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	015a      	lsls	r2, r3, #5
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	4413      	add	r3, r2
 8003124:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003128:	461a      	mov	r2, r3
 800312a:	2320      	movs	r3, #32
 800312c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	b2db      	uxtb	r3, r3
 8003132:	4619      	mov	r1, r3
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f004 fb69 	bl	800780c <HAL_PCD_DataOutStageCallback>
 800313a:	e01d      	b.n	8003178 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d114      	bne.n	800316c <PCD_EP_OutXfrComplete_int+0x1b0>
 8003142:	6879      	ldr	r1, [r7, #4]
 8003144:	683a      	ldr	r2, [r7, #0]
 8003146:	4613      	mov	r3, r2
 8003148:	00db      	lsls	r3, r3, #3
 800314a:	4413      	add	r3, r2
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	440b      	add	r3, r1
 8003150:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d108      	bne.n	800316c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6818      	ldr	r0, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003164:	461a      	mov	r2, r3
 8003166:	2100      	movs	r1, #0
 8003168:	f002 fbd0 	bl	800590c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	b2db      	uxtb	r3, r3
 8003170:	4619      	mov	r1, r3
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f004 fb4a 	bl	800780c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3720      	adds	r7, #32
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	4f54300a 	.word	0x4f54300a
 8003188:	4f54310a 	.word	0x4f54310a

0800318c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b086      	sub	sp, #24
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	333c      	adds	r3, #60	; 0x3c
 80031a4:	3304      	adds	r3, #4
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	015a      	lsls	r2, r3, #5
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	4413      	add	r3, r2
 80031b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	4a15      	ldr	r2, [pc, #84]	; (8003214 <PCD_EP_OutSetupPacket_int+0x88>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d90e      	bls.n	80031e0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d009      	beq.n	80031e0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	015a      	lsls	r2, r3, #5
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	4413      	add	r3, r2
 80031d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031d8:	461a      	mov	r2, r3
 80031da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031de:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f004 fb01 	bl	80077e8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	4a0a      	ldr	r2, [pc, #40]	; (8003214 <PCD_EP_OutSetupPacket_int+0x88>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d90c      	bls.n	8003208 <PCD_EP_OutSetupPacket_int+0x7c>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d108      	bne.n	8003208 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6818      	ldr	r0, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003200:	461a      	mov	r2, r3
 8003202:	2101      	movs	r1, #1
 8003204:	f002 fb82 	bl	800590c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3718      	adds	r7, #24
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	4f54300a 	.word	0x4f54300a

08003218 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003218:	b480      	push	{r7}
 800321a:	b085      	sub	sp, #20
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	460b      	mov	r3, r1
 8003222:	70fb      	strb	r3, [r7, #3]
 8003224:	4613      	mov	r3, r2
 8003226:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003230:	78fb      	ldrb	r3, [r7, #3]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d107      	bne.n	8003246 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003236:	883b      	ldrh	r3, [r7, #0]
 8003238:	0419      	lsls	r1, r3, #16
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	68ba      	ldr	r2, [r7, #8]
 8003240:	430a      	orrs	r2, r1
 8003242:	629a      	str	r2, [r3, #40]	; 0x28
 8003244:	e028      	b.n	8003298 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800324c:	0c1b      	lsrs	r3, r3, #16
 800324e:	68ba      	ldr	r2, [r7, #8]
 8003250:	4413      	add	r3, r2
 8003252:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003254:	2300      	movs	r3, #0
 8003256:	73fb      	strb	r3, [r7, #15]
 8003258:	e00d      	b.n	8003276 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	7bfb      	ldrb	r3, [r7, #15]
 8003260:	3340      	adds	r3, #64	; 0x40
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	4413      	add	r3, r2
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	0c1b      	lsrs	r3, r3, #16
 800326a:	68ba      	ldr	r2, [r7, #8]
 800326c:	4413      	add	r3, r2
 800326e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003270:	7bfb      	ldrb	r3, [r7, #15]
 8003272:	3301      	adds	r3, #1
 8003274:	73fb      	strb	r3, [r7, #15]
 8003276:	7bfa      	ldrb	r2, [r7, #15]
 8003278:	78fb      	ldrb	r3, [r7, #3]
 800327a:	3b01      	subs	r3, #1
 800327c:	429a      	cmp	r2, r3
 800327e:	d3ec      	bcc.n	800325a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003280:	883b      	ldrh	r3, [r7, #0]
 8003282:	0418      	lsls	r0, r3, #16
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6819      	ldr	r1, [r3, #0]
 8003288:	78fb      	ldrb	r3, [r7, #3]
 800328a:	3b01      	subs	r3, #1
 800328c:	68ba      	ldr	r2, [r7, #8]
 800328e:	4302      	orrs	r2, r0
 8003290:	3340      	adds	r3, #64	; 0x40
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	440b      	add	r3, r1
 8003296:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3714      	adds	r7, #20
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr

080032a6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80032a6:	b480      	push	{r7}
 80032a8:	b083      	sub	sp, #12
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
 80032ae:	460b      	mov	r3, r1
 80032b0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	887a      	ldrh	r2, [r7, #2]
 80032b8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80032ba:	2300      	movs	r3, #0
}
 80032bc:	4618      	mov	r0, r3
 80032be:	370c      	adds	r7, #12
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr

080032c8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	460b      	mov	r3, r1
 80032d2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80032d4:	bf00      	nop
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b086      	sub	sp, #24
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d101      	bne.n	80032f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e267      	b.n	80037c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0301 	and.w	r3, r3, #1
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d075      	beq.n	80033ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032fe:	4b88      	ldr	r3, [pc, #544]	; (8003520 <HAL_RCC_OscConfig+0x240>)
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f003 030c 	and.w	r3, r3, #12
 8003306:	2b04      	cmp	r3, #4
 8003308:	d00c      	beq.n	8003324 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800330a:	4b85      	ldr	r3, [pc, #532]	; (8003520 <HAL_RCC_OscConfig+0x240>)
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003312:	2b08      	cmp	r3, #8
 8003314:	d112      	bne.n	800333c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003316:	4b82      	ldr	r3, [pc, #520]	; (8003520 <HAL_RCC_OscConfig+0x240>)
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800331e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003322:	d10b      	bne.n	800333c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003324:	4b7e      	ldr	r3, [pc, #504]	; (8003520 <HAL_RCC_OscConfig+0x240>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d05b      	beq.n	80033e8 <HAL_RCC_OscConfig+0x108>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d157      	bne.n	80033e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e242      	b.n	80037c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003344:	d106      	bne.n	8003354 <HAL_RCC_OscConfig+0x74>
 8003346:	4b76      	ldr	r3, [pc, #472]	; (8003520 <HAL_RCC_OscConfig+0x240>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a75      	ldr	r2, [pc, #468]	; (8003520 <HAL_RCC_OscConfig+0x240>)
 800334c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003350:	6013      	str	r3, [r2, #0]
 8003352:	e01d      	b.n	8003390 <HAL_RCC_OscConfig+0xb0>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800335c:	d10c      	bne.n	8003378 <HAL_RCC_OscConfig+0x98>
 800335e:	4b70      	ldr	r3, [pc, #448]	; (8003520 <HAL_RCC_OscConfig+0x240>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a6f      	ldr	r2, [pc, #444]	; (8003520 <HAL_RCC_OscConfig+0x240>)
 8003364:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003368:	6013      	str	r3, [r2, #0]
 800336a:	4b6d      	ldr	r3, [pc, #436]	; (8003520 <HAL_RCC_OscConfig+0x240>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a6c      	ldr	r2, [pc, #432]	; (8003520 <HAL_RCC_OscConfig+0x240>)
 8003370:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003374:	6013      	str	r3, [r2, #0]
 8003376:	e00b      	b.n	8003390 <HAL_RCC_OscConfig+0xb0>
 8003378:	4b69      	ldr	r3, [pc, #420]	; (8003520 <HAL_RCC_OscConfig+0x240>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a68      	ldr	r2, [pc, #416]	; (8003520 <HAL_RCC_OscConfig+0x240>)
 800337e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003382:	6013      	str	r3, [r2, #0]
 8003384:	4b66      	ldr	r3, [pc, #408]	; (8003520 <HAL_RCC_OscConfig+0x240>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a65      	ldr	r2, [pc, #404]	; (8003520 <HAL_RCC_OscConfig+0x240>)
 800338a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800338e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d013      	beq.n	80033c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003398:	f7fe fa1e 	bl	80017d8 <HAL_GetTick>
 800339c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800339e:	e008      	b.n	80033b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033a0:	f7fe fa1a 	bl	80017d8 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b64      	cmp	r3, #100	; 0x64
 80033ac:	d901      	bls.n	80033b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e207      	b.n	80037c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033b2:	4b5b      	ldr	r3, [pc, #364]	; (8003520 <HAL_RCC_OscConfig+0x240>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d0f0      	beq.n	80033a0 <HAL_RCC_OscConfig+0xc0>
 80033be:	e014      	b.n	80033ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c0:	f7fe fa0a 	bl	80017d8 <HAL_GetTick>
 80033c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033c6:	e008      	b.n	80033da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033c8:	f7fe fa06 	bl	80017d8 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	2b64      	cmp	r3, #100	; 0x64
 80033d4:	d901      	bls.n	80033da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e1f3      	b.n	80037c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033da:	4b51      	ldr	r3, [pc, #324]	; (8003520 <HAL_RCC_OscConfig+0x240>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d1f0      	bne.n	80033c8 <HAL_RCC_OscConfig+0xe8>
 80033e6:	e000      	b.n	80033ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0302 	and.w	r3, r3, #2
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d063      	beq.n	80034be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033f6:	4b4a      	ldr	r3, [pc, #296]	; (8003520 <HAL_RCC_OscConfig+0x240>)
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	f003 030c 	and.w	r3, r3, #12
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00b      	beq.n	800341a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003402:	4b47      	ldr	r3, [pc, #284]	; (8003520 <HAL_RCC_OscConfig+0x240>)
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800340a:	2b08      	cmp	r3, #8
 800340c:	d11c      	bne.n	8003448 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800340e:	4b44      	ldr	r3, [pc, #272]	; (8003520 <HAL_RCC_OscConfig+0x240>)
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d116      	bne.n	8003448 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800341a:	4b41      	ldr	r3, [pc, #260]	; (8003520 <HAL_RCC_OscConfig+0x240>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0302 	and.w	r3, r3, #2
 8003422:	2b00      	cmp	r3, #0
 8003424:	d005      	beq.n	8003432 <HAL_RCC_OscConfig+0x152>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	2b01      	cmp	r3, #1
 800342c:	d001      	beq.n	8003432 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e1c7      	b.n	80037c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003432:	4b3b      	ldr	r3, [pc, #236]	; (8003520 <HAL_RCC_OscConfig+0x240>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	00db      	lsls	r3, r3, #3
 8003440:	4937      	ldr	r1, [pc, #220]	; (8003520 <HAL_RCC_OscConfig+0x240>)
 8003442:	4313      	orrs	r3, r2
 8003444:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003446:	e03a      	b.n	80034be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d020      	beq.n	8003492 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003450:	4b34      	ldr	r3, [pc, #208]	; (8003524 <HAL_RCC_OscConfig+0x244>)
 8003452:	2201      	movs	r2, #1
 8003454:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003456:	f7fe f9bf 	bl	80017d8 <HAL_GetTick>
 800345a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800345c:	e008      	b.n	8003470 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800345e:	f7fe f9bb 	bl	80017d8 <HAL_GetTick>
 8003462:	4602      	mov	r2, r0
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	2b02      	cmp	r3, #2
 800346a:	d901      	bls.n	8003470 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800346c:	2303      	movs	r3, #3
 800346e:	e1a8      	b.n	80037c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003470:	4b2b      	ldr	r3, [pc, #172]	; (8003520 <HAL_RCC_OscConfig+0x240>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0302 	and.w	r3, r3, #2
 8003478:	2b00      	cmp	r3, #0
 800347a:	d0f0      	beq.n	800345e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800347c:	4b28      	ldr	r3, [pc, #160]	; (8003520 <HAL_RCC_OscConfig+0x240>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	691b      	ldr	r3, [r3, #16]
 8003488:	00db      	lsls	r3, r3, #3
 800348a:	4925      	ldr	r1, [pc, #148]	; (8003520 <HAL_RCC_OscConfig+0x240>)
 800348c:	4313      	orrs	r3, r2
 800348e:	600b      	str	r3, [r1, #0]
 8003490:	e015      	b.n	80034be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003492:	4b24      	ldr	r3, [pc, #144]	; (8003524 <HAL_RCC_OscConfig+0x244>)
 8003494:	2200      	movs	r2, #0
 8003496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003498:	f7fe f99e 	bl	80017d8 <HAL_GetTick>
 800349c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800349e:	e008      	b.n	80034b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034a0:	f7fe f99a 	bl	80017d8 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d901      	bls.n	80034b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e187      	b.n	80037c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034b2:	4b1b      	ldr	r3, [pc, #108]	; (8003520 <HAL_RCC_OscConfig+0x240>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d1f0      	bne.n	80034a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0308 	and.w	r3, r3, #8
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d036      	beq.n	8003538 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	695b      	ldr	r3, [r3, #20]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d016      	beq.n	8003500 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034d2:	4b15      	ldr	r3, [pc, #84]	; (8003528 <HAL_RCC_OscConfig+0x248>)
 80034d4:	2201      	movs	r2, #1
 80034d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034d8:	f7fe f97e 	bl	80017d8 <HAL_GetTick>
 80034dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034de:	e008      	b.n	80034f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034e0:	f7fe f97a 	bl	80017d8 <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d901      	bls.n	80034f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e167      	b.n	80037c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034f2:	4b0b      	ldr	r3, [pc, #44]	; (8003520 <HAL_RCC_OscConfig+0x240>)
 80034f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034f6:	f003 0302 	and.w	r3, r3, #2
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d0f0      	beq.n	80034e0 <HAL_RCC_OscConfig+0x200>
 80034fe:	e01b      	b.n	8003538 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003500:	4b09      	ldr	r3, [pc, #36]	; (8003528 <HAL_RCC_OscConfig+0x248>)
 8003502:	2200      	movs	r2, #0
 8003504:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003506:	f7fe f967 	bl	80017d8 <HAL_GetTick>
 800350a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800350c:	e00e      	b.n	800352c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800350e:	f7fe f963 	bl	80017d8 <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	2b02      	cmp	r3, #2
 800351a:	d907      	bls.n	800352c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e150      	b.n	80037c2 <HAL_RCC_OscConfig+0x4e2>
 8003520:	40023800 	.word	0x40023800
 8003524:	42470000 	.word	0x42470000
 8003528:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800352c:	4b88      	ldr	r3, [pc, #544]	; (8003750 <HAL_RCC_OscConfig+0x470>)
 800352e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003530:	f003 0302 	and.w	r3, r3, #2
 8003534:	2b00      	cmp	r3, #0
 8003536:	d1ea      	bne.n	800350e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0304 	and.w	r3, r3, #4
 8003540:	2b00      	cmp	r3, #0
 8003542:	f000 8097 	beq.w	8003674 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003546:	2300      	movs	r3, #0
 8003548:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800354a:	4b81      	ldr	r3, [pc, #516]	; (8003750 <HAL_RCC_OscConfig+0x470>)
 800354c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d10f      	bne.n	8003576 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003556:	2300      	movs	r3, #0
 8003558:	60bb      	str	r3, [r7, #8]
 800355a:	4b7d      	ldr	r3, [pc, #500]	; (8003750 <HAL_RCC_OscConfig+0x470>)
 800355c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355e:	4a7c      	ldr	r2, [pc, #496]	; (8003750 <HAL_RCC_OscConfig+0x470>)
 8003560:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003564:	6413      	str	r3, [r2, #64]	; 0x40
 8003566:	4b7a      	ldr	r3, [pc, #488]	; (8003750 <HAL_RCC_OscConfig+0x470>)
 8003568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800356e:	60bb      	str	r3, [r7, #8]
 8003570:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003572:	2301      	movs	r3, #1
 8003574:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003576:	4b77      	ldr	r3, [pc, #476]	; (8003754 <HAL_RCC_OscConfig+0x474>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800357e:	2b00      	cmp	r3, #0
 8003580:	d118      	bne.n	80035b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003582:	4b74      	ldr	r3, [pc, #464]	; (8003754 <HAL_RCC_OscConfig+0x474>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a73      	ldr	r2, [pc, #460]	; (8003754 <HAL_RCC_OscConfig+0x474>)
 8003588:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800358c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800358e:	f7fe f923 	bl	80017d8 <HAL_GetTick>
 8003592:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003594:	e008      	b.n	80035a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003596:	f7fe f91f 	bl	80017d8 <HAL_GetTick>
 800359a:	4602      	mov	r2, r0
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d901      	bls.n	80035a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e10c      	b.n	80037c2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035a8:	4b6a      	ldr	r3, [pc, #424]	; (8003754 <HAL_RCC_OscConfig+0x474>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d0f0      	beq.n	8003596 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d106      	bne.n	80035ca <HAL_RCC_OscConfig+0x2ea>
 80035bc:	4b64      	ldr	r3, [pc, #400]	; (8003750 <HAL_RCC_OscConfig+0x470>)
 80035be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c0:	4a63      	ldr	r2, [pc, #396]	; (8003750 <HAL_RCC_OscConfig+0x470>)
 80035c2:	f043 0301 	orr.w	r3, r3, #1
 80035c6:	6713      	str	r3, [r2, #112]	; 0x70
 80035c8:	e01c      	b.n	8003604 <HAL_RCC_OscConfig+0x324>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	2b05      	cmp	r3, #5
 80035d0:	d10c      	bne.n	80035ec <HAL_RCC_OscConfig+0x30c>
 80035d2:	4b5f      	ldr	r3, [pc, #380]	; (8003750 <HAL_RCC_OscConfig+0x470>)
 80035d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d6:	4a5e      	ldr	r2, [pc, #376]	; (8003750 <HAL_RCC_OscConfig+0x470>)
 80035d8:	f043 0304 	orr.w	r3, r3, #4
 80035dc:	6713      	str	r3, [r2, #112]	; 0x70
 80035de:	4b5c      	ldr	r3, [pc, #368]	; (8003750 <HAL_RCC_OscConfig+0x470>)
 80035e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e2:	4a5b      	ldr	r2, [pc, #364]	; (8003750 <HAL_RCC_OscConfig+0x470>)
 80035e4:	f043 0301 	orr.w	r3, r3, #1
 80035e8:	6713      	str	r3, [r2, #112]	; 0x70
 80035ea:	e00b      	b.n	8003604 <HAL_RCC_OscConfig+0x324>
 80035ec:	4b58      	ldr	r3, [pc, #352]	; (8003750 <HAL_RCC_OscConfig+0x470>)
 80035ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f0:	4a57      	ldr	r2, [pc, #348]	; (8003750 <HAL_RCC_OscConfig+0x470>)
 80035f2:	f023 0301 	bic.w	r3, r3, #1
 80035f6:	6713      	str	r3, [r2, #112]	; 0x70
 80035f8:	4b55      	ldr	r3, [pc, #340]	; (8003750 <HAL_RCC_OscConfig+0x470>)
 80035fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035fc:	4a54      	ldr	r2, [pc, #336]	; (8003750 <HAL_RCC_OscConfig+0x470>)
 80035fe:	f023 0304 	bic.w	r3, r3, #4
 8003602:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d015      	beq.n	8003638 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800360c:	f7fe f8e4 	bl	80017d8 <HAL_GetTick>
 8003610:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003612:	e00a      	b.n	800362a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003614:	f7fe f8e0 	bl	80017d8 <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003622:	4293      	cmp	r3, r2
 8003624:	d901      	bls.n	800362a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e0cb      	b.n	80037c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800362a:	4b49      	ldr	r3, [pc, #292]	; (8003750 <HAL_RCC_OscConfig+0x470>)
 800362c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800362e:	f003 0302 	and.w	r3, r3, #2
 8003632:	2b00      	cmp	r3, #0
 8003634:	d0ee      	beq.n	8003614 <HAL_RCC_OscConfig+0x334>
 8003636:	e014      	b.n	8003662 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003638:	f7fe f8ce 	bl	80017d8 <HAL_GetTick>
 800363c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800363e:	e00a      	b.n	8003656 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003640:	f7fe f8ca 	bl	80017d8 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	f241 3288 	movw	r2, #5000	; 0x1388
 800364e:	4293      	cmp	r3, r2
 8003650:	d901      	bls.n	8003656 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e0b5      	b.n	80037c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003656:	4b3e      	ldr	r3, [pc, #248]	; (8003750 <HAL_RCC_OscConfig+0x470>)
 8003658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	2b00      	cmp	r3, #0
 8003660:	d1ee      	bne.n	8003640 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003662:	7dfb      	ldrb	r3, [r7, #23]
 8003664:	2b01      	cmp	r3, #1
 8003666:	d105      	bne.n	8003674 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003668:	4b39      	ldr	r3, [pc, #228]	; (8003750 <HAL_RCC_OscConfig+0x470>)
 800366a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366c:	4a38      	ldr	r2, [pc, #224]	; (8003750 <HAL_RCC_OscConfig+0x470>)
 800366e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003672:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	699b      	ldr	r3, [r3, #24]
 8003678:	2b00      	cmp	r3, #0
 800367a:	f000 80a1 	beq.w	80037c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800367e:	4b34      	ldr	r3, [pc, #208]	; (8003750 <HAL_RCC_OscConfig+0x470>)
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f003 030c 	and.w	r3, r3, #12
 8003686:	2b08      	cmp	r3, #8
 8003688:	d05c      	beq.n	8003744 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	699b      	ldr	r3, [r3, #24]
 800368e:	2b02      	cmp	r3, #2
 8003690:	d141      	bne.n	8003716 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003692:	4b31      	ldr	r3, [pc, #196]	; (8003758 <HAL_RCC_OscConfig+0x478>)
 8003694:	2200      	movs	r2, #0
 8003696:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003698:	f7fe f89e 	bl	80017d8 <HAL_GetTick>
 800369c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800369e:	e008      	b.n	80036b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036a0:	f7fe f89a 	bl	80017d8 <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d901      	bls.n	80036b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e087      	b.n	80037c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036b2:	4b27      	ldr	r3, [pc, #156]	; (8003750 <HAL_RCC_OscConfig+0x470>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d1f0      	bne.n	80036a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	69da      	ldr	r2, [r3, #28]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a1b      	ldr	r3, [r3, #32]
 80036c6:	431a      	orrs	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036cc:	019b      	lsls	r3, r3, #6
 80036ce:	431a      	orrs	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d4:	085b      	lsrs	r3, r3, #1
 80036d6:	3b01      	subs	r3, #1
 80036d8:	041b      	lsls	r3, r3, #16
 80036da:	431a      	orrs	r2, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e0:	061b      	lsls	r3, r3, #24
 80036e2:	491b      	ldr	r1, [pc, #108]	; (8003750 <HAL_RCC_OscConfig+0x470>)
 80036e4:	4313      	orrs	r3, r2
 80036e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036e8:	4b1b      	ldr	r3, [pc, #108]	; (8003758 <HAL_RCC_OscConfig+0x478>)
 80036ea:	2201      	movs	r2, #1
 80036ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ee:	f7fe f873 	bl	80017d8 <HAL_GetTick>
 80036f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036f4:	e008      	b.n	8003708 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036f6:	f7fe f86f 	bl	80017d8 <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	2b02      	cmp	r3, #2
 8003702:	d901      	bls.n	8003708 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e05c      	b.n	80037c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003708:	4b11      	ldr	r3, [pc, #68]	; (8003750 <HAL_RCC_OscConfig+0x470>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d0f0      	beq.n	80036f6 <HAL_RCC_OscConfig+0x416>
 8003714:	e054      	b.n	80037c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003716:	4b10      	ldr	r3, [pc, #64]	; (8003758 <HAL_RCC_OscConfig+0x478>)
 8003718:	2200      	movs	r2, #0
 800371a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800371c:	f7fe f85c 	bl	80017d8 <HAL_GetTick>
 8003720:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003722:	e008      	b.n	8003736 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003724:	f7fe f858 	bl	80017d8 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b02      	cmp	r3, #2
 8003730:	d901      	bls.n	8003736 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e045      	b.n	80037c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003736:	4b06      	ldr	r3, [pc, #24]	; (8003750 <HAL_RCC_OscConfig+0x470>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d1f0      	bne.n	8003724 <HAL_RCC_OscConfig+0x444>
 8003742:	e03d      	b.n	80037c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	699b      	ldr	r3, [r3, #24]
 8003748:	2b01      	cmp	r3, #1
 800374a:	d107      	bne.n	800375c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e038      	b.n	80037c2 <HAL_RCC_OscConfig+0x4e2>
 8003750:	40023800 	.word	0x40023800
 8003754:	40007000 	.word	0x40007000
 8003758:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800375c:	4b1b      	ldr	r3, [pc, #108]	; (80037cc <HAL_RCC_OscConfig+0x4ec>)
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	699b      	ldr	r3, [r3, #24]
 8003766:	2b01      	cmp	r3, #1
 8003768:	d028      	beq.n	80037bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003774:	429a      	cmp	r2, r3
 8003776:	d121      	bne.n	80037bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003782:	429a      	cmp	r2, r3
 8003784:	d11a      	bne.n	80037bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003786:	68fa      	ldr	r2, [r7, #12]
 8003788:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800378c:	4013      	ands	r3, r2
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003792:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003794:	4293      	cmp	r3, r2
 8003796:	d111      	bne.n	80037bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a2:	085b      	lsrs	r3, r3, #1
 80037a4:	3b01      	subs	r3, #1
 80037a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d107      	bne.n	80037bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d001      	beq.n	80037c0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e000      	b.n	80037c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80037c0:	2300      	movs	r3, #0
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3718      	adds	r7, #24
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	40023800 	.word	0x40023800

080037d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d101      	bne.n	80037e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e0cc      	b.n	800397e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037e4:	4b68      	ldr	r3, [pc, #416]	; (8003988 <HAL_RCC_ClockConfig+0x1b8>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 030f 	and.w	r3, r3, #15
 80037ec:	683a      	ldr	r2, [r7, #0]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d90c      	bls.n	800380c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037f2:	4b65      	ldr	r3, [pc, #404]	; (8003988 <HAL_RCC_ClockConfig+0x1b8>)
 80037f4:	683a      	ldr	r2, [r7, #0]
 80037f6:	b2d2      	uxtb	r2, r2
 80037f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037fa:	4b63      	ldr	r3, [pc, #396]	; (8003988 <HAL_RCC_ClockConfig+0x1b8>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 030f 	and.w	r3, r3, #15
 8003802:	683a      	ldr	r2, [r7, #0]
 8003804:	429a      	cmp	r2, r3
 8003806:	d001      	beq.n	800380c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e0b8      	b.n	800397e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0302 	and.w	r3, r3, #2
 8003814:	2b00      	cmp	r3, #0
 8003816:	d020      	beq.n	800385a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0304 	and.w	r3, r3, #4
 8003820:	2b00      	cmp	r3, #0
 8003822:	d005      	beq.n	8003830 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003824:	4b59      	ldr	r3, [pc, #356]	; (800398c <HAL_RCC_ClockConfig+0x1bc>)
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	4a58      	ldr	r2, [pc, #352]	; (800398c <HAL_RCC_ClockConfig+0x1bc>)
 800382a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800382e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0308 	and.w	r3, r3, #8
 8003838:	2b00      	cmp	r3, #0
 800383a:	d005      	beq.n	8003848 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800383c:	4b53      	ldr	r3, [pc, #332]	; (800398c <HAL_RCC_ClockConfig+0x1bc>)
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	4a52      	ldr	r2, [pc, #328]	; (800398c <HAL_RCC_ClockConfig+0x1bc>)
 8003842:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003846:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003848:	4b50      	ldr	r3, [pc, #320]	; (800398c <HAL_RCC_ClockConfig+0x1bc>)
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	494d      	ldr	r1, [pc, #308]	; (800398c <HAL_RCC_ClockConfig+0x1bc>)
 8003856:	4313      	orrs	r3, r2
 8003858:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0301 	and.w	r3, r3, #1
 8003862:	2b00      	cmp	r3, #0
 8003864:	d044      	beq.n	80038f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	2b01      	cmp	r3, #1
 800386c:	d107      	bne.n	800387e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800386e:	4b47      	ldr	r3, [pc, #284]	; (800398c <HAL_RCC_ClockConfig+0x1bc>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d119      	bne.n	80038ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e07f      	b.n	800397e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	2b02      	cmp	r3, #2
 8003884:	d003      	beq.n	800388e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800388a:	2b03      	cmp	r3, #3
 800388c:	d107      	bne.n	800389e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800388e:	4b3f      	ldr	r3, [pc, #252]	; (800398c <HAL_RCC_ClockConfig+0x1bc>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d109      	bne.n	80038ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e06f      	b.n	800397e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800389e:	4b3b      	ldr	r3, [pc, #236]	; (800398c <HAL_RCC_ClockConfig+0x1bc>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0302 	and.w	r3, r3, #2
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d101      	bne.n	80038ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e067      	b.n	800397e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038ae:	4b37      	ldr	r3, [pc, #220]	; (800398c <HAL_RCC_ClockConfig+0x1bc>)
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	f023 0203 	bic.w	r2, r3, #3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	4934      	ldr	r1, [pc, #208]	; (800398c <HAL_RCC_ClockConfig+0x1bc>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038c0:	f7fd ff8a 	bl	80017d8 <HAL_GetTick>
 80038c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038c6:	e00a      	b.n	80038de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038c8:	f7fd ff86 	bl	80017d8 <HAL_GetTick>
 80038cc:	4602      	mov	r2, r0
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d901      	bls.n	80038de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e04f      	b.n	800397e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038de:	4b2b      	ldr	r3, [pc, #172]	; (800398c <HAL_RCC_ClockConfig+0x1bc>)
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f003 020c 	and.w	r2, r3, #12
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d1eb      	bne.n	80038c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038f0:	4b25      	ldr	r3, [pc, #148]	; (8003988 <HAL_RCC_ClockConfig+0x1b8>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 030f 	and.w	r3, r3, #15
 80038f8:	683a      	ldr	r2, [r7, #0]
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d20c      	bcs.n	8003918 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038fe:	4b22      	ldr	r3, [pc, #136]	; (8003988 <HAL_RCC_ClockConfig+0x1b8>)
 8003900:	683a      	ldr	r2, [r7, #0]
 8003902:	b2d2      	uxtb	r2, r2
 8003904:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003906:	4b20      	ldr	r3, [pc, #128]	; (8003988 <HAL_RCC_ClockConfig+0x1b8>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 030f 	and.w	r3, r3, #15
 800390e:	683a      	ldr	r2, [r7, #0]
 8003910:	429a      	cmp	r2, r3
 8003912:	d001      	beq.n	8003918 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e032      	b.n	800397e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0304 	and.w	r3, r3, #4
 8003920:	2b00      	cmp	r3, #0
 8003922:	d008      	beq.n	8003936 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003924:	4b19      	ldr	r3, [pc, #100]	; (800398c <HAL_RCC_ClockConfig+0x1bc>)
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	4916      	ldr	r1, [pc, #88]	; (800398c <HAL_RCC_ClockConfig+0x1bc>)
 8003932:	4313      	orrs	r3, r2
 8003934:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0308 	and.w	r3, r3, #8
 800393e:	2b00      	cmp	r3, #0
 8003940:	d009      	beq.n	8003956 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003942:	4b12      	ldr	r3, [pc, #72]	; (800398c <HAL_RCC_ClockConfig+0x1bc>)
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	00db      	lsls	r3, r3, #3
 8003950:	490e      	ldr	r1, [pc, #56]	; (800398c <HAL_RCC_ClockConfig+0x1bc>)
 8003952:	4313      	orrs	r3, r2
 8003954:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003956:	f000 f821 	bl	800399c <HAL_RCC_GetSysClockFreq>
 800395a:	4602      	mov	r2, r0
 800395c:	4b0b      	ldr	r3, [pc, #44]	; (800398c <HAL_RCC_ClockConfig+0x1bc>)
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	091b      	lsrs	r3, r3, #4
 8003962:	f003 030f 	and.w	r3, r3, #15
 8003966:	490a      	ldr	r1, [pc, #40]	; (8003990 <HAL_RCC_ClockConfig+0x1c0>)
 8003968:	5ccb      	ldrb	r3, [r1, r3]
 800396a:	fa22 f303 	lsr.w	r3, r2, r3
 800396e:	4a09      	ldr	r2, [pc, #36]	; (8003994 <HAL_RCC_ClockConfig+0x1c4>)
 8003970:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003972:	4b09      	ldr	r3, [pc, #36]	; (8003998 <HAL_RCC_ClockConfig+0x1c8>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4618      	mov	r0, r3
 8003978:	f7fd feea 	bl	8001750 <HAL_InitTick>

  return HAL_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3710      	adds	r7, #16
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	40023c00 	.word	0x40023c00
 800398c:	40023800 	.word	0x40023800
 8003990:	080088f8 	.word	0x080088f8
 8003994:	20000000 	.word	0x20000000
 8003998:	20000004 	.word	0x20000004

0800399c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800399c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039a0:	b094      	sub	sp, #80	; 0x50
 80039a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80039a4:	2300      	movs	r3, #0
 80039a6:	647b      	str	r3, [r7, #68]	; 0x44
 80039a8:	2300      	movs	r3, #0
 80039aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039ac:	2300      	movs	r3, #0
 80039ae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80039b0:	2300      	movs	r3, #0
 80039b2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039b4:	4b79      	ldr	r3, [pc, #484]	; (8003b9c <HAL_RCC_GetSysClockFreq+0x200>)
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f003 030c 	and.w	r3, r3, #12
 80039bc:	2b08      	cmp	r3, #8
 80039be:	d00d      	beq.n	80039dc <HAL_RCC_GetSysClockFreq+0x40>
 80039c0:	2b08      	cmp	r3, #8
 80039c2:	f200 80e1 	bhi.w	8003b88 <HAL_RCC_GetSysClockFreq+0x1ec>
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d002      	beq.n	80039d0 <HAL_RCC_GetSysClockFreq+0x34>
 80039ca:	2b04      	cmp	r3, #4
 80039cc:	d003      	beq.n	80039d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80039ce:	e0db      	b.n	8003b88 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039d0:	4b73      	ldr	r3, [pc, #460]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0x204>)
 80039d2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80039d4:	e0db      	b.n	8003b8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039d6:	4b73      	ldr	r3, [pc, #460]	; (8003ba4 <HAL_RCC_GetSysClockFreq+0x208>)
 80039d8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80039da:	e0d8      	b.n	8003b8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039dc:	4b6f      	ldr	r3, [pc, #444]	; (8003b9c <HAL_RCC_GetSysClockFreq+0x200>)
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039e4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039e6:	4b6d      	ldr	r3, [pc, #436]	; (8003b9c <HAL_RCC_GetSysClockFreq+0x200>)
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d063      	beq.n	8003aba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039f2:	4b6a      	ldr	r3, [pc, #424]	; (8003b9c <HAL_RCC_GetSysClockFreq+0x200>)
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	099b      	lsrs	r3, r3, #6
 80039f8:	2200      	movs	r2, #0
 80039fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80039fc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80039fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a04:	633b      	str	r3, [r7, #48]	; 0x30
 8003a06:	2300      	movs	r3, #0
 8003a08:	637b      	str	r3, [r7, #52]	; 0x34
 8003a0a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003a0e:	4622      	mov	r2, r4
 8003a10:	462b      	mov	r3, r5
 8003a12:	f04f 0000 	mov.w	r0, #0
 8003a16:	f04f 0100 	mov.w	r1, #0
 8003a1a:	0159      	lsls	r1, r3, #5
 8003a1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a20:	0150      	lsls	r0, r2, #5
 8003a22:	4602      	mov	r2, r0
 8003a24:	460b      	mov	r3, r1
 8003a26:	4621      	mov	r1, r4
 8003a28:	1a51      	subs	r1, r2, r1
 8003a2a:	6139      	str	r1, [r7, #16]
 8003a2c:	4629      	mov	r1, r5
 8003a2e:	eb63 0301 	sbc.w	r3, r3, r1
 8003a32:	617b      	str	r3, [r7, #20]
 8003a34:	f04f 0200 	mov.w	r2, #0
 8003a38:	f04f 0300 	mov.w	r3, #0
 8003a3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a40:	4659      	mov	r1, fp
 8003a42:	018b      	lsls	r3, r1, #6
 8003a44:	4651      	mov	r1, sl
 8003a46:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a4a:	4651      	mov	r1, sl
 8003a4c:	018a      	lsls	r2, r1, #6
 8003a4e:	4651      	mov	r1, sl
 8003a50:	ebb2 0801 	subs.w	r8, r2, r1
 8003a54:	4659      	mov	r1, fp
 8003a56:	eb63 0901 	sbc.w	r9, r3, r1
 8003a5a:	f04f 0200 	mov.w	r2, #0
 8003a5e:	f04f 0300 	mov.w	r3, #0
 8003a62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a6e:	4690      	mov	r8, r2
 8003a70:	4699      	mov	r9, r3
 8003a72:	4623      	mov	r3, r4
 8003a74:	eb18 0303 	adds.w	r3, r8, r3
 8003a78:	60bb      	str	r3, [r7, #8]
 8003a7a:	462b      	mov	r3, r5
 8003a7c:	eb49 0303 	adc.w	r3, r9, r3
 8003a80:	60fb      	str	r3, [r7, #12]
 8003a82:	f04f 0200 	mov.w	r2, #0
 8003a86:	f04f 0300 	mov.w	r3, #0
 8003a8a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003a8e:	4629      	mov	r1, r5
 8003a90:	024b      	lsls	r3, r1, #9
 8003a92:	4621      	mov	r1, r4
 8003a94:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003a98:	4621      	mov	r1, r4
 8003a9a:	024a      	lsls	r2, r1, #9
 8003a9c:	4610      	mov	r0, r2
 8003a9e:	4619      	mov	r1, r3
 8003aa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003aa6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003aa8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003aac:	f7fc ffbe 	bl	8000a2c <__aeabi_uldivmod>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ab8:	e058      	b.n	8003b6c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003aba:	4b38      	ldr	r3, [pc, #224]	; (8003b9c <HAL_RCC_GetSysClockFreq+0x200>)
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	099b      	lsrs	r3, r3, #6
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	4611      	mov	r1, r2
 8003ac6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003aca:	623b      	str	r3, [r7, #32]
 8003acc:	2300      	movs	r3, #0
 8003ace:	627b      	str	r3, [r7, #36]	; 0x24
 8003ad0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003ad4:	4642      	mov	r2, r8
 8003ad6:	464b      	mov	r3, r9
 8003ad8:	f04f 0000 	mov.w	r0, #0
 8003adc:	f04f 0100 	mov.w	r1, #0
 8003ae0:	0159      	lsls	r1, r3, #5
 8003ae2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ae6:	0150      	lsls	r0, r2, #5
 8003ae8:	4602      	mov	r2, r0
 8003aea:	460b      	mov	r3, r1
 8003aec:	4641      	mov	r1, r8
 8003aee:	ebb2 0a01 	subs.w	sl, r2, r1
 8003af2:	4649      	mov	r1, r9
 8003af4:	eb63 0b01 	sbc.w	fp, r3, r1
 8003af8:	f04f 0200 	mov.w	r2, #0
 8003afc:	f04f 0300 	mov.w	r3, #0
 8003b00:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003b04:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003b08:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003b0c:	ebb2 040a 	subs.w	r4, r2, sl
 8003b10:	eb63 050b 	sbc.w	r5, r3, fp
 8003b14:	f04f 0200 	mov.w	r2, #0
 8003b18:	f04f 0300 	mov.w	r3, #0
 8003b1c:	00eb      	lsls	r3, r5, #3
 8003b1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b22:	00e2      	lsls	r2, r4, #3
 8003b24:	4614      	mov	r4, r2
 8003b26:	461d      	mov	r5, r3
 8003b28:	4643      	mov	r3, r8
 8003b2a:	18e3      	adds	r3, r4, r3
 8003b2c:	603b      	str	r3, [r7, #0]
 8003b2e:	464b      	mov	r3, r9
 8003b30:	eb45 0303 	adc.w	r3, r5, r3
 8003b34:	607b      	str	r3, [r7, #4]
 8003b36:	f04f 0200 	mov.w	r2, #0
 8003b3a:	f04f 0300 	mov.w	r3, #0
 8003b3e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b42:	4629      	mov	r1, r5
 8003b44:	028b      	lsls	r3, r1, #10
 8003b46:	4621      	mov	r1, r4
 8003b48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b4c:	4621      	mov	r1, r4
 8003b4e:	028a      	lsls	r2, r1, #10
 8003b50:	4610      	mov	r0, r2
 8003b52:	4619      	mov	r1, r3
 8003b54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b56:	2200      	movs	r2, #0
 8003b58:	61bb      	str	r3, [r7, #24]
 8003b5a:	61fa      	str	r2, [r7, #28]
 8003b5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b60:	f7fc ff64 	bl	8000a2c <__aeabi_uldivmod>
 8003b64:	4602      	mov	r2, r0
 8003b66:	460b      	mov	r3, r1
 8003b68:	4613      	mov	r3, r2
 8003b6a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b6c:	4b0b      	ldr	r3, [pc, #44]	; (8003b9c <HAL_RCC_GetSysClockFreq+0x200>)
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	0c1b      	lsrs	r3, r3, #16
 8003b72:	f003 0303 	and.w	r3, r3, #3
 8003b76:	3301      	adds	r3, #1
 8003b78:	005b      	lsls	r3, r3, #1
 8003b7a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003b7c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b84:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b86:	e002      	b.n	8003b8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b88:	4b05      	ldr	r3, [pc, #20]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003b8a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3750      	adds	r7, #80	; 0x50
 8003b94:	46bd      	mov	sp, r7
 8003b96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b9a:	bf00      	nop
 8003b9c:	40023800 	.word	0x40023800
 8003ba0:	00f42400 	.word	0x00f42400
 8003ba4:	007a1200 	.word	0x007a1200

08003ba8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bac:	4b03      	ldr	r3, [pc, #12]	; (8003bbc <HAL_RCC_GetHCLKFreq+0x14>)
 8003bae:	681b      	ldr	r3, [r3, #0]
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	20000000 	.word	0x20000000

08003bc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003bc4:	f7ff fff0 	bl	8003ba8 <HAL_RCC_GetHCLKFreq>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	4b05      	ldr	r3, [pc, #20]	; (8003be0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	0a9b      	lsrs	r3, r3, #10
 8003bd0:	f003 0307 	and.w	r3, r3, #7
 8003bd4:	4903      	ldr	r1, [pc, #12]	; (8003be4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bd6:	5ccb      	ldrb	r3, [r1, r3]
 8003bd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	40023800 	.word	0x40023800
 8003be4:	08008908 	.word	0x08008908

08003be8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003bec:	f7ff ffdc 	bl	8003ba8 <HAL_RCC_GetHCLKFreq>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	4b05      	ldr	r3, [pc, #20]	; (8003c08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	0b5b      	lsrs	r3, r3, #13
 8003bf8:	f003 0307 	and.w	r3, r3, #7
 8003bfc:	4903      	ldr	r1, [pc, #12]	; (8003c0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bfe:	5ccb      	ldrb	r3, [r1, r3]
 8003c00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	40023800 	.word	0x40023800
 8003c0c:	08008908 	.word	0x08008908

08003c10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d101      	bne.n	8003c22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e03f      	b.n	8003ca2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d106      	bne.n	8003c3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f7fd fcb0 	bl	800159c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2224      	movs	r2, #36	; 0x24
 8003c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	68da      	ldr	r2, [r3, #12]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f000 f829 	bl	8003cac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	691a      	ldr	r2, [r3, #16]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	695a      	ldr	r2, [r3, #20]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	68da      	ldr	r2, [r3, #12]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2220      	movs	r2, #32
 8003c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2220      	movs	r2, #32
 8003c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3708      	adds	r7, #8
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
	...

08003cac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cb0:	b0c0      	sub	sp, #256	; 0x100
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	691b      	ldr	r3, [r3, #16]
 8003cc0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cc8:	68d9      	ldr	r1, [r3, #12]
 8003cca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	ea40 0301 	orr.w	r3, r0, r1
 8003cd4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003cd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cda:	689a      	ldr	r2, [r3, #8]
 8003cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	431a      	orrs	r2, r3
 8003ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ce8:	695b      	ldr	r3, [r3, #20]
 8003cea:	431a      	orrs	r2, r3
 8003cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cf0:	69db      	ldr	r3, [r3, #28]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003d04:	f021 010c 	bic.w	r1, r1, #12
 8003d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003d12:	430b      	orrs	r3, r1
 8003d14:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	695b      	ldr	r3, [r3, #20]
 8003d1e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003d22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d26:	6999      	ldr	r1, [r3, #24]
 8003d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	ea40 0301 	orr.w	r3, r0, r1
 8003d32:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	4b8f      	ldr	r3, [pc, #572]	; (8003f78 <UART_SetConfig+0x2cc>)
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d005      	beq.n	8003d4c <UART_SetConfig+0xa0>
 8003d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	4b8d      	ldr	r3, [pc, #564]	; (8003f7c <UART_SetConfig+0x2d0>)
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d104      	bne.n	8003d56 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d4c:	f7ff ff4c 	bl	8003be8 <HAL_RCC_GetPCLK2Freq>
 8003d50:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003d54:	e003      	b.n	8003d5e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d56:	f7ff ff33 	bl	8003bc0 <HAL_RCC_GetPCLK1Freq>
 8003d5a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d62:	69db      	ldr	r3, [r3, #28]
 8003d64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d68:	f040 810c 	bne.w	8003f84 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d70:	2200      	movs	r2, #0
 8003d72:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003d76:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003d7a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003d7e:	4622      	mov	r2, r4
 8003d80:	462b      	mov	r3, r5
 8003d82:	1891      	adds	r1, r2, r2
 8003d84:	65b9      	str	r1, [r7, #88]	; 0x58
 8003d86:	415b      	adcs	r3, r3
 8003d88:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d8a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003d8e:	4621      	mov	r1, r4
 8003d90:	eb12 0801 	adds.w	r8, r2, r1
 8003d94:	4629      	mov	r1, r5
 8003d96:	eb43 0901 	adc.w	r9, r3, r1
 8003d9a:	f04f 0200 	mov.w	r2, #0
 8003d9e:	f04f 0300 	mov.w	r3, #0
 8003da2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003da6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003daa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003dae:	4690      	mov	r8, r2
 8003db0:	4699      	mov	r9, r3
 8003db2:	4623      	mov	r3, r4
 8003db4:	eb18 0303 	adds.w	r3, r8, r3
 8003db8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003dbc:	462b      	mov	r3, r5
 8003dbe:	eb49 0303 	adc.w	r3, r9, r3
 8003dc2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003dc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003dd2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003dd6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003dda:	460b      	mov	r3, r1
 8003ddc:	18db      	adds	r3, r3, r3
 8003dde:	653b      	str	r3, [r7, #80]	; 0x50
 8003de0:	4613      	mov	r3, r2
 8003de2:	eb42 0303 	adc.w	r3, r2, r3
 8003de6:	657b      	str	r3, [r7, #84]	; 0x54
 8003de8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003dec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003df0:	f7fc fe1c 	bl	8000a2c <__aeabi_uldivmod>
 8003df4:	4602      	mov	r2, r0
 8003df6:	460b      	mov	r3, r1
 8003df8:	4b61      	ldr	r3, [pc, #388]	; (8003f80 <UART_SetConfig+0x2d4>)
 8003dfa:	fba3 2302 	umull	r2, r3, r3, r2
 8003dfe:	095b      	lsrs	r3, r3, #5
 8003e00:	011c      	lsls	r4, r3, #4
 8003e02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e06:	2200      	movs	r2, #0
 8003e08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e0c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003e10:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003e14:	4642      	mov	r2, r8
 8003e16:	464b      	mov	r3, r9
 8003e18:	1891      	adds	r1, r2, r2
 8003e1a:	64b9      	str	r1, [r7, #72]	; 0x48
 8003e1c:	415b      	adcs	r3, r3
 8003e1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e20:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003e24:	4641      	mov	r1, r8
 8003e26:	eb12 0a01 	adds.w	sl, r2, r1
 8003e2a:	4649      	mov	r1, r9
 8003e2c:	eb43 0b01 	adc.w	fp, r3, r1
 8003e30:	f04f 0200 	mov.w	r2, #0
 8003e34:	f04f 0300 	mov.w	r3, #0
 8003e38:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003e3c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003e40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e44:	4692      	mov	sl, r2
 8003e46:	469b      	mov	fp, r3
 8003e48:	4643      	mov	r3, r8
 8003e4a:	eb1a 0303 	adds.w	r3, sl, r3
 8003e4e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e52:	464b      	mov	r3, r9
 8003e54:	eb4b 0303 	adc.w	r3, fp, r3
 8003e58:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e68:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003e6c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003e70:	460b      	mov	r3, r1
 8003e72:	18db      	adds	r3, r3, r3
 8003e74:	643b      	str	r3, [r7, #64]	; 0x40
 8003e76:	4613      	mov	r3, r2
 8003e78:	eb42 0303 	adc.w	r3, r2, r3
 8003e7c:	647b      	str	r3, [r7, #68]	; 0x44
 8003e7e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003e82:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003e86:	f7fc fdd1 	bl	8000a2c <__aeabi_uldivmod>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	4611      	mov	r1, r2
 8003e90:	4b3b      	ldr	r3, [pc, #236]	; (8003f80 <UART_SetConfig+0x2d4>)
 8003e92:	fba3 2301 	umull	r2, r3, r3, r1
 8003e96:	095b      	lsrs	r3, r3, #5
 8003e98:	2264      	movs	r2, #100	; 0x64
 8003e9a:	fb02 f303 	mul.w	r3, r2, r3
 8003e9e:	1acb      	subs	r3, r1, r3
 8003ea0:	00db      	lsls	r3, r3, #3
 8003ea2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003ea6:	4b36      	ldr	r3, [pc, #216]	; (8003f80 <UART_SetConfig+0x2d4>)
 8003ea8:	fba3 2302 	umull	r2, r3, r3, r2
 8003eac:	095b      	lsrs	r3, r3, #5
 8003eae:	005b      	lsls	r3, r3, #1
 8003eb0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003eb4:	441c      	add	r4, r3
 8003eb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ec0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003ec4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003ec8:	4642      	mov	r2, r8
 8003eca:	464b      	mov	r3, r9
 8003ecc:	1891      	adds	r1, r2, r2
 8003ece:	63b9      	str	r1, [r7, #56]	; 0x38
 8003ed0:	415b      	adcs	r3, r3
 8003ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ed4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003ed8:	4641      	mov	r1, r8
 8003eda:	1851      	adds	r1, r2, r1
 8003edc:	6339      	str	r1, [r7, #48]	; 0x30
 8003ede:	4649      	mov	r1, r9
 8003ee0:	414b      	adcs	r3, r1
 8003ee2:	637b      	str	r3, [r7, #52]	; 0x34
 8003ee4:	f04f 0200 	mov.w	r2, #0
 8003ee8:	f04f 0300 	mov.w	r3, #0
 8003eec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003ef0:	4659      	mov	r1, fp
 8003ef2:	00cb      	lsls	r3, r1, #3
 8003ef4:	4651      	mov	r1, sl
 8003ef6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003efa:	4651      	mov	r1, sl
 8003efc:	00ca      	lsls	r2, r1, #3
 8003efe:	4610      	mov	r0, r2
 8003f00:	4619      	mov	r1, r3
 8003f02:	4603      	mov	r3, r0
 8003f04:	4642      	mov	r2, r8
 8003f06:	189b      	adds	r3, r3, r2
 8003f08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f0c:	464b      	mov	r3, r9
 8003f0e:	460a      	mov	r2, r1
 8003f10:	eb42 0303 	adc.w	r3, r2, r3
 8003f14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003f24:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003f28:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003f2c:	460b      	mov	r3, r1
 8003f2e:	18db      	adds	r3, r3, r3
 8003f30:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f32:	4613      	mov	r3, r2
 8003f34:	eb42 0303 	adc.w	r3, r2, r3
 8003f38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f3e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003f42:	f7fc fd73 	bl	8000a2c <__aeabi_uldivmod>
 8003f46:	4602      	mov	r2, r0
 8003f48:	460b      	mov	r3, r1
 8003f4a:	4b0d      	ldr	r3, [pc, #52]	; (8003f80 <UART_SetConfig+0x2d4>)
 8003f4c:	fba3 1302 	umull	r1, r3, r3, r2
 8003f50:	095b      	lsrs	r3, r3, #5
 8003f52:	2164      	movs	r1, #100	; 0x64
 8003f54:	fb01 f303 	mul.w	r3, r1, r3
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	00db      	lsls	r3, r3, #3
 8003f5c:	3332      	adds	r3, #50	; 0x32
 8003f5e:	4a08      	ldr	r2, [pc, #32]	; (8003f80 <UART_SetConfig+0x2d4>)
 8003f60:	fba2 2303 	umull	r2, r3, r2, r3
 8003f64:	095b      	lsrs	r3, r3, #5
 8003f66:	f003 0207 	and.w	r2, r3, #7
 8003f6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4422      	add	r2, r4
 8003f72:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003f74:	e106      	b.n	8004184 <UART_SetConfig+0x4d8>
 8003f76:	bf00      	nop
 8003f78:	40011000 	.word	0x40011000
 8003f7c:	40011400 	.word	0x40011400
 8003f80:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003f8e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003f92:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003f96:	4642      	mov	r2, r8
 8003f98:	464b      	mov	r3, r9
 8003f9a:	1891      	adds	r1, r2, r2
 8003f9c:	6239      	str	r1, [r7, #32]
 8003f9e:	415b      	adcs	r3, r3
 8003fa0:	627b      	str	r3, [r7, #36]	; 0x24
 8003fa2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003fa6:	4641      	mov	r1, r8
 8003fa8:	1854      	adds	r4, r2, r1
 8003faa:	4649      	mov	r1, r9
 8003fac:	eb43 0501 	adc.w	r5, r3, r1
 8003fb0:	f04f 0200 	mov.w	r2, #0
 8003fb4:	f04f 0300 	mov.w	r3, #0
 8003fb8:	00eb      	lsls	r3, r5, #3
 8003fba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fbe:	00e2      	lsls	r2, r4, #3
 8003fc0:	4614      	mov	r4, r2
 8003fc2:	461d      	mov	r5, r3
 8003fc4:	4643      	mov	r3, r8
 8003fc6:	18e3      	adds	r3, r4, r3
 8003fc8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003fcc:	464b      	mov	r3, r9
 8003fce:	eb45 0303 	adc.w	r3, r5, r3
 8003fd2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003fd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003fe2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003fe6:	f04f 0200 	mov.w	r2, #0
 8003fea:	f04f 0300 	mov.w	r3, #0
 8003fee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003ff2:	4629      	mov	r1, r5
 8003ff4:	008b      	lsls	r3, r1, #2
 8003ff6:	4621      	mov	r1, r4
 8003ff8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ffc:	4621      	mov	r1, r4
 8003ffe:	008a      	lsls	r2, r1, #2
 8004000:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004004:	f7fc fd12 	bl	8000a2c <__aeabi_uldivmod>
 8004008:	4602      	mov	r2, r0
 800400a:	460b      	mov	r3, r1
 800400c:	4b60      	ldr	r3, [pc, #384]	; (8004190 <UART_SetConfig+0x4e4>)
 800400e:	fba3 2302 	umull	r2, r3, r3, r2
 8004012:	095b      	lsrs	r3, r3, #5
 8004014:	011c      	lsls	r4, r3, #4
 8004016:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800401a:	2200      	movs	r2, #0
 800401c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004020:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004024:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004028:	4642      	mov	r2, r8
 800402a:	464b      	mov	r3, r9
 800402c:	1891      	adds	r1, r2, r2
 800402e:	61b9      	str	r1, [r7, #24]
 8004030:	415b      	adcs	r3, r3
 8004032:	61fb      	str	r3, [r7, #28]
 8004034:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004038:	4641      	mov	r1, r8
 800403a:	1851      	adds	r1, r2, r1
 800403c:	6139      	str	r1, [r7, #16]
 800403e:	4649      	mov	r1, r9
 8004040:	414b      	adcs	r3, r1
 8004042:	617b      	str	r3, [r7, #20]
 8004044:	f04f 0200 	mov.w	r2, #0
 8004048:	f04f 0300 	mov.w	r3, #0
 800404c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004050:	4659      	mov	r1, fp
 8004052:	00cb      	lsls	r3, r1, #3
 8004054:	4651      	mov	r1, sl
 8004056:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800405a:	4651      	mov	r1, sl
 800405c:	00ca      	lsls	r2, r1, #3
 800405e:	4610      	mov	r0, r2
 8004060:	4619      	mov	r1, r3
 8004062:	4603      	mov	r3, r0
 8004064:	4642      	mov	r2, r8
 8004066:	189b      	adds	r3, r3, r2
 8004068:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800406c:	464b      	mov	r3, r9
 800406e:	460a      	mov	r2, r1
 8004070:	eb42 0303 	adc.w	r3, r2, r3
 8004074:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	67bb      	str	r3, [r7, #120]	; 0x78
 8004082:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004084:	f04f 0200 	mov.w	r2, #0
 8004088:	f04f 0300 	mov.w	r3, #0
 800408c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004090:	4649      	mov	r1, r9
 8004092:	008b      	lsls	r3, r1, #2
 8004094:	4641      	mov	r1, r8
 8004096:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800409a:	4641      	mov	r1, r8
 800409c:	008a      	lsls	r2, r1, #2
 800409e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80040a2:	f7fc fcc3 	bl	8000a2c <__aeabi_uldivmod>
 80040a6:	4602      	mov	r2, r0
 80040a8:	460b      	mov	r3, r1
 80040aa:	4611      	mov	r1, r2
 80040ac:	4b38      	ldr	r3, [pc, #224]	; (8004190 <UART_SetConfig+0x4e4>)
 80040ae:	fba3 2301 	umull	r2, r3, r3, r1
 80040b2:	095b      	lsrs	r3, r3, #5
 80040b4:	2264      	movs	r2, #100	; 0x64
 80040b6:	fb02 f303 	mul.w	r3, r2, r3
 80040ba:	1acb      	subs	r3, r1, r3
 80040bc:	011b      	lsls	r3, r3, #4
 80040be:	3332      	adds	r3, #50	; 0x32
 80040c0:	4a33      	ldr	r2, [pc, #204]	; (8004190 <UART_SetConfig+0x4e4>)
 80040c2:	fba2 2303 	umull	r2, r3, r2, r3
 80040c6:	095b      	lsrs	r3, r3, #5
 80040c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040cc:	441c      	add	r4, r3
 80040ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040d2:	2200      	movs	r2, #0
 80040d4:	673b      	str	r3, [r7, #112]	; 0x70
 80040d6:	677a      	str	r2, [r7, #116]	; 0x74
 80040d8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80040dc:	4642      	mov	r2, r8
 80040de:	464b      	mov	r3, r9
 80040e0:	1891      	adds	r1, r2, r2
 80040e2:	60b9      	str	r1, [r7, #8]
 80040e4:	415b      	adcs	r3, r3
 80040e6:	60fb      	str	r3, [r7, #12]
 80040e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040ec:	4641      	mov	r1, r8
 80040ee:	1851      	adds	r1, r2, r1
 80040f0:	6039      	str	r1, [r7, #0]
 80040f2:	4649      	mov	r1, r9
 80040f4:	414b      	adcs	r3, r1
 80040f6:	607b      	str	r3, [r7, #4]
 80040f8:	f04f 0200 	mov.w	r2, #0
 80040fc:	f04f 0300 	mov.w	r3, #0
 8004100:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004104:	4659      	mov	r1, fp
 8004106:	00cb      	lsls	r3, r1, #3
 8004108:	4651      	mov	r1, sl
 800410a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800410e:	4651      	mov	r1, sl
 8004110:	00ca      	lsls	r2, r1, #3
 8004112:	4610      	mov	r0, r2
 8004114:	4619      	mov	r1, r3
 8004116:	4603      	mov	r3, r0
 8004118:	4642      	mov	r2, r8
 800411a:	189b      	adds	r3, r3, r2
 800411c:	66bb      	str	r3, [r7, #104]	; 0x68
 800411e:	464b      	mov	r3, r9
 8004120:	460a      	mov	r2, r1
 8004122:	eb42 0303 	adc.w	r3, r2, r3
 8004126:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	663b      	str	r3, [r7, #96]	; 0x60
 8004132:	667a      	str	r2, [r7, #100]	; 0x64
 8004134:	f04f 0200 	mov.w	r2, #0
 8004138:	f04f 0300 	mov.w	r3, #0
 800413c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004140:	4649      	mov	r1, r9
 8004142:	008b      	lsls	r3, r1, #2
 8004144:	4641      	mov	r1, r8
 8004146:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800414a:	4641      	mov	r1, r8
 800414c:	008a      	lsls	r2, r1, #2
 800414e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004152:	f7fc fc6b 	bl	8000a2c <__aeabi_uldivmod>
 8004156:	4602      	mov	r2, r0
 8004158:	460b      	mov	r3, r1
 800415a:	4b0d      	ldr	r3, [pc, #52]	; (8004190 <UART_SetConfig+0x4e4>)
 800415c:	fba3 1302 	umull	r1, r3, r3, r2
 8004160:	095b      	lsrs	r3, r3, #5
 8004162:	2164      	movs	r1, #100	; 0x64
 8004164:	fb01 f303 	mul.w	r3, r1, r3
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	011b      	lsls	r3, r3, #4
 800416c:	3332      	adds	r3, #50	; 0x32
 800416e:	4a08      	ldr	r2, [pc, #32]	; (8004190 <UART_SetConfig+0x4e4>)
 8004170:	fba2 2303 	umull	r2, r3, r2, r3
 8004174:	095b      	lsrs	r3, r3, #5
 8004176:	f003 020f 	and.w	r2, r3, #15
 800417a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4422      	add	r2, r4
 8004182:	609a      	str	r2, [r3, #8]
}
 8004184:	bf00      	nop
 8004186:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800418a:	46bd      	mov	sp, r7
 800418c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004190:	51eb851f 	.word	0x51eb851f

08004194 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004194:	b084      	sub	sp, #16
 8004196:	b580      	push	{r7, lr}
 8004198:	b084      	sub	sp, #16
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
 800419e:	f107 001c 	add.w	r0, r7, #28
 80041a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80041a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d122      	bne.n	80041f2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80041c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80041d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d105      	bne.n	80041e6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f001 fbee 	bl	80059c8 <USB_CoreReset>
 80041ec:	4603      	mov	r3, r0
 80041ee:	73fb      	strb	r3, [r7, #15]
 80041f0:	e01a      	b.n	8004228 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f001 fbe2 	bl	80059c8 <USB_CoreReset>
 8004204:	4603      	mov	r3, r0
 8004206:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004208:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800420a:	2b00      	cmp	r3, #0
 800420c:	d106      	bne.n	800421c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004212:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	639a      	str	r2, [r3, #56]	; 0x38
 800421a:	e005      	b.n	8004228 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004220:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800422a:	2b01      	cmp	r3, #1
 800422c:	d10b      	bne.n	8004246 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	f043 0206 	orr.w	r2, r3, #6
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	f043 0220 	orr.w	r2, r3, #32
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004246:	7bfb      	ldrb	r3, [r7, #15]
}
 8004248:	4618      	mov	r0, r3
 800424a:	3710      	adds	r7, #16
 800424c:	46bd      	mov	sp, r7
 800424e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004252:	b004      	add	sp, #16
 8004254:	4770      	bx	lr
	...

08004258 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004258:	b480      	push	{r7}
 800425a:	b087      	sub	sp, #28
 800425c:	af00      	add	r7, sp, #0
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	4613      	mov	r3, r2
 8004264:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004266:	79fb      	ldrb	r3, [r7, #7]
 8004268:	2b02      	cmp	r3, #2
 800426a:	d165      	bne.n	8004338 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	4a41      	ldr	r2, [pc, #260]	; (8004374 <USB_SetTurnaroundTime+0x11c>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d906      	bls.n	8004282 <USB_SetTurnaroundTime+0x2a>
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	4a40      	ldr	r2, [pc, #256]	; (8004378 <USB_SetTurnaroundTime+0x120>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d202      	bcs.n	8004282 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800427c:	230f      	movs	r3, #15
 800427e:	617b      	str	r3, [r7, #20]
 8004280:	e062      	b.n	8004348 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	4a3c      	ldr	r2, [pc, #240]	; (8004378 <USB_SetTurnaroundTime+0x120>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d306      	bcc.n	8004298 <USB_SetTurnaroundTime+0x40>
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	4a3b      	ldr	r2, [pc, #236]	; (800437c <USB_SetTurnaroundTime+0x124>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d202      	bcs.n	8004298 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004292:	230e      	movs	r3, #14
 8004294:	617b      	str	r3, [r7, #20]
 8004296:	e057      	b.n	8004348 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	4a38      	ldr	r2, [pc, #224]	; (800437c <USB_SetTurnaroundTime+0x124>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d306      	bcc.n	80042ae <USB_SetTurnaroundTime+0x56>
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	4a37      	ldr	r2, [pc, #220]	; (8004380 <USB_SetTurnaroundTime+0x128>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d202      	bcs.n	80042ae <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80042a8:	230d      	movs	r3, #13
 80042aa:	617b      	str	r3, [r7, #20]
 80042ac:	e04c      	b.n	8004348 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	4a33      	ldr	r2, [pc, #204]	; (8004380 <USB_SetTurnaroundTime+0x128>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d306      	bcc.n	80042c4 <USB_SetTurnaroundTime+0x6c>
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	4a32      	ldr	r2, [pc, #200]	; (8004384 <USB_SetTurnaroundTime+0x12c>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d802      	bhi.n	80042c4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80042be:	230c      	movs	r3, #12
 80042c0:	617b      	str	r3, [r7, #20]
 80042c2:	e041      	b.n	8004348 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	4a2f      	ldr	r2, [pc, #188]	; (8004384 <USB_SetTurnaroundTime+0x12c>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d906      	bls.n	80042da <USB_SetTurnaroundTime+0x82>
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	4a2e      	ldr	r2, [pc, #184]	; (8004388 <USB_SetTurnaroundTime+0x130>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d802      	bhi.n	80042da <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80042d4:	230b      	movs	r3, #11
 80042d6:	617b      	str	r3, [r7, #20]
 80042d8:	e036      	b.n	8004348 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	4a2a      	ldr	r2, [pc, #168]	; (8004388 <USB_SetTurnaroundTime+0x130>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d906      	bls.n	80042f0 <USB_SetTurnaroundTime+0x98>
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	4a29      	ldr	r2, [pc, #164]	; (800438c <USB_SetTurnaroundTime+0x134>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d802      	bhi.n	80042f0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80042ea:	230a      	movs	r3, #10
 80042ec:	617b      	str	r3, [r7, #20]
 80042ee:	e02b      	b.n	8004348 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	4a26      	ldr	r2, [pc, #152]	; (800438c <USB_SetTurnaroundTime+0x134>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d906      	bls.n	8004306 <USB_SetTurnaroundTime+0xae>
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	4a25      	ldr	r2, [pc, #148]	; (8004390 <USB_SetTurnaroundTime+0x138>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d202      	bcs.n	8004306 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004300:	2309      	movs	r3, #9
 8004302:	617b      	str	r3, [r7, #20]
 8004304:	e020      	b.n	8004348 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	4a21      	ldr	r2, [pc, #132]	; (8004390 <USB_SetTurnaroundTime+0x138>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d306      	bcc.n	800431c <USB_SetTurnaroundTime+0xc4>
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	4a20      	ldr	r2, [pc, #128]	; (8004394 <USB_SetTurnaroundTime+0x13c>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d802      	bhi.n	800431c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004316:	2308      	movs	r3, #8
 8004318:	617b      	str	r3, [r7, #20]
 800431a:	e015      	b.n	8004348 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	4a1d      	ldr	r2, [pc, #116]	; (8004394 <USB_SetTurnaroundTime+0x13c>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d906      	bls.n	8004332 <USB_SetTurnaroundTime+0xda>
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	4a1c      	ldr	r2, [pc, #112]	; (8004398 <USB_SetTurnaroundTime+0x140>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d202      	bcs.n	8004332 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800432c:	2307      	movs	r3, #7
 800432e:	617b      	str	r3, [r7, #20]
 8004330:	e00a      	b.n	8004348 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004332:	2306      	movs	r3, #6
 8004334:	617b      	str	r3, [r7, #20]
 8004336:	e007      	b.n	8004348 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004338:	79fb      	ldrb	r3, [r7, #7]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d102      	bne.n	8004344 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800433e:	2309      	movs	r3, #9
 8004340:	617b      	str	r3, [r7, #20]
 8004342:	e001      	b.n	8004348 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004344:	2309      	movs	r3, #9
 8004346:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	68da      	ldr	r2, [r3, #12]
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	029b      	lsls	r3, r3, #10
 800435c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004360:	431a      	orrs	r2, r3
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004366:	2300      	movs	r3, #0
}
 8004368:	4618      	mov	r0, r3
 800436a:	371c      	adds	r7, #28
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr
 8004374:	00d8acbf 	.word	0x00d8acbf
 8004378:	00e4e1c0 	.word	0x00e4e1c0
 800437c:	00f42400 	.word	0x00f42400
 8004380:	01067380 	.word	0x01067380
 8004384:	011a499f 	.word	0x011a499f
 8004388:	01312cff 	.word	0x01312cff
 800438c:	014ca43f 	.word	0x014ca43f
 8004390:	016e3600 	.word	0x016e3600
 8004394:	01a6ab1f 	.word	0x01a6ab1f
 8004398:	01e84800 	.word	0x01e84800

0800439c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	f043 0201 	orr.w	r2, r3, #1
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	370c      	adds	r7, #12
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr

080043be <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80043be:	b480      	push	{r7}
 80043c0:	b083      	sub	sp, #12
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	f023 0201 	bic.w	r2, r3, #1
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80043d2:	2300      	movs	r3, #0
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	370c      	adds	r7, #12
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr

080043e0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	460b      	mov	r3, r1
 80043ea:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80043ec:	2300      	movs	r3, #0
 80043ee:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80043fc:	78fb      	ldrb	r3, [r7, #3]
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d115      	bne.n	800442e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800440e:	2001      	movs	r0, #1
 8004410:	f7fd f9ee 	bl	80017f0 <HAL_Delay>
      ms++;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	3301      	adds	r3, #1
 8004418:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f001 fa45 	bl	80058aa <USB_GetMode>
 8004420:	4603      	mov	r3, r0
 8004422:	2b01      	cmp	r3, #1
 8004424:	d01e      	beq.n	8004464 <USB_SetCurrentMode+0x84>
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2b31      	cmp	r3, #49	; 0x31
 800442a:	d9f0      	bls.n	800440e <USB_SetCurrentMode+0x2e>
 800442c:	e01a      	b.n	8004464 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800442e:	78fb      	ldrb	r3, [r7, #3]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d115      	bne.n	8004460 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004440:	2001      	movs	r0, #1
 8004442:	f7fd f9d5 	bl	80017f0 <HAL_Delay>
      ms++;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	3301      	adds	r3, #1
 800444a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f001 fa2c 	bl	80058aa <USB_GetMode>
 8004452:	4603      	mov	r3, r0
 8004454:	2b00      	cmp	r3, #0
 8004456:	d005      	beq.n	8004464 <USB_SetCurrentMode+0x84>
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2b31      	cmp	r3, #49	; 0x31
 800445c:	d9f0      	bls.n	8004440 <USB_SetCurrentMode+0x60>
 800445e:	e001      	b.n	8004464 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e005      	b.n	8004470 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2b32      	cmp	r3, #50	; 0x32
 8004468:	d101      	bne.n	800446e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e000      	b.n	8004470 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800446e:	2300      	movs	r3, #0
}
 8004470:	4618      	mov	r0, r3
 8004472:	3710      	adds	r7, #16
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}

08004478 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004478:	b084      	sub	sp, #16
 800447a:	b580      	push	{r7, lr}
 800447c:	b086      	sub	sp, #24
 800447e:	af00      	add	r7, sp, #0
 8004480:	6078      	str	r0, [r7, #4]
 8004482:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004486:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800448a:	2300      	movs	r3, #0
 800448c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004492:	2300      	movs	r3, #0
 8004494:	613b      	str	r3, [r7, #16]
 8004496:	e009      	b.n	80044ac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	3340      	adds	r3, #64	; 0x40
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	4413      	add	r3, r2
 80044a2:	2200      	movs	r2, #0
 80044a4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	3301      	adds	r3, #1
 80044aa:	613b      	str	r3, [r7, #16]
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	2b0e      	cmp	r3, #14
 80044b0:	d9f2      	bls.n	8004498 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80044b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d11c      	bne.n	80044f2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	68fa      	ldr	r2, [r7, #12]
 80044c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044c6:	f043 0302 	orr.w	r3, r3, #2
 80044ca:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044dc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	639a      	str	r2, [r3, #56]	; 0x38
 80044f0:	e00b      	b.n	800450a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004502:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004510:	461a      	mov	r2, r3
 8004512:	2300      	movs	r3, #0
 8004514:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800451c:	4619      	mov	r1, r3
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004524:	461a      	mov	r2, r3
 8004526:	680b      	ldr	r3, [r1, #0]
 8004528:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800452a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800452c:	2b01      	cmp	r3, #1
 800452e:	d10c      	bne.n	800454a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004532:	2b00      	cmp	r3, #0
 8004534:	d104      	bne.n	8004540 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004536:	2100      	movs	r1, #0
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f000 f965 	bl	8004808 <USB_SetDevSpeed>
 800453e:	e008      	b.n	8004552 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004540:	2101      	movs	r1, #1
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 f960 	bl	8004808 <USB_SetDevSpeed>
 8004548:	e003      	b.n	8004552 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800454a:	2103      	movs	r1, #3
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f000 f95b 	bl	8004808 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004552:	2110      	movs	r1, #16
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f000 f8f3 	bl	8004740 <USB_FlushTxFifo>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d001      	beq.n	8004564 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f000 f91f 	bl	80047a8 <USB_FlushRxFifo>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d001      	beq.n	8004574 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800457a:	461a      	mov	r2, r3
 800457c:	2300      	movs	r3, #0
 800457e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004586:	461a      	mov	r2, r3
 8004588:	2300      	movs	r3, #0
 800458a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004592:	461a      	mov	r2, r3
 8004594:	2300      	movs	r3, #0
 8004596:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004598:	2300      	movs	r3, #0
 800459a:	613b      	str	r3, [r7, #16]
 800459c:	e043      	b.n	8004626 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	015a      	lsls	r2, r3, #5
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	4413      	add	r3, r2
 80045a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045b4:	d118      	bne.n	80045e8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d10a      	bne.n	80045d2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	015a      	lsls	r2, r3, #5
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	4413      	add	r3, r2
 80045c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045c8:	461a      	mov	r2, r3
 80045ca:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80045ce:	6013      	str	r3, [r2, #0]
 80045d0:	e013      	b.n	80045fa <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	015a      	lsls	r2, r3, #5
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	4413      	add	r3, r2
 80045da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045de:	461a      	mov	r2, r3
 80045e0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80045e4:	6013      	str	r3, [r2, #0]
 80045e6:	e008      	b.n	80045fa <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	015a      	lsls	r2, r3, #5
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	4413      	add	r3, r2
 80045f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045f4:	461a      	mov	r2, r3
 80045f6:	2300      	movs	r3, #0
 80045f8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	015a      	lsls	r2, r3, #5
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	4413      	add	r3, r2
 8004602:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004606:	461a      	mov	r2, r3
 8004608:	2300      	movs	r3, #0
 800460a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	015a      	lsls	r2, r3, #5
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	4413      	add	r3, r2
 8004614:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004618:	461a      	mov	r2, r3
 800461a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800461e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	3301      	adds	r3, #1
 8004624:	613b      	str	r3, [r7, #16]
 8004626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004628:	693a      	ldr	r2, [r7, #16]
 800462a:	429a      	cmp	r2, r3
 800462c:	d3b7      	bcc.n	800459e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800462e:	2300      	movs	r3, #0
 8004630:	613b      	str	r3, [r7, #16]
 8004632:	e043      	b.n	80046bc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	015a      	lsls	r2, r3, #5
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	4413      	add	r3, r2
 800463c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004646:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800464a:	d118      	bne.n	800467e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d10a      	bne.n	8004668 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	015a      	lsls	r2, r3, #5
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	4413      	add	r3, r2
 800465a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800465e:	461a      	mov	r2, r3
 8004660:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004664:	6013      	str	r3, [r2, #0]
 8004666:	e013      	b.n	8004690 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	015a      	lsls	r2, r3, #5
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	4413      	add	r3, r2
 8004670:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004674:	461a      	mov	r2, r3
 8004676:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800467a:	6013      	str	r3, [r2, #0]
 800467c:	e008      	b.n	8004690 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	015a      	lsls	r2, r3, #5
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	4413      	add	r3, r2
 8004686:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800468a:	461a      	mov	r2, r3
 800468c:	2300      	movs	r3, #0
 800468e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	015a      	lsls	r2, r3, #5
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	4413      	add	r3, r2
 8004698:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800469c:	461a      	mov	r2, r3
 800469e:	2300      	movs	r3, #0
 80046a0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	015a      	lsls	r2, r3, #5
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	4413      	add	r3, r2
 80046aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046ae:	461a      	mov	r2, r3
 80046b0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80046b4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	3301      	adds	r3, #1
 80046ba:	613b      	str	r3, [r7, #16]
 80046bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046be:	693a      	ldr	r2, [r7, #16]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d3b7      	bcc.n	8004634 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046ca:	691b      	ldr	r3, [r3, #16]
 80046cc:	68fa      	ldr	r2, [r7, #12]
 80046ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046d6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80046e4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80046e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d105      	bne.n	80046f8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	699b      	ldr	r3, [r3, #24]
 80046f0:	f043 0210 	orr.w	r2, r3, #16
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	699a      	ldr	r2, [r3, #24]
 80046fc:	4b0f      	ldr	r3, [pc, #60]	; (800473c <USB_DevInit+0x2c4>)
 80046fe:	4313      	orrs	r3, r2
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004704:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004706:	2b00      	cmp	r3, #0
 8004708:	d005      	beq.n	8004716 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	699b      	ldr	r3, [r3, #24]
 800470e:	f043 0208 	orr.w	r2, r3, #8
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004716:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004718:	2b01      	cmp	r3, #1
 800471a:	d107      	bne.n	800472c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	699b      	ldr	r3, [r3, #24]
 8004720:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004724:	f043 0304 	orr.w	r3, r3, #4
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800472c:	7dfb      	ldrb	r3, [r7, #23]
}
 800472e:	4618      	mov	r0, r3
 8004730:	3718      	adds	r7, #24
 8004732:	46bd      	mov	sp, r7
 8004734:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004738:	b004      	add	sp, #16
 800473a:	4770      	bx	lr
 800473c:	803c3800 	.word	0x803c3800

08004740 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004740:	b480      	push	{r7}
 8004742:	b085      	sub	sp, #20
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800474a:	2300      	movs	r3, #0
 800474c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	3301      	adds	r3, #1
 8004752:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	4a13      	ldr	r2, [pc, #76]	; (80047a4 <USB_FlushTxFifo+0x64>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d901      	bls.n	8004760 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800475c:	2303      	movs	r3, #3
 800475e:	e01b      	b.n	8004798 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	691b      	ldr	r3, [r3, #16]
 8004764:	2b00      	cmp	r3, #0
 8004766:	daf2      	bge.n	800474e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004768:	2300      	movs	r3, #0
 800476a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	019b      	lsls	r3, r3, #6
 8004770:	f043 0220 	orr.w	r2, r3, #32
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	3301      	adds	r3, #1
 800477c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	4a08      	ldr	r2, [pc, #32]	; (80047a4 <USB_FlushTxFifo+0x64>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d901      	bls.n	800478a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	e006      	b.n	8004798 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	f003 0320 	and.w	r3, r3, #32
 8004792:	2b20      	cmp	r3, #32
 8004794:	d0f0      	beq.n	8004778 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004796:	2300      	movs	r3, #0
}
 8004798:	4618      	mov	r0, r3
 800479a:	3714      	adds	r7, #20
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr
 80047a4:	00030d40 	.word	0x00030d40

080047a8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b085      	sub	sp, #20
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80047b0:	2300      	movs	r3, #0
 80047b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	3301      	adds	r3, #1
 80047b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	4a11      	ldr	r2, [pc, #68]	; (8004804 <USB_FlushRxFifo+0x5c>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d901      	bls.n	80047c6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e018      	b.n	80047f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	691b      	ldr	r3, [r3, #16]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	daf2      	bge.n	80047b4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80047ce:	2300      	movs	r3, #0
 80047d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2210      	movs	r2, #16
 80047d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	3301      	adds	r3, #1
 80047dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	4a08      	ldr	r2, [pc, #32]	; (8004804 <USB_FlushRxFifo+0x5c>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d901      	bls.n	80047ea <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e006      	b.n	80047f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	f003 0310 	and.w	r3, r3, #16
 80047f2:	2b10      	cmp	r3, #16
 80047f4:	d0f0      	beq.n	80047d8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80047f6:	2300      	movs	r3, #0
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3714      	adds	r7, #20
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr
 8004804:	00030d40 	.word	0x00030d40

08004808 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004808:	b480      	push	{r7}
 800480a:	b085      	sub	sp, #20
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	460b      	mov	r3, r1
 8004812:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	78fb      	ldrb	r3, [r7, #3]
 8004822:	68f9      	ldr	r1, [r7, #12]
 8004824:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004828:	4313      	orrs	r3, r2
 800482a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800482c:	2300      	movs	r3, #0
}
 800482e:	4618      	mov	r0, r3
 8004830:	3714      	adds	r7, #20
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr

0800483a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800483a:	b480      	push	{r7}
 800483c:	b087      	sub	sp, #28
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	f003 0306 	and.w	r3, r3, #6
 8004852:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d102      	bne.n	8004860 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800485a:	2300      	movs	r3, #0
 800485c:	75fb      	strb	r3, [r7, #23]
 800485e:	e00a      	b.n	8004876 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2b02      	cmp	r3, #2
 8004864:	d002      	beq.n	800486c <USB_GetDevSpeed+0x32>
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2b06      	cmp	r3, #6
 800486a:	d102      	bne.n	8004872 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800486c:	2302      	movs	r3, #2
 800486e:	75fb      	strb	r3, [r7, #23]
 8004870:	e001      	b.n	8004876 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004872:	230f      	movs	r3, #15
 8004874:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004876:	7dfb      	ldrb	r3, [r7, #23]
}
 8004878:	4618      	mov	r0, r3
 800487a:	371c      	adds	r7, #28
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004884:	b480      	push	{r7}
 8004886:	b085      	sub	sp, #20
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	785b      	ldrb	r3, [r3, #1]
 800489c:	2b01      	cmp	r3, #1
 800489e:	d13a      	bne.n	8004916 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048a6:	69da      	ldr	r2, [r3, #28]
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	f003 030f 	and.w	r3, r3, #15
 80048b0:	2101      	movs	r1, #1
 80048b2:	fa01 f303 	lsl.w	r3, r1, r3
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	68f9      	ldr	r1, [r7, #12]
 80048ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048be:	4313      	orrs	r3, r2
 80048c0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	015a      	lsls	r2, r3, #5
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	4413      	add	r3, r2
 80048ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d155      	bne.n	8004984 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	015a      	lsls	r2, r3, #5
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	4413      	add	r3, r2
 80048e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	791b      	ldrb	r3, [r3, #4]
 80048f2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80048f4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	059b      	lsls	r3, r3, #22
 80048fa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80048fc:	4313      	orrs	r3, r2
 80048fe:	68ba      	ldr	r2, [r7, #8]
 8004900:	0151      	lsls	r1, r2, #5
 8004902:	68fa      	ldr	r2, [r7, #12]
 8004904:	440a      	add	r2, r1
 8004906:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800490a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800490e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004912:	6013      	str	r3, [r2, #0]
 8004914:	e036      	b.n	8004984 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800491c:	69da      	ldr	r2, [r3, #28]
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	f003 030f 	and.w	r3, r3, #15
 8004926:	2101      	movs	r1, #1
 8004928:	fa01 f303 	lsl.w	r3, r1, r3
 800492c:	041b      	lsls	r3, r3, #16
 800492e:	68f9      	ldr	r1, [r7, #12]
 8004930:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004934:	4313      	orrs	r3, r2
 8004936:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	015a      	lsls	r2, r3, #5
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	4413      	add	r3, r2
 8004940:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800494a:	2b00      	cmp	r3, #0
 800494c:	d11a      	bne.n	8004984 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	015a      	lsls	r2, r3, #5
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	4413      	add	r3, r2
 8004956:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	791b      	ldrb	r3, [r3, #4]
 8004968:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800496a:	430b      	orrs	r3, r1
 800496c:	4313      	orrs	r3, r2
 800496e:	68ba      	ldr	r2, [r7, #8]
 8004970:	0151      	lsls	r1, r2, #5
 8004972:	68fa      	ldr	r2, [r7, #12]
 8004974:	440a      	add	r2, r1
 8004976:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800497a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800497e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004982:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004984:	2300      	movs	r3, #0
}
 8004986:	4618      	mov	r0, r3
 8004988:	3714      	adds	r7, #20
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr
	...

08004994 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004994:	b480      	push	{r7}
 8004996:	b085      	sub	sp, #20
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	781b      	ldrb	r3, [r3, #0]
 80049a6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	785b      	ldrb	r3, [r3, #1]
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d161      	bne.n	8004a74 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	015a      	lsls	r2, r3, #5
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	4413      	add	r3, r2
 80049b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049c6:	d11f      	bne.n	8004a08 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	015a      	lsls	r2, r3, #5
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	4413      	add	r3, r2
 80049d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	68ba      	ldr	r2, [r7, #8]
 80049d8:	0151      	lsls	r1, r2, #5
 80049da:	68fa      	ldr	r2, [r7, #12]
 80049dc:	440a      	add	r2, r1
 80049de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049e2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80049e6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	015a      	lsls	r2, r3, #5
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	4413      	add	r3, r2
 80049f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	68ba      	ldr	r2, [r7, #8]
 80049f8:	0151      	lsls	r1, r2, #5
 80049fa:	68fa      	ldr	r2, [r7, #12]
 80049fc:	440a      	add	r2, r1
 80049fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a02:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a06:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	f003 030f 	and.w	r3, r3, #15
 8004a18:	2101      	movs	r1, #1
 8004a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	43db      	mvns	r3, r3
 8004a22:	68f9      	ldr	r1, [r7, #12]
 8004a24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a28:	4013      	ands	r3, r2
 8004a2a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a32:	69da      	ldr	r2, [r3, #28]
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	781b      	ldrb	r3, [r3, #0]
 8004a38:	f003 030f 	and.w	r3, r3, #15
 8004a3c:	2101      	movs	r1, #1
 8004a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	43db      	mvns	r3, r3
 8004a46:	68f9      	ldr	r1, [r7, #12]
 8004a48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	015a      	lsls	r2, r3, #5
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	4413      	add	r3, r2
 8004a58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	0159      	lsls	r1, r3, #5
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	440b      	add	r3, r1
 8004a66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a6a:	4619      	mov	r1, r3
 8004a6c:	4b35      	ldr	r3, [pc, #212]	; (8004b44 <USB_DeactivateEndpoint+0x1b0>)
 8004a6e:	4013      	ands	r3, r2
 8004a70:	600b      	str	r3, [r1, #0]
 8004a72:	e060      	b.n	8004b36 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	015a      	lsls	r2, r3, #5
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	4413      	add	r3, r2
 8004a7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a8a:	d11f      	bne.n	8004acc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	015a      	lsls	r2, r3, #5
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	4413      	add	r3, r2
 8004a94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68ba      	ldr	r2, [r7, #8]
 8004a9c:	0151      	lsls	r1, r2, #5
 8004a9e:	68fa      	ldr	r2, [r7, #12]
 8004aa0:	440a      	add	r2, r1
 8004aa2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004aa6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004aaa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	015a      	lsls	r2, r3, #5
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	4413      	add	r3, r2
 8004ab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	68ba      	ldr	r2, [r7, #8]
 8004abc:	0151      	lsls	r1, r2, #5
 8004abe:	68fa      	ldr	r2, [r7, #12]
 8004ac0:	440a      	add	r2, r1
 8004ac2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ac6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004aca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ad2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	781b      	ldrb	r3, [r3, #0]
 8004ad8:	f003 030f 	and.w	r3, r3, #15
 8004adc:	2101      	movs	r1, #1
 8004ade:	fa01 f303 	lsl.w	r3, r1, r3
 8004ae2:	041b      	lsls	r3, r3, #16
 8004ae4:	43db      	mvns	r3, r3
 8004ae6:	68f9      	ldr	r1, [r7, #12]
 8004ae8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004aec:	4013      	ands	r3, r2
 8004aee:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004af6:	69da      	ldr	r2, [r3, #28]
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	f003 030f 	and.w	r3, r3, #15
 8004b00:	2101      	movs	r1, #1
 8004b02:	fa01 f303 	lsl.w	r3, r1, r3
 8004b06:	041b      	lsls	r3, r3, #16
 8004b08:	43db      	mvns	r3, r3
 8004b0a:	68f9      	ldr	r1, [r7, #12]
 8004b0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b10:	4013      	ands	r3, r2
 8004b12:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	015a      	lsls	r2, r3, #5
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	4413      	add	r3, r2
 8004b1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	0159      	lsls	r1, r3, #5
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	440b      	add	r3, r1
 8004b2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b2e:	4619      	mov	r1, r3
 8004b30:	4b05      	ldr	r3, [pc, #20]	; (8004b48 <USB_DeactivateEndpoint+0x1b4>)
 8004b32:	4013      	ands	r3, r2
 8004b34:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004b36:	2300      	movs	r3, #0
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3714      	adds	r7, #20
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr
 8004b44:	ec337800 	.word	0xec337800
 8004b48:	eff37800 	.word	0xeff37800

08004b4c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b08a      	sub	sp, #40	; 0x28
 8004b50:	af02      	add	r7, sp, #8
 8004b52:	60f8      	str	r0, [r7, #12]
 8004b54:	60b9      	str	r1, [r7, #8]
 8004b56:	4613      	mov	r3, r2
 8004b58:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	781b      	ldrb	r3, [r3, #0]
 8004b62:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	785b      	ldrb	r3, [r3, #1]
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	f040 815c 	bne.w	8004e26 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	699b      	ldr	r3, [r3, #24]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d132      	bne.n	8004bdc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004b76:	69bb      	ldr	r3, [r7, #24]
 8004b78:	015a      	lsls	r2, r3, #5
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	4413      	add	r3, r2
 8004b7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b82:	691b      	ldr	r3, [r3, #16]
 8004b84:	69ba      	ldr	r2, [r7, #24]
 8004b86:	0151      	lsls	r1, r2, #5
 8004b88:	69fa      	ldr	r2, [r7, #28]
 8004b8a:	440a      	add	r2, r1
 8004b8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b90:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004b94:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004b98:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004b9a:	69bb      	ldr	r3, [r7, #24]
 8004b9c:	015a      	lsls	r2, r3, #5
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	4413      	add	r3, r2
 8004ba2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ba6:	691b      	ldr	r3, [r3, #16]
 8004ba8:	69ba      	ldr	r2, [r7, #24]
 8004baa:	0151      	lsls	r1, r2, #5
 8004bac:	69fa      	ldr	r2, [r7, #28]
 8004bae:	440a      	add	r2, r1
 8004bb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bb4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004bb8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004bba:	69bb      	ldr	r3, [r7, #24]
 8004bbc:	015a      	lsls	r2, r3, #5
 8004bbe:	69fb      	ldr	r3, [r7, #28]
 8004bc0:	4413      	add	r3, r2
 8004bc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bc6:	691b      	ldr	r3, [r3, #16]
 8004bc8:	69ba      	ldr	r2, [r7, #24]
 8004bca:	0151      	lsls	r1, r2, #5
 8004bcc:	69fa      	ldr	r2, [r7, #28]
 8004bce:	440a      	add	r2, r1
 8004bd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bd4:	0cdb      	lsrs	r3, r3, #19
 8004bd6:	04db      	lsls	r3, r3, #19
 8004bd8:	6113      	str	r3, [r2, #16]
 8004bda:	e074      	b.n	8004cc6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004bdc:	69bb      	ldr	r3, [r7, #24]
 8004bde:	015a      	lsls	r2, r3, #5
 8004be0:	69fb      	ldr	r3, [r7, #28]
 8004be2:	4413      	add	r3, r2
 8004be4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	69ba      	ldr	r2, [r7, #24]
 8004bec:	0151      	lsls	r1, r2, #5
 8004bee:	69fa      	ldr	r2, [r7, #28]
 8004bf0:	440a      	add	r2, r1
 8004bf2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bf6:	0cdb      	lsrs	r3, r3, #19
 8004bf8:	04db      	lsls	r3, r3, #19
 8004bfa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004bfc:	69bb      	ldr	r3, [r7, #24]
 8004bfe:	015a      	lsls	r2, r3, #5
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	4413      	add	r3, r2
 8004c04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	69ba      	ldr	r2, [r7, #24]
 8004c0c:	0151      	lsls	r1, r2, #5
 8004c0e:	69fa      	ldr	r2, [r7, #28]
 8004c10:	440a      	add	r2, r1
 8004c12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c16:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004c1a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004c1e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	015a      	lsls	r2, r3, #5
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	4413      	add	r3, r2
 8004c28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c2c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	6999      	ldr	r1, [r3, #24]
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	440b      	add	r3, r1
 8004c38:	1e59      	subs	r1, r3, #1
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	68db      	ldr	r3, [r3, #12]
 8004c3e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c42:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004c44:	4b9d      	ldr	r3, [pc, #628]	; (8004ebc <USB_EPStartXfer+0x370>)
 8004c46:	400b      	ands	r3, r1
 8004c48:	69b9      	ldr	r1, [r7, #24]
 8004c4a:	0148      	lsls	r0, r1, #5
 8004c4c:	69f9      	ldr	r1, [r7, #28]
 8004c4e:	4401      	add	r1, r0
 8004c50:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004c54:	4313      	orrs	r3, r2
 8004c56:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004c58:	69bb      	ldr	r3, [r7, #24]
 8004c5a:	015a      	lsls	r2, r3, #5
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	4413      	add	r3, r2
 8004c60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c64:	691a      	ldr	r2, [r3, #16]
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	699b      	ldr	r3, [r3, #24]
 8004c6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c6e:	69b9      	ldr	r1, [r7, #24]
 8004c70:	0148      	lsls	r0, r1, #5
 8004c72:	69f9      	ldr	r1, [r7, #28]
 8004c74:	4401      	add	r1, r0
 8004c76:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	791b      	ldrb	r3, [r3, #4]
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d11f      	bne.n	8004cc6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004c86:	69bb      	ldr	r3, [r7, #24]
 8004c88:	015a      	lsls	r2, r3, #5
 8004c8a:	69fb      	ldr	r3, [r7, #28]
 8004c8c:	4413      	add	r3, r2
 8004c8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c92:	691b      	ldr	r3, [r3, #16]
 8004c94:	69ba      	ldr	r2, [r7, #24]
 8004c96:	0151      	lsls	r1, r2, #5
 8004c98:	69fa      	ldr	r2, [r7, #28]
 8004c9a:	440a      	add	r2, r1
 8004c9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ca0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004ca4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004ca6:	69bb      	ldr	r3, [r7, #24]
 8004ca8:	015a      	lsls	r2, r3, #5
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	4413      	add	r3, r2
 8004cae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cb2:	691b      	ldr	r3, [r3, #16]
 8004cb4:	69ba      	ldr	r2, [r7, #24]
 8004cb6:	0151      	lsls	r1, r2, #5
 8004cb8:	69fa      	ldr	r2, [r7, #28]
 8004cba:	440a      	add	r2, r1
 8004cbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cc0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004cc4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004cc6:	79fb      	ldrb	r3, [r7, #7]
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d14b      	bne.n	8004d64 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	695b      	ldr	r3, [r3, #20]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d009      	beq.n	8004ce8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004cd4:	69bb      	ldr	r3, [r7, #24]
 8004cd6:	015a      	lsls	r2, r3, #5
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	4413      	add	r3, r2
 8004cdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	695b      	ldr	r3, [r3, #20]
 8004ce6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	791b      	ldrb	r3, [r3, #4]
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d128      	bne.n	8004d42 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d110      	bne.n	8004d22 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004d00:	69bb      	ldr	r3, [r7, #24]
 8004d02:	015a      	lsls	r2, r3, #5
 8004d04:	69fb      	ldr	r3, [r7, #28]
 8004d06:	4413      	add	r3, r2
 8004d08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	69ba      	ldr	r2, [r7, #24]
 8004d10:	0151      	lsls	r1, r2, #5
 8004d12:	69fa      	ldr	r2, [r7, #28]
 8004d14:	440a      	add	r2, r1
 8004d16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d1a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d1e:	6013      	str	r3, [r2, #0]
 8004d20:	e00f      	b.n	8004d42 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004d22:	69bb      	ldr	r3, [r7, #24]
 8004d24:	015a      	lsls	r2, r3, #5
 8004d26:	69fb      	ldr	r3, [r7, #28]
 8004d28:	4413      	add	r3, r2
 8004d2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	69ba      	ldr	r2, [r7, #24]
 8004d32:	0151      	lsls	r1, r2, #5
 8004d34:	69fa      	ldr	r2, [r7, #28]
 8004d36:	440a      	add	r2, r1
 8004d38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d40:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004d42:	69bb      	ldr	r3, [r7, #24]
 8004d44:	015a      	lsls	r2, r3, #5
 8004d46:	69fb      	ldr	r3, [r7, #28]
 8004d48:	4413      	add	r3, r2
 8004d4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	69ba      	ldr	r2, [r7, #24]
 8004d52:	0151      	lsls	r1, r2, #5
 8004d54:	69fa      	ldr	r2, [r7, #28]
 8004d56:	440a      	add	r2, r1
 8004d58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d5c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d60:	6013      	str	r3, [r2, #0]
 8004d62:	e133      	b.n	8004fcc <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004d64:	69bb      	ldr	r3, [r7, #24]
 8004d66:	015a      	lsls	r2, r3, #5
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	4413      	add	r3, r2
 8004d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	69ba      	ldr	r2, [r7, #24]
 8004d74:	0151      	lsls	r1, r2, #5
 8004d76:	69fa      	ldr	r2, [r7, #28]
 8004d78:	440a      	add	r2, r1
 8004d7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d7e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d82:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	791b      	ldrb	r3, [r3, #4]
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d015      	beq.n	8004db8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	699b      	ldr	r3, [r3, #24]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	f000 811b 	beq.w	8004fcc <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	f003 030f 	and.w	r3, r3, #15
 8004da6:	2101      	movs	r1, #1
 8004da8:	fa01 f303 	lsl.w	r3, r1, r3
 8004dac:	69f9      	ldr	r1, [r7, #28]
 8004dae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004db2:	4313      	orrs	r3, r2
 8004db4:	634b      	str	r3, [r1, #52]	; 0x34
 8004db6:	e109      	b.n	8004fcc <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004db8:	69fb      	ldr	r3, [r7, #28]
 8004dba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d110      	bne.n	8004dea <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004dc8:	69bb      	ldr	r3, [r7, #24]
 8004dca:	015a      	lsls	r2, r3, #5
 8004dcc:	69fb      	ldr	r3, [r7, #28]
 8004dce:	4413      	add	r3, r2
 8004dd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	69ba      	ldr	r2, [r7, #24]
 8004dd8:	0151      	lsls	r1, r2, #5
 8004dda:	69fa      	ldr	r2, [r7, #28]
 8004ddc:	440a      	add	r2, r1
 8004dde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004de2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004de6:	6013      	str	r3, [r2, #0]
 8004de8:	e00f      	b.n	8004e0a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004dea:	69bb      	ldr	r3, [r7, #24]
 8004dec:	015a      	lsls	r2, r3, #5
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	4413      	add	r3, r2
 8004df2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	69ba      	ldr	r2, [r7, #24]
 8004dfa:	0151      	lsls	r1, r2, #5
 8004dfc:	69fa      	ldr	r2, [r7, #28]
 8004dfe:	440a      	add	r2, r1
 8004e00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e08:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	6919      	ldr	r1, [r3, #16]
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	781a      	ldrb	r2, [r3, #0]
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	699b      	ldr	r3, [r3, #24]
 8004e16:	b298      	uxth	r0, r3
 8004e18:	79fb      	ldrb	r3, [r7, #7]
 8004e1a:	9300      	str	r3, [sp, #0]
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	68f8      	ldr	r0, [r7, #12]
 8004e20:	f000 fade 	bl	80053e0 <USB_WritePacket>
 8004e24:	e0d2      	b.n	8004fcc <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	015a      	lsls	r2, r3, #5
 8004e2a:	69fb      	ldr	r3, [r7, #28]
 8004e2c:	4413      	add	r3, r2
 8004e2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e32:	691b      	ldr	r3, [r3, #16]
 8004e34:	69ba      	ldr	r2, [r7, #24]
 8004e36:	0151      	lsls	r1, r2, #5
 8004e38:	69fa      	ldr	r2, [r7, #28]
 8004e3a:	440a      	add	r2, r1
 8004e3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e40:	0cdb      	lsrs	r3, r3, #19
 8004e42:	04db      	lsls	r3, r3, #19
 8004e44:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004e46:	69bb      	ldr	r3, [r7, #24]
 8004e48:	015a      	lsls	r2, r3, #5
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	4413      	add	r3, r2
 8004e4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e52:	691b      	ldr	r3, [r3, #16]
 8004e54:	69ba      	ldr	r2, [r7, #24]
 8004e56:	0151      	lsls	r1, r2, #5
 8004e58:	69fa      	ldr	r2, [r7, #28]
 8004e5a:	440a      	add	r2, r1
 8004e5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e60:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e64:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e68:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	699b      	ldr	r3, [r3, #24]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d126      	bne.n	8004ec0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004e72:	69bb      	ldr	r3, [r7, #24]
 8004e74:	015a      	lsls	r2, r3, #5
 8004e76:	69fb      	ldr	r3, [r7, #28]
 8004e78:	4413      	add	r3, r2
 8004e7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e7e:	691a      	ldr	r2, [r3, #16]
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e88:	69b9      	ldr	r1, [r7, #24]
 8004e8a:	0148      	lsls	r0, r1, #5
 8004e8c:	69f9      	ldr	r1, [r7, #28]
 8004e8e:	4401      	add	r1, r0
 8004e90:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004e94:	4313      	orrs	r3, r2
 8004e96:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004e98:	69bb      	ldr	r3, [r7, #24]
 8004e9a:	015a      	lsls	r2, r3, #5
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	4413      	add	r3, r2
 8004ea0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ea4:	691b      	ldr	r3, [r3, #16]
 8004ea6:	69ba      	ldr	r2, [r7, #24]
 8004ea8:	0151      	lsls	r1, r2, #5
 8004eaa:	69fa      	ldr	r2, [r7, #28]
 8004eac:	440a      	add	r2, r1
 8004eae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004eb2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004eb6:	6113      	str	r3, [r2, #16]
 8004eb8:	e03a      	b.n	8004f30 <USB_EPStartXfer+0x3e4>
 8004eba:	bf00      	nop
 8004ebc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	699a      	ldr	r2, [r3, #24]
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	4413      	add	r3, r2
 8004eca:	1e5a      	subs	r2, r3, #1
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ed4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	8afa      	ldrh	r2, [r7, #22]
 8004edc:	fb03 f202 	mul.w	r2, r3, r2
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004ee4:	69bb      	ldr	r3, [r7, #24]
 8004ee6:	015a      	lsls	r2, r3, #5
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	4413      	add	r3, r2
 8004eec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ef0:	691a      	ldr	r2, [r3, #16]
 8004ef2:	8afb      	ldrh	r3, [r7, #22]
 8004ef4:	04d9      	lsls	r1, r3, #19
 8004ef6:	4b38      	ldr	r3, [pc, #224]	; (8004fd8 <USB_EPStartXfer+0x48c>)
 8004ef8:	400b      	ands	r3, r1
 8004efa:	69b9      	ldr	r1, [r7, #24]
 8004efc:	0148      	lsls	r0, r1, #5
 8004efe:	69f9      	ldr	r1, [r7, #28]
 8004f00:	4401      	add	r1, r0
 8004f02:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004f06:	4313      	orrs	r3, r2
 8004f08:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004f0a:	69bb      	ldr	r3, [r7, #24]
 8004f0c:	015a      	lsls	r2, r3, #5
 8004f0e:	69fb      	ldr	r3, [r7, #28]
 8004f10:	4413      	add	r3, r2
 8004f12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f16:	691a      	ldr	r2, [r3, #16]
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	69db      	ldr	r3, [r3, #28]
 8004f1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f20:	69b9      	ldr	r1, [r7, #24]
 8004f22:	0148      	lsls	r0, r1, #5
 8004f24:	69f9      	ldr	r1, [r7, #28]
 8004f26:	4401      	add	r1, r0
 8004f28:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004f30:	79fb      	ldrb	r3, [r7, #7]
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d10d      	bne.n	8004f52 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	691b      	ldr	r3, [r3, #16]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d009      	beq.n	8004f52 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	6919      	ldr	r1, [r3, #16]
 8004f42:	69bb      	ldr	r3, [r7, #24]
 8004f44:	015a      	lsls	r2, r3, #5
 8004f46:	69fb      	ldr	r3, [r7, #28]
 8004f48:	4413      	add	r3, r2
 8004f4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f4e:	460a      	mov	r2, r1
 8004f50:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	791b      	ldrb	r3, [r3, #4]
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d128      	bne.n	8004fac <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d110      	bne.n	8004f8c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004f6a:	69bb      	ldr	r3, [r7, #24]
 8004f6c:	015a      	lsls	r2, r3, #5
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	4413      	add	r3, r2
 8004f72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	69ba      	ldr	r2, [r7, #24]
 8004f7a:	0151      	lsls	r1, r2, #5
 8004f7c:	69fa      	ldr	r2, [r7, #28]
 8004f7e:	440a      	add	r2, r1
 8004f80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f84:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f88:	6013      	str	r3, [r2, #0]
 8004f8a:	e00f      	b.n	8004fac <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004f8c:	69bb      	ldr	r3, [r7, #24]
 8004f8e:	015a      	lsls	r2, r3, #5
 8004f90:	69fb      	ldr	r3, [r7, #28]
 8004f92:	4413      	add	r3, r2
 8004f94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	69ba      	ldr	r2, [r7, #24]
 8004f9c:	0151      	lsls	r1, r2, #5
 8004f9e:	69fa      	ldr	r2, [r7, #28]
 8004fa0:	440a      	add	r2, r1
 8004fa2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004faa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	015a      	lsls	r2, r3, #5
 8004fb0:	69fb      	ldr	r3, [r7, #28]
 8004fb2:	4413      	add	r3, r2
 8004fb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	69ba      	ldr	r2, [r7, #24]
 8004fbc:	0151      	lsls	r1, r2, #5
 8004fbe:	69fa      	ldr	r2, [r7, #28]
 8004fc0:	440a      	add	r2, r1
 8004fc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fc6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004fca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004fcc:	2300      	movs	r3, #0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3720      	adds	r7, #32
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	1ff80000 	.word	0x1ff80000

08004fdc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b087      	sub	sp, #28
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	60f8      	str	r0, [r7, #12]
 8004fe4:	60b9      	str	r1, [r7, #8]
 8004fe6:	4613      	mov	r3, r2
 8004fe8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	785b      	ldrb	r3, [r3, #1]
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	f040 80ce 	bne.w	800519a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	699b      	ldr	r3, [r3, #24]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d132      	bne.n	800506c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	015a      	lsls	r2, r3, #5
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	4413      	add	r3, r2
 800500e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005012:	691b      	ldr	r3, [r3, #16]
 8005014:	693a      	ldr	r2, [r7, #16]
 8005016:	0151      	lsls	r1, r2, #5
 8005018:	697a      	ldr	r2, [r7, #20]
 800501a:	440a      	add	r2, r1
 800501c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005020:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005024:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005028:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	015a      	lsls	r2, r3, #5
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	4413      	add	r3, r2
 8005032:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005036:	691b      	ldr	r3, [r3, #16]
 8005038:	693a      	ldr	r2, [r7, #16]
 800503a:	0151      	lsls	r1, r2, #5
 800503c:	697a      	ldr	r2, [r7, #20]
 800503e:	440a      	add	r2, r1
 8005040:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005044:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005048:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	015a      	lsls	r2, r3, #5
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	4413      	add	r3, r2
 8005052:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005056:	691b      	ldr	r3, [r3, #16]
 8005058:	693a      	ldr	r2, [r7, #16]
 800505a:	0151      	lsls	r1, r2, #5
 800505c:	697a      	ldr	r2, [r7, #20]
 800505e:	440a      	add	r2, r1
 8005060:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005064:	0cdb      	lsrs	r3, r3, #19
 8005066:	04db      	lsls	r3, r3, #19
 8005068:	6113      	str	r3, [r2, #16]
 800506a:	e04e      	b.n	800510a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	015a      	lsls	r2, r3, #5
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	4413      	add	r3, r2
 8005074:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	693a      	ldr	r2, [r7, #16]
 800507c:	0151      	lsls	r1, r2, #5
 800507e:	697a      	ldr	r2, [r7, #20]
 8005080:	440a      	add	r2, r1
 8005082:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005086:	0cdb      	lsrs	r3, r3, #19
 8005088:	04db      	lsls	r3, r3, #19
 800508a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	015a      	lsls	r2, r3, #5
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	4413      	add	r3, r2
 8005094:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005098:	691b      	ldr	r3, [r3, #16]
 800509a:	693a      	ldr	r2, [r7, #16]
 800509c:	0151      	lsls	r1, r2, #5
 800509e:	697a      	ldr	r2, [r7, #20]
 80050a0:	440a      	add	r2, r1
 80050a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050a6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80050aa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80050ae:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	699a      	ldr	r2, [r3, #24]
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	68db      	ldr	r3, [r3, #12]
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d903      	bls.n	80050c4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	68da      	ldr	r2, [r3, #12]
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	015a      	lsls	r2, r3, #5
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	4413      	add	r3, r2
 80050cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050d0:	691b      	ldr	r3, [r3, #16]
 80050d2:	693a      	ldr	r2, [r7, #16]
 80050d4:	0151      	lsls	r1, r2, #5
 80050d6:	697a      	ldr	r2, [r7, #20]
 80050d8:	440a      	add	r2, r1
 80050da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80050e2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	015a      	lsls	r2, r3, #5
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	4413      	add	r3, r2
 80050ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050f0:	691a      	ldr	r2, [r3, #16]
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	699b      	ldr	r3, [r3, #24]
 80050f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050fa:	6939      	ldr	r1, [r7, #16]
 80050fc:	0148      	lsls	r0, r1, #5
 80050fe:	6979      	ldr	r1, [r7, #20]
 8005100:	4401      	add	r1, r0
 8005102:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005106:	4313      	orrs	r3, r2
 8005108:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800510a:	79fb      	ldrb	r3, [r7, #7]
 800510c:	2b01      	cmp	r3, #1
 800510e:	d11e      	bne.n	800514e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	695b      	ldr	r3, [r3, #20]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d009      	beq.n	800512c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	015a      	lsls	r2, r3, #5
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	4413      	add	r3, r2
 8005120:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005124:	461a      	mov	r2, r3
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	695b      	ldr	r3, [r3, #20]
 800512a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	015a      	lsls	r2, r3, #5
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	4413      	add	r3, r2
 8005134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	693a      	ldr	r2, [r7, #16]
 800513c:	0151      	lsls	r1, r2, #5
 800513e:	697a      	ldr	r2, [r7, #20]
 8005140:	440a      	add	r2, r1
 8005142:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005146:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800514a:	6013      	str	r3, [r2, #0]
 800514c:	e097      	b.n	800527e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	015a      	lsls	r2, r3, #5
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	4413      	add	r3, r2
 8005156:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	693a      	ldr	r2, [r7, #16]
 800515e:	0151      	lsls	r1, r2, #5
 8005160:	697a      	ldr	r2, [r7, #20]
 8005162:	440a      	add	r2, r1
 8005164:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005168:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800516c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	699b      	ldr	r3, [r3, #24]
 8005172:	2b00      	cmp	r3, #0
 8005174:	f000 8083 	beq.w	800527e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800517e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	f003 030f 	and.w	r3, r3, #15
 8005188:	2101      	movs	r1, #1
 800518a:	fa01 f303 	lsl.w	r3, r1, r3
 800518e:	6979      	ldr	r1, [r7, #20]
 8005190:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005194:	4313      	orrs	r3, r2
 8005196:	634b      	str	r3, [r1, #52]	; 0x34
 8005198:	e071      	b.n	800527e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	015a      	lsls	r2, r3, #5
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	4413      	add	r3, r2
 80051a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051a6:	691b      	ldr	r3, [r3, #16]
 80051a8:	693a      	ldr	r2, [r7, #16]
 80051aa:	0151      	lsls	r1, r2, #5
 80051ac:	697a      	ldr	r2, [r7, #20]
 80051ae:	440a      	add	r2, r1
 80051b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051b4:	0cdb      	lsrs	r3, r3, #19
 80051b6:	04db      	lsls	r3, r3, #19
 80051b8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	015a      	lsls	r2, r3, #5
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	4413      	add	r3, r2
 80051c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051c6:	691b      	ldr	r3, [r3, #16]
 80051c8:	693a      	ldr	r2, [r7, #16]
 80051ca:	0151      	lsls	r1, r2, #5
 80051cc:	697a      	ldr	r2, [r7, #20]
 80051ce:	440a      	add	r2, r1
 80051d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051d4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80051d8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80051dc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	699b      	ldr	r3, [r3, #24]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d003      	beq.n	80051ee <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	68da      	ldr	r2, [r3, #12]
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	68da      	ldr	r2, [r3, #12]
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	015a      	lsls	r2, r3, #5
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	4413      	add	r3, r2
 80051fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005202:	691b      	ldr	r3, [r3, #16]
 8005204:	693a      	ldr	r2, [r7, #16]
 8005206:	0151      	lsls	r1, r2, #5
 8005208:	697a      	ldr	r2, [r7, #20]
 800520a:	440a      	add	r2, r1
 800520c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005210:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005214:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	015a      	lsls	r2, r3, #5
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	4413      	add	r3, r2
 800521e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005222:	691a      	ldr	r2, [r3, #16]
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	69db      	ldr	r3, [r3, #28]
 8005228:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800522c:	6939      	ldr	r1, [r7, #16]
 800522e:	0148      	lsls	r0, r1, #5
 8005230:	6979      	ldr	r1, [r7, #20]
 8005232:	4401      	add	r1, r0
 8005234:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005238:	4313      	orrs	r3, r2
 800523a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800523c:	79fb      	ldrb	r3, [r7, #7]
 800523e:	2b01      	cmp	r3, #1
 8005240:	d10d      	bne.n	800525e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	691b      	ldr	r3, [r3, #16]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d009      	beq.n	800525e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	6919      	ldr	r1, [r3, #16]
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	015a      	lsls	r2, r3, #5
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	4413      	add	r3, r2
 8005256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800525a:	460a      	mov	r2, r1
 800525c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	015a      	lsls	r2, r3, #5
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	4413      	add	r3, r2
 8005266:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	693a      	ldr	r2, [r7, #16]
 800526e:	0151      	lsls	r1, r2, #5
 8005270:	697a      	ldr	r2, [r7, #20]
 8005272:	440a      	add	r2, r1
 8005274:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005278:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800527c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800527e:	2300      	movs	r3, #0
}
 8005280:	4618      	mov	r0, r3
 8005282:	371c      	adds	r7, #28
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr

0800528c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800528c:	b480      	push	{r7}
 800528e:	b087      	sub	sp, #28
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005296:	2300      	movs	r3, #0
 8005298:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800529a:	2300      	movs	r3, #0
 800529c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	785b      	ldrb	r3, [r3, #1]
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d14a      	bne.n	8005340 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	015a      	lsls	r2, r3, #5
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	4413      	add	r3, r2
 80052b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052c2:	f040 8086 	bne.w	80053d2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	015a      	lsls	r2, r3, #5
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	4413      	add	r3, r2
 80052d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	683a      	ldr	r2, [r7, #0]
 80052d8:	7812      	ldrb	r2, [r2, #0]
 80052da:	0151      	lsls	r1, r2, #5
 80052dc:	693a      	ldr	r2, [r7, #16]
 80052de:	440a      	add	r2, r1
 80052e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052e4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80052e8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	781b      	ldrb	r3, [r3, #0]
 80052ee:	015a      	lsls	r2, r3, #5
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	4413      	add	r3, r2
 80052f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	683a      	ldr	r2, [r7, #0]
 80052fc:	7812      	ldrb	r2, [r2, #0]
 80052fe:	0151      	lsls	r1, r2, #5
 8005300:	693a      	ldr	r2, [r7, #16]
 8005302:	440a      	add	r2, r1
 8005304:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005308:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800530c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	3301      	adds	r3, #1
 8005312:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f242 7210 	movw	r2, #10000	; 0x2710
 800531a:	4293      	cmp	r3, r2
 800531c:	d902      	bls.n	8005324 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	75fb      	strb	r3, [r7, #23]
          break;
 8005322:	e056      	b.n	80053d2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	015a      	lsls	r2, r3, #5
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	4413      	add	r3, r2
 800532e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005338:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800533c:	d0e7      	beq.n	800530e <USB_EPStopXfer+0x82>
 800533e:	e048      	b.n	80053d2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	015a      	lsls	r2, r3, #5
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	4413      	add	r3, r2
 800534a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005354:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005358:	d13b      	bne.n	80053d2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	015a      	lsls	r2, r3, #5
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	4413      	add	r3, r2
 8005364:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	683a      	ldr	r2, [r7, #0]
 800536c:	7812      	ldrb	r2, [r2, #0]
 800536e:	0151      	lsls	r1, r2, #5
 8005370:	693a      	ldr	r2, [r7, #16]
 8005372:	440a      	add	r2, r1
 8005374:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005378:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800537c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	015a      	lsls	r2, r3, #5
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	4413      	add	r3, r2
 8005388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	683a      	ldr	r2, [r7, #0]
 8005390:	7812      	ldrb	r2, [r2, #0]
 8005392:	0151      	lsls	r1, r2, #5
 8005394:	693a      	ldr	r2, [r7, #16]
 8005396:	440a      	add	r2, r1
 8005398:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800539c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053a0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	3301      	adds	r3, #1
 80053a6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f242 7210 	movw	r2, #10000	; 0x2710
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d902      	bls.n	80053b8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	75fb      	strb	r3, [r7, #23]
          break;
 80053b6:	e00c      	b.n	80053d2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	781b      	ldrb	r3, [r3, #0]
 80053bc:	015a      	lsls	r2, r3, #5
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	4413      	add	r3, r2
 80053c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053d0:	d0e7      	beq.n	80053a2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80053d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	371c      	adds	r7, #28
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr

080053e0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b089      	sub	sp, #36	; 0x24
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	60f8      	str	r0, [r7, #12]
 80053e8:	60b9      	str	r1, [r7, #8]
 80053ea:	4611      	mov	r1, r2
 80053ec:	461a      	mov	r2, r3
 80053ee:	460b      	mov	r3, r1
 80053f0:	71fb      	strb	r3, [r7, #7]
 80053f2:	4613      	mov	r3, r2
 80053f4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80053fe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005402:	2b00      	cmp	r3, #0
 8005404:	d123      	bne.n	800544e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005406:	88bb      	ldrh	r3, [r7, #4]
 8005408:	3303      	adds	r3, #3
 800540a:	089b      	lsrs	r3, r3, #2
 800540c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800540e:	2300      	movs	r3, #0
 8005410:	61bb      	str	r3, [r7, #24]
 8005412:	e018      	b.n	8005446 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005414:	79fb      	ldrb	r3, [r7, #7]
 8005416:	031a      	lsls	r2, r3, #12
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	4413      	add	r3, r2
 800541c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005420:	461a      	mov	r2, r3
 8005422:	69fb      	ldr	r3, [r7, #28]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005428:	69fb      	ldr	r3, [r7, #28]
 800542a:	3301      	adds	r3, #1
 800542c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800542e:	69fb      	ldr	r3, [r7, #28]
 8005430:	3301      	adds	r3, #1
 8005432:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005434:	69fb      	ldr	r3, [r7, #28]
 8005436:	3301      	adds	r3, #1
 8005438:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800543a:	69fb      	ldr	r3, [r7, #28]
 800543c:	3301      	adds	r3, #1
 800543e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005440:	69bb      	ldr	r3, [r7, #24]
 8005442:	3301      	adds	r3, #1
 8005444:	61bb      	str	r3, [r7, #24]
 8005446:	69ba      	ldr	r2, [r7, #24]
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	429a      	cmp	r2, r3
 800544c:	d3e2      	bcc.n	8005414 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800544e:	2300      	movs	r3, #0
}
 8005450:	4618      	mov	r0, r3
 8005452:	3724      	adds	r7, #36	; 0x24
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr

0800545c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800545c:	b480      	push	{r7}
 800545e:	b08b      	sub	sp, #44	; 0x2c
 8005460:	af00      	add	r7, sp, #0
 8005462:	60f8      	str	r0, [r7, #12]
 8005464:	60b9      	str	r1, [r7, #8]
 8005466:	4613      	mov	r3, r2
 8005468:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005472:	88fb      	ldrh	r3, [r7, #6]
 8005474:	089b      	lsrs	r3, r3, #2
 8005476:	b29b      	uxth	r3, r3
 8005478:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800547a:	88fb      	ldrh	r3, [r7, #6]
 800547c:	f003 0303 	and.w	r3, r3, #3
 8005480:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005482:	2300      	movs	r3, #0
 8005484:	623b      	str	r3, [r7, #32]
 8005486:	e014      	b.n	80054b2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005488:	69bb      	ldr	r3, [r7, #24]
 800548a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005492:	601a      	str	r2, [r3, #0]
    pDest++;
 8005494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005496:	3301      	adds	r3, #1
 8005498:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800549a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549c:	3301      	adds	r3, #1
 800549e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80054a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a2:	3301      	adds	r3, #1
 80054a4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80054a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a8:	3301      	adds	r3, #1
 80054aa:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80054ac:	6a3b      	ldr	r3, [r7, #32]
 80054ae:	3301      	adds	r3, #1
 80054b0:	623b      	str	r3, [r7, #32]
 80054b2:	6a3a      	ldr	r2, [r7, #32]
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d3e6      	bcc.n	8005488 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80054ba:	8bfb      	ldrh	r3, [r7, #30]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d01e      	beq.n	80054fe <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80054c0:	2300      	movs	r3, #0
 80054c2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80054c4:	69bb      	ldr	r3, [r7, #24]
 80054c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054ca:	461a      	mov	r2, r3
 80054cc:	f107 0310 	add.w	r3, r7, #16
 80054d0:	6812      	ldr	r2, [r2, #0]
 80054d2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80054d4:	693a      	ldr	r2, [r7, #16]
 80054d6:	6a3b      	ldr	r3, [r7, #32]
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	00db      	lsls	r3, r3, #3
 80054dc:	fa22 f303 	lsr.w	r3, r2, r3
 80054e0:	b2da      	uxtb	r2, r3
 80054e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e4:	701a      	strb	r2, [r3, #0]
      i++;
 80054e6:	6a3b      	ldr	r3, [r7, #32]
 80054e8:	3301      	adds	r3, #1
 80054ea:	623b      	str	r3, [r7, #32]
      pDest++;
 80054ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ee:	3301      	adds	r3, #1
 80054f0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80054f2:	8bfb      	ldrh	r3, [r7, #30]
 80054f4:	3b01      	subs	r3, #1
 80054f6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80054f8:	8bfb      	ldrh	r3, [r7, #30]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d1ea      	bne.n	80054d4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80054fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005500:	4618      	mov	r0, r3
 8005502:	372c      	adds	r7, #44	; 0x2c
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800550c:	b480      	push	{r7}
 800550e:	b085      	sub	sp, #20
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	785b      	ldrb	r3, [r3, #1]
 8005524:	2b01      	cmp	r3, #1
 8005526:	d12c      	bne.n	8005582 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	015a      	lsls	r2, r3, #5
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	4413      	add	r3, r2
 8005530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	2b00      	cmp	r3, #0
 8005538:	db12      	blt.n	8005560 <USB_EPSetStall+0x54>
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d00f      	beq.n	8005560 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	015a      	lsls	r2, r3, #5
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	4413      	add	r3, r2
 8005548:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	68ba      	ldr	r2, [r7, #8]
 8005550:	0151      	lsls	r1, r2, #5
 8005552:	68fa      	ldr	r2, [r7, #12]
 8005554:	440a      	add	r2, r1
 8005556:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800555a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800555e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	015a      	lsls	r2, r3, #5
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	4413      	add	r3, r2
 8005568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	68ba      	ldr	r2, [r7, #8]
 8005570:	0151      	lsls	r1, r2, #5
 8005572:	68fa      	ldr	r2, [r7, #12]
 8005574:	440a      	add	r2, r1
 8005576:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800557a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800557e:	6013      	str	r3, [r2, #0]
 8005580:	e02b      	b.n	80055da <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	015a      	lsls	r2, r3, #5
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	4413      	add	r3, r2
 800558a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2b00      	cmp	r3, #0
 8005592:	db12      	blt.n	80055ba <USB_EPSetStall+0xae>
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d00f      	beq.n	80055ba <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	015a      	lsls	r2, r3, #5
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	4413      	add	r3, r2
 80055a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	68ba      	ldr	r2, [r7, #8]
 80055aa:	0151      	lsls	r1, r2, #5
 80055ac:	68fa      	ldr	r2, [r7, #12]
 80055ae:	440a      	add	r2, r1
 80055b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055b4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80055b8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	015a      	lsls	r2, r3, #5
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	4413      	add	r3, r2
 80055c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	68ba      	ldr	r2, [r7, #8]
 80055ca:	0151      	lsls	r1, r2, #5
 80055cc:	68fa      	ldr	r2, [r7, #12]
 80055ce:	440a      	add	r2, r1
 80055d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80055d8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80055da:	2300      	movs	r3, #0
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3714      	adds	r7, #20
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr

080055e8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b085      	sub	sp, #20
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	785b      	ldrb	r3, [r3, #1]
 8005600:	2b01      	cmp	r3, #1
 8005602:	d128      	bne.n	8005656 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	015a      	lsls	r2, r3, #5
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	4413      	add	r3, r2
 800560c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	68ba      	ldr	r2, [r7, #8]
 8005614:	0151      	lsls	r1, r2, #5
 8005616:	68fa      	ldr	r2, [r7, #12]
 8005618:	440a      	add	r2, r1
 800561a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800561e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005622:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	791b      	ldrb	r3, [r3, #4]
 8005628:	2b03      	cmp	r3, #3
 800562a:	d003      	beq.n	8005634 <USB_EPClearStall+0x4c>
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	791b      	ldrb	r3, [r3, #4]
 8005630:	2b02      	cmp	r3, #2
 8005632:	d138      	bne.n	80056a6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	015a      	lsls	r2, r3, #5
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	4413      	add	r3, r2
 800563c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	68ba      	ldr	r2, [r7, #8]
 8005644:	0151      	lsls	r1, r2, #5
 8005646:	68fa      	ldr	r2, [r7, #12]
 8005648:	440a      	add	r2, r1
 800564a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800564e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005652:	6013      	str	r3, [r2, #0]
 8005654:	e027      	b.n	80056a6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	015a      	lsls	r2, r3, #5
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	4413      	add	r3, r2
 800565e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	68ba      	ldr	r2, [r7, #8]
 8005666:	0151      	lsls	r1, r2, #5
 8005668:	68fa      	ldr	r2, [r7, #12]
 800566a:	440a      	add	r2, r1
 800566c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005670:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005674:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	791b      	ldrb	r3, [r3, #4]
 800567a:	2b03      	cmp	r3, #3
 800567c:	d003      	beq.n	8005686 <USB_EPClearStall+0x9e>
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	791b      	ldrb	r3, [r3, #4]
 8005682:	2b02      	cmp	r3, #2
 8005684:	d10f      	bne.n	80056a6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	015a      	lsls	r2, r3, #5
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	4413      	add	r3, r2
 800568e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	68ba      	ldr	r2, [r7, #8]
 8005696:	0151      	lsls	r1, r2, #5
 8005698:	68fa      	ldr	r2, [r7, #12]
 800569a:	440a      	add	r2, r1
 800569c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056a4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80056a6:	2300      	movs	r3, #0
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3714      	adds	r7, #20
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr

080056b4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b085      	sub	sp, #20
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	460b      	mov	r3, r1
 80056be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	68fa      	ldr	r2, [r7, #12]
 80056ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056d2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80056d6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	78fb      	ldrb	r3, [r7, #3]
 80056e2:	011b      	lsls	r3, r3, #4
 80056e4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80056e8:	68f9      	ldr	r1, [r7, #12]
 80056ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056ee:	4313      	orrs	r3, r2
 80056f0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80056f2:	2300      	movs	r3, #0
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3714      	adds	r7, #20
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005700:	b480      	push	{r7}
 8005702:	b085      	sub	sp, #20
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	68fa      	ldr	r2, [r7, #12]
 8005716:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800571a:	f023 0303 	bic.w	r3, r3, #3
 800571e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	68fa      	ldr	r2, [r7, #12]
 800572a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800572e:	f023 0302 	bic.w	r3, r3, #2
 8005732:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005734:	2300      	movs	r3, #0
}
 8005736:	4618      	mov	r0, r3
 8005738:	3714      	adds	r7, #20
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr

08005742 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005742:	b480      	push	{r7}
 8005744:	b085      	sub	sp, #20
 8005746:	af00      	add	r7, sp, #0
 8005748:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68fa      	ldr	r2, [r7, #12]
 8005758:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800575c:	f023 0303 	bic.w	r3, r3, #3
 8005760:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	68fa      	ldr	r2, [r7, #12]
 800576c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005770:	f043 0302 	orr.w	r3, r3, #2
 8005774:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005776:	2300      	movs	r3, #0
}
 8005778:	4618      	mov	r0, r3
 800577a:	3714      	adds	r7, #20
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr

08005784 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005784:	b480      	push	{r7}
 8005786:	b085      	sub	sp, #20
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	695b      	ldr	r3, [r3, #20]
 8005790:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	699b      	ldr	r3, [r3, #24]
 8005796:	68fa      	ldr	r2, [r7, #12]
 8005798:	4013      	ands	r3, r2
 800579a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800579c:	68fb      	ldr	r3, [r7, #12]
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3714      	adds	r7, #20
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr

080057aa <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80057aa:	b480      	push	{r7}
 80057ac:	b085      	sub	sp, #20
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057bc:	699b      	ldr	r3, [r3, #24]
 80057be:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057c6:	69db      	ldr	r3, [r3, #28]
 80057c8:	68ba      	ldr	r2, [r7, #8]
 80057ca:	4013      	ands	r3, r2
 80057cc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	0c1b      	lsrs	r3, r3, #16
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3714      	adds	r7, #20
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr

080057de <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80057de:	b480      	push	{r7}
 80057e0:	b085      	sub	sp, #20
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057f0:	699b      	ldr	r3, [r3, #24]
 80057f2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057fa:	69db      	ldr	r3, [r3, #28]
 80057fc:	68ba      	ldr	r2, [r7, #8]
 80057fe:	4013      	ands	r3, r2
 8005800:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	b29b      	uxth	r3, r3
}
 8005806:	4618      	mov	r0, r3
 8005808:	3714      	adds	r7, #20
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr

08005812 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005812:	b480      	push	{r7}
 8005814:	b085      	sub	sp, #20
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
 800581a:	460b      	mov	r3, r1
 800581c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005822:	78fb      	ldrb	r3, [r7, #3]
 8005824:	015a      	lsls	r2, r3, #5
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	4413      	add	r3, r2
 800582a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005838:	695b      	ldr	r3, [r3, #20]
 800583a:	68ba      	ldr	r2, [r7, #8]
 800583c:	4013      	ands	r3, r2
 800583e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005840:	68bb      	ldr	r3, [r7, #8]
}
 8005842:	4618      	mov	r0, r3
 8005844:	3714      	adds	r7, #20
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr

0800584e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800584e:	b480      	push	{r7}
 8005850:	b087      	sub	sp, #28
 8005852:	af00      	add	r7, sp, #0
 8005854:	6078      	str	r0, [r7, #4]
 8005856:	460b      	mov	r3, r1
 8005858:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005864:	691b      	ldr	r3, [r3, #16]
 8005866:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800586e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005870:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005872:	78fb      	ldrb	r3, [r7, #3]
 8005874:	f003 030f 	and.w	r3, r3, #15
 8005878:	68fa      	ldr	r2, [r7, #12]
 800587a:	fa22 f303 	lsr.w	r3, r2, r3
 800587e:	01db      	lsls	r3, r3, #7
 8005880:	b2db      	uxtb	r3, r3
 8005882:	693a      	ldr	r2, [r7, #16]
 8005884:	4313      	orrs	r3, r2
 8005886:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005888:	78fb      	ldrb	r3, [r7, #3]
 800588a:	015a      	lsls	r2, r3, #5
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	4413      	add	r3, r2
 8005890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	693a      	ldr	r2, [r7, #16]
 8005898:	4013      	ands	r3, r2
 800589a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800589c:	68bb      	ldr	r3, [r7, #8]
}
 800589e:	4618      	mov	r0, r3
 80058a0:	371c      	adds	r7, #28
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr

080058aa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80058aa:	b480      	push	{r7}
 80058ac:	b083      	sub	sp, #12
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	695b      	ldr	r3, [r3, #20]
 80058b6:	f003 0301 	and.w	r3, r3, #1
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	370c      	adds	r7, #12
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr

080058c6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80058c6:	b480      	push	{r7}
 80058c8:	b085      	sub	sp, #20
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	68fa      	ldr	r2, [r7, #12]
 80058dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058e0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80058e4:	f023 0307 	bic.w	r3, r3, #7
 80058e8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	68fa      	ldr	r2, [r7, #12]
 80058f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058fc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80058fe:	2300      	movs	r3, #0
}
 8005900:	4618      	mov	r0, r3
 8005902:	3714      	adds	r7, #20
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr

0800590c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800590c:	b480      	push	{r7}
 800590e:	b087      	sub	sp, #28
 8005910:	af00      	add	r7, sp, #0
 8005912:	60f8      	str	r0, [r7, #12]
 8005914:	460b      	mov	r3, r1
 8005916:	607a      	str	r2, [r7, #4]
 8005918:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	333c      	adds	r3, #60	; 0x3c
 8005922:	3304      	adds	r3, #4
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	4a26      	ldr	r2, [pc, #152]	; (80059c4 <USB_EP0_OutStart+0xb8>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d90a      	bls.n	8005946 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800593c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005940:	d101      	bne.n	8005946 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005942:	2300      	movs	r3, #0
 8005944:	e037      	b.n	80059b6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800594c:	461a      	mov	r2, r3
 800594e:	2300      	movs	r3, #0
 8005950:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005958:	691b      	ldr	r3, [r3, #16]
 800595a:	697a      	ldr	r2, [r7, #20]
 800595c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005960:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005964:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800596c:	691b      	ldr	r3, [r3, #16]
 800596e:	697a      	ldr	r2, [r7, #20]
 8005970:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005974:	f043 0318 	orr.w	r3, r3, #24
 8005978:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005980:	691b      	ldr	r3, [r3, #16]
 8005982:	697a      	ldr	r2, [r7, #20]
 8005984:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005988:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800598c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800598e:	7afb      	ldrb	r3, [r7, #11]
 8005990:	2b01      	cmp	r3, #1
 8005992:	d10f      	bne.n	80059b4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800599a:	461a      	mov	r2, r3
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	697a      	ldr	r2, [r7, #20]
 80059aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059ae:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80059b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80059b4:	2300      	movs	r3, #0
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	371c      	adds	r7, #28
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr
 80059c2:	bf00      	nop
 80059c4:	4f54300a 	.word	0x4f54300a

080059c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b085      	sub	sp, #20
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80059d0:	2300      	movs	r3, #0
 80059d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	3301      	adds	r3, #1
 80059d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	4a13      	ldr	r2, [pc, #76]	; (8005a2c <USB_CoreReset+0x64>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d901      	bls.n	80059e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80059e2:	2303      	movs	r3, #3
 80059e4:	e01b      	b.n	8005a1e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	691b      	ldr	r3, [r3, #16]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	daf2      	bge.n	80059d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80059ee:	2300      	movs	r3, #0
 80059f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	f043 0201 	orr.w	r2, r3, #1
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	3301      	adds	r3, #1
 8005a02:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	4a09      	ldr	r2, [pc, #36]	; (8005a2c <USB_CoreReset+0x64>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d901      	bls.n	8005a10 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005a0c:	2303      	movs	r3, #3
 8005a0e:	e006      	b.n	8005a1e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	691b      	ldr	r3, [r3, #16]
 8005a14:	f003 0301 	and.w	r3, r3, #1
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d0f0      	beq.n	80059fe <USB_CoreReset+0x36>

  return HAL_OK;
 8005a1c:	2300      	movs	r3, #0
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3714      	adds	r7, #20
 8005a22:	46bd      	mov	sp, r7
 8005a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a28:	4770      	bx	lr
 8005a2a:	bf00      	nop
 8005a2c:	00030d40 	.word	0x00030d40

08005a30 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b084      	sub	sp, #16
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	460b      	mov	r3, r1
 8005a3a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8005a3c:	2010      	movs	r0, #16
 8005a3e:	f002 f93d 	bl	8007cbc <USBD_static_malloc>
 8005a42:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d109      	bne.n	8005a5e <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	32b0      	adds	r2, #176	; 0xb0
 8005a54:	2100      	movs	r1, #0
 8005a56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005a5a:	2302      	movs	r3, #2
 8005a5c:	e048      	b.n	8005af0 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	32b0      	adds	r2, #176	; 0xb0
 8005a68:	68f9      	ldr	r1, [r7, #12]
 8005a6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	32b0      	adds	r2, #176	; 0xb0
 8005a78:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	7c1b      	ldrb	r3, [r3, #16]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d10d      	bne.n	8005aa6 <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 8005a8a:	4b1b      	ldr	r3, [pc, #108]	; (8005af8 <USBD_HID_Init+0xc8>)
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	f003 020f 	and.w	r2, r3, #15
 8005a92:	6879      	ldr	r1, [r7, #4]
 8005a94:	4613      	mov	r3, r2
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	4413      	add	r3, r2
 8005a9a:	009b      	lsls	r3, r3, #2
 8005a9c:	440b      	add	r3, r1
 8005a9e:	3326      	adds	r3, #38	; 0x26
 8005aa0:	2207      	movs	r2, #7
 8005aa2:	801a      	strh	r2, [r3, #0]
 8005aa4:	e00c      	b.n	8005ac0 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 8005aa6:	4b14      	ldr	r3, [pc, #80]	; (8005af8 <USBD_HID_Init+0xc8>)
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	f003 020f 	and.w	r2, r3, #15
 8005aae:	6879      	ldr	r1, [r7, #4]
 8005ab0:	4613      	mov	r3, r2
 8005ab2:	009b      	lsls	r3, r3, #2
 8005ab4:	4413      	add	r3, r2
 8005ab6:	009b      	lsls	r3, r3, #2
 8005ab8:	440b      	add	r3, r1
 8005aba:	3326      	adds	r3, #38	; 0x26
 8005abc:	220a      	movs	r2, #10
 8005abe:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8005ac0:	4b0d      	ldr	r3, [pc, #52]	; (8005af8 <USBD_HID_Init+0xc8>)
 8005ac2:	7819      	ldrb	r1, [r3, #0]
 8005ac4:	2304      	movs	r3, #4
 8005ac6:	2203      	movs	r2, #3
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f001 ffe6 	bl	8007a9a <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 8005ace:	4b0a      	ldr	r3, [pc, #40]	; (8005af8 <USBD_HID_Init+0xc8>)
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	f003 020f 	and.w	r2, r3, #15
 8005ad6:	6879      	ldr	r1, [r7, #4]
 8005ad8:	4613      	mov	r3, r2
 8005ada:	009b      	lsls	r3, r3, #2
 8005adc:	4413      	add	r3, r2
 8005ade:	009b      	lsls	r3, r3, #2
 8005ae0:	440b      	add	r3, r1
 8005ae2:	3324      	adds	r3, #36	; 0x24
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	801a      	strh	r2, [r3, #0]

  hhid->state = HID_IDLE;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2200      	movs	r2, #0
 8005aec:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8005aee:	2300      	movs	r3, #0
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3710      	adds	r7, #16
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}
 8005af8:	200000ca 	.word	0x200000ca

08005afc <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b082      	sub	sp, #8
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	460b      	mov	r3, r1
 8005b06:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8005b08:	4b1f      	ldr	r3, [pc, #124]	; (8005b88 <USBD_HID_DeInit+0x8c>)
 8005b0a:	781b      	ldrb	r3, [r3, #0]
 8005b0c:	4619      	mov	r1, r3
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f001 ffe9 	bl	8007ae6 <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8005b14:	4b1c      	ldr	r3, [pc, #112]	; (8005b88 <USBD_HID_DeInit+0x8c>)
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	f003 020f 	and.w	r2, r3, #15
 8005b1c:	6879      	ldr	r1, [r7, #4]
 8005b1e:	4613      	mov	r3, r2
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	4413      	add	r3, r2
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	440b      	add	r3, r1
 8005b28:	3324      	adds	r3, #36	; 0x24
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 8005b2e:	4b16      	ldr	r3, [pc, #88]	; (8005b88 <USBD_HID_DeInit+0x8c>)
 8005b30:	781b      	ldrb	r3, [r3, #0]
 8005b32:	f003 020f 	and.w	r2, r3, #15
 8005b36:	6879      	ldr	r1, [r7, #4]
 8005b38:	4613      	mov	r3, r2
 8005b3a:	009b      	lsls	r3, r3, #2
 8005b3c:	4413      	add	r3, r2
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	440b      	add	r3, r1
 8005b42:	3326      	adds	r3, #38	; 0x26
 8005b44:	2200      	movs	r2, #0
 8005b46:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	32b0      	adds	r2, #176	; 0xb0
 8005b52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d011      	beq.n	8005b7e <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	32b0      	adds	r2, #176	; 0xb0
 8005b64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f002 f8b5 	bl	8007cd8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	32b0      	adds	r2, #176	; 0xb0
 8005b78:	2100      	movs	r1, #0
 8005b7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 8005b7e:	2300      	movs	r3, #0
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3708      	adds	r7, #8
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}
 8005b88:	200000ca 	.word	0x200000ca

08005b8c <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b086      	sub	sp, #24
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	32b0      	adds	r2, #176	; 0xb0
 8005ba0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ba4:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8005baa:	2300      	movs	r3, #0
 8005bac:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d101      	bne.n	8005bb8 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8005bb4:	2303      	movs	r3, #3
 8005bb6:	e0e8      	b.n	8005d8a <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	781b      	ldrb	r3, [r3, #0]
 8005bbc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d046      	beq.n	8005c52 <USBD_HID_Setup+0xc6>
 8005bc4:	2b20      	cmp	r3, #32
 8005bc6:	f040 80d8 	bne.w	8005d7a <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	785b      	ldrb	r3, [r3, #1]
 8005bce:	3b02      	subs	r3, #2
 8005bd0:	2b09      	cmp	r3, #9
 8005bd2:	d836      	bhi.n	8005c42 <USBD_HID_Setup+0xb6>
 8005bd4:	a201      	add	r2, pc, #4	; (adr r2, 8005bdc <USBD_HID_Setup+0x50>)
 8005bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bda:	bf00      	nop
 8005bdc:	08005c33 	.word	0x08005c33
 8005be0:	08005c13 	.word	0x08005c13
 8005be4:	08005c43 	.word	0x08005c43
 8005be8:	08005c43 	.word	0x08005c43
 8005bec:	08005c43 	.word	0x08005c43
 8005bf0:	08005c43 	.word	0x08005c43
 8005bf4:	08005c43 	.word	0x08005c43
 8005bf8:	08005c43 	.word	0x08005c43
 8005bfc:	08005c21 	.word	0x08005c21
 8005c00:	08005c05 	.word	0x08005c05
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	885b      	ldrh	r3, [r3, #2]
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	601a      	str	r2, [r3, #0]
          break;
 8005c10:	e01e      	b.n	8005c50 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2201      	movs	r2, #1
 8005c16:	4619      	mov	r1, r3
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f001 fbe9 	bl	80073f0 <USBD_CtlSendData>
          break;
 8005c1e:	e017      	b.n	8005c50 <USBD_HID_Setup+0xc4>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	885b      	ldrh	r3, [r3, #2]
 8005c24:	0a1b      	lsrs	r3, r3, #8
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	605a      	str	r2, [r3, #4]
          break;
 8005c30:	e00e      	b.n	8005c50 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	3304      	adds	r3, #4
 8005c36:	2201      	movs	r2, #1
 8005c38:	4619      	mov	r1, r3
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f001 fbd8 	bl	80073f0 <USBD_CtlSendData>
          break;
 8005c40:	e006      	b.n	8005c50 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8005c42:	6839      	ldr	r1, [r7, #0]
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f001 fb62 	bl	800730e <USBD_CtlError>
          ret = USBD_FAIL;
 8005c4a:	2303      	movs	r3, #3
 8005c4c:	75fb      	strb	r3, [r7, #23]
          break;
 8005c4e:	bf00      	nop
      }
      break;
 8005c50:	e09a      	b.n	8005d88 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	785b      	ldrb	r3, [r3, #1]
 8005c56:	2b0b      	cmp	r3, #11
 8005c58:	f200 8086 	bhi.w	8005d68 <USBD_HID_Setup+0x1dc>
 8005c5c:	a201      	add	r2, pc, #4	; (adr r2, 8005c64 <USBD_HID_Setup+0xd8>)
 8005c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c62:	bf00      	nop
 8005c64:	08005c95 	.word	0x08005c95
 8005c68:	08005d77 	.word	0x08005d77
 8005c6c:	08005d69 	.word	0x08005d69
 8005c70:	08005d69 	.word	0x08005d69
 8005c74:	08005d69 	.word	0x08005d69
 8005c78:	08005d69 	.word	0x08005d69
 8005c7c:	08005cbf 	.word	0x08005cbf
 8005c80:	08005d69 	.word	0x08005d69
 8005c84:	08005d69 	.word	0x08005d69
 8005c88:	08005d69 	.word	0x08005d69
 8005c8c:	08005d17 	.word	0x08005d17
 8005c90:	08005d41 	.word	0x08005d41
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c9a:	b2db      	uxtb	r3, r3
 8005c9c:	2b03      	cmp	r3, #3
 8005c9e:	d107      	bne.n	8005cb0 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005ca0:	f107 030a 	add.w	r3, r7, #10
 8005ca4:	2202      	movs	r2, #2
 8005ca6:	4619      	mov	r1, r3
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f001 fba1 	bl	80073f0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005cae:	e063      	b.n	8005d78 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8005cb0:	6839      	ldr	r1, [r7, #0]
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f001 fb2b 	bl	800730e <USBD_CtlError>
            ret = USBD_FAIL;
 8005cb8:	2303      	movs	r3, #3
 8005cba:	75fb      	strb	r3, [r7, #23]
          break;
 8005cbc:	e05c      	b.n	8005d78 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	885b      	ldrh	r3, [r3, #2]
 8005cc2:	0a1b      	lsrs	r3, r3, #8
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	2b22      	cmp	r3, #34	; 0x22
 8005cc8:	d108      	bne.n	8005cdc <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	88db      	ldrh	r3, [r3, #6]
 8005cce:	2b4a      	cmp	r3, #74	; 0x4a
 8005cd0:	bf28      	it	cs
 8005cd2:	234a      	movcs	r3, #74	; 0x4a
 8005cd4:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8005cd6:	4b2f      	ldr	r3, [pc, #188]	; (8005d94 <USBD_HID_Setup+0x208>)
 8005cd8:	613b      	str	r3, [r7, #16]
 8005cda:	e015      	b.n	8005d08 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	885b      	ldrh	r3, [r3, #2]
 8005ce0:	0a1b      	lsrs	r3, r3, #8
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	2b21      	cmp	r3, #33	; 0x21
 8005ce6:	d108      	bne.n	8005cfa <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 8005ce8:	4b2b      	ldr	r3, [pc, #172]	; (8005d98 <USBD_HID_Setup+0x20c>)
 8005cea:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	88db      	ldrh	r3, [r3, #6]
 8005cf0:	2b09      	cmp	r3, #9
 8005cf2:	bf28      	it	cs
 8005cf4:	2309      	movcs	r3, #9
 8005cf6:	82bb      	strh	r3, [r7, #20]
 8005cf8:	e006      	b.n	8005d08 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8005cfa:	6839      	ldr	r1, [r7, #0]
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f001 fb06 	bl	800730e <USBD_CtlError>
            ret = USBD_FAIL;
 8005d02:	2303      	movs	r3, #3
 8005d04:	75fb      	strb	r3, [r7, #23]
            break;
 8005d06:	e037      	b.n	8005d78 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8005d08:	8abb      	ldrh	r3, [r7, #20]
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	6939      	ldr	r1, [r7, #16]
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f001 fb6e 	bl	80073f0 <USBD_CtlSendData>
          break;
 8005d14:	e030      	b.n	8005d78 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	2b03      	cmp	r3, #3
 8005d20:	d107      	bne.n	8005d32 <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	3308      	adds	r3, #8
 8005d26:	2201      	movs	r2, #1
 8005d28:	4619      	mov	r1, r3
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f001 fb60 	bl	80073f0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005d30:	e022      	b.n	8005d78 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8005d32:	6839      	ldr	r1, [r7, #0]
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f001 faea 	bl	800730e <USBD_CtlError>
            ret = USBD_FAIL;
 8005d3a:	2303      	movs	r3, #3
 8005d3c:	75fb      	strb	r3, [r7, #23]
          break;
 8005d3e:	e01b      	b.n	8005d78 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d46:	b2db      	uxtb	r3, r3
 8005d48:	2b03      	cmp	r3, #3
 8005d4a:	d106      	bne.n	8005d5a <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	885b      	ldrh	r3, [r3, #2]
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	461a      	mov	r2, r3
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005d58:	e00e      	b.n	8005d78 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8005d5a:	6839      	ldr	r1, [r7, #0]
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f001 fad6 	bl	800730e <USBD_CtlError>
            ret = USBD_FAIL;
 8005d62:	2303      	movs	r3, #3
 8005d64:	75fb      	strb	r3, [r7, #23]
          break;
 8005d66:	e007      	b.n	8005d78 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005d68:	6839      	ldr	r1, [r7, #0]
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f001 facf 	bl	800730e <USBD_CtlError>
          ret = USBD_FAIL;
 8005d70:	2303      	movs	r3, #3
 8005d72:	75fb      	strb	r3, [r7, #23]
          break;
 8005d74:	e000      	b.n	8005d78 <USBD_HID_Setup+0x1ec>
          break;
 8005d76:	bf00      	nop
      }
      break;
 8005d78:	e006      	b.n	8005d88 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 8005d7a:	6839      	ldr	r1, [r7, #0]
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f001 fac6 	bl	800730e <USBD_CtlError>
      ret = USBD_FAIL;
 8005d82:	2303      	movs	r3, #3
 8005d84:	75fb      	strb	r3, [r7, #23]
      break;
 8005d86:	bf00      	nop
  }

  return (uint8_t)ret;
 8005d88:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3718      	adds	r7, #24
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	bf00      	nop
 8005d94:	20000080 	.word	0x20000080
 8005d98:	20000068 	.word	0x20000068

08005d9c <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b086      	sub	sp, #24
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	60b9      	str	r1, [r7, #8]
 8005da6:	4613      	mov	r3, r2
 8005da8:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	32b0      	adds	r2, #176	; 0xb0
 8005db4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005db8:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d101      	bne.n	8005dc4 <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005dc0:	2303      	movs	r3, #3
 8005dc2:	e014      	b.n	8005dee <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	2b03      	cmp	r3, #3
 8005dce:	d10d      	bne.n	8005dec <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == HID_IDLE)
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	7b1b      	ldrb	r3, [r3, #12]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d109      	bne.n	8005dec <USBD_HID_SendReport+0x50>
    {
      hhid->state = HID_BUSY;
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 8005dde:	4b06      	ldr	r3, [pc, #24]	; (8005df8 <USBD_HID_SendReport+0x5c>)
 8005de0:	7819      	ldrb	r1, [r3, #0]
 8005de2:	88fb      	ldrh	r3, [r7, #6]
 8005de4:	68ba      	ldr	r2, [r7, #8]
 8005de6:	68f8      	ldr	r0, [r7, #12]
 8005de8:	f001 ff25 	bl	8007c36 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8005dec:	2300      	movs	r3, #0
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3718      	adds	r7, #24
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
 8005df6:	bf00      	nop
 8005df8:	200000ca 	.word	0x200000ca

08005dfc <USBD_HID_GetPollingInterval>:
  *         return polling interval from endpoint descriptor
  * @param  pdev: device instance
  * @retval polling interval
  */
uint32_t USBD_HID_GetPollingInterval(USBD_HandleTypeDef *pdev)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b085      	sub	sp, #20
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  uint32_t polling_interval;

  /* HIGH-speed endpoints */
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	7c1b      	ldrb	r3, [r3, #16]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d102      	bne.n	8005e12 <USBD_HID_GetPollingInterval+0x16>
  {
    /* Sets the data transfer polling interval for high speed transfers.
     Values between 1..16 are allowed. Values correspond to interval
     of 2 ^ (bInterval-1). This option (8 ms, corresponds to HID_HS_BINTERVAL */
    polling_interval = (((1U << (HID_HS_BINTERVAL - 1U))) / 8U);
 8005e0c:	2308      	movs	r3, #8
 8005e0e:	60fb      	str	r3, [r7, #12]
 8005e10:	e001      	b.n	8005e16 <USBD_HID_GetPollingInterval+0x1a>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    /* Sets the data transfer polling interval for low and full
    speed transfers */
    polling_interval =  HID_FS_BINTERVAL;
 8005e12:	230a      	movs	r3, #10
 8005e14:	60fb      	str	r3, [r7, #12]
  }

  return ((uint32_t)(polling_interval));
 8005e16:	68fb      	ldr	r3, [r7, #12]
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3714      	adds	r7, #20
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr

08005e24 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b084      	sub	sp, #16
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8005e2c:	2181      	movs	r1, #129	; 0x81
 8005e2e:	4809      	ldr	r0, [pc, #36]	; (8005e54 <USBD_HID_GetFSCfgDesc+0x30>)
 8005e30:	f000 fc35 	bl	800669e <USBD_GetEpDesc>
 8005e34:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d002      	beq.n	8005e42 <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	220a      	movs	r2, #10
 8005e40:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2222      	movs	r2, #34	; 0x22
 8005e46:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8005e48:	4b02      	ldr	r3, [pc, #8]	; (8005e54 <USBD_HID_GetFSCfgDesc+0x30>)
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3710      	adds	r7, #16
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}
 8005e52:	bf00      	nop
 8005e54:	20000044 	.word	0x20000044

08005e58 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b084      	sub	sp, #16
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8005e60:	2181      	movs	r1, #129	; 0x81
 8005e62:	4809      	ldr	r0, [pc, #36]	; (8005e88 <USBD_HID_GetHSCfgDesc+0x30>)
 8005e64:	f000 fc1b 	bl	800669e <USBD_GetEpDesc>
 8005e68:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d002      	beq.n	8005e76 <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2207      	movs	r2, #7
 8005e74:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2222      	movs	r2, #34	; 0x22
 8005e7a:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8005e7c:	4b02      	ldr	r3, [pc, #8]	; (8005e88 <USBD_HID_GetHSCfgDesc+0x30>)
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3710      	adds	r7, #16
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
 8005e86:	bf00      	nop
 8005e88:	20000044 	.word	0x20000044

08005e8c <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b084      	sub	sp, #16
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8005e94:	2181      	movs	r1, #129	; 0x81
 8005e96:	4809      	ldr	r0, [pc, #36]	; (8005ebc <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 8005e98:	f000 fc01 	bl	800669e <USBD_GetEpDesc>
 8005e9c:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d002      	beq.n	8005eaa <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	220a      	movs	r2, #10
 8005ea8:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2222      	movs	r2, #34	; 0x22
 8005eae:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8005eb0:	4b02      	ldr	r3, [pc, #8]	; (8005ebc <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3710      	adds	r7, #16
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}
 8005eba:	bf00      	nop
 8005ebc:	20000044 	.word	0x20000044

08005ec0 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	460b      	mov	r3, r1
 8005eca:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = HID_IDLE;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	32b0      	adds	r2, #176	; 0xb0
 8005ed6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eda:	2200      	movs	r2, #0
 8005edc:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8005ede:	2300      	movs	r3, #0
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	370c      	adds	r7, #12
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr

08005eec <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b083      	sub	sp, #12
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	220a      	movs	r2, #10
 8005ef8:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8005efa:	4b03      	ldr	r3, [pc, #12]	; (8005f08 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	370c      	adds	r7, #12
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr
 8005f08:	20000074 	.word	0x20000074

08005f0c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b086      	sub	sp, #24
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	60f8      	str	r0, [r7, #12]
 8005f14:	60b9      	str	r1, [r7, #8]
 8005f16:	4613      	mov	r3, r2
 8005f18:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d101      	bne.n	8005f24 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005f20:	2303      	movs	r3, #3
 8005f22:	e01f      	b.n	8005f64 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2200      	movs	r2, #0
 8005f28:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2200      	movs	r2, #0
 8005f38:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d003      	beq.n	8005f4a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	68ba      	ldr	r2, [r7, #8]
 8005f46:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	79fa      	ldrb	r2, [r7, #7]
 8005f56:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005f58:	68f8      	ldr	r0, [r7, #12]
 8005f5a:	f001 fd37 	bl	80079cc <USBD_LL_Init>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005f62:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3718      	adds	r7, #24
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b084      	sub	sp, #16
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005f76:	2300      	movs	r3, #0
 8005f78:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d101      	bne.n	8005f84 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005f80:	2303      	movs	r3, #3
 8005f82:	e025      	b.n	8005fd0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	683a      	ldr	r2, [r7, #0]
 8005f88:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	32ae      	adds	r2, #174	; 0xae
 8005f96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d00f      	beq.n	8005fc0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	32ae      	adds	r2, #174	; 0xae
 8005faa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb0:	f107 020e 	add.w	r2, r7, #14
 8005fb4:	4610      	mov	r0, r2
 8005fb6:	4798      	blx	r3
 8005fb8:	4602      	mov	r2, r0
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8005fc6:	1c5a      	adds	r2, r3, #1
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8005fce:	2300      	movs	r3, #0
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3710      	adds	r7, #16
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}

08005fd8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b082      	sub	sp, #8
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f001 fd3f 	bl	8007a64 <USBD_LL_Start>
 8005fe6:	4603      	mov	r3, r0
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3708      	adds	r7, #8
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}

08005ff0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b083      	sub	sp, #12
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005ff8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	370c      	adds	r7, #12
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr

08006006 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006006:	b580      	push	{r7, lr}
 8006008:	b084      	sub	sp, #16
 800600a:	af00      	add	r7, sp, #0
 800600c:	6078      	str	r0, [r7, #4]
 800600e:	460b      	mov	r3, r1
 8006010:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006012:	2300      	movs	r3, #0
 8006014:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800601c:	2b00      	cmp	r3, #0
 800601e:	d009      	beq.n	8006034 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	78fa      	ldrb	r2, [r7, #3]
 800602a:	4611      	mov	r1, r2
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	4798      	blx	r3
 8006030:	4603      	mov	r3, r0
 8006032:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006034:	7bfb      	ldrb	r3, [r7, #15]
}
 8006036:	4618      	mov	r0, r3
 8006038:	3710      	adds	r7, #16
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}

0800603e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800603e:	b580      	push	{r7, lr}
 8006040:	b084      	sub	sp, #16
 8006042:	af00      	add	r7, sp, #0
 8006044:	6078      	str	r0, [r7, #4]
 8006046:	460b      	mov	r3, r1
 8006048:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800604a:	2300      	movs	r3, #0
 800604c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	78fa      	ldrb	r2, [r7, #3]
 8006058:	4611      	mov	r1, r2
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	4798      	blx	r3
 800605e:	4603      	mov	r3, r0
 8006060:	2b00      	cmp	r3, #0
 8006062:	d001      	beq.n	8006068 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006064:	2303      	movs	r3, #3
 8006066:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006068:	7bfb      	ldrb	r3, [r7, #15]
}
 800606a:	4618      	mov	r0, r3
 800606c:	3710      	adds	r7, #16
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}

08006072 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006072:	b580      	push	{r7, lr}
 8006074:	b084      	sub	sp, #16
 8006076:	af00      	add	r7, sp, #0
 8006078:	6078      	str	r0, [r7, #4]
 800607a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006082:	6839      	ldr	r1, [r7, #0]
 8006084:	4618      	mov	r0, r3
 8006086:	f001 f908 	bl	800729a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2201      	movs	r2, #1
 800608e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006098:	461a      	mov	r2, r3
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80060a6:	f003 031f 	and.w	r3, r3, #31
 80060aa:	2b02      	cmp	r3, #2
 80060ac:	d01a      	beq.n	80060e4 <USBD_LL_SetupStage+0x72>
 80060ae:	2b02      	cmp	r3, #2
 80060b0:	d822      	bhi.n	80060f8 <USBD_LL_SetupStage+0x86>
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d002      	beq.n	80060bc <USBD_LL_SetupStage+0x4a>
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d00a      	beq.n	80060d0 <USBD_LL_SetupStage+0x5e>
 80060ba:	e01d      	b.n	80060f8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80060c2:	4619      	mov	r1, r3
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f000 fb5f 	bl	8006788 <USBD_StdDevReq>
 80060ca:	4603      	mov	r3, r0
 80060cc:	73fb      	strb	r3, [r7, #15]
      break;
 80060ce:	e020      	b.n	8006112 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80060d6:	4619      	mov	r1, r3
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f000 fbc7 	bl	800686c <USBD_StdItfReq>
 80060de:	4603      	mov	r3, r0
 80060e0:	73fb      	strb	r3, [r7, #15]
      break;
 80060e2:	e016      	b.n	8006112 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80060ea:	4619      	mov	r1, r3
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f000 fc29 	bl	8006944 <USBD_StdEPReq>
 80060f2:	4603      	mov	r3, r0
 80060f4:	73fb      	strb	r3, [r7, #15]
      break;
 80060f6:	e00c      	b.n	8006112 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80060fe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006102:	b2db      	uxtb	r3, r3
 8006104:	4619      	mov	r1, r3
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f001 fd0c 	bl	8007b24 <USBD_LL_StallEP>
 800610c:	4603      	mov	r3, r0
 800610e:	73fb      	strb	r3, [r7, #15]
      break;
 8006110:	bf00      	nop
  }

  return ret;
 8006112:	7bfb      	ldrb	r3, [r7, #15]
}
 8006114:	4618      	mov	r0, r3
 8006116:	3710      	adds	r7, #16
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}

0800611c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b086      	sub	sp, #24
 8006120:	af00      	add	r7, sp, #0
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	460b      	mov	r3, r1
 8006126:	607a      	str	r2, [r7, #4]
 8006128:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800612a:	2300      	movs	r3, #0
 800612c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800612e:	7afb      	ldrb	r3, [r7, #11]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d16e      	bne.n	8006212 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800613a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006142:	2b03      	cmp	r3, #3
 8006144:	f040 8098 	bne.w	8006278 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	689a      	ldr	r2, [r3, #8]
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	68db      	ldr	r3, [r3, #12]
 8006150:	429a      	cmp	r2, r3
 8006152:	d913      	bls.n	800617c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	689a      	ldr	r2, [r3, #8]
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	68db      	ldr	r3, [r3, #12]
 800615c:	1ad2      	subs	r2, r2, r3
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	68da      	ldr	r2, [r3, #12]
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	4293      	cmp	r3, r2
 800616c:	bf28      	it	cs
 800616e:	4613      	movcs	r3, r2
 8006170:	461a      	mov	r2, r3
 8006172:	6879      	ldr	r1, [r7, #4]
 8006174:	68f8      	ldr	r0, [r7, #12]
 8006176:	f001 f967 	bl	8007448 <USBD_CtlContinueRx>
 800617a:	e07d      	b.n	8006278 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006182:	f003 031f 	and.w	r3, r3, #31
 8006186:	2b02      	cmp	r3, #2
 8006188:	d014      	beq.n	80061b4 <USBD_LL_DataOutStage+0x98>
 800618a:	2b02      	cmp	r3, #2
 800618c:	d81d      	bhi.n	80061ca <USBD_LL_DataOutStage+0xae>
 800618e:	2b00      	cmp	r3, #0
 8006190:	d002      	beq.n	8006198 <USBD_LL_DataOutStage+0x7c>
 8006192:	2b01      	cmp	r3, #1
 8006194:	d003      	beq.n	800619e <USBD_LL_DataOutStage+0x82>
 8006196:	e018      	b.n	80061ca <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006198:	2300      	movs	r3, #0
 800619a:	75bb      	strb	r3, [r7, #22]
            break;
 800619c:	e018      	b.n	80061d0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	4619      	mov	r1, r3
 80061a8:	68f8      	ldr	r0, [r7, #12]
 80061aa:	f000 fa5e 	bl	800666a <USBD_CoreFindIF>
 80061ae:	4603      	mov	r3, r0
 80061b0:	75bb      	strb	r3, [r7, #22]
            break;
 80061b2:	e00d      	b.n	80061d0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80061ba:	b2db      	uxtb	r3, r3
 80061bc:	4619      	mov	r1, r3
 80061be:	68f8      	ldr	r0, [r7, #12]
 80061c0:	f000 fa60 	bl	8006684 <USBD_CoreFindEP>
 80061c4:	4603      	mov	r3, r0
 80061c6:	75bb      	strb	r3, [r7, #22]
            break;
 80061c8:	e002      	b.n	80061d0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80061ca:	2300      	movs	r3, #0
 80061cc:	75bb      	strb	r3, [r7, #22]
            break;
 80061ce:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80061d0:	7dbb      	ldrb	r3, [r7, #22]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d119      	bne.n	800620a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	2b03      	cmp	r3, #3
 80061e0:	d113      	bne.n	800620a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80061e2:	7dba      	ldrb	r2, [r7, #22]
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	32ae      	adds	r2, #174	; 0xae
 80061e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061ec:	691b      	ldr	r3, [r3, #16]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d00b      	beq.n	800620a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80061f2:	7dba      	ldrb	r2, [r7, #22]
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80061fa:	7dba      	ldrb	r2, [r7, #22]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	32ae      	adds	r2, #174	; 0xae
 8006200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006204:	691b      	ldr	r3, [r3, #16]
 8006206:	68f8      	ldr	r0, [r7, #12]
 8006208:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800620a:	68f8      	ldr	r0, [r7, #12]
 800620c:	f001 f92d 	bl	800746a <USBD_CtlSendStatus>
 8006210:	e032      	b.n	8006278 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006212:	7afb      	ldrb	r3, [r7, #11]
 8006214:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006218:	b2db      	uxtb	r3, r3
 800621a:	4619      	mov	r1, r3
 800621c:	68f8      	ldr	r0, [r7, #12]
 800621e:	f000 fa31 	bl	8006684 <USBD_CoreFindEP>
 8006222:	4603      	mov	r3, r0
 8006224:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006226:	7dbb      	ldrb	r3, [r7, #22]
 8006228:	2bff      	cmp	r3, #255	; 0xff
 800622a:	d025      	beq.n	8006278 <USBD_LL_DataOutStage+0x15c>
 800622c:	7dbb      	ldrb	r3, [r7, #22]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d122      	bne.n	8006278 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006238:	b2db      	uxtb	r3, r3
 800623a:	2b03      	cmp	r3, #3
 800623c:	d117      	bne.n	800626e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800623e:	7dba      	ldrb	r2, [r7, #22]
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	32ae      	adds	r2, #174	; 0xae
 8006244:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006248:	699b      	ldr	r3, [r3, #24]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d00f      	beq.n	800626e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800624e:	7dba      	ldrb	r2, [r7, #22]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006256:	7dba      	ldrb	r2, [r7, #22]
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	32ae      	adds	r2, #174	; 0xae
 800625c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006260:	699b      	ldr	r3, [r3, #24]
 8006262:	7afa      	ldrb	r2, [r7, #11]
 8006264:	4611      	mov	r1, r2
 8006266:	68f8      	ldr	r0, [r7, #12]
 8006268:	4798      	blx	r3
 800626a:	4603      	mov	r3, r0
 800626c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800626e:	7dfb      	ldrb	r3, [r7, #23]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d001      	beq.n	8006278 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006274:	7dfb      	ldrb	r3, [r7, #23]
 8006276:	e000      	b.n	800627a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006278:	2300      	movs	r3, #0
}
 800627a:	4618      	mov	r0, r3
 800627c:	3718      	adds	r7, #24
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}

08006282 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006282:	b580      	push	{r7, lr}
 8006284:	b086      	sub	sp, #24
 8006286:	af00      	add	r7, sp, #0
 8006288:	60f8      	str	r0, [r7, #12]
 800628a:	460b      	mov	r3, r1
 800628c:	607a      	str	r2, [r7, #4]
 800628e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006290:	7afb      	ldrb	r3, [r7, #11]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d16f      	bne.n	8006376 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	3314      	adds	r3, #20
 800629a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80062a2:	2b02      	cmp	r3, #2
 80062a4:	d15a      	bne.n	800635c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	689a      	ldr	r2, [r3, #8]
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	68db      	ldr	r3, [r3, #12]
 80062ae:	429a      	cmp	r2, r3
 80062b0:	d914      	bls.n	80062dc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	689a      	ldr	r2, [r3, #8]
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	68db      	ldr	r3, [r3, #12]
 80062ba:	1ad2      	subs	r2, r2, r3
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	461a      	mov	r2, r3
 80062c6:	6879      	ldr	r1, [r7, #4]
 80062c8:	68f8      	ldr	r0, [r7, #12]
 80062ca:	f001 f8ac 	bl	8007426 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80062ce:	2300      	movs	r3, #0
 80062d0:	2200      	movs	r2, #0
 80062d2:	2100      	movs	r1, #0
 80062d4:	68f8      	ldr	r0, [r7, #12]
 80062d6:	f001 fccf 	bl	8007c78 <USBD_LL_PrepareReceive>
 80062da:	e03f      	b.n	800635c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	68da      	ldr	r2, [r3, #12]
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d11c      	bne.n	8006322 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	685a      	ldr	r2, [r3, #4]
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d316      	bcc.n	8006322 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	685a      	ldr	r2, [r3, #4]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80062fe:	429a      	cmp	r2, r3
 8006300:	d20f      	bcs.n	8006322 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006302:	2200      	movs	r2, #0
 8006304:	2100      	movs	r1, #0
 8006306:	68f8      	ldr	r0, [r7, #12]
 8006308:	f001 f88d 	bl	8007426 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2200      	movs	r2, #0
 8006310:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006314:	2300      	movs	r3, #0
 8006316:	2200      	movs	r2, #0
 8006318:	2100      	movs	r1, #0
 800631a:	68f8      	ldr	r0, [r7, #12]
 800631c:	f001 fcac 	bl	8007c78 <USBD_LL_PrepareReceive>
 8006320:	e01c      	b.n	800635c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006328:	b2db      	uxtb	r3, r3
 800632a:	2b03      	cmp	r3, #3
 800632c:	d10f      	bne.n	800634e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d009      	beq.n	800634e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2200      	movs	r2, #0
 800633e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006348:	68db      	ldr	r3, [r3, #12]
 800634a:	68f8      	ldr	r0, [r7, #12]
 800634c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800634e:	2180      	movs	r1, #128	; 0x80
 8006350:	68f8      	ldr	r0, [r7, #12]
 8006352:	f001 fbe7 	bl	8007b24 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006356:	68f8      	ldr	r0, [r7, #12]
 8006358:	f001 f89a 	bl	8007490 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006362:	2b00      	cmp	r3, #0
 8006364:	d03a      	beq.n	80063dc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006366:	68f8      	ldr	r0, [r7, #12]
 8006368:	f7ff fe42 	bl	8005ff0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2200      	movs	r2, #0
 8006370:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006374:	e032      	b.n	80063dc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006376:	7afb      	ldrb	r3, [r7, #11]
 8006378:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800637c:	b2db      	uxtb	r3, r3
 800637e:	4619      	mov	r1, r3
 8006380:	68f8      	ldr	r0, [r7, #12]
 8006382:	f000 f97f 	bl	8006684 <USBD_CoreFindEP>
 8006386:	4603      	mov	r3, r0
 8006388:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800638a:	7dfb      	ldrb	r3, [r7, #23]
 800638c:	2bff      	cmp	r3, #255	; 0xff
 800638e:	d025      	beq.n	80063dc <USBD_LL_DataInStage+0x15a>
 8006390:	7dfb      	ldrb	r3, [r7, #23]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d122      	bne.n	80063dc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800639c:	b2db      	uxtb	r3, r3
 800639e:	2b03      	cmp	r3, #3
 80063a0:	d11c      	bne.n	80063dc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80063a2:	7dfa      	ldrb	r2, [r7, #23]
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	32ae      	adds	r2, #174	; 0xae
 80063a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063ac:	695b      	ldr	r3, [r3, #20]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d014      	beq.n	80063dc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80063b2:	7dfa      	ldrb	r2, [r7, #23]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80063ba:	7dfa      	ldrb	r2, [r7, #23]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	32ae      	adds	r2, #174	; 0xae
 80063c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063c4:	695b      	ldr	r3, [r3, #20]
 80063c6:	7afa      	ldrb	r2, [r7, #11]
 80063c8:	4611      	mov	r1, r2
 80063ca:	68f8      	ldr	r0, [r7, #12]
 80063cc:	4798      	blx	r3
 80063ce:	4603      	mov	r3, r0
 80063d0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80063d2:	7dbb      	ldrb	r3, [r7, #22]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d001      	beq.n	80063dc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80063d8:	7dbb      	ldrb	r3, [r7, #22]
 80063da:	e000      	b.n	80063de <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80063dc:	2300      	movs	r3, #0
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3718      	adds	r7, #24
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}

080063e6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80063e6:	b580      	push	{r7, lr}
 80063e8:	b084      	sub	sp, #16
 80063ea:	af00      	add	r7, sp, #0
 80063ec:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80063ee:	2300      	movs	r3, #0
 80063f0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2201      	movs	r2, #1
 80063f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2200      	movs	r2, #0
 80063fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2200      	movs	r2, #0
 8006406:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2200      	movs	r2, #0
 800640c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2200      	movs	r2, #0
 8006414:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800641e:	2b00      	cmp	r3, #0
 8006420:	d014      	beq.n	800644c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d00e      	beq.n	800644c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	687a      	ldr	r2, [r7, #4]
 8006438:	6852      	ldr	r2, [r2, #4]
 800643a:	b2d2      	uxtb	r2, r2
 800643c:	4611      	mov	r1, r2
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	4798      	blx	r3
 8006442:	4603      	mov	r3, r0
 8006444:	2b00      	cmp	r3, #0
 8006446:	d001      	beq.n	800644c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006448:	2303      	movs	r3, #3
 800644a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800644c:	2340      	movs	r3, #64	; 0x40
 800644e:	2200      	movs	r2, #0
 8006450:	2100      	movs	r1, #0
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f001 fb21 	bl	8007a9a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2201      	movs	r2, #1
 800645c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2240      	movs	r2, #64	; 0x40
 8006464:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006468:	2340      	movs	r3, #64	; 0x40
 800646a:	2200      	movs	r2, #0
 800646c:	2180      	movs	r1, #128	; 0x80
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f001 fb13 	bl	8007a9a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2201      	movs	r2, #1
 8006478:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2240      	movs	r2, #64	; 0x40
 800647e:	621a      	str	r2, [r3, #32]

  return ret;
 8006480:	7bfb      	ldrb	r3, [r7, #15]
}
 8006482:	4618      	mov	r0, r3
 8006484:	3710      	adds	r7, #16
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}

0800648a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800648a:	b480      	push	{r7}
 800648c:	b083      	sub	sp, #12
 800648e:	af00      	add	r7, sp, #0
 8006490:	6078      	str	r0, [r7, #4]
 8006492:	460b      	mov	r3, r1
 8006494:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	78fa      	ldrb	r2, [r7, #3]
 800649a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800649c:	2300      	movs	r3, #0
}
 800649e:	4618      	mov	r0, r3
 80064a0:	370c      	adds	r7, #12
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr

080064aa <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80064aa:	b480      	push	{r7}
 80064ac:	b083      	sub	sp, #12
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064b8:	b2da      	uxtb	r2, r3
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2204      	movs	r2, #4
 80064c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80064c8:	2300      	movs	r3, #0
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	370c      	adds	r7, #12
 80064ce:	46bd      	mov	sp, r7
 80064d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d4:	4770      	bx	lr

080064d6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80064d6:	b480      	push	{r7}
 80064d8:	b083      	sub	sp, #12
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064e4:	b2db      	uxtb	r3, r3
 80064e6:	2b04      	cmp	r3, #4
 80064e8:	d106      	bne.n	80064f8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80064f0:	b2da      	uxtb	r2, r3
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80064f8:	2300      	movs	r3, #0
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	370c      	adds	r7, #12
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr

08006506 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006506:	b580      	push	{r7, lr}
 8006508:	b082      	sub	sp, #8
 800650a:	af00      	add	r7, sp, #0
 800650c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006514:	b2db      	uxtb	r3, r3
 8006516:	2b03      	cmp	r3, #3
 8006518:	d110      	bne.n	800653c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006520:	2b00      	cmp	r3, #0
 8006522:	d00b      	beq.n	800653c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800652a:	69db      	ldr	r3, [r3, #28]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d005      	beq.n	800653c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006536:	69db      	ldr	r3, [r3, #28]
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800653c:	2300      	movs	r3, #0
}
 800653e:	4618      	mov	r0, r3
 8006540:	3708      	adds	r7, #8
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}

08006546 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006546:	b580      	push	{r7, lr}
 8006548:	b082      	sub	sp, #8
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
 800654e:	460b      	mov	r3, r1
 8006550:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	32ae      	adds	r2, #174	; 0xae
 800655c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d101      	bne.n	8006568 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006564:	2303      	movs	r3, #3
 8006566:	e01c      	b.n	80065a2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800656e:	b2db      	uxtb	r3, r3
 8006570:	2b03      	cmp	r3, #3
 8006572:	d115      	bne.n	80065a0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	32ae      	adds	r2, #174	; 0xae
 800657e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006582:	6a1b      	ldr	r3, [r3, #32]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d00b      	beq.n	80065a0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	32ae      	adds	r2, #174	; 0xae
 8006592:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006596:	6a1b      	ldr	r3, [r3, #32]
 8006598:	78fa      	ldrb	r2, [r7, #3]
 800659a:	4611      	mov	r1, r2
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80065a0:	2300      	movs	r3, #0
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3708      	adds	r7, #8
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}

080065aa <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80065aa:	b580      	push	{r7, lr}
 80065ac:	b082      	sub	sp, #8
 80065ae:	af00      	add	r7, sp, #0
 80065b0:	6078      	str	r0, [r7, #4]
 80065b2:	460b      	mov	r3, r1
 80065b4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	32ae      	adds	r2, #174	; 0xae
 80065c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d101      	bne.n	80065cc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80065c8:	2303      	movs	r3, #3
 80065ca:	e01c      	b.n	8006606 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	2b03      	cmp	r3, #3
 80065d6:	d115      	bne.n	8006604 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	32ae      	adds	r2, #174	; 0xae
 80065e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d00b      	beq.n	8006604 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	32ae      	adds	r2, #174	; 0xae
 80065f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065fc:	78fa      	ldrb	r2, [r7, #3]
 80065fe:	4611      	mov	r1, r2
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006604:	2300      	movs	r3, #0
}
 8006606:	4618      	mov	r0, r3
 8006608:	3708      	adds	r7, #8
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}

0800660e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800660e:	b480      	push	{r7}
 8006610:	b083      	sub	sp, #12
 8006612:	af00      	add	r7, sp, #0
 8006614:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006616:	2300      	movs	r3, #0
}
 8006618:	4618      	mov	r0, r3
 800661a:	370c      	adds	r7, #12
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr

08006624 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b084      	sub	sp, #16
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800662c:	2300      	movs	r3, #0
 800662e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2201      	movs	r2, #1
 8006634:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800663e:	2b00      	cmp	r3, #0
 8006640:	d00e      	beq.n	8006660 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	687a      	ldr	r2, [r7, #4]
 800664c:	6852      	ldr	r2, [r2, #4]
 800664e:	b2d2      	uxtb	r2, r2
 8006650:	4611      	mov	r1, r2
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	4798      	blx	r3
 8006656:	4603      	mov	r3, r0
 8006658:	2b00      	cmp	r3, #0
 800665a:	d001      	beq.n	8006660 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800665c:	2303      	movs	r3, #3
 800665e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006660:	7bfb      	ldrb	r3, [r7, #15]
}
 8006662:	4618      	mov	r0, r3
 8006664:	3710      	adds	r7, #16
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}

0800666a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800666a:	b480      	push	{r7}
 800666c:	b083      	sub	sp, #12
 800666e:	af00      	add	r7, sp, #0
 8006670:	6078      	str	r0, [r7, #4]
 8006672:	460b      	mov	r3, r1
 8006674:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006676:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006678:	4618      	mov	r0, r3
 800667a:	370c      	adds	r7, #12
 800667c:	46bd      	mov	sp, r7
 800667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006682:	4770      	bx	lr

08006684 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006684:	b480      	push	{r7}
 8006686:	b083      	sub	sp, #12
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	460b      	mov	r3, r1
 800668e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006690:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006692:	4618      	mov	r0, r3
 8006694:	370c      	adds	r7, #12
 8006696:	46bd      	mov	sp, r7
 8006698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669c:	4770      	bx	lr

0800669e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800669e:	b580      	push	{r7, lr}
 80066a0:	b086      	sub	sp, #24
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	6078      	str	r0, [r7, #4]
 80066a6:	460b      	mov	r3, r1
 80066a8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80066b2:	2300      	movs	r3, #0
 80066b4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	885b      	ldrh	r3, [r3, #2]
 80066ba:	b29a      	uxth	r2, r3
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	781b      	ldrb	r3, [r3, #0]
 80066c0:	b29b      	uxth	r3, r3
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d920      	bls.n	8006708 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	781b      	ldrb	r3, [r3, #0]
 80066ca:	b29b      	uxth	r3, r3
 80066cc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80066ce:	e013      	b.n	80066f8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80066d0:	f107 030a 	add.w	r3, r7, #10
 80066d4:	4619      	mov	r1, r3
 80066d6:	6978      	ldr	r0, [r7, #20]
 80066d8:	f000 f81b 	bl	8006712 <USBD_GetNextDesc>
 80066dc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	785b      	ldrb	r3, [r3, #1]
 80066e2:	2b05      	cmp	r3, #5
 80066e4:	d108      	bne.n	80066f8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	789b      	ldrb	r3, [r3, #2]
 80066ee:	78fa      	ldrb	r2, [r7, #3]
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d008      	beq.n	8006706 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80066f4:	2300      	movs	r3, #0
 80066f6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	885b      	ldrh	r3, [r3, #2]
 80066fc:	b29a      	uxth	r2, r3
 80066fe:	897b      	ldrh	r3, [r7, #10]
 8006700:	429a      	cmp	r2, r3
 8006702:	d8e5      	bhi.n	80066d0 <USBD_GetEpDesc+0x32>
 8006704:	e000      	b.n	8006708 <USBD_GetEpDesc+0x6a>
          break;
 8006706:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006708:	693b      	ldr	r3, [r7, #16]
}
 800670a:	4618      	mov	r0, r3
 800670c:	3718      	adds	r7, #24
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}

08006712 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006712:	b480      	push	{r7}
 8006714:	b085      	sub	sp, #20
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
 800671a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	881a      	ldrh	r2, [r3, #0]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	781b      	ldrb	r3, [r3, #0]
 8006728:	b29b      	uxth	r3, r3
 800672a:	4413      	add	r3, r2
 800672c:	b29a      	uxth	r2, r3
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	781b      	ldrb	r3, [r3, #0]
 8006736:	461a      	mov	r2, r3
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	4413      	add	r3, r2
 800673c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800673e:	68fb      	ldr	r3, [r7, #12]
}
 8006740:	4618      	mov	r0, r3
 8006742:	3714      	adds	r7, #20
 8006744:	46bd      	mov	sp, r7
 8006746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674a:	4770      	bx	lr

0800674c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800674c:	b480      	push	{r7}
 800674e:	b087      	sub	sp, #28
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	781b      	ldrb	r3, [r3, #0]
 800675c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	3301      	adds	r3, #1
 8006762:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	781b      	ldrb	r3, [r3, #0]
 8006768:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800676a:	8a3b      	ldrh	r3, [r7, #16]
 800676c:	021b      	lsls	r3, r3, #8
 800676e:	b21a      	sxth	r2, r3
 8006770:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006774:	4313      	orrs	r3, r2
 8006776:	b21b      	sxth	r3, r3
 8006778:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800677a:	89fb      	ldrh	r3, [r7, #14]
}
 800677c:	4618      	mov	r0, r3
 800677e:	371c      	adds	r7, #28
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr

08006788 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b084      	sub	sp, #16
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006792:	2300      	movs	r3, #0
 8006794:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	781b      	ldrb	r3, [r3, #0]
 800679a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800679e:	2b40      	cmp	r3, #64	; 0x40
 80067a0:	d005      	beq.n	80067ae <USBD_StdDevReq+0x26>
 80067a2:	2b40      	cmp	r3, #64	; 0x40
 80067a4:	d857      	bhi.n	8006856 <USBD_StdDevReq+0xce>
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d00f      	beq.n	80067ca <USBD_StdDevReq+0x42>
 80067aa:	2b20      	cmp	r3, #32
 80067ac:	d153      	bne.n	8006856 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	32ae      	adds	r2, #174	; 0xae
 80067b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	6839      	ldr	r1, [r7, #0]
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	4798      	blx	r3
 80067c4:	4603      	mov	r3, r0
 80067c6:	73fb      	strb	r3, [r7, #15]
      break;
 80067c8:	e04a      	b.n	8006860 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	785b      	ldrb	r3, [r3, #1]
 80067ce:	2b09      	cmp	r3, #9
 80067d0:	d83b      	bhi.n	800684a <USBD_StdDevReq+0xc2>
 80067d2:	a201      	add	r2, pc, #4	; (adr r2, 80067d8 <USBD_StdDevReq+0x50>)
 80067d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067d8:	0800682d 	.word	0x0800682d
 80067dc:	08006841 	.word	0x08006841
 80067e0:	0800684b 	.word	0x0800684b
 80067e4:	08006837 	.word	0x08006837
 80067e8:	0800684b 	.word	0x0800684b
 80067ec:	0800680b 	.word	0x0800680b
 80067f0:	08006801 	.word	0x08006801
 80067f4:	0800684b 	.word	0x0800684b
 80067f8:	08006823 	.word	0x08006823
 80067fc:	08006815 	.word	0x08006815
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006800:	6839      	ldr	r1, [r7, #0]
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f000 fa3c 	bl	8006c80 <USBD_GetDescriptor>
          break;
 8006808:	e024      	b.n	8006854 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800680a:	6839      	ldr	r1, [r7, #0]
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f000 fba1 	bl	8006f54 <USBD_SetAddress>
          break;
 8006812:	e01f      	b.n	8006854 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006814:	6839      	ldr	r1, [r7, #0]
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 fbe0 	bl	8006fdc <USBD_SetConfig>
 800681c:	4603      	mov	r3, r0
 800681e:	73fb      	strb	r3, [r7, #15]
          break;
 8006820:	e018      	b.n	8006854 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006822:	6839      	ldr	r1, [r7, #0]
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f000 fc83 	bl	8007130 <USBD_GetConfig>
          break;
 800682a:	e013      	b.n	8006854 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800682c:	6839      	ldr	r1, [r7, #0]
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f000 fcb4 	bl	800719c <USBD_GetStatus>
          break;
 8006834:	e00e      	b.n	8006854 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006836:	6839      	ldr	r1, [r7, #0]
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f000 fce3 	bl	8007204 <USBD_SetFeature>
          break;
 800683e:	e009      	b.n	8006854 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006840:	6839      	ldr	r1, [r7, #0]
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f000 fd07 	bl	8007256 <USBD_ClrFeature>
          break;
 8006848:	e004      	b.n	8006854 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800684a:	6839      	ldr	r1, [r7, #0]
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f000 fd5e 	bl	800730e <USBD_CtlError>
          break;
 8006852:	bf00      	nop
      }
      break;
 8006854:	e004      	b.n	8006860 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006856:	6839      	ldr	r1, [r7, #0]
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f000 fd58 	bl	800730e <USBD_CtlError>
      break;
 800685e:	bf00      	nop
  }

  return ret;
 8006860:	7bfb      	ldrb	r3, [r7, #15]
}
 8006862:	4618      	mov	r0, r3
 8006864:	3710      	adds	r7, #16
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}
 800686a:	bf00      	nop

0800686c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b084      	sub	sp, #16
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006876:	2300      	movs	r3, #0
 8006878:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006882:	2b40      	cmp	r3, #64	; 0x40
 8006884:	d005      	beq.n	8006892 <USBD_StdItfReq+0x26>
 8006886:	2b40      	cmp	r3, #64	; 0x40
 8006888:	d852      	bhi.n	8006930 <USBD_StdItfReq+0xc4>
 800688a:	2b00      	cmp	r3, #0
 800688c:	d001      	beq.n	8006892 <USBD_StdItfReq+0x26>
 800688e:	2b20      	cmp	r3, #32
 8006890:	d14e      	bne.n	8006930 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006898:	b2db      	uxtb	r3, r3
 800689a:	3b01      	subs	r3, #1
 800689c:	2b02      	cmp	r3, #2
 800689e:	d840      	bhi.n	8006922 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	889b      	ldrh	r3, [r3, #4]
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	2b01      	cmp	r3, #1
 80068a8:	d836      	bhi.n	8006918 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	889b      	ldrh	r3, [r3, #4]
 80068ae:	b2db      	uxtb	r3, r3
 80068b0:	4619      	mov	r1, r3
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f7ff fed9 	bl	800666a <USBD_CoreFindIF>
 80068b8:	4603      	mov	r3, r0
 80068ba:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80068bc:	7bbb      	ldrb	r3, [r7, #14]
 80068be:	2bff      	cmp	r3, #255	; 0xff
 80068c0:	d01d      	beq.n	80068fe <USBD_StdItfReq+0x92>
 80068c2:	7bbb      	ldrb	r3, [r7, #14]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d11a      	bne.n	80068fe <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80068c8:	7bba      	ldrb	r2, [r7, #14]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	32ae      	adds	r2, #174	; 0xae
 80068ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d00f      	beq.n	80068f8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80068d8:	7bba      	ldrb	r2, [r7, #14]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80068e0:	7bba      	ldrb	r2, [r7, #14]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	32ae      	adds	r2, #174	; 0xae
 80068e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	6839      	ldr	r1, [r7, #0]
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	4798      	blx	r3
 80068f2:	4603      	mov	r3, r0
 80068f4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80068f6:	e004      	b.n	8006902 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80068f8:	2303      	movs	r3, #3
 80068fa:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80068fc:	e001      	b.n	8006902 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80068fe:	2303      	movs	r3, #3
 8006900:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	88db      	ldrh	r3, [r3, #6]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d110      	bne.n	800692c <USBD_StdItfReq+0xc0>
 800690a:	7bfb      	ldrb	r3, [r7, #15]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d10d      	bne.n	800692c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f000 fdaa 	bl	800746a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006916:	e009      	b.n	800692c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006918:	6839      	ldr	r1, [r7, #0]
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f000 fcf7 	bl	800730e <USBD_CtlError>
          break;
 8006920:	e004      	b.n	800692c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006922:	6839      	ldr	r1, [r7, #0]
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f000 fcf2 	bl	800730e <USBD_CtlError>
          break;
 800692a:	e000      	b.n	800692e <USBD_StdItfReq+0xc2>
          break;
 800692c:	bf00      	nop
      }
      break;
 800692e:	e004      	b.n	800693a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006930:	6839      	ldr	r1, [r7, #0]
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f000 fceb 	bl	800730e <USBD_CtlError>
      break;
 8006938:	bf00      	nop
  }

  return ret;
 800693a:	7bfb      	ldrb	r3, [r7, #15]
}
 800693c:	4618      	mov	r0, r3
 800693e:	3710      	adds	r7, #16
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}

08006944 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b084      	sub	sp, #16
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800694e:	2300      	movs	r3, #0
 8006950:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	889b      	ldrh	r3, [r3, #4]
 8006956:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006960:	2b40      	cmp	r3, #64	; 0x40
 8006962:	d007      	beq.n	8006974 <USBD_StdEPReq+0x30>
 8006964:	2b40      	cmp	r3, #64	; 0x40
 8006966:	f200 817f 	bhi.w	8006c68 <USBD_StdEPReq+0x324>
 800696a:	2b00      	cmp	r3, #0
 800696c:	d02a      	beq.n	80069c4 <USBD_StdEPReq+0x80>
 800696e:	2b20      	cmp	r3, #32
 8006970:	f040 817a 	bne.w	8006c68 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006974:	7bbb      	ldrb	r3, [r7, #14]
 8006976:	4619      	mov	r1, r3
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f7ff fe83 	bl	8006684 <USBD_CoreFindEP>
 800697e:	4603      	mov	r3, r0
 8006980:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006982:	7b7b      	ldrb	r3, [r7, #13]
 8006984:	2bff      	cmp	r3, #255	; 0xff
 8006986:	f000 8174 	beq.w	8006c72 <USBD_StdEPReq+0x32e>
 800698a:	7b7b      	ldrb	r3, [r7, #13]
 800698c:	2b00      	cmp	r3, #0
 800698e:	f040 8170 	bne.w	8006c72 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006992:	7b7a      	ldrb	r2, [r7, #13]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800699a:	7b7a      	ldrb	r2, [r7, #13]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	32ae      	adds	r2, #174	; 0xae
 80069a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	f000 8163 	beq.w	8006c72 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80069ac:	7b7a      	ldrb	r2, [r7, #13]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	32ae      	adds	r2, #174	; 0xae
 80069b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069b6:	689b      	ldr	r3, [r3, #8]
 80069b8:	6839      	ldr	r1, [r7, #0]
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	4798      	blx	r3
 80069be:	4603      	mov	r3, r0
 80069c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80069c2:	e156      	b.n	8006c72 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	785b      	ldrb	r3, [r3, #1]
 80069c8:	2b03      	cmp	r3, #3
 80069ca:	d008      	beq.n	80069de <USBD_StdEPReq+0x9a>
 80069cc:	2b03      	cmp	r3, #3
 80069ce:	f300 8145 	bgt.w	8006c5c <USBD_StdEPReq+0x318>
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	f000 809b 	beq.w	8006b0e <USBD_StdEPReq+0x1ca>
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d03c      	beq.n	8006a56 <USBD_StdEPReq+0x112>
 80069dc:	e13e      	b.n	8006c5c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069e4:	b2db      	uxtb	r3, r3
 80069e6:	2b02      	cmp	r3, #2
 80069e8:	d002      	beq.n	80069f0 <USBD_StdEPReq+0xac>
 80069ea:	2b03      	cmp	r3, #3
 80069ec:	d016      	beq.n	8006a1c <USBD_StdEPReq+0xd8>
 80069ee:	e02c      	b.n	8006a4a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80069f0:	7bbb      	ldrb	r3, [r7, #14]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d00d      	beq.n	8006a12 <USBD_StdEPReq+0xce>
 80069f6:	7bbb      	ldrb	r3, [r7, #14]
 80069f8:	2b80      	cmp	r3, #128	; 0x80
 80069fa:	d00a      	beq.n	8006a12 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80069fc:	7bbb      	ldrb	r3, [r7, #14]
 80069fe:	4619      	mov	r1, r3
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f001 f88f 	bl	8007b24 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006a06:	2180      	movs	r1, #128	; 0x80
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f001 f88b 	bl	8007b24 <USBD_LL_StallEP>
 8006a0e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006a10:	e020      	b.n	8006a54 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006a12:	6839      	ldr	r1, [r7, #0]
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f000 fc7a 	bl	800730e <USBD_CtlError>
              break;
 8006a1a:	e01b      	b.n	8006a54 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	885b      	ldrh	r3, [r3, #2]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d10e      	bne.n	8006a42 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006a24:	7bbb      	ldrb	r3, [r7, #14]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d00b      	beq.n	8006a42 <USBD_StdEPReq+0xfe>
 8006a2a:	7bbb      	ldrb	r3, [r7, #14]
 8006a2c:	2b80      	cmp	r3, #128	; 0x80
 8006a2e:	d008      	beq.n	8006a42 <USBD_StdEPReq+0xfe>
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	88db      	ldrh	r3, [r3, #6]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d104      	bne.n	8006a42 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006a38:	7bbb      	ldrb	r3, [r7, #14]
 8006a3a:	4619      	mov	r1, r3
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f001 f871 	bl	8007b24 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f000 fd11 	bl	800746a <USBD_CtlSendStatus>

              break;
 8006a48:	e004      	b.n	8006a54 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006a4a:	6839      	ldr	r1, [r7, #0]
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f000 fc5e 	bl	800730e <USBD_CtlError>
              break;
 8006a52:	bf00      	nop
          }
          break;
 8006a54:	e107      	b.n	8006c66 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a5c:	b2db      	uxtb	r3, r3
 8006a5e:	2b02      	cmp	r3, #2
 8006a60:	d002      	beq.n	8006a68 <USBD_StdEPReq+0x124>
 8006a62:	2b03      	cmp	r3, #3
 8006a64:	d016      	beq.n	8006a94 <USBD_StdEPReq+0x150>
 8006a66:	e04b      	b.n	8006b00 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006a68:	7bbb      	ldrb	r3, [r7, #14]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d00d      	beq.n	8006a8a <USBD_StdEPReq+0x146>
 8006a6e:	7bbb      	ldrb	r3, [r7, #14]
 8006a70:	2b80      	cmp	r3, #128	; 0x80
 8006a72:	d00a      	beq.n	8006a8a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006a74:	7bbb      	ldrb	r3, [r7, #14]
 8006a76:	4619      	mov	r1, r3
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f001 f853 	bl	8007b24 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006a7e:	2180      	movs	r1, #128	; 0x80
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f001 f84f 	bl	8007b24 <USBD_LL_StallEP>
 8006a86:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006a88:	e040      	b.n	8006b0c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006a8a:	6839      	ldr	r1, [r7, #0]
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f000 fc3e 	bl	800730e <USBD_CtlError>
              break;
 8006a92:	e03b      	b.n	8006b0c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	885b      	ldrh	r3, [r3, #2]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d136      	bne.n	8006b0a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006a9c:	7bbb      	ldrb	r3, [r7, #14]
 8006a9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d004      	beq.n	8006ab0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006aa6:	7bbb      	ldrb	r3, [r7, #14]
 8006aa8:	4619      	mov	r1, r3
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f001 f859 	bl	8007b62 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f000 fcda 	bl	800746a <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006ab6:	7bbb      	ldrb	r3, [r7, #14]
 8006ab8:	4619      	mov	r1, r3
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f7ff fde2 	bl	8006684 <USBD_CoreFindEP>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006ac4:	7b7b      	ldrb	r3, [r7, #13]
 8006ac6:	2bff      	cmp	r3, #255	; 0xff
 8006ac8:	d01f      	beq.n	8006b0a <USBD_StdEPReq+0x1c6>
 8006aca:	7b7b      	ldrb	r3, [r7, #13]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d11c      	bne.n	8006b0a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006ad0:	7b7a      	ldrb	r2, [r7, #13]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006ad8:	7b7a      	ldrb	r2, [r7, #13]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	32ae      	adds	r2, #174	; 0xae
 8006ade:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d010      	beq.n	8006b0a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006ae8:	7b7a      	ldrb	r2, [r7, #13]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	32ae      	adds	r2, #174	; 0xae
 8006aee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	6839      	ldr	r1, [r7, #0]
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	4798      	blx	r3
 8006afa:	4603      	mov	r3, r0
 8006afc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006afe:	e004      	b.n	8006b0a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006b00:	6839      	ldr	r1, [r7, #0]
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f000 fc03 	bl	800730e <USBD_CtlError>
              break;
 8006b08:	e000      	b.n	8006b0c <USBD_StdEPReq+0x1c8>
              break;
 8006b0a:	bf00      	nop
          }
          break;
 8006b0c:	e0ab      	b.n	8006c66 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b14:	b2db      	uxtb	r3, r3
 8006b16:	2b02      	cmp	r3, #2
 8006b18:	d002      	beq.n	8006b20 <USBD_StdEPReq+0x1dc>
 8006b1a:	2b03      	cmp	r3, #3
 8006b1c:	d032      	beq.n	8006b84 <USBD_StdEPReq+0x240>
 8006b1e:	e097      	b.n	8006c50 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b20:	7bbb      	ldrb	r3, [r7, #14]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d007      	beq.n	8006b36 <USBD_StdEPReq+0x1f2>
 8006b26:	7bbb      	ldrb	r3, [r7, #14]
 8006b28:	2b80      	cmp	r3, #128	; 0x80
 8006b2a:	d004      	beq.n	8006b36 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006b2c:	6839      	ldr	r1, [r7, #0]
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f000 fbed 	bl	800730e <USBD_CtlError>
                break;
 8006b34:	e091      	b.n	8006c5a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b36:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	da0b      	bge.n	8006b56 <USBD_StdEPReq+0x212>
 8006b3e:	7bbb      	ldrb	r3, [r7, #14]
 8006b40:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006b44:	4613      	mov	r3, r2
 8006b46:	009b      	lsls	r3, r3, #2
 8006b48:	4413      	add	r3, r2
 8006b4a:	009b      	lsls	r3, r3, #2
 8006b4c:	3310      	adds	r3, #16
 8006b4e:	687a      	ldr	r2, [r7, #4]
 8006b50:	4413      	add	r3, r2
 8006b52:	3304      	adds	r3, #4
 8006b54:	e00b      	b.n	8006b6e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006b56:	7bbb      	ldrb	r3, [r7, #14]
 8006b58:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b5c:	4613      	mov	r3, r2
 8006b5e:	009b      	lsls	r3, r3, #2
 8006b60:	4413      	add	r3, r2
 8006b62:	009b      	lsls	r3, r3, #2
 8006b64:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	4413      	add	r3, r2
 8006b6c:	3304      	adds	r3, #4
 8006b6e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	2200      	movs	r2, #0
 8006b74:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	2202      	movs	r2, #2
 8006b7a:	4619      	mov	r1, r3
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f000 fc37 	bl	80073f0 <USBD_CtlSendData>
              break;
 8006b82:	e06a      	b.n	8006c5a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006b84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	da11      	bge.n	8006bb0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006b8c:	7bbb      	ldrb	r3, [r7, #14]
 8006b8e:	f003 020f 	and.w	r2, r3, #15
 8006b92:	6879      	ldr	r1, [r7, #4]
 8006b94:	4613      	mov	r3, r2
 8006b96:	009b      	lsls	r3, r3, #2
 8006b98:	4413      	add	r3, r2
 8006b9a:	009b      	lsls	r3, r3, #2
 8006b9c:	440b      	add	r3, r1
 8006b9e:	3324      	adds	r3, #36	; 0x24
 8006ba0:	881b      	ldrh	r3, [r3, #0]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d117      	bne.n	8006bd6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006ba6:	6839      	ldr	r1, [r7, #0]
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f000 fbb0 	bl	800730e <USBD_CtlError>
                  break;
 8006bae:	e054      	b.n	8006c5a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006bb0:	7bbb      	ldrb	r3, [r7, #14]
 8006bb2:	f003 020f 	and.w	r2, r3, #15
 8006bb6:	6879      	ldr	r1, [r7, #4]
 8006bb8:	4613      	mov	r3, r2
 8006bba:	009b      	lsls	r3, r3, #2
 8006bbc:	4413      	add	r3, r2
 8006bbe:	009b      	lsls	r3, r3, #2
 8006bc0:	440b      	add	r3, r1
 8006bc2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006bc6:	881b      	ldrh	r3, [r3, #0]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d104      	bne.n	8006bd6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006bcc:	6839      	ldr	r1, [r7, #0]
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f000 fb9d 	bl	800730e <USBD_CtlError>
                  break;
 8006bd4:	e041      	b.n	8006c5a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006bd6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	da0b      	bge.n	8006bf6 <USBD_StdEPReq+0x2b2>
 8006bde:	7bbb      	ldrb	r3, [r7, #14]
 8006be0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006be4:	4613      	mov	r3, r2
 8006be6:	009b      	lsls	r3, r3, #2
 8006be8:	4413      	add	r3, r2
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	3310      	adds	r3, #16
 8006bee:	687a      	ldr	r2, [r7, #4]
 8006bf0:	4413      	add	r3, r2
 8006bf2:	3304      	adds	r3, #4
 8006bf4:	e00b      	b.n	8006c0e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006bf6:	7bbb      	ldrb	r3, [r7, #14]
 8006bf8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006bfc:	4613      	mov	r3, r2
 8006bfe:	009b      	lsls	r3, r3, #2
 8006c00:	4413      	add	r3, r2
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006c08:	687a      	ldr	r2, [r7, #4]
 8006c0a:	4413      	add	r3, r2
 8006c0c:	3304      	adds	r3, #4
 8006c0e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006c10:	7bbb      	ldrb	r3, [r7, #14]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d002      	beq.n	8006c1c <USBD_StdEPReq+0x2d8>
 8006c16:	7bbb      	ldrb	r3, [r7, #14]
 8006c18:	2b80      	cmp	r3, #128	; 0x80
 8006c1a:	d103      	bne.n	8006c24 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	601a      	str	r2, [r3, #0]
 8006c22:	e00e      	b.n	8006c42 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006c24:	7bbb      	ldrb	r3, [r7, #14]
 8006c26:	4619      	mov	r1, r3
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f000 ffb9 	bl	8007ba0 <USBD_LL_IsStallEP>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d003      	beq.n	8006c3c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	2201      	movs	r2, #1
 8006c38:	601a      	str	r2, [r3, #0]
 8006c3a:	e002      	b.n	8006c42 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	2202      	movs	r2, #2
 8006c46:	4619      	mov	r1, r3
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f000 fbd1 	bl	80073f0 <USBD_CtlSendData>
              break;
 8006c4e:	e004      	b.n	8006c5a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006c50:	6839      	ldr	r1, [r7, #0]
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f000 fb5b 	bl	800730e <USBD_CtlError>
              break;
 8006c58:	bf00      	nop
          }
          break;
 8006c5a:	e004      	b.n	8006c66 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006c5c:	6839      	ldr	r1, [r7, #0]
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 fb55 	bl	800730e <USBD_CtlError>
          break;
 8006c64:	bf00      	nop
      }
      break;
 8006c66:	e005      	b.n	8006c74 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006c68:	6839      	ldr	r1, [r7, #0]
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f000 fb4f 	bl	800730e <USBD_CtlError>
      break;
 8006c70:	e000      	b.n	8006c74 <USBD_StdEPReq+0x330>
      break;
 8006c72:	bf00      	nop
  }

  return ret;
 8006c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3710      	adds	r7, #16
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}
	...

08006c80 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b084      	sub	sp, #16
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006c92:	2300      	movs	r3, #0
 8006c94:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	885b      	ldrh	r3, [r3, #2]
 8006c9a:	0a1b      	lsrs	r3, r3, #8
 8006c9c:	b29b      	uxth	r3, r3
 8006c9e:	3b01      	subs	r3, #1
 8006ca0:	2b06      	cmp	r3, #6
 8006ca2:	f200 8128 	bhi.w	8006ef6 <USBD_GetDescriptor+0x276>
 8006ca6:	a201      	add	r2, pc, #4	; (adr r2, 8006cac <USBD_GetDescriptor+0x2c>)
 8006ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cac:	08006cc9 	.word	0x08006cc9
 8006cb0:	08006ce1 	.word	0x08006ce1
 8006cb4:	08006d21 	.word	0x08006d21
 8006cb8:	08006ef7 	.word	0x08006ef7
 8006cbc:	08006ef7 	.word	0x08006ef7
 8006cc0:	08006e97 	.word	0x08006e97
 8006cc4:	08006ec3 	.word	0x08006ec3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	687a      	ldr	r2, [r7, #4]
 8006cd2:	7c12      	ldrb	r2, [r2, #16]
 8006cd4:	f107 0108 	add.w	r1, r7, #8
 8006cd8:	4610      	mov	r0, r2
 8006cda:	4798      	blx	r3
 8006cdc:	60f8      	str	r0, [r7, #12]
      break;
 8006cde:	e112      	b.n	8006f06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	7c1b      	ldrb	r3, [r3, #16]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d10d      	bne.n	8006d04 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cf0:	f107 0208 	add.w	r2, r7, #8
 8006cf4:	4610      	mov	r0, r2
 8006cf6:	4798      	blx	r3
 8006cf8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	3301      	adds	r3, #1
 8006cfe:	2202      	movs	r2, #2
 8006d00:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006d02:	e100      	b.n	8006f06 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d0c:	f107 0208 	add.w	r2, r7, #8
 8006d10:	4610      	mov	r0, r2
 8006d12:	4798      	blx	r3
 8006d14:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	3301      	adds	r3, #1
 8006d1a:	2202      	movs	r2, #2
 8006d1c:	701a      	strb	r2, [r3, #0]
      break;
 8006d1e:	e0f2      	b.n	8006f06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	885b      	ldrh	r3, [r3, #2]
 8006d24:	b2db      	uxtb	r3, r3
 8006d26:	2b05      	cmp	r3, #5
 8006d28:	f200 80ac 	bhi.w	8006e84 <USBD_GetDescriptor+0x204>
 8006d2c:	a201      	add	r2, pc, #4	; (adr r2, 8006d34 <USBD_GetDescriptor+0xb4>)
 8006d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d32:	bf00      	nop
 8006d34:	08006d4d 	.word	0x08006d4d
 8006d38:	08006d81 	.word	0x08006d81
 8006d3c:	08006db5 	.word	0x08006db5
 8006d40:	08006de9 	.word	0x08006de9
 8006d44:	08006e1d 	.word	0x08006e1d
 8006d48:	08006e51 	.word	0x08006e51
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d00b      	beq.n	8006d70 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	7c12      	ldrb	r2, [r2, #16]
 8006d64:	f107 0108 	add.w	r1, r7, #8
 8006d68:	4610      	mov	r0, r2
 8006d6a:	4798      	blx	r3
 8006d6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d6e:	e091      	b.n	8006e94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d70:	6839      	ldr	r1, [r7, #0]
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f000 facb 	bl	800730e <USBD_CtlError>
            err++;
 8006d78:	7afb      	ldrb	r3, [r7, #11]
 8006d7a:	3301      	adds	r3, #1
 8006d7c:	72fb      	strb	r3, [r7, #11]
          break;
 8006d7e:	e089      	b.n	8006e94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d00b      	beq.n	8006da4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	687a      	ldr	r2, [r7, #4]
 8006d96:	7c12      	ldrb	r2, [r2, #16]
 8006d98:	f107 0108 	add.w	r1, r7, #8
 8006d9c:	4610      	mov	r0, r2
 8006d9e:	4798      	blx	r3
 8006da0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006da2:	e077      	b.n	8006e94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006da4:	6839      	ldr	r1, [r7, #0]
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f000 fab1 	bl	800730e <USBD_CtlError>
            err++;
 8006dac:	7afb      	ldrb	r3, [r7, #11]
 8006dae:	3301      	adds	r3, #1
 8006db0:	72fb      	strb	r3, [r7, #11]
          break;
 8006db2:	e06f      	b.n	8006e94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dba:	68db      	ldr	r3, [r3, #12]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d00b      	beq.n	8006dd8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dc6:	68db      	ldr	r3, [r3, #12]
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	7c12      	ldrb	r2, [r2, #16]
 8006dcc:	f107 0108 	add.w	r1, r7, #8
 8006dd0:	4610      	mov	r0, r2
 8006dd2:	4798      	blx	r3
 8006dd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006dd6:	e05d      	b.n	8006e94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006dd8:	6839      	ldr	r1, [r7, #0]
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f000 fa97 	bl	800730e <USBD_CtlError>
            err++;
 8006de0:	7afb      	ldrb	r3, [r7, #11]
 8006de2:	3301      	adds	r3, #1
 8006de4:	72fb      	strb	r3, [r7, #11]
          break;
 8006de6:	e055      	b.n	8006e94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dee:	691b      	ldr	r3, [r3, #16]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d00b      	beq.n	8006e0c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dfa:	691b      	ldr	r3, [r3, #16]
 8006dfc:	687a      	ldr	r2, [r7, #4]
 8006dfe:	7c12      	ldrb	r2, [r2, #16]
 8006e00:	f107 0108 	add.w	r1, r7, #8
 8006e04:	4610      	mov	r0, r2
 8006e06:	4798      	blx	r3
 8006e08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e0a:	e043      	b.n	8006e94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e0c:	6839      	ldr	r1, [r7, #0]
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f000 fa7d 	bl	800730e <USBD_CtlError>
            err++;
 8006e14:	7afb      	ldrb	r3, [r7, #11]
 8006e16:	3301      	adds	r3, #1
 8006e18:	72fb      	strb	r3, [r7, #11]
          break;
 8006e1a:	e03b      	b.n	8006e94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e22:	695b      	ldr	r3, [r3, #20]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d00b      	beq.n	8006e40 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e2e:	695b      	ldr	r3, [r3, #20]
 8006e30:	687a      	ldr	r2, [r7, #4]
 8006e32:	7c12      	ldrb	r2, [r2, #16]
 8006e34:	f107 0108 	add.w	r1, r7, #8
 8006e38:	4610      	mov	r0, r2
 8006e3a:	4798      	blx	r3
 8006e3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e3e:	e029      	b.n	8006e94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e40:	6839      	ldr	r1, [r7, #0]
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f000 fa63 	bl	800730e <USBD_CtlError>
            err++;
 8006e48:	7afb      	ldrb	r3, [r7, #11]
 8006e4a:	3301      	adds	r3, #1
 8006e4c:	72fb      	strb	r3, [r7, #11]
          break;
 8006e4e:	e021      	b.n	8006e94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e56:	699b      	ldr	r3, [r3, #24]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d00b      	beq.n	8006e74 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e62:	699b      	ldr	r3, [r3, #24]
 8006e64:	687a      	ldr	r2, [r7, #4]
 8006e66:	7c12      	ldrb	r2, [r2, #16]
 8006e68:	f107 0108 	add.w	r1, r7, #8
 8006e6c:	4610      	mov	r0, r2
 8006e6e:	4798      	blx	r3
 8006e70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e72:	e00f      	b.n	8006e94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e74:	6839      	ldr	r1, [r7, #0]
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f000 fa49 	bl	800730e <USBD_CtlError>
            err++;
 8006e7c:	7afb      	ldrb	r3, [r7, #11]
 8006e7e:	3301      	adds	r3, #1
 8006e80:	72fb      	strb	r3, [r7, #11]
          break;
 8006e82:	e007      	b.n	8006e94 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006e84:	6839      	ldr	r1, [r7, #0]
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f000 fa41 	bl	800730e <USBD_CtlError>
          err++;
 8006e8c:	7afb      	ldrb	r3, [r7, #11]
 8006e8e:	3301      	adds	r3, #1
 8006e90:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006e92:	bf00      	nop
      }
      break;
 8006e94:	e037      	b.n	8006f06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	7c1b      	ldrb	r3, [r3, #16]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d109      	bne.n	8006eb2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ea6:	f107 0208 	add.w	r2, r7, #8
 8006eaa:	4610      	mov	r0, r2
 8006eac:	4798      	blx	r3
 8006eae:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006eb0:	e029      	b.n	8006f06 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006eb2:	6839      	ldr	r1, [r7, #0]
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f000 fa2a 	bl	800730e <USBD_CtlError>
        err++;
 8006eba:	7afb      	ldrb	r3, [r7, #11]
 8006ebc:	3301      	adds	r3, #1
 8006ebe:	72fb      	strb	r3, [r7, #11]
      break;
 8006ec0:	e021      	b.n	8006f06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	7c1b      	ldrb	r3, [r3, #16]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d10d      	bne.n	8006ee6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ed2:	f107 0208 	add.w	r2, r7, #8
 8006ed6:	4610      	mov	r0, r2
 8006ed8:	4798      	blx	r3
 8006eda:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	3301      	adds	r3, #1
 8006ee0:	2207      	movs	r2, #7
 8006ee2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006ee4:	e00f      	b.n	8006f06 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006ee6:	6839      	ldr	r1, [r7, #0]
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f000 fa10 	bl	800730e <USBD_CtlError>
        err++;
 8006eee:	7afb      	ldrb	r3, [r7, #11]
 8006ef0:	3301      	adds	r3, #1
 8006ef2:	72fb      	strb	r3, [r7, #11]
      break;
 8006ef4:	e007      	b.n	8006f06 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006ef6:	6839      	ldr	r1, [r7, #0]
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f000 fa08 	bl	800730e <USBD_CtlError>
      err++;
 8006efe:	7afb      	ldrb	r3, [r7, #11]
 8006f00:	3301      	adds	r3, #1
 8006f02:	72fb      	strb	r3, [r7, #11]
      break;
 8006f04:	bf00      	nop
  }

  if (err != 0U)
 8006f06:	7afb      	ldrb	r3, [r7, #11]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d11e      	bne.n	8006f4a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	88db      	ldrh	r3, [r3, #6]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d016      	beq.n	8006f42 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006f14:	893b      	ldrh	r3, [r7, #8]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d00e      	beq.n	8006f38 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	88da      	ldrh	r2, [r3, #6]
 8006f1e:	893b      	ldrh	r3, [r7, #8]
 8006f20:	4293      	cmp	r3, r2
 8006f22:	bf28      	it	cs
 8006f24:	4613      	movcs	r3, r2
 8006f26:	b29b      	uxth	r3, r3
 8006f28:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006f2a:	893b      	ldrh	r3, [r7, #8]
 8006f2c:	461a      	mov	r2, r3
 8006f2e:	68f9      	ldr	r1, [r7, #12]
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f000 fa5d 	bl	80073f0 <USBD_CtlSendData>
 8006f36:	e009      	b.n	8006f4c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006f38:	6839      	ldr	r1, [r7, #0]
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f000 f9e7 	bl	800730e <USBD_CtlError>
 8006f40:	e004      	b.n	8006f4c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 fa91 	bl	800746a <USBD_CtlSendStatus>
 8006f48:	e000      	b.n	8006f4c <USBD_GetDescriptor+0x2cc>
    return;
 8006f4a:	bf00      	nop
  }
}
 8006f4c:	3710      	adds	r7, #16
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}
 8006f52:	bf00      	nop

08006f54 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b084      	sub	sp, #16
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
 8006f5c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	889b      	ldrh	r3, [r3, #4]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d131      	bne.n	8006fca <USBD_SetAddress+0x76>
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	88db      	ldrh	r3, [r3, #6]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d12d      	bne.n	8006fca <USBD_SetAddress+0x76>
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	885b      	ldrh	r3, [r3, #2]
 8006f72:	2b7f      	cmp	r3, #127	; 0x7f
 8006f74:	d829      	bhi.n	8006fca <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	885b      	ldrh	r3, [r3, #2]
 8006f7a:	b2db      	uxtb	r3, r3
 8006f7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f80:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f88:	b2db      	uxtb	r3, r3
 8006f8a:	2b03      	cmp	r3, #3
 8006f8c:	d104      	bne.n	8006f98 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006f8e:	6839      	ldr	r1, [r7, #0]
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f000 f9bc 	bl	800730e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f96:	e01d      	b.n	8006fd4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	7bfa      	ldrb	r2, [r7, #15]
 8006f9c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006fa0:	7bfb      	ldrb	r3, [r7, #15]
 8006fa2:	4619      	mov	r1, r3
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f000 fe27 	bl	8007bf8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f000 fa5d 	bl	800746a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006fb0:	7bfb      	ldrb	r3, [r7, #15]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d004      	beq.n	8006fc0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2202      	movs	r2, #2
 8006fba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fbe:	e009      	b.n	8006fd4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fc8:	e004      	b.n	8006fd4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006fca:	6839      	ldr	r1, [r7, #0]
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f000 f99e 	bl	800730e <USBD_CtlError>
  }
}
 8006fd2:	bf00      	nop
 8006fd4:	bf00      	nop
 8006fd6:	3710      	adds	r7, #16
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}

08006fdc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b084      	sub	sp, #16
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	885b      	ldrh	r3, [r3, #2]
 8006fee:	b2da      	uxtb	r2, r3
 8006ff0:	4b4e      	ldr	r3, [pc, #312]	; (800712c <USBD_SetConfig+0x150>)
 8006ff2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006ff4:	4b4d      	ldr	r3, [pc, #308]	; (800712c <USBD_SetConfig+0x150>)
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d905      	bls.n	8007008 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006ffc:	6839      	ldr	r1, [r7, #0]
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f000 f985 	bl	800730e <USBD_CtlError>
    return USBD_FAIL;
 8007004:	2303      	movs	r3, #3
 8007006:	e08c      	b.n	8007122 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800700e:	b2db      	uxtb	r3, r3
 8007010:	2b02      	cmp	r3, #2
 8007012:	d002      	beq.n	800701a <USBD_SetConfig+0x3e>
 8007014:	2b03      	cmp	r3, #3
 8007016:	d029      	beq.n	800706c <USBD_SetConfig+0x90>
 8007018:	e075      	b.n	8007106 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800701a:	4b44      	ldr	r3, [pc, #272]	; (800712c <USBD_SetConfig+0x150>)
 800701c:	781b      	ldrb	r3, [r3, #0]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d020      	beq.n	8007064 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007022:	4b42      	ldr	r3, [pc, #264]	; (800712c <USBD_SetConfig+0x150>)
 8007024:	781b      	ldrb	r3, [r3, #0]
 8007026:	461a      	mov	r2, r3
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800702c:	4b3f      	ldr	r3, [pc, #252]	; (800712c <USBD_SetConfig+0x150>)
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	4619      	mov	r1, r3
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f7fe ffe7 	bl	8006006 <USBD_SetClassConfig>
 8007038:	4603      	mov	r3, r0
 800703a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800703c:	7bfb      	ldrb	r3, [r7, #15]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d008      	beq.n	8007054 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007042:	6839      	ldr	r1, [r7, #0]
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f000 f962 	bl	800730e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2202      	movs	r2, #2
 800704e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007052:	e065      	b.n	8007120 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f000 fa08 	bl	800746a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2203      	movs	r2, #3
 800705e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007062:	e05d      	b.n	8007120 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f000 fa00 	bl	800746a <USBD_CtlSendStatus>
      break;
 800706a:	e059      	b.n	8007120 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800706c:	4b2f      	ldr	r3, [pc, #188]	; (800712c <USBD_SetConfig+0x150>)
 800706e:	781b      	ldrb	r3, [r3, #0]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d112      	bne.n	800709a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2202      	movs	r2, #2
 8007078:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800707c:	4b2b      	ldr	r3, [pc, #172]	; (800712c <USBD_SetConfig+0x150>)
 800707e:	781b      	ldrb	r3, [r3, #0]
 8007080:	461a      	mov	r2, r3
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007086:	4b29      	ldr	r3, [pc, #164]	; (800712c <USBD_SetConfig+0x150>)
 8007088:	781b      	ldrb	r3, [r3, #0]
 800708a:	4619      	mov	r1, r3
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f7fe ffd6 	bl	800603e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 f9e9 	bl	800746a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007098:	e042      	b.n	8007120 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800709a:	4b24      	ldr	r3, [pc, #144]	; (800712c <USBD_SetConfig+0x150>)
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	461a      	mov	r2, r3
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	429a      	cmp	r2, r3
 80070a6:	d02a      	beq.n	80070fe <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	b2db      	uxtb	r3, r3
 80070ae:	4619      	mov	r1, r3
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f7fe ffc4 	bl	800603e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80070b6:	4b1d      	ldr	r3, [pc, #116]	; (800712c <USBD_SetConfig+0x150>)
 80070b8:	781b      	ldrb	r3, [r3, #0]
 80070ba:	461a      	mov	r2, r3
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80070c0:	4b1a      	ldr	r3, [pc, #104]	; (800712c <USBD_SetConfig+0x150>)
 80070c2:	781b      	ldrb	r3, [r3, #0]
 80070c4:	4619      	mov	r1, r3
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f7fe ff9d 	bl	8006006 <USBD_SetClassConfig>
 80070cc:	4603      	mov	r3, r0
 80070ce:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80070d0:	7bfb      	ldrb	r3, [r7, #15]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d00f      	beq.n	80070f6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80070d6:	6839      	ldr	r1, [r7, #0]
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f000 f918 	bl	800730e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	b2db      	uxtb	r3, r3
 80070e4:	4619      	mov	r1, r3
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f7fe ffa9 	bl	800603e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2202      	movs	r2, #2
 80070f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80070f4:	e014      	b.n	8007120 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f000 f9b7 	bl	800746a <USBD_CtlSendStatus>
      break;
 80070fc:	e010      	b.n	8007120 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f000 f9b3 	bl	800746a <USBD_CtlSendStatus>
      break;
 8007104:	e00c      	b.n	8007120 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007106:	6839      	ldr	r1, [r7, #0]
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f000 f900 	bl	800730e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800710e:	4b07      	ldr	r3, [pc, #28]	; (800712c <USBD_SetConfig+0x150>)
 8007110:	781b      	ldrb	r3, [r3, #0]
 8007112:	4619      	mov	r1, r3
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f7fe ff92 	bl	800603e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800711a:	2303      	movs	r3, #3
 800711c:	73fb      	strb	r3, [r7, #15]
      break;
 800711e:	bf00      	nop
  }

  return ret;
 8007120:	7bfb      	ldrb	r3, [r7, #15]
}
 8007122:	4618      	mov	r0, r3
 8007124:	3710      	adds	r7, #16
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}
 800712a:	bf00      	nop
 800712c:	20000190 	.word	0x20000190

08007130 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b082      	sub	sp, #8
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
 8007138:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	88db      	ldrh	r3, [r3, #6]
 800713e:	2b01      	cmp	r3, #1
 8007140:	d004      	beq.n	800714c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007142:	6839      	ldr	r1, [r7, #0]
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f000 f8e2 	bl	800730e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800714a:	e023      	b.n	8007194 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007152:	b2db      	uxtb	r3, r3
 8007154:	2b02      	cmp	r3, #2
 8007156:	dc02      	bgt.n	800715e <USBD_GetConfig+0x2e>
 8007158:	2b00      	cmp	r3, #0
 800715a:	dc03      	bgt.n	8007164 <USBD_GetConfig+0x34>
 800715c:	e015      	b.n	800718a <USBD_GetConfig+0x5a>
 800715e:	2b03      	cmp	r3, #3
 8007160:	d00b      	beq.n	800717a <USBD_GetConfig+0x4a>
 8007162:	e012      	b.n	800718a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2200      	movs	r2, #0
 8007168:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	3308      	adds	r3, #8
 800716e:	2201      	movs	r2, #1
 8007170:	4619      	mov	r1, r3
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f000 f93c 	bl	80073f0 <USBD_CtlSendData>
        break;
 8007178:	e00c      	b.n	8007194 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	3304      	adds	r3, #4
 800717e:	2201      	movs	r2, #1
 8007180:	4619      	mov	r1, r3
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f000 f934 	bl	80073f0 <USBD_CtlSendData>
        break;
 8007188:	e004      	b.n	8007194 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800718a:	6839      	ldr	r1, [r7, #0]
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f000 f8be 	bl	800730e <USBD_CtlError>
        break;
 8007192:	bf00      	nop
}
 8007194:	bf00      	nop
 8007196:	3708      	adds	r7, #8
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}

0800719c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b082      	sub	sp, #8
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
 80071a4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071ac:	b2db      	uxtb	r3, r3
 80071ae:	3b01      	subs	r3, #1
 80071b0:	2b02      	cmp	r3, #2
 80071b2:	d81e      	bhi.n	80071f2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	88db      	ldrh	r3, [r3, #6]
 80071b8:	2b02      	cmp	r3, #2
 80071ba:	d004      	beq.n	80071c6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80071bc:	6839      	ldr	r1, [r7, #0]
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 f8a5 	bl	800730e <USBD_CtlError>
        break;
 80071c4:	e01a      	b.n	80071fc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2201      	movs	r2, #1
 80071ca:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d005      	beq.n	80071e2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	68db      	ldr	r3, [r3, #12]
 80071da:	f043 0202 	orr.w	r2, r3, #2
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	330c      	adds	r3, #12
 80071e6:	2202      	movs	r2, #2
 80071e8:	4619      	mov	r1, r3
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f000 f900 	bl	80073f0 <USBD_CtlSendData>
      break;
 80071f0:	e004      	b.n	80071fc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80071f2:	6839      	ldr	r1, [r7, #0]
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f000 f88a 	bl	800730e <USBD_CtlError>
      break;
 80071fa:	bf00      	nop
  }
}
 80071fc:	bf00      	nop
 80071fe:	3708      	adds	r7, #8
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}

08007204 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b082      	sub	sp, #8
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
 800720c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	885b      	ldrh	r3, [r3, #2]
 8007212:	2b01      	cmp	r3, #1
 8007214:	d107      	bne.n	8007226 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2201      	movs	r2, #1
 800721a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f000 f923 	bl	800746a <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007224:	e013      	b.n	800724e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	885b      	ldrh	r3, [r3, #2]
 800722a:	2b02      	cmp	r3, #2
 800722c:	d10b      	bne.n	8007246 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	889b      	ldrh	r3, [r3, #4]
 8007232:	0a1b      	lsrs	r3, r3, #8
 8007234:	b29b      	uxth	r3, r3
 8007236:	b2da      	uxtb	r2, r3
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f000 f913 	bl	800746a <USBD_CtlSendStatus>
}
 8007244:	e003      	b.n	800724e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007246:	6839      	ldr	r1, [r7, #0]
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f000 f860 	bl	800730e <USBD_CtlError>
}
 800724e:	bf00      	nop
 8007250:	3708      	adds	r7, #8
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}

08007256 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007256:	b580      	push	{r7, lr}
 8007258:	b082      	sub	sp, #8
 800725a:	af00      	add	r7, sp, #0
 800725c:	6078      	str	r0, [r7, #4]
 800725e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007266:	b2db      	uxtb	r3, r3
 8007268:	3b01      	subs	r3, #1
 800726a:	2b02      	cmp	r3, #2
 800726c:	d80b      	bhi.n	8007286 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	885b      	ldrh	r3, [r3, #2]
 8007272:	2b01      	cmp	r3, #1
 8007274:	d10c      	bne.n	8007290 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2200      	movs	r2, #0
 800727a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f000 f8f3 	bl	800746a <USBD_CtlSendStatus>
      }
      break;
 8007284:	e004      	b.n	8007290 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007286:	6839      	ldr	r1, [r7, #0]
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f000 f840 	bl	800730e <USBD_CtlError>
      break;
 800728e:	e000      	b.n	8007292 <USBD_ClrFeature+0x3c>
      break;
 8007290:	bf00      	nop
  }
}
 8007292:	bf00      	nop
 8007294:	3708      	adds	r7, #8
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}

0800729a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800729a:	b580      	push	{r7, lr}
 800729c:	b084      	sub	sp, #16
 800729e:	af00      	add	r7, sp, #0
 80072a0:	6078      	str	r0, [r7, #4]
 80072a2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	781a      	ldrb	r2, [r3, #0]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	3301      	adds	r3, #1
 80072b4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	781a      	ldrb	r2, [r3, #0]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	3301      	adds	r3, #1
 80072c2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80072c4:	68f8      	ldr	r0, [r7, #12]
 80072c6:	f7ff fa41 	bl	800674c <SWAPBYTE>
 80072ca:	4603      	mov	r3, r0
 80072cc:	461a      	mov	r2, r3
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	3301      	adds	r3, #1
 80072d6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	3301      	adds	r3, #1
 80072dc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80072de:	68f8      	ldr	r0, [r7, #12]
 80072e0:	f7ff fa34 	bl	800674c <SWAPBYTE>
 80072e4:	4603      	mov	r3, r0
 80072e6:	461a      	mov	r2, r3
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	3301      	adds	r3, #1
 80072f0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	3301      	adds	r3, #1
 80072f6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80072f8:	68f8      	ldr	r0, [r7, #12]
 80072fa:	f7ff fa27 	bl	800674c <SWAPBYTE>
 80072fe:	4603      	mov	r3, r0
 8007300:	461a      	mov	r2, r3
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	80da      	strh	r2, [r3, #6]
}
 8007306:	bf00      	nop
 8007308:	3710      	adds	r7, #16
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}

0800730e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800730e:	b580      	push	{r7, lr}
 8007310:	b082      	sub	sp, #8
 8007312:	af00      	add	r7, sp, #0
 8007314:	6078      	str	r0, [r7, #4]
 8007316:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007318:	2180      	movs	r1, #128	; 0x80
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f000 fc02 	bl	8007b24 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007320:	2100      	movs	r1, #0
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f000 fbfe 	bl	8007b24 <USBD_LL_StallEP>
}
 8007328:	bf00      	nop
 800732a:	3708      	adds	r7, #8
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}

08007330 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b086      	sub	sp, #24
 8007334:	af00      	add	r7, sp, #0
 8007336:	60f8      	str	r0, [r7, #12]
 8007338:	60b9      	str	r1, [r7, #8]
 800733a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800733c:	2300      	movs	r3, #0
 800733e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d036      	beq.n	80073b4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800734a:	6938      	ldr	r0, [r7, #16]
 800734c:	f000 f836 	bl	80073bc <USBD_GetLen>
 8007350:	4603      	mov	r3, r0
 8007352:	3301      	adds	r3, #1
 8007354:	b29b      	uxth	r3, r3
 8007356:	005b      	lsls	r3, r3, #1
 8007358:	b29a      	uxth	r2, r3
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800735e:	7dfb      	ldrb	r3, [r7, #23]
 8007360:	68ba      	ldr	r2, [r7, #8]
 8007362:	4413      	add	r3, r2
 8007364:	687a      	ldr	r2, [r7, #4]
 8007366:	7812      	ldrb	r2, [r2, #0]
 8007368:	701a      	strb	r2, [r3, #0]
  idx++;
 800736a:	7dfb      	ldrb	r3, [r7, #23]
 800736c:	3301      	adds	r3, #1
 800736e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007370:	7dfb      	ldrb	r3, [r7, #23]
 8007372:	68ba      	ldr	r2, [r7, #8]
 8007374:	4413      	add	r3, r2
 8007376:	2203      	movs	r2, #3
 8007378:	701a      	strb	r2, [r3, #0]
  idx++;
 800737a:	7dfb      	ldrb	r3, [r7, #23]
 800737c:	3301      	adds	r3, #1
 800737e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007380:	e013      	b.n	80073aa <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007382:	7dfb      	ldrb	r3, [r7, #23]
 8007384:	68ba      	ldr	r2, [r7, #8]
 8007386:	4413      	add	r3, r2
 8007388:	693a      	ldr	r2, [r7, #16]
 800738a:	7812      	ldrb	r2, [r2, #0]
 800738c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	3301      	adds	r3, #1
 8007392:	613b      	str	r3, [r7, #16]
    idx++;
 8007394:	7dfb      	ldrb	r3, [r7, #23]
 8007396:	3301      	adds	r3, #1
 8007398:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800739a:	7dfb      	ldrb	r3, [r7, #23]
 800739c:	68ba      	ldr	r2, [r7, #8]
 800739e:	4413      	add	r3, r2
 80073a0:	2200      	movs	r2, #0
 80073a2:	701a      	strb	r2, [r3, #0]
    idx++;
 80073a4:	7dfb      	ldrb	r3, [r7, #23]
 80073a6:	3301      	adds	r3, #1
 80073a8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	781b      	ldrb	r3, [r3, #0]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d1e7      	bne.n	8007382 <USBD_GetString+0x52>
 80073b2:	e000      	b.n	80073b6 <USBD_GetString+0x86>
    return;
 80073b4:	bf00      	nop
  }
}
 80073b6:	3718      	adds	r7, #24
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}

080073bc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80073bc:	b480      	push	{r7}
 80073be:	b085      	sub	sp, #20
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80073c4:	2300      	movs	r3, #0
 80073c6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80073cc:	e005      	b.n	80073da <USBD_GetLen+0x1e>
  {
    len++;
 80073ce:	7bfb      	ldrb	r3, [r7, #15]
 80073d0:	3301      	adds	r3, #1
 80073d2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	3301      	adds	r3, #1
 80073d8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	781b      	ldrb	r3, [r3, #0]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d1f5      	bne.n	80073ce <USBD_GetLen+0x12>
  }

  return len;
 80073e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3714      	adds	r7, #20
 80073e8:	46bd      	mov	sp, r7
 80073ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ee:	4770      	bx	lr

080073f0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b084      	sub	sp, #16
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	60f8      	str	r0, [r7, #12]
 80073f8:	60b9      	str	r1, [r7, #8]
 80073fa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2202      	movs	r2, #2
 8007400:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	687a      	ldr	r2, [r7, #4]
 8007408:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	687a      	ldr	r2, [r7, #4]
 800740e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	68ba      	ldr	r2, [r7, #8]
 8007414:	2100      	movs	r1, #0
 8007416:	68f8      	ldr	r0, [r7, #12]
 8007418:	f000 fc0d 	bl	8007c36 <USBD_LL_Transmit>

  return USBD_OK;
 800741c:	2300      	movs	r3, #0
}
 800741e:	4618      	mov	r0, r3
 8007420:	3710      	adds	r7, #16
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}

08007426 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007426:	b580      	push	{r7, lr}
 8007428:	b084      	sub	sp, #16
 800742a:	af00      	add	r7, sp, #0
 800742c:	60f8      	str	r0, [r7, #12]
 800742e:	60b9      	str	r1, [r7, #8]
 8007430:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	68ba      	ldr	r2, [r7, #8]
 8007436:	2100      	movs	r1, #0
 8007438:	68f8      	ldr	r0, [r7, #12]
 800743a:	f000 fbfc 	bl	8007c36 <USBD_LL_Transmit>

  return USBD_OK;
 800743e:	2300      	movs	r3, #0
}
 8007440:	4618      	mov	r0, r3
 8007442:	3710      	adds	r7, #16
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}

08007448 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b084      	sub	sp, #16
 800744c:	af00      	add	r7, sp, #0
 800744e:	60f8      	str	r0, [r7, #12]
 8007450:	60b9      	str	r1, [r7, #8]
 8007452:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	68ba      	ldr	r2, [r7, #8]
 8007458:	2100      	movs	r1, #0
 800745a:	68f8      	ldr	r0, [r7, #12]
 800745c:	f000 fc0c 	bl	8007c78 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007460:	2300      	movs	r3, #0
}
 8007462:	4618      	mov	r0, r3
 8007464:	3710      	adds	r7, #16
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}

0800746a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800746a:	b580      	push	{r7, lr}
 800746c:	b082      	sub	sp, #8
 800746e:	af00      	add	r7, sp, #0
 8007470:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2204      	movs	r2, #4
 8007476:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800747a:	2300      	movs	r3, #0
 800747c:	2200      	movs	r2, #0
 800747e:	2100      	movs	r1, #0
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f000 fbd8 	bl	8007c36 <USBD_LL_Transmit>

  return USBD_OK;
 8007486:	2300      	movs	r3, #0
}
 8007488:	4618      	mov	r0, r3
 800748a:	3708      	adds	r7, #8
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}

08007490 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b082      	sub	sp, #8
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2205      	movs	r2, #5
 800749c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80074a0:	2300      	movs	r3, #0
 80074a2:	2200      	movs	r2, #0
 80074a4:	2100      	movs	r1, #0
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f000 fbe6 	bl	8007c78 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80074ac:	2300      	movs	r3, #0
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	3708      	adds	r7, #8
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}
	...

080074b8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80074bc:	2200      	movs	r2, #0
 80074be:	490e      	ldr	r1, [pc, #56]	; (80074f8 <MX_USB_DEVICE_Init+0x40>)
 80074c0:	480e      	ldr	r0, [pc, #56]	; (80074fc <MX_USB_DEVICE_Init+0x44>)
 80074c2:	f7fe fd23 	bl	8005f0c <USBD_Init>
 80074c6:	4603      	mov	r3, r0
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d001      	beq.n	80074d0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80074cc:	f7fa f838 	bl	8001540 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 80074d0:	490b      	ldr	r1, [pc, #44]	; (8007500 <MX_USB_DEVICE_Init+0x48>)
 80074d2:	480a      	ldr	r0, [pc, #40]	; (80074fc <MX_USB_DEVICE_Init+0x44>)
 80074d4:	f7fe fd4a 	bl	8005f6c <USBD_RegisterClass>
 80074d8:	4603      	mov	r3, r0
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d001      	beq.n	80074e2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80074de:	f7fa f82f 	bl	8001540 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80074e2:	4806      	ldr	r0, [pc, #24]	; (80074fc <MX_USB_DEVICE_Init+0x44>)
 80074e4:	f7fe fd78 	bl	8005fd8 <USBD_Start>
 80074e8:	4603      	mov	r3, r0
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d001      	beq.n	80074f2 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 80074ee:	f7fa f827 	bl	8001540 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80074f2:	bf00      	nop
 80074f4:	bd80      	pop	{r7, pc}
 80074f6:	bf00      	nop
 80074f8:	200000cc 	.word	0x200000cc
 80074fc:	20000194 	.word	0x20000194
 8007500:	2000000c 	.word	0x2000000c

08007504 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007504:	b480      	push	{r7}
 8007506:	b083      	sub	sp, #12
 8007508:	af00      	add	r7, sp, #0
 800750a:	4603      	mov	r3, r0
 800750c:	6039      	str	r1, [r7, #0]
 800750e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	2212      	movs	r2, #18
 8007514:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007516:	4b03      	ldr	r3, [pc, #12]	; (8007524 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007518:	4618      	mov	r0, r3
 800751a:	370c      	adds	r7, #12
 800751c:	46bd      	mov	sp, r7
 800751e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007522:	4770      	bx	lr
 8007524:	200000e8 	.word	0x200000e8

08007528 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007528:	b480      	push	{r7}
 800752a:	b083      	sub	sp, #12
 800752c:	af00      	add	r7, sp, #0
 800752e:	4603      	mov	r3, r0
 8007530:	6039      	str	r1, [r7, #0]
 8007532:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	2204      	movs	r2, #4
 8007538:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800753a:	4b03      	ldr	r3, [pc, #12]	; (8007548 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800753c:	4618      	mov	r0, r3
 800753e:	370c      	adds	r7, #12
 8007540:	46bd      	mov	sp, r7
 8007542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007546:	4770      	bx	lr
 8007548:	200000fc 	.word	0x200000fc

0800754c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b082      	sub	sp, #8
 8007550:	af00      	add	r7, sp, #0
 8007552:	4603      	mov	r3, r0
 8007554:	6039      	str	r1, [r7, #0]
 8007556:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007558:	79fb      	ldrb	r3, [r7, #7]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d105      	bne.n	800756a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800755e:	683a      	ldr	r2, [r7, #0]
 8007560:	4907      	ldr	r1, [pc, #28]	; (8007580 <USBD_FS_ProductStrDescriptor+0x34>)
 8007562:	4808      	ldr	r0, [pc, #32]	; (8007584 <USBD_FS_ProductStrDescriptor+0x38>)
 8007564:	f7ff fee4 	bl	8007330 <USBD_GetString>
 8007568:	e004      	b.n	8007574 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800756a:	683a      	ldr	r2, [r7, #0]
 800756c:	4904      	ldr	r1, [pc, #16]	; (8007580 <USBD_FS_ProductStrDescriptor+0x34>)
 800756e:	4805      	ldr	r0, [pc, #20]	; (8007584 <USBD_FS_ProductStrDescriptor+0x38>)
 8007570:	f7ff fede 	bl	8007330 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007574:	4b02      	ldr	r3, [pc, #8]	; (8007580 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007576:	4618      	mov	r0, r3
 8007578:	3708      	adds	r7, #8
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}
 800757e:	bf00      	nop
 8007580:	20000470 	.word	0x20000470
 8007584:	080088b0 	.word	0x080088b0

08007588 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b082      	sub	sp, #8
 800758c:	af00      	add	r7, sp, #0
 800758e:	4603      	mov	r3, r0
 8007590:	6039      	str	r1, [r7, #0]
 8007592:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007594:	683a      	ldr	r2, [r7, #0]
 8007596:	4904      	ldr	r1, [pc, #16]	; (80075a8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007598:	4804      	ldr	r0, [pc, #16]	; (80075ac <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800759a:	f7ff fec9 	bl	8007330 <USBD_GetString>
  return USBD_StrDesc;
 800759e:	4b02      	ldr	r3, [pc, #8]	; (80075a8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3708      	adds	r7, #8
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}
 80075a8:	20000470 	.word	0x20000470
 80075ac:	080088c8 	.word	0x080088c8

080075b0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b082      	sub	sp, #8
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	4603      	mov	r3, r0
 80075b8:	6039      	str	r1, [r7, #0]
 80075ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	221a      	movs	r2, #26
 80075c0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80075c2:	f000 f843 	bl	800764c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80075c6:	4b02      	ldr	r3, [pc, #8]	; (80075d0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3708      	adds	r7, #8
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}
 80075d0:	20000100 	.word	0x20000100

080075d4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b082      	sub	sp, #8
 80075d8:	af00      	add	r7, sp, #0
 80075da:	4603      	mov	r3, r0
 80075dc:	6039      	str	r1, [r7, #0]
 80075de:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80075e0:	79fb      	ldrb	r3, [r7, #7]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d105      	bne.n	80075f2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80075e6:	683a      	ldr	r2, [r7, #0]
 80075e8:	4907      	ldr	r1, [pc, #28]	; (8007608 <USBD_FS_ConfigStrDescriptor+0x34>)
 80075ea:	4808      	ldr	r0, [pc, #32]	; (800760c <USBD_FS_ConfigStrDescriptor+0x38>)
 80075ec:	f7ff fea0 	bl	8007330 <USBD_GetString>
 80075f0:	e004      	b.n	80075fc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80075f2:	683a      	ldr	r2, [r7, #0]
 80075f4:	4904      	ldr	r1, [pc, #16]	; (8007608 <USBD_FS_ConfigStrDescriptor+0x34>)
 80075f6:	4805      	ldr	r0, [pc, #20]	; (800760c <USBD_FS_ConfigStrDescriptor+0x38>)
 80075f8:	f7ff fe9a 	bl	8007330 <USBD_GetString>
  }
  return USBD_StrDesc;
 80075fc:	4b02      	ldr	r3, [pc, #8]	; (8007608 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80075fe:	4618      	mov	r0, r3
 8007600:	3708      	adds	r7, #8
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}
 8007606:	bf00      	nop
 8007608:	20000470 	.word	0x20000470
 800760c:	080088dc 	.word	0x080088dc

08007610 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b082      	sub	sp, #8
 8007614:	af00      	add	r7, sp, #0
 8007616:	4603      	mov	r3, r0
 8007618:	6039      	str	r1, [r7, #0]
 800761a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800761c:	79fb      	ldrb	r3, [r7, #7]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d105      	bne.n	800762e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007622:	683a      	ldr	r2, [r7, #0]
 8007624:	4907      	ldr	r1, [pc, #28]	; (8007644 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007626:	4808      	ldr	r0, [pc, #32]	; (8007648 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007628:	f7ff fe82 	bl	8007330 <USBD_GetString>
 800762c:	e004      	b.n	8007638 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800762e:	683a      	ldr	r2, [r7, #0]
 8007630:	4904      	ldr	r1, [pc, #16]	; (8007644 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007632:	4805      	ldr	r0, [pc, #20]	; (8007648 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007634:	f7ff fe7c 	bl	8007330 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007638:	4b02      	ldr	r3, [pc, #8]	; (8007644 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800763a:	4618      	mov	r0, r3
 800763c:	3708      	adds	r7, #8
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}
 8007642:	bf00      	nop
 8007644:	20000470 	.word	0x20000470
 8007648:	080088e8 	.word	0x080088e8

0800764c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b084      	sub	sp, #16
 8007650:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007652:	4b0f      	ldr	r3, [pc, #60]	; (8007690 <Get_SerialNum+0x44>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007658:	4b0e      	ldr	r3, [pc, #56]	; (8007694 <Get_SerialNum+0x48>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800765e:	4b0e      	ldr	r3, [pc, #56]	; (8007698 <Get_SerialNum+0x4c>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007664:	68fa      	ldr	r2, [r7, #12]
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	4413      	add	r3, r2
 800766a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d009      	beq.n	8007686 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007672:	2208      	movs	r2, #8
 8007674:	4909      	ldr	r1, [pc, #36]	; (800769c <Get_SerialNum+0x50>)
 8007676:	68f8      	ldr	r0, [r7, #12]
 8007678:	f000 f814 	bl	80076a4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800767c:	2204      	movs	r2, #4
 800767e:	4908      	ldr	r1, [pc, #32]	; (80076a0 <Get_SerialNum+0x54>)
 8007680:	68b8      	ldr	r0, [r7, #8]
 8007682:	f000 f80f 	bl	80076a4 <IntToUnicode>
  }
}
 8007686:	bf00      	nop
 8007688:	3710      	adds	r7, #16
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}
 800768e:	bf00      	nop
 8007690:	1fff7a10 	.word	0x1fff7a10
 8007694:	1fff7a14 	.word	0x1fff7a14
 8007698:	1fff7a18 	.word	0x1fff7a18
 800769c:	20000102 	.word	0x20000102
 80076a0:	20000112 	.word	0x20000112

080076a4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b087      	sub	sp, #28
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	60f8      	str	r0, [r7, #12]
 80076ac:	60b9      	str	r1, [r7, #8]
 80076ae:	4613      	mov	r3, r2
 80076b0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80076b2:	2300      	movs	r3, #0
 80076b4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80076b6:	2300      	movs	r3, #0
 80076b8:	75fb      	strb	r3, [r7, #23]
 80076ba:	e027      	b.n	800770c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	0f1b      	lsrs	r3, r3, #28
 80076c0:	2b09      	cmp	r3, #9
 80076c2:	d80b      	bhi.n	80076dc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	0f1b      	lsrs	r3, r3, #28
 80076c8:	b2da      	uxtb	r2, r3
 80076ca:	7dfb      	ldrb	r3, [r7, #23]
 80076cc:	005b      	lsls	r3, r3, #1
 80076ce:	4619      	mov	r1, r3
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	440b      	add	r3, r1
 80076d4:	3230      	adds	r2, #48	; 0x30
 80076d6:	b2d2      	uxtb	r2, r2
 80076d8:	701a      	strb	r2, [r3, #0]
 80076da:	e00a      	b.n	80076f2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	0f1b      	lsrs	r3, r3, #28
 80076e0:	b2da      	uxtb	r2, r3
 80076e2:	7dfb      	ldrb	r3, [r7, #23]
 80076e4:	005b      	lsls	r3, r3, #1
 80076e6:	4619      	mov	r1, r3
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	440b      	add	r3, r1
 80076ec:	3237      	adds	r2, #55	; 0x37
 80076ee:	b2d2      	uxtb	r2, r2
 80076f0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	011b      	lsls	r3, r3, #4
 80076f6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80076f8:	7dfb      	ldrb	r3, [r7, #23]
 80076fa:	005b      	lsls	r3, r3, #1
 80076fc:	3301      	adds	r3, #1
 80076fe:	68ba      	ldr	r2, [r7, #8]
 8007700:	4413      	add	r3, r2
 8007702:	2200      	movs	r2, #0
 8007704:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007706:	7dfb      	ldrb	r3, [r7, #23]
 8007708:	3301      	adds	r3, #1
 800770a:	75fb      	strb	r3, [r7, #23]
 800770c:	7dfa      	ldrb	r2, [r7, #23]
 800770e:	79fb      	ldrb	r3, [r7, #7]
 8007710:	429a      	cmp	r2, r3
 8007712:	d3d3      	bcc.n	80076bc <IntToUnicode+0x18>
  }
}
 8007714:	bf00      	nop
 8007716:	bf00      	nop
 8007718:	371c      	adds	r7, #28
 800771a:	46bd      	mov	sp, r7
 800771c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007720:	4770      	bx	lr
	...

08007724 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b08a      	sub	sp, #40	; 0x28
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800772c:	f107 0314 	add.w	r3, r7, #20
 8007730:	2200      	movs	r2, #0
 8007732:	601a      	str	r2, [r3, #0]
 8007734:	605a      	str	r2, [r3, #4]
 8007736:	609a      	str	r2, [r3, #8]
 8007738:	60da      	str	r2, [r3, #12]
 800773a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007744:	d147      	bne.n	80077d6 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007746:	2300      	movs	r3, #0
 8007748:	613b      	str	r3, [r7, #16]
 800774a:	4b25      	ldr	r3, [pc, #148]	; (80077e0 <HAL_PCD_MspInit+0xbc>)
 800774c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800774e:	4a24      	ldr	r2, [pc, #144]	; (80077e0 <HAL_PCD_MspInit+0xbc>)
 8007750:	f043 0301 	orr.w	r3, r3, #1
 8007754:	6313      	str	r3, [r2, #48]	; 0x30
 8007756:	4b22      	ldr	r3, [pc, #136]	; (80077e0 <HAL_PCD_MspInit+0xbc>)
 8007758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800775a:	f003 0301 	and.w	r3, r3, #1
 800775e:	613b      	str	r3, [r7, #16]
 8007760:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8007762:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8007766:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007768:	2302      	movs	r3, #2
 800776a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800776c:	2300      	movs	r3, #0
 800776e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007770:	2303      	movs	r3, #3
 8007772:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007774:	230a      	movs	r3, #10
 8007776:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007778:	f107 0314 	add.w	r3, r7, #20
 800777c:	4619      	mov	r1, r3
 800777e:	4819      	ldr	r0, [pc, #100]	; (80077e4 <HAL_PCD_MspInit+0xc0>)
 8007780:	f7fa f96c 	bl	8001a5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8007784:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007788:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800778a:	2300      	movs	r3, #0
 800778c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800778e:	2300      	movs	r3, #0
 8007790:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8007792:	f107 0314 	add.w	r3, r7, #20
 8007796:	4619      	mov	r1, r3
 8007798:	4812      	ldr	r0, [pc, #72]	; (80077e4 <HAL_PCD_MspInit+0xc0>)
 800779a:	f7fa f95f 	bl	8001a5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800779e:	4b10      	ldr	r3, [pc, #64]	; (80077e0 <HAL_PCD_MspInit+0xbc>)
 80077a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077a2:	4a0f      	ldr	r2, [pc, #60]	; (80077e0 <HAL_PCD_MspInit+0xbc>)
 80077a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077a8:	6353      	str	r3, [r2, #52]	; 0x34
 80077aa:	2300      	movs	r3, #0
 80077ac:	60fb      	str	r3, [r7, #12]
 80077ae:	4b0c      	ldr	r3, [pc, #48]	; (80077e0 <HAL_PCD_MspInit+0xbc>)
 80077b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077b2:	4a0b      	ldr	r2, [pc, #44]	; (80077e0 <HAL_PCD_MspInit+0xbc>)
 80077b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80077b8:	6453      	str	r3, [r2, #68]	; 0x44
 80077ba:	4b09      	ldr	r3, [pc, #36]	; (80077e0 <HAL_PCD_MspInit+0xbc>)
 80077bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077c2:	60fb      	str	r3, [r7, #12]
 80077c4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80077c6:	2200      	movs	r2, #0
 80077c8:	2100      	movs	r1, #0
 80077ca:	2043      	movs	r0, #67	; 0x43
 80077cc:	f7fa f90f 	bl	80019ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80077d0:	2043      	movs	r0, #67	; 0x43
 80077d2:	f7fa f928 	bl	8001a26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80077d6:	bf00      	nop
 80077d8:	3728      	adds	r7, #40	; 0x28
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}
 80077de:	bf00      	nop
 80077e0:	40023800 	.word	0x40023800
 80077e4:	40020000 	.word	0x40020000

080077e8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b082      	sub	sp, #8
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80077fc:	4619      	mov	r1, r3
 80077fe:	4610      	mov	r0, r2
 8007800:	f7fe fc37 	bl	8006072 <USBD_LL_SetupStage>
}
 8007804:	bf00      	nop
 8007806:	3708      	adds	r7, #8
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}

0800780c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b082      	sub	sp, #8
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
 8007814:	460b      	mov	r3, r1
 8007816:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800781e:	78fa      	ldrb	r2, [r7, #3]
 8007820:	6879      	ldr	r1, [r7, #4]
 8007822:	4613      	mov	r3, r2
 8007824:	00db      	lsls	r3, r3, #3
 8007826:	4413      	add	r3, r2
 8007828:	009b      	lsls	r3, r3, #2
 800782a:	440b      	add	r3, r1
 800782c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007830:	681a      	ldr	r2, [r3, #0]
 8007832:	78fb      	ldrb	r3, [r7, #3]
 8007834:	4619      	mov	r1, r3
 8007836:	f7fe fc71 	bl	800611c <USBD_LL_DataOutStage>
}
 800783a:	bf00      	nop
 800783c:	3708      	adds	r7, #8
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}

08007842 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007842:	b580      	push	{r7, lr}
 8007844:	b082      	sub	sp, #8
 8007846:	af00      	add	r7, sp, #0
 8007848:	6078      	str	r0, [r7, #4]
 800784a:	460b      	mov	r3, r1
 800784c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007854:	78fa      	ldrb	r2, [r7, #3]
 8007856:	6879      	ldr	r1, [r7, #4]
 8007858:	4613      	mov	r3, r2
 800785a:	00db      	lsls	r3, r3, #3
 800785c:	4413      	add	r3, r2
 800785e:	009b      	lsls	r3, r3, #2
 8007860:	440b      	add	r3, r1
 8007862:	334c      	adds	r3, #76	; 0x4c
 8007864:	681a      	ldr	r2, [r3, #0]
 8007866:	78fb      	ldrb	r3, [r7, #3]
 8007868:	4619      	mov	r1, r3
 800786a:	f7fe fd0a 	bl	8006282 <USBD_LL_DataInStage>
}
 800786e:	bf00      	nop
 8007870:	3708      	adds	r7, #8
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}

08007876 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007876:	b580      	push	{r7, lr}
 8007878:	b082      	sub	sp, #8
 800787a:	af00      	add	r7, sp, #0
 800787c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007884:	4618      	mov	r0, r3
 8007886:	f7fe fe3e 	bl	8006506 <USBD_LL_SOF>
}
 800788a:	bf00      	nop
 800788c:	3708      	adds	r7, #8
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}

08007892 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007892:	b580      	push	{r7, lr}
 8007894:	b084      	sub	sp, #16
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800789a:	2301      	movs	r3, #1
 800789c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	68db      	ldr	r3, [r3, #12]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d102      	bne.n	80078ac <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80078a6:	2300      	movs	r3, #0
 80078a8:	73fb      	strb	r3, [r7, #15]
 80078aa:	e008      	b.n	80078be <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	68db      	ldr	r3, [r3, #12]
 80078b0:	2b02      	cmp	r3, #2
 80078b2:	d102      	bne.n	80078ba <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80078b4:	2301      	movs	r3, #1
 80078b6:	73fb      	strb	r3, [r7, #15]
 80078b8:	e001      	b.n	80078be <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80078ba:	f7f9 fe41 	bl	8001540 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80078c4:	7bfa      	ldrb	r2, [r7, #15]
 80078c6:	4611      	mov	r1, r2
 80078c8:	4618      	mov	r0, r3
 80078ca:	f7fe fdde 	bl	800648a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80078d4:	4618      	mov	r0, r3
 80078d6:	f7fe fd86 	bl	80063e6 <USBD_LL_Reset>
}
 80078da:	bf00      	nop
 80078dc:	3710      	adds	r7, #16
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}
	...

080078e4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b082      	sub	sp, #8
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80078f2:	4618      	mov	r0, r3
 80078f4:	f7fe fdd9 	bl	80064aa <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	687a      	ldr	r2, [r7, #4]
 8007904:	6812      	ldr	r2, [r2, #0]
 8007906:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800790a:	f043 0301 	orr.w	r3, r3, #1
 800790e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6a1b      	ldr	r3, [r3, #32]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d005      	beq.n	8007924 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007918:	4b04      	ldr	r3, [pc, #16]	; (800792c <HAL_PCD_SuspendCallback+0x48>)
 800791a:	691b      	ldr	r3, [r3, #16]
 800791c:	4a03      	ldr	r2, [pc, #12]	; (800792c <HAL_PCD_SuspendCallback+0x48>)
 800791e:	f043 0306 	orr.w	r3, r3, #6
 8007922:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007924:	bf00      	nop
 8007926:	3708      	adds	r7, #8
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}
 800792c:	e000ed00 	.word	0xe000ed00

08007930 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b082      	sub	sp, #8
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800793e:	4618      	mov	r0, r3
 8007940:	f7fe fdc9 	bl	80064d6 <USBD_LL_Resume>
}
 8007944:	bf00      	nop
 8007946:	3708      	adds	r7, #8
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}

0800794c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b082      	sub	sp, #8
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	460b      	mov	r3, r1
 8007956:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800795e:	78fa      	ldrb	r2, [r7, #3]
 8007960:	4611      	mov	r1, r2
 8007962:	4618      	mov	r0, r3
 8007964:	f7fe fe21 	bl	80065aa <USBD_LL_IsoOUTIncomplete>
}
 8007968:	bf00      	nop
 800796a:	3708      	adds	r7, #8
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}

08007970 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b082      	sub	sp, #8
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	460b      	mov	r3, r1
 800797a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007982:	78fa      	ldrb	r2, [r7, #3]
 8007984:	4611      	mov	r1, r2
 8007986:	4618      	mov	r0, r3
 8007988:	f7fe fddd 	bl	8006546 <USBD_LL_IsoINIncomplete>
}
 800798c:	bf00      	nop
 800798e:	3708      	adds	r7, #8
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}

08007994 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b082      	sub	sp, #8
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80079a2:	4618      	mov	r0, r3
 80079a4:	f7fe fe33 	bl	800660e <USBD_LL_DevConnected>
}
 80079a8:	bf00      	nop
 80079aa:	3708      	adds	r7, #8
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}

080079b0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b082      	sub	sp, #8
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80079be:	4618      	mov	r0, r3
 80079c0:	f7fe fe30 	bl	8006624 <USBD_LL_DevDisconnected>
}
 80079c4:	bf00      	nop
 80079c6:	3708      	adds	r7, #8
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}

080079cc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b082      	sub	sp, #8
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	781b      	ldrb	r3, [r3, #0]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d13c      	bne.n	8007a56 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80079dc:	4a20      	ldr	r2, [pc, #128]	; (8007a60 <USBD_LL_Init+0x94>)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	4a1e      	ldr	r2, [pc, #120]	; (8007a60 <USBD_LL_Init+0x94>)
 80079e8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80079ec:	4b1c      	ldr	r3, [pc, #112]	; (8007a60 <USBD_LL_Init+0x94>)
 80079ee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80079f2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80079f4:	4b1a      	ldr	r3, [pc, #104]	; (8007a60 <USBD_LL_Init+0x94>)
 80079f6:	2204      	movs	r2, #4
 80079f8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80079fa:	4b19      	ldr	r3, [pc, #100]	; (8007a60 <USBD_LL_Init+0x94>)
 80079fc:	2202      	movs	r2, #2
 80079fe:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007a00:	4b17      	ldr	r3, [pc, #92]	; (8007a60 <USBD_LL_Init+0x94>)
 8007a02:	2200      	movs	r2, #0
 8007a04:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007a06:	4b16      	ldr	r3, [pc, #88]	; (8007a60 <USBD_LL_Init+0x94>)
 8007a08:	2202      	movs	r2, #2
 8007a0a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8007a0c:	4b14      	ldr	r3, [pc, #80]	; (8007a60 <USBD_LL_Init+0x94>)
 8007a0e:	2201      	movs	r2, #1
 8007a10:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007a12:	4b13      	ldr	r3, [pc, #76]	; (8007a60 <USBD_LL_Init+0x94>)
 8007a14:	2200      	movs	r2, #0
 8007a16:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007a18:	4b11      	ldr	r3, [pc, #68]	; (8007a60 <USBD_LL_Init+0x94>)
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8007a1e:	4b10      	ldr	r3, [pc, #64]	; (8007a60 <USBD_LL_Init+0x94>)
 8007a20:	2201      	movs	r2, #1
 8007a22:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007a24:	4b0e      	ldr	r3, [pc, #56]	; (8007a60 <USBD_LL_Init+0x94>)
 8007a26:	2200      	movs	r2, #0
 8007a28:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007a2a:	480d      	ldr	r0, [pc, #52]	; (8007a60 <USBD_LL_Init+0x94>)
 8007a2c:	f7fa f9f3 	bl	8001e16 <HAL_PCD_Init>
 8007a30:	4603      	mov	r3, r0
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d001      	beq.n	8007a3a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007a36:	f7f9 fd83 	bl	8001540 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007a3a:	2180      	movs	r1, #128	; 0x80
 8007a3c:	4808      	ldr	r0, [pc, #32]	; (8007a60 <USBD_LL_Init+0x94>)
 8007a3e:	f7fb fc32 	bl	80032a6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007a42:	2240      	movs	r2, #64	; 0x40
 8007a44:	2100      	movs	r1, #0
 8007a46:	4806      	ldr	r0, [pc, #24]	; (8007a60 <USBD_LL_Init+0x94>)
 8007a48:	f7fb fbe6 	bl	8003218 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007a4c:	2280      	movs	r2, #128	; 0x80
 8007a4e:	2101      	movs	r1, #1
 8007a50:	4803      	ldr	r0, [pc, #12]	; (8007a60 <USBD_LL_Init+0x94>)
 8007a52:	f7fb fbe1 	bl	8003218 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007a56:	2300      	movs	r3, #0
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3708      	adds	r7, #8
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}
 8007a60:	20000670 	.word	0x20000670

08007a64 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b084      	sub	sp, #16
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a70:	2300      	movs	r3, #0
 8007a72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f7fa fae8 	bl	8002050 <HAL_PCD_Start>
 8007a80:	4603      	mov	r3, r0
 8007a82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a84:	7bfb      	ldrb	r3, [r7, #15]
 8007a86:	4618      	mov	r0, r3
 8007a88:	f000 f930 	bl	8007cec <USBD_Get_USB_Status>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a90:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	3710      	adds	r7, #16
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}

08007a9a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007a9a:	b580      	push	{r7, lr}
 8007a9c:	b084      	sub	sp, #16
 8007a9e:	af00      	add	r7, sp, #0
 8007aa0:	6078      	str	r0, [r7, #4]
 8007aa2:	4608      	mov	r0, r1
 8007aa4:	4611      	mov	r1, r2
 8007aa6:	461a      	mov	r2, r3
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	70fb      	strb	r3, [r7, #3]
 8007aac:	460b      	mov	r3, r1
 8007aae:	70bb      	strb	r3, [r7, #2]
 8007ab0:	4613      	mov	r3, r2
 8007ab2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007ac2:	78bb      	ldrb	r3, [r7, #2]
 8007ac4:	883a      	ldrh	r2, [r7, #0]
 8007ac6:	78f9      	ldrb	r1, [r7, #3]
 8007ac8:	f7fa ffb9 	bl	8002a3e <HAL_PCD_EP_Open>
 8007acc:	4603      	mov	r3, r0
 8007ace:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ad0:	7bfb      	ldrb	r3, [r7, #15]
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	f000 f90a 	bl	8007cec <USBD_Get_USB_Status>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007adc:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3710      	adds	r7, #16
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}

08007ae6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ae6:	b580      	push	{r7, lr}
 8007ae8:	b084      	sub	sp, #16
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	6078      	str	r0, [r7, #4]
 8007aee:	460b      	mov	r3, r1
 8007af0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007af2:	2300      	movs	r3, #0
 8007af4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007af6:	2300      	movs	r3, #0
 8007af8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007b00:	78fa      	ldrb	r2, [r7, #3]
 8007b02:	4611      	mov	r1, r2
 8007b04:	4618      	mov	r0, r3
 8007b06:	f7fb f802 	bl	8002b0e <HAL_PCD_EP_Close>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b0e:	7bfb      	ldrb	r3, [r7, #15]
 8007b10:	4618      	mov	r0, r3
 8007b12:	f000 f8eb 	bl	8007cec <USBD_Get_USB_Status>
 8007b16:	4603      	mov	r3, r0
 8007b18:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b1a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3710      	adds	r7, #16
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}

08007b24 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b084      	sub	sp, #16
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
 8007b2c:	460b      	mov	r3, r1
 8007b2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b30:	2300      	movs	r3, #0
 8007b32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b34:	2300      	movs	r3, #0
 8007b36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007b3e:	78fa      	ldrb	r2, [r7, #3]
 8007b40:	4611      	mov	r1, r2
 8007b42:	4618      	mov	r0, r3
 8007b44:	f7fb f8c2 	bl	8002ccc <HAL_PCD_EP_SetStall>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b4c:	7bfb      	ldrb	r3, [r7, #15]
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f000 f8cc 	bl	8007cec <USBD_Get_USB_Status>
 8007b54:	4603      	mov	r3, r0
 8007b56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b58:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3710      	adds	r7, #16
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}

08007b62 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b62:	b580      	push	{r7, lr}
 8007b64:	b084      	sub	sp, #16
 8007b66:	af00      	add	r7, sp, #0
 8007b68:	6078      	str	r0, [r7, #4]
 8007b6a:	460b      	mov	r3, r1
 8007b6c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b72:	2300      	movs	r3, #0
 8007b74:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007b7c:	78fa      	ldrb	r2, [r7, #3]
 8007b7e:	4611      	mov	r1, r2
 8007b80:	4618      	mov	r0, r3
 8007b82:	f7fb f907 	bl	8002d94 <HAL_PCD_EP_ClrStall>
 8007b86:	4603      	mov	r3, r0
 8007b88:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b8a:	7bfb      	ldrb	r3, [r7, #15]
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	f000 f8ad 	bl	8007cec <USBD_Get_USB_Status>
 8007b92:	4603      	mov	r3, r0
 8007b94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b96:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3710      	adds	r7, #16
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}

08007ba0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b085      	sub	sp, #20
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
 8007ba8:	460b      	mov	r3, r1
 8007baa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007bb2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007bb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	da0b      	bge.n	8007bd4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007bbc:	78fb      	ldrb	r3, [r7, #3]
 8007bbe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007bc2:	68f9      	ldr	r1, [r7, #12]
 8007bc4:	4613      	mov	r3, r2
 8007bc6:	00db      	lsls	r3, r3, #3
 8007bc8:	4413      	add	r3, r2
 8007bca:	009b      	lsls	r3, r3, #2
 8007bcc:	440b      	add	r3, r1
 8007bce:	333e      	adds	r3, #62	; 0x3e
 8007bd0:	781b      	ldrb	r3, [r3, #0]
 8007bd2:	e00b      	b.n	8007bec <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007bd4:	78fb      	ldrb	r3, [r7, #3]
 8007bd6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007bda:	68f9      	ldr	r1, [r7, #12]
 8007bdc:	4613      	mov	r3, r2
 8007bde:	00db      	lsls	r3, r3, #3
 8007be0:	4413      	add	r3, r2
 8007be2:	009b      	lsls	r3, r3, #2
 8007be4:	440b      	add	r3, r1
 8007be6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8007bea:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	3714      	adds	r7, #20
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf6:	4770      	bx	lr

08007bf8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b084      	sub	sp, #16
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
 8007c00:	460b      	mov	r3, r1
 8007c02:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c04:	2300      	movs	r3, #0
 8007c06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c08:	2300      	movs	r3, #0
 8007c0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007c12:	78fa      	ldrb	r2, [r7, #3]
 8007c14:	4611      	mov	r1, r2
 8007c16:	4618      	mov	r0, r3
 8007c18:	f7fa feec 	bl	80029f4 <HAL_PCD_SetAddress>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c20:	7bfb      	ldrb	r3, [r7, #15]
 8007c22:	4618      	mov	r0, r3
 8007c24:	f000 f862 	bl	8007cec <USBD_Get_USB_Status>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c2c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	3710      	adds	r7, #16
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}

08007c36 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007c36:	b580      	push	{r7, lr}
 8007c38:	b086      	sub	sp, #24
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	60f8      	str	r0, [r7, #12]
 8007c3e:	607a      	str	r2, [r7, #4]
 8007c40:	603b      	str	r3, [r7, #0]
 8007c42:	460b      	mov	r3, r1
 8007c44:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c46:	2300      	movs	r3, #0
 8007c48:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007c54:	7af9      	ldrb	r1, [r7, #11]
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	687a      	ldr	r2, [r7, #4]
 8007c5a:	f7fa ffed 	bl	8002c38 <HAL_PCD_EP_Transmit>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c62:	7dfb      	ldrb	r3, [r7, #23]
 8007c64:	4618      	mov	r0, r3
 8007c66:	f000 f841 	bl	8007cec <USBD_Get_USB_Status>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007c6e:	7dbb      	ldrb	r3, [r7, #22]
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3718      	adds	r7, #24
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}

08007c78 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b086      	sub	sp, #24
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	60f8      	str	r0, [r7, #12]
 8007c80:	607a      	str	r2, [r7, #4]
 8007c82:	603b      	str	r3, [r7, #0]
 8007c84:	460b      	mov	r3, r1
 8007c86:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007c96:	7af9      	ldrb	r1, [r7, #11]
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	687a      	ldr	r2, [r7, #4]
 8007c9c:	f7fa ff81 	bl	8002ba2 <HAL_PCD_EP_Receive>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ca4:	7dfb      	ldrb	r3, [r7, #23]
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f000 f820 	bl	8007cec <USBD_Get_USB_Status>
 8007cac:	4603      	mov	r3, r0
 8007cae:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007cb0:	7dbb      	ldrb	r3, [r7, #22]
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3718      	adds	r7, #24
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}
	...

08007cbc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b083      	sub	sp, #12
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007cc4:	4b03      	ldr	r3, [pc, #12]	; (8007cd4 <USBD_static_malloc+0x18>)
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	370c      	adds	r7, #12
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd0:	4770      	bx	lr
 8007cd2:	bf00      	nop
 8007cd4:	20000b7c 	.word	0x20000b7c

08007cd8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b083      	sub	sp, #12
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]

}
 8007ce0:	bf00      	nop
 8007ce2:	370c      	adds	r7, #12
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr

08007cec <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007cec:	b480      	push	{r7}
 8007cee:	b085      	sub	sp, #20
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007cfa:	79fb      	ldrb	r3, [r7, #7]
 8007cfc:	2b03      	cmp	r3, #3
 8007cfe:	d817      	bhi.n	8007d30 <USBD_Get_USB_Status+0x44>
 8007d00:	a201      	add	r2, pc, #4	; (adr r2, 8007d08 <USBD_Get_USB_Status+0x1c>)
 8007d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d06:	bf00      	nop
 8007d08:	08007d19 	.word	0x08007d19
 8007d0c:	08007d1f 	.word	0x08007d1f
 8007d10:	08007d25 	.word	0x08007d25
 8007d14:	08007d2b 	.word	0x08007d2b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	73fb      	strb	r3, [r7, #15]
    break;
 8007d1c:	e00b      	b.n	8007d36 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007d1e:	2303      	movs	r3, #3
 8007d20:	73fb      	strb	r3, [r7, #15]
    break;
 8007d22:	e008      	b.n	8007d36 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007d24:	2301      	movs	r3, #1
 8007d26:	73fb      	strb	r3, [r7, #15]
    break;
 8007d28:	e005      	b.n	8007d36 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007d2a:	2303      	movs	r3, #3
 8007d2c:	73fb      	strb	r3, [r7, #15]
    break;
 8007d2e:	e002      	b.n	8007d36 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007d30:	2303      	movs	r3, #3
 8007d32:	73fb      	strb	r3, [r7, #15]
    break;
 8007d34:	bf00      	nop
  }
  return usb_status;
 8007d36:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3714      	adds	r7, #20
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr

08007d44 <memset>:
 8007d44:	4402      	add	r2, r0
 8007d46:	4603      	mov	r3, r0
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d100      	bne.n	8007d4e <memset+0xa>
 8007d4c:	4770      	bx	lr
 8007d4e:	f803 1b01 	strb.w	r1, [r3], #1
 8007d52:	e7f9      	b.n	8007d48 <memset+0x4>

08007d54 <__libc_init_array>:
 8007d54:	b570      	push	{r4, r5, r6, lr}
 8007d56:	4d0d      	ldr	r5, [pc, #52]	; (8007d8c <__libc_init_array+0x38>)
 8007d58:	4c0d      	ldr	r4, [pc, #52]	; (8007d90 <__libc_init_array+0x3c>)
 8007d5a:	1b64      	subs	r4, r4, r5
 8007d5c:	10a4      	asrs	r4, r4, #2
 8007d5e:	2600      	movs	r6, #0
 8007d60:	42a6      	cmp	r6, r4
 8007d62:	d109      	bne.n	8007d78 <__libc_init_array+0x24>
 8007d64:	4d0b      	ldr	r5, [pc, #44]	; (8007d94 <__libc_init_array+0x40>)
 8007d66:	4c0c      	ldr	r4, [pc, #48]	; (8007d98 <__libc_init_array+0x44>)
 8007d68:	f000 fd96 	bl	8008898 <_init>
 8007d6c:	1b64      	subs	r4, r4, r5
 8007d6e:	10a4      	asrs	r4, r4, #2
 8007d70:	2600      	movs	r6, #0
 8007d72:	42a6      	cmp	r6, r4
 8007d74:	d105      	bne.n	8007d82 <__libc_init_array+0x2e>
 8007d76:	bd70      	pop	{r4, r5, r6, pc}
 8007d78:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d7c:	4798      	blx	r3
 8007d7e:	3601      	adds	r6, #1
 8007d80:	e7ee      	b.n	8007d60 <__libc_init_array+0xc>
 8007d82:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d86:	4798      	blx	r3
 8007d88:	3601      	adds	r6, #1
 8007d8a:	e7f2      	b.n	8007d72 <__libc_init_array+0x1e>
 8007d8c:	08008ce8 	.word	0x08008ce8
 8007d90:	08008ce8 	.word	0x08008ce8
 8007d94:	08008ce8 	.word	0x08008ce8
 8007d98:	08008cec 	.word	0x08008cec

08007d9c <cosf>:
 8007d9c:	ee10 3a10 	vmov	r3, s0
 8007da0:	b507      	push	{r0, r1, r2, lr}
 8007da2:	4a1e      	ldr	r2, [pc, #120]	; (8007e1c <cosf+0x80>)
 8007da4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007da8:	4293      	cmp	r3, r2
 8007daa:	dc06      	bgt.n	8007dba <cosf+0x1e>
 8007dac:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8007e20 <cosf+0x84>
 8007db0:	b003      	add	sp, #12
 8007db2:	f85d eb04 	ldr.w	lr, [sp], #4
 8007db6:	f000 b87b 	b.w	8007eb0 <__kernel_cosf>
 8007dba:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007dbe:	db04      	blt.n	8007dca <cosf+0x2e>
 8007dc0:	ee30 0a40 	vsub.f32	s0, s0, s0
 8007dc4:	b003      	add	sp, #12
 8007dc6:	f85d fb04 	ldr.w	pc, [sp], #4
 8007dca:	4668      	mov	r0, sp
 8007dcc:	f000 f916 	bl	8007ffc <__ieee754_rem_pio2f>
 8007dd0:	f000 0003 	and.w	r0, r0, #3
 8007dd4:	2801      	cmp	r0, #1
 8007dd6:	d009      	beq.n	8007dec <cosf+0x50>
 8007dd8:	2802      	cmp	r0, #2
 8007dda:	d010      	beq.n	8007dfe <cosf+0x62>
 8007ddc:	b9b0      	cbnz	r0, 8007e0c <cosf+0x70>
 8007dde:	eddd 0a01 	vldr	s1, [sp, #4]
 8007de2:	ed9d 0a00 	vldr	s0, [sp]
 8007de6:	f000 f863 	bl	8007eb0 <__kernel_cosf>
 8007dea:	e7eb      	b.n	8007dc4 <cosf+0x28>
 8007dec:	eddd 0a01 	vldr	s1, [sp, #4]
 8007df0:	ed9d 0a00 	vldr	s0, [sp]
 8007df4:	f000 f8ba 	bl	8007f6c <__kernel_sinf>
 8007df8:	eeb1 0a40 	vneg.f32	s0, s0
 8007dfc:	e7e2      	b.n	8007dc4 <cosf+0x28>
 8007dfe:	eddd 0a01 	vldr	s1, [sp, #4]
 8007e02:	ed9d 0a00 	vldr	s0, [sp]
 8007e06:	f000 f853 	bl	8007eb0 <__kernel_cosf>
 8007e0a:	e7f5      	b.n	8007df8 <cosf+0x5c>
 8007e0c:	eddd 0a01 	vldr	s1, [sp, #4]
 8007e10:	ed9d 0a00 	vldr	s0, [sp]
 8007e14:	2001      	movs	r0, #1
 8007e16:	f000 f8a9 	bl	8007f6c <__kernel_sinf>
 8007e1a:	e7d3      	b.n	8007dc4 <cosf+0x28>
 8007e1c:	3f490fd8 	.word	0x3f490fd8
 8007e20:	00000000 	.word	0x00000000

08007e24 <sinf>:
 8007e24:	ee10 3a10 	vmov	r3, s0
 8007e28:	b507      	push	{r0, r1, r2, lr}
 8007e2a:	4a1f      	ldr	r2, [pc, #124]	; (8007ea8 <sinf+0x84>)
 8007e2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007e30:	4293      	cmp	r3, r2
 8007e32:	dc07      	bgt.n	8007e44 <sinf+0x20>
 8007e34:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8007eac <sinf+0x88>
 8007e38:	2000      	movs	r0, #0
 8007e3a:	b003      	add	sp, #12
 8007e3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e40:	f000 b894 	b.w	8007f6c <__kernel_sinf>
 8007e44:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007e48:	db04      	blt.n	8007e54 <sinf+0x30>
 8007e4a:	ee30 0a40 	vsub.f32	s0, s0, s0
 8007e4e:	b003      	add	sp, #12
 8007e50:	f85d fb04 	ldr.w	pc, [sp], #4
 8007e54:	4668      	mov	r0, sp
 8007e56:	f000 f8d1 	bl	8007ffc <__ieee754_rem_pio2f>
 8007e5a:	f000 0003 	and.w	r0, r0, #3
 8007e5e:	2801      	cmp	r0, #1
 8007e60:	d00a      	beq.n	8007e78 <sinf+0x54>
 8007e62:	2802      	cmp	r0, #2
 8007e64:	d00f      	beq.n	8007e86 <sinf+0x62>
 8007e66:	b9c0      	cbnz	r0, 8007e9a <sinf+0x76>
 8007e68:	eddd 0a01 	vldr	s1, [sp, #4]
 8007e6c:	ed9d 0a00 	vldr	s0, [sp]
 8007e70:	2001      	movs	r0, #1
 8007e72:	f000 f87b 	bl	8007f6c <__kernel_sinf>
 8007e76:	e7ea      	b.n	8007e4e <sinf+0x2a>
 8007e78:	eddd 0a01 	vldr	s1, [sp, #4]
 8007e7c:	ed9d 0a00 	vldr	s0, [sp]
 8007e80:	f000 f816 	bl	8007eb0 <__kernel_cosf>
 8007e84:	e7e3      	b.n	8007e4e <sinf+0x2a>
 8007e86:	eddd 0a01 	vldr	s1, [sp, #4]
 8007e8a:	ed9d 0a00 	vldr	s0, [sp]
 8007e8e:	2001      	movs	r0, #1
 8007e90:	f000 f86c 	bl	8007f6c <__kernel_sinf>
 8007e94:	eeb1 0a40 	vneg.f32	s0, s0
 8007e98:	e7d9      	b.n	8007e4e <sinf+0x2a>
 8007e9a:	eddd 0a01 	vldr	s1, [sp, #4]
 8007e9e:	ed9d 0a00 	vldr	s0, [sp]
 8007ea2:	f000 f805 	bl	8007eb0 <__kernel_cosf>
 8007ea6:	e7f5      	b.n	8007e94 <sinf+0x70>
 8007ea8:	3f490fd8 	.word	0x3f490fd8
 8007eac:	00000000 	.word	0x00000000

08007eb0 <__kernel_cosf>:
 8007eb0:	ee10 3a10 	vmov	r3, s0
 8007eb4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007eb8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8007ebc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ec0:	da05      	bge.n	8007ece <__kernel_cosf+0x1e>
 8007ec2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8007ec6:	ee17 2a90 	vmov	r2, s15
 8007eca:	2a00      	cmp	r2, #0
 8007ecc:	d03b      	beq.n	8007f46 <__kernel_cosf+0x96>
 8007ece:	ee20 7a00 	vmul.f32	s14, s0, s0
 8007ed2:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8007f4c <__kernel_cosf+0x9c>
 8007ed6:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 8007f50 <__kernel_cosf+0xa0>
 8007eda:	4a1e      	ldr	r2, [pc, #120]	; (8007f54 <__kernel_cosf+0xa4>)
 8007edc:	eea7 6a27 	vfma.f32	s12, s14, s15
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8007f58 <__kernel_cosf+0xa8>
 8007ee6:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007eea:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 8007f5c <__kernel_cosf+0xac>
 8007eee:	eea7 6a87 	vfma.f32	s12, s15, s14
 8007ef2:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8007f60 <__kernel_cosf+0xb0>
 8007ef6:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007efa:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 8007f64 <__kernel_cosf+0xb4>
 8007efe:	eea7 6a87 	vfma.f32	s12, s15, s14
 8007f02:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 8007f06:	ee26 6a07 	vmul.f32	s12, s12, s14
 8007f0a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8007f0e:	eee7 0a06 	vfma.f32	s1, s14, s12
 8007f12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f16:	dc04      	bgt.n	8007f22 <__kernel_cosf+0x72>
 8007f18:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8007f1c:	ee36 0ae7 	vsub.f32	s0, s13, s15
 8007f20:	4770      	bx	lr
 8007f22:	4a11      	ldr	r2, [pc, #68]	; (8007f68 <__kernel_cosf+0xb8>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	bfda      	itte	le
 8007f28:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8007f2c:	ee07 3a10 	vmovle	s14, r3
 8007f30:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 8007f34:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007f38:	ee36 0ac7 	vsub.f32	s0, s13, s14
 8007f3c:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8007f40:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007f44:	4770      	bx	lr
 8007f46:	eeb0 0a66 	vmov.f32	s0, s13
 8007f4a:	4770      	bx	lr
 8007f4c:	ad47d74e 	.word	0xad47d74e
 8007f50:	310f74f6 	.word	0x310f74f6
 8007f54:	3e999999 	.word	0x3e999999
 8007f58:	b493f27c 	.word	0xb493f27c
 8007f5c:	37d00d01 	.word	0x37d00d01
 8007f60:	bab60b61 	.word	0xbab60b61
 8007f64:	3d2aaaab 	.word	0x3d2aaaab
 8007f68:	3f480000 	.word	0x3f480000

08007f6c <__kernel_sinf>:
 8007f6c:	ee10 3a10 	vmov	r3, s0
 8007f70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007f74:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8007f78:	da04      	bge.n	8007f84 <__kernel_sinf+0x18>
 8007f7a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8007f7e:	ee17 3a90 	vmov	r3, s15
 8007f82:	b35b      	cbz	r3, 8007fdc <__kernel_sinf+0x70>
 8007f84:	ee20 7a00 	vmul.f32	s14, s0, s0
 8007f88:	eddf 7a15 	vldr	s15, [pc, #84]	; 8007fe0 <__kernel_sinf+0x74>
 8007f8c:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8007fe4 <__kernel_sinf+0x78>
 8007f90:	eea7 6a27 	vfma.f32	s12, s14, s15
 8007f94:	eddf 7a14 	vldr	s15, [pc, #80]	; 8007fe8 <__kernel_sinf+0x7c>
 8007f98:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007f9c:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8007fec <__kernel_sinf+0x80>
 8007fa0:	eea7 6a87 	vfma.f32	s12, s15, s14
 8007fa4:	eddf 7a12 	vldr	s15, [pc, #72]	; 8007ff0 <__kernel_sinf+0x84>
 8007fa8:	ee60 6a07 	vmul.f32	s13, s0, s14
 8007fac:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007fb0:	b930      	cbnz	r0, 8007fc0 <__kernel_sinf+0x54>
 8007fb2:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8007ff4 <__kernel_sinf+0x88>
 8007fb6:	eea7 6a27 	vfma.f32	s12, s14, s15
 8007fba:	eea6 0a26 	vfma.f32	s0, s12, s13
 8007fbe:	4770      	bx	lr
 8007fc0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8007fc4:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8007fc8:	eee0 7a86 	vfma.f32	s15, s1, s12
 8007fcc:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8007fd0:	eddf 7a09 	vldr	s15, [pc, #36]	; 8007ff8 <__kernel_sinf+0x8c>
 8007fd4:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8007fd8:	ee30 0a60 	vsub.f32	s0, s0, s1
 8007fdc:	4770      	bx	lr
 8007fde:	bf00      	nop
 8007fe0:	2f2ec9d3 	.word	0x2f2ec9d3
 8007fe4:	b2d72f34 	.word	0xb2d72f34
 8007fe8:	3638ef1b 	.word	0x3638ef1b
 8007fec:	b9500d01 	.word	0xb9500d01
 8007ff0:	3c088889 	.word	0x3c088889
 8007ff4:	be2aaaab 	.word	0xbe2aaaab
 8007ff8:	3e2aaaab 	.word	0x3e2aaaab

08007ffc <__ieee754_rem_pio2f>:
 8007ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ffe:	ee10 6a10 	vmov	r6, s0
 8008002:	4b86      	ldr	r3, [pc, #536]	; (800821c <__ieee754_rem_pio2f+0x220>)
 8008004:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8008008:	429d      	cmp	r5, r3
 800800a:	b087      	sub	sp, #28
 800800c:	4604      	mov	r4, r0
 800800e:	dc05      	bgt.n	800801c <__ieee754_rem_pio2f+0x20>
 8008010:	2300      	movs	r3, #0
 8008012:	ed80 0a00 	vstr	s0, [r0]
 8008016:	6043      	str	r3, [r0, #4]
 8008018:	2000      	movs	r0, #0
 800801a:	e020      	b.n	800805e <__ieee754_rem_pio2f+0x62>
 800801c:	4b80      	ldr	r3, [pc, #512]	; (8008220 <__ieee754_rem_pio2f+0x224>)
 800801e:	429d      	cmp	r5, r3
 8008020:	dc38      	bgt.n	8008094 <__ieee754_rem_pio2f+0x98>
 8008022:	2e00      	cmp	r6, #0
 8008024:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8008224 <__ieee754_rem_pio2f+0x228>
 8008028:	4b7f      	ldr	r3, [pc, #508]	; (8008228 <__ieee754_rem_pio2f+0x22c>)
 800802a:	f025 050f 	bic.w	r5, r5, #15
 800802e:	dd18      	ble.n	8008062 <__ieee754_rem_pio2f+0x66>
 8008030:	429d      	cmp	r5, r3
 8008032:	ee70 7a47 	vsub.f32	s15, s0, s14
 8008036:	bf09      	itett	eq
 8008038:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 800822c <__ieee754_rem_pio2f+0x230>
 800803c:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8008230 <__ieee754_rem_pio2f+0x234>
 8008040:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8008044:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8008234 <__ieee754_rem_pio2f+0x238>
 8008048:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800804c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008050:	edc0 6a00 	vstr	s13, [r0]
 8008054:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008058:	edc0 7a01 	vstr	s15, [r0, #4]
 800805c:	2001      	movs	r0, #1
 800805e:	b007      	add	sp, #28
 8008060:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008062:	429d      	cmp	r5, r3
 8008064:	ee70 7a07 	vadd.f32	s15, s0, s14
 8008068:	bf09      	itett	eq
 800806a:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 800822c <__ieee754_rem_pio2f+0x230>
 800806e:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8008230 <__ieee754_rem_pio2f+0x234>
 8008072:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8008076:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8008234 <__ieee754_rem_pio2f+0x238>
 800807a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800807e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008082:	edc0 6a00 	vstr	s13, [r0]
 8008086:	ee77 7a87 	vadd.f32	s15, s15, s14
 800808a:	edc0 7a01 	vstr	s15, [r0, #4]
 800808e:	f04f 30ff 	mov.w	r0, #4294967295
 8008092:	e7e4      	b.n	800805e <__ieee754_rem_pio2f+0x62>
 8008094:	4b68      	ldr	r3, [pc, #416]	; (8008238 <__ieee754_rem_pio2f+0x23c>)
 8008096:	429d      	cmp	r5, r3
 8008098:	dc71      	bgt.n	800817e <__ieee754_rem_pio2f+0x182>
 800809a:	f000 f8db 	bl	8008254 <fabsf>
 800809e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800823c <__ieee754_rem_pio2f+0x240>
 80080a2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80080a6:	eee0 7a07 	vfma.f32	s15, s0, s14
 80080aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80080ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80080b2:	ee17 0a90 	vmov	r0, s15
 80080b6:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8008224 <__ieee754_rem_pio2f+0x228>
 80080ba:	eea7 0a67 	vfms.f32	s0, s14, s15
 80080be:	281f      	cmp	r0, #31
 80080c0:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8008230 <__ieee754_rem_pio2f+0x234>
 80080c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080c8:	eeb1 6a47 	vneg.f32	s12, s14
 80080cc:	ee70 6a67 	vsub.f32	s13, s0, s15
 80080d0:	ee16 2a90 	vmov	r2, s13
 80080d4:	dc1c      	bgt.n	8008110 <__ieee754_rem_pio2f+0x114>
 80080d6:	495a      	ldr	r1, [pc, #360]	; (8008240 <__ieee754_rem_pio2f+0x244>)
 80080d8:	1e47      	subs	r7, r0, #1
 80080da:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 80080de:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80080e2:	428b      	cmp	r3, r1
 80080e4:	d014      	beq.n	8008110 <__ieee754_rem_pio2f+0x114>
 80080e6:	6022      	str	r2, [r4, #0]
 80080e8:	ed94 7a00 	vldr	s14, [r4]
 80080ec:	ee30 0a47 	vsub.f32	s0, s0, s14
 80080f0:	2e00      	cmp	r6, #0
 80080f2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80080f6:	ed84 0a01 	vstr	s0, [r4, #4]
 80080fa:	dab0      	bge.n	800805e <__ieee754_rem_pio2f+0x62>
 80080fc:	eeb1 7a47 	vneg.f32	s14, s14
 8008100:	eeb1 0a40 	vneg.f32	s0, s0
 8008104:	ed84 7a00 	vstr	s14, [r4]
 8008108:	ed84 0a01 	vstr	s0, [r4, #4]
 800810c:	4240      	negs	r0, r0
 800810e:	e7a6      	b.n	800805e <__ieee754_rem_pio2f+0x62>
 8008110:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8008114:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 8008118:	2908      	cmp	r1, #8
 800811a:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800811e:	dde2      	ble.n	80080e6 <__ieee754_rem_pio2f+0xea>
 8008120:	eddf 5a42 	vldr	s11, [pc, #264]	; 800822c <__ieee754_rem_pio2f+0x230>
 8008124:	eef0 6a40 	vmov.f32	s13, s0
 8008128:	eee6 6a25 	vfma.f32	s13, s12, s11
 800812c:	ee70 7a66 	vsub.f32	s15, s0, s13
 8008130:	eee6 7a25 	vfma.f32	s15, s12, s11
 8008134:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008234 <__ieee754_rem_pio2f+0x238>
 8008138:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800813c:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8008140:	ee15 2a90 	vmov	r2, s11
 8008144:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8008148:	1a5b      	subs	r3, r3, r1
 800814a:	2b19      	cmp	r3, #25
 800814c:	dc04      	bgt.n	8008158 <__ieee754_rem_pio2f+0x15c>
 800814e:	edc4 5a00 	vstr	s11, [r4]
 8008152:	eeb0 0a66 	vmov.f32	s0, s13
 8008156:	e7c7      	b.n	80080e8 <__ieee754_rem_pio2f+0xec>
 8008158:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8008244 <__ieee754_rem_pio2f+0x248>
 800815c:	eeb0 0a66 	vmov.f32	s0, s13
 8008160:	eea6 0a25 	vfma.f32	s0, s12, s11
 8008164:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8008168:	eddf 6a37 	vldr	s13, [pc, #220]	; 8008248 <__ieee754_rem_pio2f+0x24c>
 800816c:	eee6 7a25 	vfma.f32	s15, s12, s11
 8008170:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8008174:	ee30 7a67 	vsub.f32	s14, s0, s15
 8008178:	ed84 7a00 	vstr	s14, [r4]
 800817c:	e7b4      	b.n	80080e8 <__ieee754_rem_pio2f+0xec>
 800817e:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8008182:	db06      	blt.n	8008192 <__ieee754_rem_pio2f+0x196>
 8008184:	ee70 7a40 	vsub.f32	s15, s0, s0
 8008188:	edc0 7a01 	vstr	s15, [r0, #4]
 800818c:	edc0 7a00 	vstr	s15, [r0]
 8008190:	e742      	b.n	8008018 <__ieee754_rem_pio2f+0x1c>
 8008192:	15ea      	asrs	r2, r5, #23
 8008194:	3a86      	subs	r2, #134	; 0x86
 8008196:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800819a:	ee07 3a90 	vmov	s15, r3
 800819e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80081a2:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800824c <__ieee754_rem_pio2f+0x250>
 80081a6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80081aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80081ae:	ed8d 7a03 	vstr	s14, [sp, #12]
 80081b2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80081b6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80081ba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80081be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80081c2:	ed8d 7a04 	vstr	s14, [sp, #16]
 80081c6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80081ca:	eef5 7a40 	vcmp.f32	s15, #0.0
 80081ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081d2:	edcd 7a05 	vstr	s15, [sp, #20]
 80081d6:	d11e      	bne.n	8008216 <__ieee754_rem_pio2f+0x21a>
 80081d8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80081dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081e0:	bf14      	ite	ne
 80081e2:	2302      	movne	r3, #2
 80081e4:	2301      	moveq	r3, #1
 80081e6:	491a      	ldr	r1, [pc, #104]	; (8008250 <__ieee754_rem_pio2f+0x254>)
 80081e8:	9101      	str	r1, [sp, #4]
 80081ea:	2102      	movs	r1, #2
 80081ec:	9100      	str	r1, [sp, #0]
 80081ee:	a803      	add	r0, sp, #12
 80081f0:	4621      	mov	r1, r4
 80081f2:	f000 f837 	bl	8008264 <__kernel_rem_pio2f>
 80081f6:	2e00      	cmp	r6, #0
 80081f8:	f6bf af31 	bge.w	800805e <__ieee754_rem_pio2f+0x62>
 80081fc:	edd4 7a00 	vldr	s15, [r4]
 8008200:	eef1 7a67 	vneg.f32	s15, s15
 8008204:	edc4 7a00 	vstr	s15, [r4]
 8008208:	edd4 7a01 	vldr	s15, [r4, #4]
 800820c:	eef1 7a67 	vneg.f32	s15, s15
 8008210:	edc4 7a01 	vstr	s15, [r4, #4]
 8008214:	e77a      	b.n	800810c <__ieee754_rem_pio2f+0x110>
 8008216:	2303      	movs	r3, #3
 8008218:	e7e5      	b.n	80081e6 <__ieee754_rem_pio2f+0x1ea>
 800821a:	bf00      	nop
 800821c:	3f490fd8 	.word	0x3f490fd8
 8008220:	4016cbe3 	.word	0x4016cbe3
 8008224:	3fc90f80 	.word	0x3fc90f80
 8008228:	3fc90fd0 	.word	0x3fc90fd0
 800822c:	37354400 	.word	0x37354400
 8008230:	37354443 	.word	0x37354443
 8008234:	2e85a308 	.word	0x2e85a308
 8008238:	43490f80 	.word	0x43490f80
 800823c:	3f22f984 	.word	0x3f22f984
 8008240:	08008910 	.word	0x08008910
 8008244:	2e85a300 	.word	0x2e85a300
 8008248:	248d3132 	.word	0x248d3132
 800824c:	43800000 	.word	0x43800000
 8008250:	08008990 	.word	0x08008990

08008254 <fabsf>:
 8008254:	ee10 3a10 	vmov	r3, s0
 8008258:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800825c:	ee00 3a10 	vmov	s0, r3
 8008260:	4770      	bx	lr
	...

08008264 <__kernel_rem_pio2f>:
 8008264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008268:	ed2d 8b04 	vpush	{d8-d9}
 800826c:	b0d9      	sub	sp, #356	; 0x164
 800826e:	4688      	mov	r8, r1
 8008270:	9002      	str	r0, [sp, #8]
 8008272:	49b8      	ldr	r1, [pc, #736]	; (8008554 <__kernel_rem_pio2f+0x2f0>)
 8008274:	9866      	ldr	r0, [sp, #408]	; 0x198
 8008276:	9301      	str	r3, [sp, #4]
 8008278:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 800827c:	9901      	ldr	r1, [sp, #4]
 800827e:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 8008280:	f101 3bff 	add.w	fp, r1, #4294967295
 8008284:	1d11      	adds	r1, r2, #4
 8008286:	db25      	blt.n	80082d4 <__kernel_rem_pio2f+0x70>
 8008288:	1ed0      	subs	r0, r2, #3
 800828a:	bf48      	it	mi
 800828c:	1d10      	addmi	r0, r2, #4
 800828e:	10c0      	asrs	r0, r0, #3
 8008290:	1c45      	adds	r5, r0, #1
 8008292:	00e9      	lsls	r1, r5, #3
 8008294:	eba0 070b 	sub.w	r7, r0, fp
 8008298:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 8008564 <__kernel_rem_pio2f+0x300>
 800829c:	9103      	str	r1, [sp, #12]
 800829e:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 80082a2:	eb0a 0c0b 	add.w	ip, sl, fp
 80082a6:	ae1c      	add	r6, sp, #112	; 0x70
 80082a8:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 80082ac:	2400      	movs	r4, #0
 80082ae:	4564      	cmp	r4, ip
 80082b0:	dd12      	ble.n	80082d8 <__kernel_rem_pio2f+0x74>
 80082b2:	9901      	ldr	r1, [sp, #4]
 80082b4:	ac1c      	add	r4, sp, #112	; 0x70
 80082b6:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 80082ba:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 80082be:	f04f 0c00 	mov.w	ip, #0
 80082c2:	45d4      	cmp	ip, sl
 80082c4:	dc27      	bgt.n	8008316 <__kernel_rem_pio2f+0xb2>
 80082c6:	f8dd e008 	ldr.w	lr, [sp, #8]
 80082ca:	eddf 7aa6 	vldr	s15, [pc, #664]	; 8008564 <__kernel_rem_pio2f+0x300>
 80082ce:	4627      	mov	r7, r4
 80082d0:	2600      	movs	r6, #0
 80082d2:	e016      	b.n	8008302 <__kernel_rem_pio2f+0x9e>
 80082d4:	2000      	movs	r0, #0
 80082d6:	e7db      	b.n	8008290 <__kernel_rem_pio2f+0x2c>
 80082d8:	42e7      	cmn	r7, r4
 80082da:	bf5d      	ittte	pl
 80082dc:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 80082e0:	ee07 1a90 	vmovpl	s15, r1
 80082e4:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80082e8:	eef0 7a47 	vmovmi.f32	s15, s14
 80082ec:	ece6 7a01 	vstmia	r6!, {s15}
 80082f0:	3401      	adds	r4, #1
 80082f2:	e7dc      	b.n	80082ae <__kernel_rem_pio2f+0x4a>
 80082f4:	ecfe 6a01 	vldmia	lr!, {s13}
 80082f8:	ed97 7a00 	vldr	s14, [r7]
 80082fc:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008300:	3601      	adds	r6, #1
 8008302:	455e      	cmp	r6, fp
 8008304:	f1a7 0704 	sub.w	r7, r7, #4
 8008308:	ddf4      	ble.n	80082f4 <__kernel_rem_pio2f+0x90>
 800830a:	ece9 7a01 	vstmia	r9!, {s15}
 800830e:	f10c 0c01 	add.w	ip, ip, #1
 8008312:	3404      	adds	r4, #4
 8008314:	e7d5      	b.n	80082c2 <__kernel_rem_pio2f+0x5e>
 8008316:	a908      	add	r1, sp, #32
 8008318:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800831c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8008320:	eddf 8a8f 	vldr	s17, [pc, #572]	; 8008560 <__kernel_rem_pio2f+0x2fc>
 8008324:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 800855c <__kernel_rem_pio2f+0x2f8>
 8008328:	9105      	str	r1, [sp, #20]
 800832a:	9304      	str	r3, [sp, #16]
 800832c:	4656      	mov	r6, sl
 800832e:	00b3      	lsls	r3, r6, #2
 8008330:	9306      	str	r3, [sp, #24]
 8008332:	ab58      	add	r3, sp, #352	; 0x160
 8008334:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8008338:	ac08      	add	r4, sp, #32
 800833a:	ab44      	add	r3, sp, #272	; 0x110
 800833c:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8008340:	46a4      	mov	ip, r4
 8008342:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8008346:	4637      	mov	r7, r6
 8008348:	2f00      	cmp	r7, #0
 800834a:	f1a0 0004 	sub.w	r0, r0, #4
 800834e:	dc4a      	bgt.n	80083e6 <__kernel_rem_pio2f+0x182>
 8008350:	4628      	mov	r0, r5
 8008352:	9207      	str	r2, [sp, #28]
 8008354:	f000 f9f8 	bl	8008748 <scalbnf>
 8008358:	eeb0 8a40 	vmov.f32	s16, s0
 800835c:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8008360:	ee28 0a00 	vmul.f32	s0, s16, s0
 8008364:	f000 fa56 	bl	8008814 <floorf>
 8008368:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800836c:	eea0 8a67 	vfms.f32	s16, s0, s15
 8008370:	2d00      	cmp	r5, #0
 8008372:	9a07      	ldr	r2, [sp, #28]
 8008374:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8008378:	ee17 9a90 	vmov	r9, s15
 800837c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008380:	ee38 8a67 	vsub.f32	s16, s16, s15
 8008384:	dd41      	ble.n	800840a <__kernel_rem_pio2f+0x1a6>
 8008386:	f106 3cff 	add.w	ip, r6, #4294967295
 800838a:	ab08      	add	r3, sp, #32
 800838c:	f1c5 0e08 	rsb	lr, r5, #8
 8008390:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8008394:	fa47 f00e 	asr.w	r0, r7, lr
 8008398:	4481      	add	r9, r0
 800839a:	fa00 f00e 	lsl.w	r0, r0, lr
 800839e:	1a3f      	subs	r7, r7, r0
 80083a0:	f1c5 0007 	rsb	r0, r5, #7
 80083a4:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 80083a8:	4107      	asrs	r7, r0
 80083aa:	2f00      	cmp	r7, #0
 80083ac:	dd3c      	ble.n	8008428 <__kernel_rem_pio2f+0x1c4>
 80083ae:	f04f 0e00 	mov.w	lr, #0
 80083b2:	f109 0901 	add.w	r9, r9, #1
 80083b6:	4671      	mov	r1, lr
 80083b8:	4576      	cmp	r6, lr
 80083ba:	dc67      	bgt.n	800848c <__kernel_rem_pio2f+0x228>
 80083bc:	2d00      	cmp	r5, #0
 80083be:	dd03      	ble.n	80083c8 <__kernel_rem_pio2f+0x164>
 80083c0:	2d01      	cmp	r5, #1
 80083c2:	d074      	beq.n	80084ae <__kernel_rem_pio2f+0x24a>
 80083c4:	2d02      	cmp	r5, #2
 80083c6:	d07b      	beq.n	80084c0 <__kernel_rem_pio2f+0x25c>
 80083c8:	2f02      	cmp	r7, #2
 80083ca:	d12d      	bne.n	8008428 <__kernel_rem_pio2f+0x1c4>
 80083cc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80083d0:	ee30 8a48 	vsub.f32	s16, s0, s16
 80083d4:	b341      	cbz	r1, 8008428 <__kernel_rem_pio2f+0x1c4>
 80083d6:	4628      	mov	r0, r5
 80083d8:	9207      	str	r2, [sp, #28]
 80083da:	f000 f9b5 	bl	8008748 <scalbnf>
 80083de:	9a07      	ldr	r2, [sp, #28]
 80083e0:	ee38 8a40 	vsub.f32	s16, s16, s0
 80083e4:	e020      	b.n	8008428 <__kernel_rem_pio2f+0x1c4>
 80083e6:	ee60 7a28 	vmul.f32	s15, s0, s17
 80083ea:	3f01      	subs	r7, #1
 80083ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80083f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80083f4:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80083f8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80083fc:	ecac 0a01 	vstmia	ip!, {s0}
 8008400:	ed90 0a00 	vldr	s0, [r0]
 8008404:	ee37 0a80 	vadd.f32	s0, s15, s0
 8008408:	e79e      	b.n	8008348 <__kernel_rem_pio2f+0xe4>
 800840a:	d105      	bne.n	8008418 <__kernel_rem_pio2f+0x1b4>
 800840c:	1e70      	subs	r0, r6, #1
 800840e:	ab08      	add	r3, sp, #32
 8008410:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8008414:	11ff      	asrs	r7, r7, #7
 8008416:	e7c8      	b.n	80083aa <__kernel_rem_pio2f+0x146>
 8008418:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800841c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8008420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008424:	da30      	bge.n	8008488 <__kernel_rem_pio2f+0x224>
 8008426:	2700      	movs	r7, #0
 8008428:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800842c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008430:	f040 809a 	bne.w	8008568 <__kernel_rem_pio2f+0x304>
 8008434:	1e74      	subs	r4, r6, #1
 8008436:	46a4      	mov	ip, r4
 8008438:	2100      	movs	r1, #0
 800843a:	45d4      	cmp	ip, sl
 800843c:	da47      	bge.n	80084ce <__kernel_rem_pio2f+0x26a>
 800843e:	2900      	cmp	r1, #0
 8008440:	d063      	beq.n	800850a <__kernel_rem_pio2f+0x2a6>
 8008442:	ab08      	add	r3, sp, #32
 8008444:	3d08      	subs	r5, #8
 8008446:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d07f      	beq.n	800854e <__kernel_rem_pio2f+0x2ea>
 800844e:	4628      	mov	r0, r5
 8008450:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008454:	f000 f978 	bl	8008748 <scalbnf>
 8008458:	1c63      	adds	r3, r4, #1
 800845a:	aa44      	add	r2, sp, #272	; 0x110
 800845c:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8008560 <__kernel_rem_pio2f+0x2fc>
 8008460:	0099      	lsls	r1, r3, #2
 8008462:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8008466:	4623      	mov	r3, r4
 8008468:	2b00      	cmp	r3, #0
 800846a:	f280 80ad 	bge.w	80085c8 <__kernel_rem_pio2f+0x364>
 800846e:	4623      	mov	r3, r4
 8008470:	2b00      	cmp	r3, #0
 8008472:	f2c0 80cb 	blt.w	800860c <__kernel_rem_pio2f+0x3a8>
 8008476:	aa44      	add	r2, sp, #272	; 0x110
 8008478:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800847c:	4e36      	ldr	r6, [pc, #216]	; (8008558 <__kernel_rem_pio2f+0x2f4>)
 800847e:	eddf 7a39 	vldr	s15, [pc, #228]	; 8008564 <__kernel_rem_pio2f+0x300>
 8008482:	2000      	movs	r0, #0
 8008484:	1ae2      	subs	r2, r4, r3
 8008486:	e0b6      	b.n	80085f6 <__kernel_rem_pio2f+0x392>
 8008488:	2702      	movs	r7, #2
 800848a:	e790      	b.n	80083ae <__kernel_rem_pio2f+0x14a>
 800848c:	6820      	ldr	r0, [r4, #0]
 800848e:	b949      	cbnz	r1, 80084a4 <__kernel_rem_pio2f+0x240>
 8008490:	b118      	cbz	r0, 800849a <__kernel_rem_pio2f+0x236>
 8008492:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8008496:	6020      	str	r0, [r4, #0]
 8008498:	2001      	movs	r0, #1
 800849a:	f10e 0e01 	add.w	lr, lr, #1
 800849e:	3404      	adds	r4, #4
 80084a0:	4601      	mov	r1, r0
 80084a2:	e789      	b.n	80083b8 <__kernel_rem_pio2f+0x154>
 80084a4:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 80084a8:	6020      	str	r0, [r4, #0]
 80084aa:	4608      	mov	r0, r1
 80084ac:	e7f5      	b.n	800849a <__kernel_rem_pio2f+0x236>
 80084ae:	1e74      	subs	r4, r6, #1
 80084b0:	ab08      	add	r3, sp, #32
 80084b2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80084b6:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80084ba:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80084be:	e783      	b.n	80083c8 <__kernel_rem_pio2f+0x164>
 80084c0:	1e74      	subs	r4, r6, #1
 80084c2:	ab08      	add	r3, sp, #32
 80084c4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80084c8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 80084cc:	e7f5      	b.n	80084ba <__kernel_rem_pio2f+0x256>
 80084ce:	ab08      	add	r3, sp, #32
 80084d0:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 80084d4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80084d8:	4301      	orrs	r1, r0
 80084da:	e7ae      	b.n	800843a <__kernel_rem_pio2f+0x1d6>
 80084dc:	3001      	adds	r0, #1
 80084de:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 80084e2:	2f00      	cmp	r7, #0
 80084e4:	d0fa      	beq.n	80084dc <__kernel_rem_pio2f+0x278>
 80084e6:	9b06      	ldr	r3, [sp, #24]
 80084e8:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80084ec:	eb0d 0403 	add.w	r4, sp, r3
 80084f0:	9b01      	ldr	r3, [sp, #4]
 80084f2:	18f7      	adds	r7, r6, r3
 80084f4:	ab1c      	add	r3, sp, #112	; 0x70
 80084f6:	f106 0c01 	add.w	ip, r6, #1
 80084fa:	3c4c      	subs	r4, #76	; 0x4c
 80084fc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008500:	4430      	add	r0, r6
 8008502:	4560      	cmp	r0, ip
 8008504:	da04      	bge.n	8008510 <__kernel_rem_pio2f+0x2ac>
 8008506:	4606      	mov	r6, r0
 8008508:	e711      	b.n	800832e <__kernel_rem_pio2f+0xca>
 800850a:	9c05      	ldr	r4, [sp, #20]
 800850c:	2001      	movs	r0, #1
 800850e:	e7e6      	b.n	80084de <__kernel_rem_pio2f+0x27a>
 8008510:	9b04      	ldr	r3, [sp, #16]
 8008512:	f8dd e008 	ldr.w	lr, [sp, #8]
 8008516:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800851a:	9306      	str	r3, [sp, #24]
 800851c:	ee07 3a90 	vmov	s15, r3
 8008520:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008524:	2600      	movs	r6, #0
 8008526:	ece7 7a01 	vstmia	r7!, {s15}
 800852a:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8008564 <__kernel_rem_pio2f+0x300>
 800852e:	46b9      	mov	r9, r7
 8008530:	455e      	cmp	r6, fp
 8008532:	dd04      	ble.n	800853e <__kernel_rem_pio2f+0x2da>
 8008534:	ece4 7a01 	vstmia	r4!, {s15}
 8008538:	f10c 0c01 	add.w	ip, ip, #1
 800853c:	e7e1      	b.n	8008502 <__kernel_rem_pio2f+0x29e>
 800853e:	ecfe 6a01 	vldmia	lr!, {s13}
 8008542:	ed39 7a01 	vldmdb	r9!, {s14}
 8008546:	3601      	adds	r6, #1
 8008548:	eee6 7a87 	vfma.f32	s15, s13, s14
 800854c:	e7f0      	b.n	8008530 <__kernel_rem_pio2f+0x2cc>
 800854e:	3c01      	subs	r4, #1
 8008550:	e777      	b.n	8008442 <__kernel_rem_pio2f+0x1de>
 8008552:	bf00      	nop
 8008554:	08008cd4 	.word	0x08008cd4
 8008558:	08008ca8 	.word	0x08008ca8
 800855c:	43800000 	.word	0x43800000
 8008560:	3b800000 	.word	0x3b800000
 8008564:	00000000 	.word	0x00000000
 8008568:	9b03      	ldr	r3, [sp, #12]
 800856a:	eeb0 0a48 	vmov.f32	s0, s16
 800856e:	1a98      	subs	r0, r3, r2
 8008570:	f000 f8ea 	bl	8008748 <scalbnf>
 8008574:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800855c <__kernel_rem_pio2f+0x2f8>
 8008578:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800857c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008580:	db19      	blt.n	80085b6 <__kernel_rem_pio2f+0x352>
 8008582:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8008560 <__kernel_rem_pio2f+0x2fc>
 8008586:	ee60 7a27 	vmul.f32	s15, s0, s15
 800858a:	aa08      	add	r2, sp, #32
 800858c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008590:	1c74      	adds	r4, r6, #1
 8008592:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008596:	3508      	adds	r5, #8
 8008598:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800859c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80085a0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80085a4:	ee10 3a10 	vmov	r3, s0
 80085a8:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80085ac:	ee17 3a90 	vmov	r3, s15
 80085b0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80085b4:	e74b      	b.n	800844e <__kernel_rem_pio2f+0x1ea>
 80085b6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80085ba:	aa08      	add	r2, sp, #32
 80085bc:	ee10 3a10 	vmov	r3, s0
 80085c0:	4634      	mov	r4, r6
 80085c2:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80085c6:	e742      	b.n	800844e <__kernel_rem_pio2f+0x1ea>
 80085c8:	a808      	add	r0, sp, #32
 80085ca:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80085ce:	9001      	str	r0, [sp, #4]
 80085d0:	ee07 0a90 	vmov	s15, r0
 80085d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80085d8:	3b01      	subs	r3, #1
 80085da:	ee67 7a80 	vmul.f32	s15, s15, s0
 80085de:	ee20 0a07 	vmul.f32	s0, s0, s14
 80085e2:	ed62 7a01 	vstmdb	r2!, {s15}
 80085e6:	e73f      	b.n	8008468 <__kernel_rem_pio2f+0x204>
 80085e8:	ecf6 6a01 	vldmia	r6!, {s13}
 80085ec:	ecb5 7a01 	vldmia	r5!, {s14}
 80085f0:	eee6 7a87 	vfma.f32	s15, s13, s14
 80085f4:	3001      	adds	r0, #1
 80085f6:	4550      	cmp	r0, sl
 80085f8:	dc01      	bgt.n	80085fe <__kernel_rem_pio2f+0x39a>
 80085fa:	4290      	cmp	r0, r2
 80085fc:	ddf4      	ble.n	80085e8 <__kernel_rem_pio2f+0x384>
 80085fe:	a858      	add	r0, sp, #352	; 0x160
 8008600:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8008604:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 8008608:	3b01      	subs	r3, #1
 800860a:	e731      	b.n	8008470 <__kernel_rem_pio2f+0x20c>
 800860c:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800860e:	2b02      	cmp	r3, #2
 8008610:	dc09      	bgt.n	8008626 <__kernel_rem_pio2f+0x3c2>
 8008612:	2b00      	cmp	r3, #0
 8008614:	dc2b      	bgt.n	800866e <__kernel_rem_pio2f+0x40a>
 8008616:	d044      	beq.n	80086a2 <__kernel_rem_pio2f+0x43e>
 8008618:	f009 0007 	and.w	r0, r9, #7
 800861c:	b059      	add	sp, #356	; 0x164
 800861e:	ecbd 8b04 	vpop	{d8-d9}
 8008622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008626:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8008628:	2b03      	cmp	r3, #3
 800862a:	d1f5      	bne.n	8008618 <__kernel_rem_pio2f+0x3b4>
 800862c:	aa30      	add	r2, sp, #192	; 0xc0
 800862e:	1f0b      	subs	r3, r1, #4
 8008630:	4413      	add	r3, r2
 8008632:	461a      	mov	r2, r3
 8008634:	4620      	mov	r0, r4
 8008636:	2800      	cmp	r0, #0
 8008638:	f1a2 0204 	sub.w	r2, r2, #4
 800863c:	dc52      	bgt.n	80086e4 <__kernel_rem_pio2f+0x480>
 800863e:	4622      	mov	r2, r4
 8008640:	2a01      	cmp	r2, #1
 8008642:	f1a3 0304 	sub.w	r3, r3, #4
 8008646:	dc5d      	bgt.n	8008704 <__kernel_rem_pio2f+0x4a0>
 8008648:	ab30      	add	r3, sp, #192	; 0xc0
 800864a:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8008564 <__kernel_rem_pio2f+0x300>
 800864e:	440b      	add	r3, r1
 8008650:	2c01      	cmp	r4, #1
 8008652:	dc67      	bgt.n	8008724 <__kernel_rem_pio2f+0x4c0>
 8008654:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8008658:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800865c:	2f00      	cmp	r7, #0
 800865e:	d167      	bne.n	8008730 <__kernel_rem_pio2f+0x4cc>
 8008660:	edc8 6a00 	vstr	s13, [r8]
 8008664:	ed88 7a01 	vstr	s14, [r8, #4]
 8008668:	edc8 7a02 	vstr	s15, [r8, #8]
 800866c:	e7d4      	b.n	8008618 <__kernel_rem_pio2f+0x3b4>
 800866e:	ab30      	add	r3, sp, #192	; 0xc0
 8008670:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 8008564 <__kernel_rem_pio2f+0x300>
 8008674:	440b      	add	r3, r1
 8008676:	4622      	mov	r2, r4
 8008678:	2a00      	cmp	r2, #0
 800867a:	da24      	bge.n	80086c6 <__kernel_rem_pio2f+0x462>
 800867c:	b34f      	cbz	r7, 80086d2 <__kernel_rem_pio2f+0x46e>
 800867e:	eef1 7a47 	vneg.f32	s15, s14
 8008682:	edc8 7a00 	vstr	s15, [r8]
 8008686:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800868a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800868e:	aa31      	add	r2, sp, #196	; 0xc4
 8008690:	2301      	movs	r3, #1
 8008692:	429c      	cmp	r4, r3
 8008694:	da20      	bge.n	80086d8 <__kernel_rem_pio2f+0x474>
 8008696:	b10f      	cbz	r7, 800869c <__kernel_rem_pio2f+0x438>
 8008698:	eef1 7a67 	vneg.f32	s15, s15
 800869c:	edc8 7a01 	vstr	s15, [r8, #4]
 80086a0:	e7ba      	b.n	8008618 <__kernel_rem_pio2f+0x3b4>
 80086a2:	ab30      	add	r3, sp, #192	; 0xc0
 80086a4:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 8008564 <__kernel_rem_pio2f+0x300>
 80086a8:	440b      	add	r3, r1
 80086aa:	2c00      	cmp	r4, #0
 80086ac:	da05      	bge.n	80086ba <__kernel_rem_pio2f+0x456>
 80086ae:	b10f      	cbz	r7, 80086b4 <__kernel_rem_pio2f+0x450>
 80086b0:	eef1 7a67 	vneg.f32	s15, s15
 80086b4:	edc8 7a00 	vstr	s15, [r8]
 80086b8:	e7ae      	b.n	8008618 <__kernel_rem_pio2f+0x3b4>
 80086ba:	ed33 7a01 	vldmdb	r3!, {s14}
 80086be:	3c01      	subs	r4, #1
 80086c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80086c4:	e7f1      	b.n	80086aa <__kernel_rem_pio2f+0x446>
 80086c6:	ed73 7a01 	vldmdb	r3!, {s15}
 80086ca:	3a01      	subs	r2, #1
 80086cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80086d0:	e7d2      	b.n	8008678 <__kernel_rem_pio2f+0x414>
 80086d2:	eef0 7a47 	vmov.f32	s15, s14
 80086d6:	e7d4      	b.n	8008682 <__kernel_rem_pio2f+0x41e>
 80086d8:	ecb2 7a01 	vldmia	r2!, {s14}
 80086dc:	3301      	adds	r3, #1
 80086de:	ee77 7a87 	vadd.f32	s15, s15, s14
 80086e2:	e7d6      	b.n	8008692 <__kernel_rem_pio2f+0x42e>
 80086e4:	edd2 7a00 	vldr	s15, [r2]
 80086e8:	edd2 6a01 	vldr	s13, [r2, #4]
 80086ec:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80086f0:	3801      	subs	r0, #1
 80086f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80086f6:	ed82 7a00 	vstr	s14, [r2]
 80086fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086fe:	edc2 7a01 	vstr	s15, [r2, #4]
 8008702:	e798      	b.n	8008636 <__kernel_rem_pio2f+0x3d2>
 8008704:	edd3 7a00 	vldr	s15, [r3]
 8008708:	edd3 6a01 	vldr	s13, [r3, #4]
 800870c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008710:	3a01      	subs	r2, #1
 8008712:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008716:	ed83 7a00 	vstr	s14, [r3]
 800871a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800871e:	edc3 7a01 	vstr	s15, [r3, #4]
 8008722:	e78d      	b.n	8008640 <__kernel_rem_pio2f+0x3dc>
 8008724:	ed33 7a01 	vldmdb	r3!, {s14}
 8008728:	3c01      	subs	r4, #1
 800872a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800872e:	e78f      	b.n	8008650 <__kernel_rem_pio2f+0x3ec>
 8008730:	eef1 6a66 	vneg.f32	s13, s13
 8008734:	eeb1 7a47 	vneg.f32	s14, s14
 8008738:	edc8 6a00 	vstr	s13, [r8]
 800873c:	ed88 7a01 	vstr	s14, [r8, #4]
 8008740:	eef1 7a67 	vneg.f32	s15, s15
 8008744:	e790      	b.n	8008668 <__kernel_rem_pio2f+0x404>
 8008746:	bf00      	nop

08008748 <scalbnf>:
 8008748:	ee10 3a10 	vmov	r3, s0
 800874c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8008750:	d02b      	beq.n	80087aa <scalbnf+0x62>
 8008752:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8008756:	d302      	bcc.n	800875e <scalbnf+0x16>
 8008758:	ee30 0a00 	vadd.f32	s0, s0, s0
 800875c:	4770      	bx	lr
 800875e:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8008762:	d123      	bne.n	80087ac <scalbnf+0x64>
 8008764:	4b24      	ldr	r3, [pc, #144]	; (80087f8 <scalbnf+0xb0>)
 8008766:	eddf 7a25 	vldr	s15, [pc, #148]	; 80087fc <scalbnf+0xb4>
 800876a:	4298      	cmp	r0, r3
 800876c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008770:	db17      	blt.n	80087a2 <scalbnf+0x5a>
 8008772:	ee10 3a10 	vmov	r3, s0
 8008776:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800877a:	3a19      	subs	r2, #25
 800877c:	f24c 3150 	movw	r1, #50000	; 0xc350
 8008780:	4288      	cmp	r0, r1
 8008782:	dd15      	ble.n	80087b0 <scalbnf+0x68>
 8008784:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8008800 <scalbnf+0xb8>
 8008788:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8008804 <scalbnf+0xbc>
 800878c:	ee10 3a10 	vmov	r3, s0
 8008790:	eeb0 7a67 	vmov.f32	s14, s15
 8008794:	2b00      	cmp	r3, #0
 8008796:	bfb8      	it	lt
 8008798:	eef0 7a66 	vmovlt.f32	s15, s13
 800879c:	ee27 0a87 	vmul.f32	s0, s15, s14
 80087a0:	4770      	bx	lr
 80087a2:	eddf 7a19 	vldr	s15, [pc, #100]	; 8008808 <scalbnf+0xc0>
 80087a6:	ee27 0a80 	vmul.f32	s0, s15, s0
 80087aa:	4770      	bx	lr
 80087ac:	0dd2      	lsrs	r2, r2, #23
 80087ae:	e7e5      	b.n	800877c <scalbnf+0x34>
 80087b0:	4410      	add	r0, r2
 80087b2:	28fe      	cmp	r0, #254	; 0xfe
 80087b4:	dce6      	bgt.n	8008784 <scalbnf+0x3c>
 80087b6:	2800      	cmp	r0, #0
 80087b8:	dd06      	ble.n	80087c8 <scalbnf+0x80>
 80087ba:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80087be:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80087c2:	ee00 3a10 	vmov	s0, r3
 80087c6:	4770      	bx	lr
 80087c8:	f110 0f16 	cmn.w	r0, #22
 80087cc:	da09      	bge.n	80087e2 <scalbnf+0x9a>
 80087ce:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8008808 <scalbnf+0xc0>
 80087d2:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800880c <scalbnf+0xc4>
 80087d6:	ee10 3a10 	vmov	r3, s0
 80087da:	eeb0 7a67 	vmov.f32	s14, s15
 80087de:	2b00      	cmp	r3, #0
 80087e0:	e7d9      	b.n	8008796 <scalbnf+0x4e>
 80087e2:	3019      	adds	r0, #25
 80087e4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80087e8:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80087ec:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8008810 <scalbnf+0xc8>
 80087f0:	ee07 3a90 	vmov	s15, r3
 80087f4:	e7d7      	b.n	80087a6 <scalbnf+0x5e>
 80087f6:	bf00      	nop
 80087f8:	ffff3cb0 	.word	0xffff3cb0
 80087fc:	4c000000 	.word	0x4c000000
 8008800:	7149f2ca 	.word	0x7149f2ca
 8008804:	f149f2ca 	.word	0xf149f2ca
 8008808:	0da24260 	.word	0x0da24260
 800880c:	8da24260 	.word	0x8da24260
 8008810:	33000000 	.word	0x33000000

08008814 <floorf>:
 8008814:	ee10 3a10 	vmov	r3, s0
 8008818:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800881c:	3a7f      	subs	r2, #127	; 0x7f
 800881e:	2a16      	cmp	r2, #22
 8008820:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008824:	dc2a      	bgt.n	800887c <floorf+0x68>
 8008826:	2a00      	cmp	r2, #0
 8008828:	da11      	bge.n	800884e <floorf+0x3a>
 800882a:	eddf 7a18 	vldr	s15, [pc, #96]	; 800888c <floorf+0x78>
 800882e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008832:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800883a:	dd05      	ble.n	8008848 <floorf+0x34>
 800883c:	2b00      	cmp	r3, #0
 800883e:	da23      	bge.n	8008888 <floorf+0x74>
 8008840:	4a13      	ldr	r2, [pc, #76]	; (8008890 <floorf+0x7c>)
 8008842:	2900      	cmp	r1, #0
 8008844:	bf18      	it	ne
 8008846:	4613      	movne	r3, r2
 8008848:	ee00 3a10 	vmov	s0, r3
 800884c:	4770      	bx	lr
 800884e:	4911      	ldr	r1, [pc, #68]	; (8008894 <floorf+0x80>)
 8008850:	4111      	asrs	r1, r2
 8008852:	420b      	tst	r3, r1
 8008854:	d0fa      	beq.n	800884c <floorf+0x38>
 8008856:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800888c <floorf+0x78>
 800885a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800885e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008866:	ddef      	ble.n	8008848 <floorf+0x34>
 8008868:	2b00      	cmp	r3, #0
 800886a:	bfbe      	ittt	lt
 800886c:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8008870:	fa40 f202 	asrlt.w	r2, r0, r2
 8008874:	189b      	addlt	r3, r3, r2
 8008876:	ea23 0301 	bic.w	r3, r3, r1
 800887a:	e7e5      	b.n	8008848 <floorf+0x34>
 800887c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8008880:	d3e4      	bcc.n	800884c <floorf+0x38>
 8008882:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008886:	4770      	bx	lr
 8008888:	2300      	movs	r3, #0
 800888a:	e7dd      	b.n	8008848 <floorf+0x34>
 800888c:	7149f2ca 	.word	0x7149f2ca
 8008890:	bf800000 	.word	0xbf800000
 8008894:	007fffff 	.word	0x007fffff

08008898 <_init>:
 8008898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800889a:	bf00      	nop
 800889c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800889e:	bc08      	pop	{r3}
 80088a0:	469e      	mov	lr, r3
 80088a2:	4770      	bx	lr

080088a4 <_fini>:
 80088a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088a6:	bf00      	nop
 80088a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088aa:	bc08      	pop	{r3}
 80088ac:	469e      	mov	lr, r3
 80088ae:	4770      	bx	lr
